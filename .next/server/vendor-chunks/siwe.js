"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/siwe";
exports.ids = ["vendor-chunks/siwe"];
exports.modules = {

/***/ "(rsc)/./node_modules/siwe/dist/client.js":
/*!******************************************!*\
  !*** ./node_modules/siwe/dist/client.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SiweMessage = void 0;\n// TODO: Figure out how to get types from this lib:\nconst siwe_parser_1 = __webpack_require__(/*! @spruceid/siwe-parser */ \"(rsc)/./node_modules/@spruceid/siwe-parser/dist/parsers.js\");\nconst uri = __importStar(__webpack_require__(/*! valid-url */ \"(rsc)/./node_modules/valid-url/index.js\"));\nconst ethersCompat_1 = __webpack_require__(/*! ./ethersCompat */ \"(rsc)/./node_modules/siwe/dist/ethersCompat.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/siwe/dist/types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/siwe/dist/utils.js\");\nclass SiweMessage {\n    /**\n     * Creates a parsed Sign-In with Ethereum Message (EIP-4361) object from a\n     * string or an object. If a string is used an ABNF parser is called to\n     * validate the parameter, otherwise the fields are attributed.\n     * @param param {string | SiweMessage} Sign message as a string or an object.\n     */ constructor(param){\n        if (typeof param === \"string\") {\n            const parsedMessage = new siwe_parser_1.ParsedMessage(param);\n            this.domain = parsedMessage.domain;\n            this.address = parsedMessage.address;\n            this.statement = parsedMessage.statement;\n            this.uri = parsedMessage.uri;\n            this.version = parsedMessage.version;\n            this.nonce = parsedMessage.nonce;\n            this.issuedAt = parsedMessage.issuedAt;\n            this.expirationTime = parsedMessage.expirationTime;\n            this.notBefore = parsedMessage.notBefore;\n            this.requestId = parsedMessage.requestId;\n            this.chainId = parsedMessage.chainId;\n            this.resources = parsedMessage.resources;\n        } else {\n            Object.assign(this, param);\n            if (typeof this.chainId === \"string\") {\n                this.chainId = (0, siwe_parser_1.parseIntegerNumber)(this.chainId);\n            }\n        }\n        this.nonce = this.nonce || (0, utils_1.generateNonce)();\n        this.validateMessage();\n    }\n    /**\n     * This function can be used to retrieve an EIP-4361 formated message for\n     * signature, although you can call it directly it's advised to use\n     * [prepareMessage()] instead which will resolve to the correct method based\n     * on the [type] attribute of this object, in case of other formats being\n     * implemented.\n     * @returns {string} EIP-4361 formated message, ready for EIP-191 signing.\n     */ toMessage() {\n        /** Validates all fields of the object */ this.validateMessage();\n        const header = `${this.domain} wants you to sign in with your Ethereum account:`;\n        const uriField = `URI: ${this.uri}`;\n        let prefix = [\n            header,\n            this.address\n        ].join(\"\\n\");\n        const versionField = `Version: ${this.version}`;\n        if (!this.nonce) {\n            this.nonce = (0, utils_1.generateNonce)();\n        }\n        const chainField = `Chain ID: ` + this.chainId || 0;\n        const nonceField = `Nonce: ${this.nonce}`;\n        const suffixArray = [\n            uriField,\n            versionField,\n            chainField,\n            nonceField\n        ];\n        this.issuedAt = this.issuedAt || new Date().toISOString();\n        suffixArray.push(`Issued At: ${this.issuedAt}`);\n        if (this.expirationTime) {\n            const expiryField = `Expiration Time: ${this.expirationTime}`;\n            suffixArray.push(expiryField);\n        }\n        if (this.notBefore) {\n            suffixArray.push(`Not Before: ${this.notBefore}`);\n        }\n        if (this.requestId) {\n            suffixArray.push(`Request ID: ${this.requestId}`);\n        }\n        if (this.resources) {\n            suffixArray.push([\n                `Resources:`,\n                ...this.resources.map((x)=>`- ${x}`)\n            ].join(\"\\n\"));\n        }\n        const suffix = suffixArray.join(\"\\n\");\n        prefix = [\n            prefix,\n            this.statement\n        ].join(\"\\n\\n\");\n        if (this.statement) {\n            prefix += \"\\n\";\n        }\n        return [\n            prefix,\n            suffix\n        ].join(\"\\n\");\n    }\n    /**\n     * This method parses all the fields in the object and creates a messaging for signing\n     * message according with the type defined.\n     * @returns {string} Returns a message ready to be signed according with the\n     * type defined in the object.\n     */ prepareMessage() {\n        let message;\n        switch(this.version){\n            case \"1\":\n                {\n                    message = this.toMessage();\n                    break;\n                }\n            default:\n                {\n                    message = this.toMessage();\n                    break;\n                }\n        }\n        return message;\n    }\n    /**\n     * @deprecated\n     * Verifies the integrity of the object by matching its signature.\n     * @param signature Signature to match the address in the message.\n     * @param provider Ethers provider to be used for EIP-1271 validation\n     */ validate(signature, provider) {\n        return __awaiter(this, void 0, void 0, function*() {\n            console.warn(\"validate() has been deprecated, please update your code to use verify(). validate() may be removed in future versions.\");\n            return this.verify({\n                signature\n            }, {\n                provider,\n                suppressExceptions: false\n            }).then(({ data })=>data).catch(({ error })=>{\n                throw error;\n            });\n        });\n    }\n    /**\n     * Verifies the integrity of the object by matching its signature.\n     * @param params Parameters to verify the integrity of the message, signature is required.\n     * @returns {Promise<SiweMessage>} This object if valid.\n     */ verify(params, opts = {\n        suppressExceptions: false\n    }) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return new Promise((resolve, reject)=>{\n                var _a, _b, _c;\n                const fail = (result)=>{\n                    if (opts.suppressExceptions) {\n                        return resolve(result);\n                    } else {\n                        return reject(result);\n                    }\n                };\n                const invalidParams = (0, utils_1.checkInvalidKeys)(params, types_1.VerifyParamsKeys);\n                if (invalidParams.length > 0) {\n                    fail({\n                        success: false,\n                        data: this,\n                        error: new Error(`${invalidParams.join(\", \")} is/are not valid key(s) for VerifyParams.`)\n                    });\n                }\n                const invalidOpts = (0, utils_1.checkInvalidKeys)(opts, types_1.VerifyOptsKeys);\n                if (invalidParams.length > 0) {\n                    fail({\n                        success: false,\n                        data: this,\n                        error: new Error(`${invalidOpts.join(\", \")} is/are not valid key(s) for VerifyOpts.`)\n                    });\n                }\n                const { signature, domain, nonce, time } = params;\n                /** Domain binding */ if (domain && domain !== this.domain) {\n                    fail({\n                        success: false,\n                        data: this,\n                        error: new types_1.SiweError(types_1.SiweErrorType.DOMAIN_MISMATCH, domain, this.domain)\n                    });\n                }\n                /** Nonce binding */ if (nonce && nonce !== this.nonce) {\n                    fail({\n                        success: false,\n                        data: this,\n                        error: new types_1.SiweError(types_1.SiweErrorType.NONCE_MISMATCH, nonce, this.nonce)\n                    });\n                }\n                /** Check time or now */ const checkTime = new Date(time || new Date());\n                /** Message not expired */ if (this.expirationTime) {\n                    const expirationDate = new Date(this.expirationTime);\n                    if (checkTime.getTime() >= expirationDate.getTime()) {\n                        fail({\n                            success: false,\n                            data: this,\n                            error: new types_1.SiweError(types_1.SiweErrorType.EXPIRED_MESSAGE, `${checkTime.toISOString()} < ${expirationDate.toISOString()}`, `${checkTime.toISOString()} >= ${expirationDate.toISOString()}`)\n                        });\n                    }\n                }\n                /** Message is valid already */ if (this.notBefore) {\n                    const notBefore = new Date(this.notBefore);\n                    if (checkTime.getTime() < notBefore.getTime()) {\n                        fail({\n                            success: false,\n                            data: this,\n                            error: new types_1.SiweError(types_1.SiweErrorType.NOT_YET_VALID_MESSAGE, `${checkTime.toISOString()} >= ${notBefore.toISOString()}`, `${checkTime.toISOString()} < ${notBefore.toISOString()}`)\n                        });\n                    }\n                }\n                let EIP4361Message;\n                try {\n                    EIP4361Message = this.prepareMessage();\n                } catch (e) {\n                    fail({\n                        success: false,\n                        data: this,\n                        error: e\n                    });\n                }\n                /** Recover address from signature */ let addr;\n                try {\n                    addr = (0, ethersCompat_1.verifyMessage)(EIP4361Message, signature);\n                } catch (e) {\n                    console.error(e);\n                }\n                /** Match signature with message's address */ if (addr === this.address) {\n                    return resolve({\n                        success: true,\n                        data: this\n                    });\n                } else {\n                    const EIP1271Promise = (0, utils_1.checkContractWalletSignature)(this, signature, opts.provider).then((isValid)=>{\n                        if (!isValid) {\n                            return {\n                                success: false,\n                                data: this,\n                                error: new types_1.SiweError(types_1.SiweErrorType.INVALID_SIGNATURE, addr, `Resolved address to be ${this.address}`)\n                            };\n                        }\n                        return {\n                            success: true,\n                            data: this\n                        };\n                    }).catch((error)=>{\n                        return {\n                            success: false,\n                            data: this,\n                            error\n                        };\n                    });\n                    Promise.all([\n                        EIP1271Promise,\n                        (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.verificationFallback) === null || _a === void 0 ? void 0 : _a.call(opts, params, opts, this, EIP1271Promise)) === null || _b === void 0 ? void 0 : _b.then((res)=>res)) === null || _c === void 0 ? void 0 : _c.catch((res)=>res)\n                    ]).then(([EIP1271Response, fallbackResponse])=>{\n                        if (fallbackResponse) {\n                            if (fallbackResponse.success) {\n                                return resolve(fallbackResponse);\n                            } else {\n                                fail(fallbackResponse);\n                            }\n                        } else {\n                            if (EIP1271Response.success) {\n                                return resolve(EIP1271Response);\n                            } else {\n                                fail(EIP1271Response);\n                            }\n                        }\n                    });\n                }\n            });\n        });\n    }\n    /**\n     * Validates the values of this object fields.\n     * @throws Throws an {ErrorType} if a field is invalid.\n     */ validateMessage(...args) {\n        var _a;\n        /** Checks if the user might be using the function to verify instead of validate. */ if (args.length > 0) {\n            throw new types_1.SiweError(types_1.SiweErrorType.UNABLE_TO_PARSE, `Unexpected argument in the validateMessage function.`);\n        }\n        /** `domain` check. */ if (!this.domain || this.domain.length === 0 || !/[^#?]*/.test(this.domain)) {\n            throw new types_1.SiweError(types_1.SiweErrorType.INVALID_DOMAIN, `${this.domain} to be a valid domain.`);\n        }\n        /** EIP-55 `address` check. */ if (!(0, siwe_parser_1.isEIP55Address)(this.address)) {\n            throw new types_1.SiweError(types_1.SiweErrorType.INVALID_ADDRESS, (0, ethersCompat_1.getAddress)(this.address), this.address);\n        }\n        /** Check if the URI is valid. */ if (!uri.isUri(this.uri)) {\n            throw new types_1.SiweError(types_1.SiweErrorType.INVALID_URI, `${this.uri} to be a valid uri.`);\n        }\n        /** Check if the version is 1. */ if (this.version !== \"1\") {\n            throw new types_1.SiweError(types_1.SiweErrorType.INVALID_MESSAGE_VERSION, \"1\", this.version);\n        }\n        /** Check if the nonce is alphanumeric and bigger then 8 characters */ const nonce = (_a = this === null || this === void 0 ? void 0 : this.nonce) === null || _a === void 0 ? void 0 : _a.match(/[a-zA-Z0-9]{8,}/);\n        if (!nonce || this.nonce.length < 8 || nonce[0] !== this.nonce) {\n            throw new types_1.SiweError(types_1.SiweErrorType.INVALID_NONCE, `Length > 8 (${nonce.length}). Alphanumeric.`, this.nonce);\n        }\n        /** `issuedAt` conforms to ISO-8601 and is a valid date. */ if (this.issuedAt) {\n            if (!(0, utils_1.isValidISO8601Date)(this.issuedAt)) {\n                throw new Error(types_1.SiweErrorType.INVALID_TIME_FORMAT);\n            }\n        }\n        /** `expirationTime` conforms to ISO-8601 and is a valid date. */ if (this.expirationTime) {\n            if (!(0, utils_1.isValidISO8601Date)(this.expirationTime)) {\n                throw new Error(types_1.SiweErrorType.INVALID_TIME_FORMAT);\n            }\n        }\n        /** `notBefore` conforms to ISO-8601 and is a valid date. */ if (this.notBefore) {\n            if (!(0, utils_1.isValidISO8601Date)(this.notBefore)) {\n                throw new Error(types_1.SiweErrorType.INVALID_TIME_FORMAT);\n            }\n        }\n    }\n}\nexports.SiweMessage = SiweMessage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/siwe/dist/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/siwe/dist/ethersCompat.js":
/*!************************************************!*\
  !*** ./node_modules/siwe/dist/ethersCompat.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getAddress = exports.hashMessage = exports.verifyMessage = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/ethers/lib.commonjs/index.js\");\nexports.verifyMessage = (_a = ethers_1.utils === null || ethers_1.utils === void 0 ? void 0 : ethers_1.utils.verifyMessage) !== null && _a !== void 0 ? _a : ethers_1.verifyMessage;\nexports.hashMessage = (_b = ethers_1.utils === null || ethers_1.utils === void 0 ? void 0 : ethers_1.utils.hashMessage) !== null && _b !== void 0 ? _b : ethers_1.hashMessage;\nexports.getAddress = (_c = ethers_1.utils === null || ethers_1.utils === void 0 ? void 0 : ethers_1.utils.getAddress) !== null && _c !== void 0 ? _c : ethers_1.getAddress;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2l3ZS9kaXN0L2V0aGVyc0NvbXBhdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLElBQUlDLElBQUlDO0FBQ1pDLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBR0EsbUJBQW1CLEdBQUdBLHFCQUFxQixHQUFHLEtBQUs7QUFDeEUsTUFBTUssV0FBV0MsbUJBQU9BLENBQUMsaUVBQVE7QUFDakNOLHFCQUFxQixHQUFHLENBQUNMLEtBQUtVLFNBQVNFLEtBQUssS0FBSyxRQUFRRixTQUFTRSxLQUFLLEtBQUssS0FBSyxJQUFJLEtBQUssSUFBSUYsU0FBU0UsS0FBSyxDQUFDSCxhQUFhLE1BQU0sUUFBUVQsT0FBTyxLQUFLLElBQUlBLEtBQUtVLFNBQVNELGFBQWE7QUFDbkxKLG1CQUFtQixHQUFHLENBQUNKLEtBQUtTLFNBQVNFLEtBQUssS0FBSyxRQUFRRixTQUFTRSxLQUFLLEtBQUssS0FBSyxJQUFJLEtBQUssSUFBSUYsU0FBU0UsS0FBSyxDQUFDSixXQUFXLE1BQU0sUUFBUVAsT0FBTyxLQUFLLElBQUlBLEtBQUtTLFNBQVNGLFdBQVc7QUFDN0tILGtCQUFrQixHQUFHLENBQUNILEtBQUtRLFNBQVNFLEtBQUssS0FBSyxRQUFRRixTQUFTRSxLQUFLLEtBQUssS0FBSyxJQUFJLEtBQUssSUFBSUYsU0FBU0UsS0FBSyxDQUFDTCxVQUFVLE1BQU0sUUFBUUwsT0FBTyxLQUFLLElBQUlBLEtBQUtRLFNBQVNILFVBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvc2l3ZS9kaXN0L2V0aGVyc0NvbXBhdC5qcz83ZTZjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9hLCBfYiwgX2M7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEFkZHJlc3MgPSBleHBvcnRzLmhhc2hNZXNzYWdlID0gZXhwb3J0cy52ZXJpZnlNZXNzYWdlID0gdm9pZCAwO1xuY29uc3QgZXRoZXJzXzEgPSByZXF1aXJlKFwiZXRoZXJzXCIpO1xuZXhwb3J0cy52ZXJpZnlNZXNzYWdlID0gKF9hID0gZXRoZXJzXzEudXRpbHMgPT09IG51bGwgfHwgZXRoZXJzXzEudXRpbHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV0aGVyc18xLnV0aWxzLnZlcmlmeU1lc3NhZ2UpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGV0aGVyc18xLnZlcmlmeU1lc3NhZ2U7XG5leHBvcnRzLmhhc2hNZXNzYWdlID0gKF9iID0gZXRoZXJzXzEudXRpbHMgPT09IG51bGwgfHwgZXRoZXJzXzEudXRpbHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV0aGVyc18xLnV0aWxzLmhhc2hNZXNzYWdlKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBldGhlcnNfMS5oYXNoTWVzc2FnZTtcbmV4cG9ydHMuZ2V0QWRkcmVzcyA9IChfYyA9IGV0aGVyc18xLnV0aWxzID09PSBudWxsIHx8IGV0aGVyc18xLnV0aWxzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBldGhlcnNfMS51dGlscy5nZXRBZGRyZXNzKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBldGhlcnNfMS5nZXRBZGRyZXNzO1xuIl0sIm5hbWVzIjpbIl9hIiwiX2IiLCJfYyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0QWRkcmVzcyIsImhhc2hNZXNzYWdlIiwidmVyaWZ5TWVzc2FnZSIsImV0aGVyc18xIiwicmVxdWlyZSIsInV0aWxzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/siwe/dist/ethersCompat.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/siwe/dist/siwe.js":
/*!****************************************!*\
  !*** ./node_modules/siwe/dist/siwe.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./client */ \"(rsc)/./node_modules/siwe/dist/client.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/siwe/dist/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/siwe/dist/utils.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2l3ZS9kaXN0L3Npd2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCLElBQUlHLE9BQU9QLE9BQU9RLHdCQUF3QixDQUFDTCxHQUFHQztJQUM5QyxJQUFJLENBQUNHLFFBQVMsVUFBU0EsT0FBTyxDQUFDSixFQUFFTSxVQUFVLEdBQUdGLEtBQUtHLFFBQVEsSUFBSUgsS0FBS0ksWUFBWSxHQUFHO1FBQ2pGSixPQUFPO1lBQUVLLFlBQVk7WUFBTUMsS0FBSztnQkFBYSxPQUFPVixDQUFDLENBQUNDLEVBQUU7WUFBRTtRQUFFO0lBQzlEO0lBQ0FKLE9BQU9jLGNBQWMsQ0FBQ1osR0FBR0csSUFBSUU7QUFDakMsSUFBTSxTQUFTTCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3RCLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCRixDQUFDLENBQUNHLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxFQUFFO0FBQ2hCLENBQUM7QUFDRCxJQUFJVyxlQUFlLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsWUFBWSxJQUFLLFNBQVNaLENBQUMsRUFBRWEsUUFBTztJQUNqRSxJQUFLLElBQUlDLEtBQUtkLEVBQUcsSUFBSWMsTUFBTSxhQUFhLENBQUNqQixPQUFPa0IsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osVUFBU0MsSUFBSWxCLGdCQUFnQmlCLFVBQVNiLEdBQUdjO0FBQzNIO0FBQ0FqQiw4Q0FBNkM7SUFBRXFCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0ROLGFBQWFPLG1CQUFPQSxDQUFDLDBEQUFVLEdBQUdOO0FBQ2xDRCxhQUFhTyxtQkFBT0EsQ0FBQyx3REFBUyxHQUFHTjtBQUNqQ0QsYUFBYU8sbUJBQU9BLENBQUMsd0RBQVMsR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvc2l3ZS9kaXN0L3Npd2UuanM/NTM1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NsaWVudFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6WyJfX2NyZWF0ZUJpbmRpbmciLCJPYmplY3QiLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2VzTW9kdWxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2V4cG9ydFN0YXIiLCJleHBvcnRzIiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInZhbHVlIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/siwe/dist/siwe.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/siwe/dist/types.js":
/*!*****************************************!*\
  !*** ./node_modules/siwe/dist/types.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SiweErrorType = exports.SiweError = exports.VerifyOptsKeys = exports.VerifyParamsKeys = void 0;\nexports.VerifyParamsKeys = [\n    \"signature\",\n    \"domain\",\n    \"nonce\",\n    \"time\"\n];\nexports.VerifyOptsKeys = [\n    \"provider\",\n    \"suppressExceptions\",\n    \"verificationFallback\"\n];\n/**\n * Interface used to return errors in SiweResponses.\n */ class SiweError {\n    constructor(type, expected, received){\n        this.type = type;\n        this.expected = expected;\n        this.received = received;\n    }\n}\nexports.SiweError = SiweError;\n/**\n * Possible message error types.\n */ var SiweErrorType;\n(function(SiweErrorType) {\n    /** `expirationTime` is present and in the past. */ SiweErrorType[\"EXPIRED_MESSAGE\"] = \"Expired message.\";\n    /** `domain` is not a valid authority or is empty. */ SiweErrorType[\"INVALID_DOMAIN\"] = \"Invalid domain.\";\n    /** `domain` don't match the domain provided for verification. */ SiweErrorType[\"DOMAIN_MISMATCH\"] = \"Domain does not match provided domain for verification.\";\n    /** `nonce` don't match the nonce provided for verification. */ SiweErrorType[\"NONCE_MISMATCH\"] = \"Nonce does not match provided nonce for verification.\";\n    /** `address` does not conform to EIP-55 or is not a valid address. */ SiweErrorType[\"INVALID_ADDRESS\"] = \"Invalid address.\";\n    /** `uri` does not conform to RFC 3986. */ SiweErrorType[\"INVALID_URI\"] = \"URI does not conform to RFC 3986.\";\n    /** `nonce` is smaller then 8 characters or is not alphanumeric */ SiweErrorType[\"INVALID_NONCE\"] = \"Nonce size smaller then 8 characters or is not alphanumeric.\";\n    /** `notBefore` is present and in the future. */ SiweErrorType[\"NOT_YET_VALID_MESSAGE\"] = \"Message is not valid yet.\";\n    /** Signature doesn't match the address of the message. */ SiweErrorType[\"INVALID_SIGNATURE\"] = \"Signature does not match address of the message.\";\n    /** `expirationTime`, `notBefore` or `issuedAt` not complient to ISO-8601. */ SiweErrorType[\"INVALID_TIME_FORMAT\"] = \"Invalid time format.\";\n    /** `version` is not 1. */ SiweErrorType[\"INVALID_MESSAGE_VERSION\"] = \"Invalid message version.\";\n    /** Thrown when some required field is missing. */ SiweErrorType[\"UNABLE_TO_PARSE\"] = \"Unable to parse the message.\";\n})(SiweErrorType = exports.SiweErrorType || (exports.SiweErrorType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2l3ZS9kaXN0L3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBR0EsaUJBQWlCLEdBQUdBLHNCQUFzQixHQUFHQSx3QkFBd0IsR0FBRyxLQUFLO0FBQ3JHQSx3QkFBd0IsR0FBRztJQUN2QjtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0RBLHNCQUFzQixHQUFHO0lBQ3JCO0lBQ0E7SUFDQTtDQUNIO0FBQ0Q7O0NBRUMsR0FDRCxNQUFNRztJQUNGRyxZQUFZQyxJQUFJLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxDQUFFO1FBQ2xDLElBQUksQ0FBQ0YsSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0MsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNDLFFBQVEsR0FBR0E7SUFDcEI7QUFDSjtBQUNBVCxpQkFBaUIsR0FBR0c7QUFDcEI7O0NBRUMsR0FDRCxJQUFJRDtBQUNILFVBQVVBLGFBQWE7SUFDcEIsaURBQWlELEdBQ2pEQSxhQUFhLENBQUMsa0JBQWtCLEdBQUc7SUFDbkMsbURBQW1ELEdBQ25EQSxhQUFhLENBQUMsaUJBQWlCLEdBQUc7SUFDbEMsK0RBQStELEdBQy9EQSxhQUFhLENBQUMsa0JBQWtCLEdBQUc7SUFDbkMsNkRBQTZELEdBQzdEQSxhQUFhLENBQUMsaUJBQWlCLEdBQUc7SUFDbEMsb0VBQW9FLEdBQ3BFQSxhQUFhLENBQUMsa0JBQWtCLEdBQUc7SUFDbkMsd0NBQXdDLEdBQ3hDQSxhQUFhLENBQUMsY0FBYyxHQUFHO0lBQy9CLGdFQUFnRSxHQUNoRUEsYUFBYSxDQUFDLGdCQUFnQixHQUFHO0lBQ2pDLDhDQUE4QyxHQUM5Q0EsYUFBYSxDQUFDLHdCQUF3QixHQUFHO0lBQ3pDLHdEQUF3RCxHQUN4REEsYUFBYSxDQUFDLG9CQUFvQixHQUFHO0lBQ3JDLDJFQUEyRSxHQUMzRUEsYUFBYSxDQUFDLHNCQUFzQixHQUFHO0lBQ3ZDLHdCQUF3QixHQUN4QkEsYUFBYSxDQUFDLDBCQUEwQixHQUFHO0lBQzNDLGdEQUFnRCxHQUNoREEsYUFBYSxDQUFDLGtCQUFrQixHQUFHO0FBQ3ZDLEdBQUdBLGdCQUFnQkYsUUFBUUUsYUFBYSxJQUFLRixDQUFBQSxxQkFBcUIsR0FBRyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL3Npd2UvZGlzdC90eXBlcy5qcz8xN2E3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaXdlRXJyb3JUeXBlID0gZXhwb3J0cy5TaXdlRXJyb3IgPSBleHBvcnRzLlZlcmlmeU9wdHNLZXlzID0gZXhwb3J0cy5WZXJpZnlQYXJhbXNLZXlzID0gdm9pZCAwO1xuZXhwb3J0cy5WZXJpZnlQYXJhbXNLZXlzID0gW1xuICAgICdzaWduYXR1cmUnLFxuICAgICdkb21haW4nLFxuICAgICdub25jZScsXG4gICAgJ3RpbWUnLFxuXTtcbmV4cG9ydHMuVmVyaWZ5T3B0c0tleXMgPSBbXG4gICAgJ3Byb3ZpZGVyJyxcbiAgICAnc3VwcHJlc3NFeGNlcHRpb25zJyxcbiAgICAndmVyaWZpY2F0aW9uRmFsbGJhY2snLFxuXTtcbi8qKlxuICogSW50ZXJmYWNlIHVzZWQgdG8gcmV0dXJuIGVycm9ycyBpbiBTaXdlUmVzcG9uc2VzLlxuICovXG5jbGFzcyBTaXdlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHR5cGUsIGV4cGVjdGVkLCByZWNlaXZlZCkge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmV4cGVjdGVkID0gZXhwZWN0ZWQ7XG4gICAgICAgIHRoaXMucmVjZWl2ZWQgPSByZWNlaXZlZDtcbiAgICB9XG59XG5leHBvcnRzLlNpd2VFcnJvciA9IFNpd2VFcnJvcjtcbi8qKlxuICogUG9zc2libGUgbWVzc2FnZSBlcnJvciB0eXBlcy5cbiAqL1xudmFyIFNpd2VFcnJvclR5cGU7XG4oZnVuY3Rpb24gKFNpd2VFcnJvclR5cGUpIHtcbiAgICAvKiogYGV4cGlyYXRpb25UaW1lYCBpcyBwcmVzZW50IGFuZCBpbiB0aGUgcGFzdC4gKi9cbiAgICBTaXdlRXJyb3JUeXBlW1wiRVhQSVJFRF9NRVNTQUdFXCJdID0gXCJFeHBpcmVkIG1lc3NhZ2UuXCI7XG4gICAgLyoqIGBkb21haW5gIGlzIG5vdCBhIHZhbGlkIGF1dGhvcml0eSBvciBpcyBlbXB0eS4gKi9cbiAgICBTaXdlRXJyb3JUeXBlW1wiSU5WQUxJRF9ET01BSU5cIl0gPSBcIkludmFsaWQgZG9tYWluLlwiO1xuICAgIC8qKiBgZG9tYWluYCBkb24ndCBtYXRjaCB0aGUgZG9tYWluIHByb3ZpZGVkIGZvciB2ZXJpZmljYXRpb24uICovXG4gICAgU2l3ZUVycm9yVHlwZVtcIkRPTUFJTl9NSVNNQVRDSFwiXSA9IFwiRG9tYWluIGRvZXMgbm90IG1hdGNoIHByb3ZpZGVkIGRvbWFpbiBmb3IgdmVyaWZpY2F0aW9uLlwiO1xuICAgIC8qKiBgbm9uY2VgIGRvbid0IG1hdGNoIHRoZSBub25jZSBwcm92aWRlZCBmb3IgdmVyaWZpY2F0aW9uLiAqL1xuICAgIFNpd2VFcnJvclR5cGVbXCJOT05DRV9NSVNNQVRDSFwiXSA9IFwiTm9uY2UgZG9lcyBub3QgbWF0Y2ggcHJvdmlkZWQgbm9uY2UgZm9yIHZlcmlmaWNhdGlvbi5cIjtcbiAgICAvKiogYGFkZHJlc3NgIGRvZXMgbm90IGNvbmZvcm0gdG8gRUlQLTU1IG9yIGlzIG5vdCBhIHZhbGlkIGFkZHJlc3MuICovXG4gICAgU2l3ZUVycm9yVHlwZVtcIklOVkFMSURfQUREUkVTU1wiXSA9IFwiSW52YWxpZCBhZGRyZXNzLlwiO1xuICAgIC8qKiBgdXJpYCBkb2VzIG5vdCBjb25mb3JtIHRvIFJGQyAzOTg2LiAqL1xuICAgIFNpd2VFcnJvclR5cGVbXCJJTlZBTElEX1VSSVwiXSA9IFwiVVJJIGRvZXMgbm90IGNvbmZvcm0gdG8gUkZDIDM5ODYuXCI7XG4gICAgLyoqIGBub25jZWAgaXMgc21hbGxlciB0aGVuIDggY2hhcmFjdGVycyBvciBpcyBub3QgYWxwaGFudW1lcmljICovXG4gICAgU2l3ZUVycm9yVHlwZVtcIklOVkFMSURfTk9OQ0VcIl0gPSBcIk5vbmNlIHNpemUgc21hbGxlciB0aGVuIDggY2hhcmFjdGVycyBvciBpcyBub3QgYWxwaGFudW1lcmljLlwiO1xuICAgIC8qKiBgbm90QmVmb3JlYCBpcyBwcmVzZW50IGFuZCBpbiB0aGUgZnV0dXJlLiAqL1xuICAgIFNpd2VFcnJvclR5cGVbXCJOT1RfWUVUX1ZBTElEX01FU1NBR0VcIl0gPSBcIk1lc3NhZ2UgaXMgbm90IHZhbGlkIHlldC5cIjtcbiAgICAvKiogU2lnbmF0dXJlIGRvZXNuJ3QgbWF0Y2ggdGhlIGFkZHJlc3Mgb2YgdGhlIG1lc3NhZ2UuICovXG4gICAgU2l3ZUVycm9yVHlwZVtcIklOVkFMSURfU0lHTkFUVVJFXCJdID0gXCJTaWduYXR1cmUgZG9lcyBub3QgbWF0Y2ggYWRkcmVzcyBvZiB0aGUgbWVzc2FnZS5cIjtcbiAgICAvKiogYGV4cGlyYXRpb25UaW1lYCwgYG5vdEJlZm9yZWAgb3IgYGlzc3VlZEF0YCBub3QgY29tcGxpZW50IHRvIElTTy04NjAxLiAqL1xuICAgIFNpd2VFcnJvclR5cGVbXCJJTlZBTElEX1RJTUVfRk9STUFUXCJdID0gXCJJbnZhbGlkIHRpbWUgZm9ybWF0LlwiO1xuICAgIC8qKiBgdmVyc2lvbmAgaXMgbm90IDEuICovXG4gICAgU2l3ZUVycm9yVHlwZVtcIklOVkFMSURfTUVTU0FHRV9WRVJTSU9OXCJdID0gXCJJbnZhbGlkIG1lc3NhZ2UgdmVyc2lvbi5cIjtcbiAgICAvKiogVGhyb3duIHdoZW4gc29tZSByZXF1aXJlZCBmaWVsZCBpcyBtaXNzaW5nLiAqL1xuICAgIFNpd2VFcnJvclR5cGVbXCJVTkFCTEVfVE9fUEFSU0VcIl0gPSBcIlVuYWJsZSB0byBwYXJzZSB0aGUgbWVzc2FnZS5cIjtcbn0pKFNpd2VFcnJvclR5cGUgPSBleHBvcnRzLlNpd2VFcnJvclR5cGUgfHwgKGV4cG9ydHMuU2l3ZUVycm9yVHlwZSA9IHt9KSk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJTaXdlRXJyb3JUeXBlIiwiU2l3ZUVycm9yIiwiVmVyaWZ5T3B0c0tleXMiLCJWZXJpZnlQYXJhbXNLZXlzIiwiY29uc3RydWN0b3IiLCJ0eXBlIiwiZXhwZWN0ZWQiLCJyZWNlaXZlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/siwe/dist/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/siwe/dist/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/siwe/dist/utils.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.checkInvalidKeys = exports.isValidISO8601Date = exports.generateNonce = exports.checkContractWalletSignature = void 0;\nconst random_1 = __webpack_require__(/*! @stablelib/random */ \"(rsc)/./node_modules/@stablelib/random/lib/random.js\");\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(rsc)/./node_modules/ethers/lib.commonjs/index.js\");\nconst ethersCompat_1 = __webpack_require__(/*! ./ethersCompat */ \"(rsc)/./node_modules/siwe/dist/ethersCompat.js\");\nconst EIP1271_ABI = [\n    \"function isValidSignature(bytes32 _message, bytes _signature) public view returns (bytes4)\"\n];\nconst EIP1271_MAGICVALUE = \"0x1626ba7e\";\nconst ISO8601 = /^(?<date>[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]))[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(.[0-9]+)?(([Zz])|([+|-]([01][0-9]|2[0-3]):[0-5][0-9]))$/;\n/**\n * This method calls the EIP-1271 method for Smart Contract wallets\n * @param message The EIP-4361 parsed message\n * @param provider Web3 provider able to perform a contract check (Web3/EthersJS).\n * @returns {Promise<boolean>} Checks for the smart contract (if it exists) if\n * the signature is valid for given address.\n */ const checkContractWalletSignature = (message, signature, provider)=>__awaiter(void 0, void 0, void 0, function*() {\n        if (!provider) {\n            return false;\n        }\n        const walletContract = new ethers_1.Contract(message.address, EIP1271_ABI, provider);\n        const hashedMessage = (0, ethersCompat_1.hashMessage)(message.prepareMessage());\n        const res = yield walletContract.isValidSignature(hashedMessage, signature);\n        return res == EIP1271_MAGICVALUE;\n    });\nexports.checkContractWalletSignature = checkContractWalletSignature;\n/**\n * This method leverages a native CSPRNG with support for both browser and Node.js\n * environments in order generate a cryptographically secure nonce for use in the\n * SiweMessage in order to prevent replay attacks.\n *\n * 96 bits has been chosen as a number to sufficiently balance size and security considerations\n * relative to the lifespan of it's usage.\n *\n * @returns cryptographically generated random nonce with 96 bits of entropy encoded with\n * an alphanumeric character set.\n */ const generateNonce = ()=>{\n    const nonce = (0, random_1.randomStringForEntropy)(96);\n    if (!nonce || nonce.length < 8) {\n        throw new Error(\"Error during nonce creation.\");\n    }\n    return nonce;\n};\nexports.generateNonce = generateNonce;\n/**\n * This method matches the given date string against the ISO-8601 regex and also\n * performs checks if it's a valid date.\n * @param inputDate any string to be validated against ISO-8601\n * @returns boolean indicating if the providade date is valid and conformant to ISO-8601\n */ const isValidISO8601Date = (inputDate)=>{\n    /* Split groups and make sure inputDate is in ISO8601 format */ const inputMatch = ISO8601.exec(inputDate);\n    /* if inputMatch is null the date is not ISO-8601 */ if (!inputDate) {\n        return false;\n    }\n    /* Creates a date object with input date to parse for invalid days e.g. Feb, 30 -> Mar, 01 */ const inputDateParsed = new Date(inputMatch.groups.date).toISOString();\n    /* Get groups from new parsed date to compare with the original input */ const parsedInputMatch = ISO8601.exec(inputDateParsed);\n    /* Compare remaining fields */ return inputMatch.groups.date === parsedInputMatch.groups.date;\n};\nexports.isValidISO8601Date = isValidISO8601Date;\nconst checkInvalidKeys = (obj, keys)=>{\n    const invalidKeys = [];\n    Object.keys(obj).forEach((key)=>{\n        if (!keys.includes(key)) {\n            invalidKeys.push(key);\n        }\n    });\n    return invalidKeys;\n};\nexports.checkInvalidKeys = checkInvalidKeys;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/siwe/dist/utils.js\n");

/***/ })

};
;