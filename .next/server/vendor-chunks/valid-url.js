"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/valid-url";
exports.ids = ["vendor-chunks/valid-url"];
exports.modules = {

/***/ "(rsc)/./node_modules/valid-url/index.js":
/*!*****************************************!*\
  !*** ./node_modules/valid-url/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n(function(module1) {\n    \"use strict\";\n    module1.exports.is_uri = is_iri;\n    module1.exports.is_http_uri = is_http_iri;\n    module1.exports.is_https_uri = is_https_iri;\n    module1.exports.is_web_uri = is_web_iri;\n    // Create aliases\n    module1.exports.isUri = is_iri;\n    module1.exports.isHttpUri = is_http_iri;\n    module1.exports.isHttpsUri = is_https_iri;\n    module1.exports.isWebUri = is_web_iri;\n    // private function\n    // internal URI spitter method - direct from RFC 3986\n    var splitUri = function(uri) {\n        var splitted = uri.match(/(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/);\n        return splitted;\n    };\n    function is_iri(value) {\n        if (!value) {\n            return;\n        }\n        // check for illegal characters\n        if (/[^a-z0-9\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\.\\-\\_\\~\\%]/i.test(value)) return;\n        // check for hex escapes that aren't complete\n        if (/%[^0-9a-f]/i.test(value)) return;\n        if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return;\n        var splitted = [];\n        var scheme = \"\";\n        var authority = \"\";\n        var path = \"\";\n        var query = \"\";\n        var fragment = \"\";\n        var out = \"\";\n        // from RFC 3986\n        splitted = splitUri(value);\n        scheme = splitted[1];\n        authority = splitted[2];\n        path = splitted[3];\n        query = splitted[4];\n        fragment = splitted[5];\n        // scheme and path are required, though the path can be empty\n        if (!(scheme && scheme.length && path.length >= 0)) return;\n        // if authority is present, the path must be empty or begin with a /\n        if (authority && authority.length) {\n            if (!(path.length === 0 || /^\\//.test(path))) return;\n        } else {\n            // if authority is not present, the path must not start with //\n            if (/^\\/\\//.test(path)) return;\n        }\n        // scheme must begin with a letter, then consist of letters, digits, +, ., or -\n        if (!/^[a-z][a-z0-9\\+\\-\\.]*$/.test(scheme.toLowerCase())) return;\n        // re-assemble the URL per section 5.3 in RFC 3986\n        out += scheme + \":\";\n        if (authority && authority.length) {\n            out += \"//\" + authority;\n        }\n        out += path;\n        if (query && query.length) {\n            out += \"?\" + query;\n        }\n        if (fragment && fragment.length) {\n            out += \"#\" + fragment;\n        }\n        return out;\n    }\n    function is_http_iri(value, allowHttps) {\n        if (!is_iri(value)) {\n            return;\n        }\n        var splitted = [];\n        var scheme = \"\";\n        var authority = \"\";\n        var path = \"\";\n        var port = \"\";\n        var query = \"\";\n        var fragment = \"\";\n        var out = \"\";\n        // from RFC 3986\n        splitted = splitUri(value);\n        scheme = splitted[1];\n        authority = splitted[2];\n        path = splitted[3];\n        query = splitted[4];\n        fragment = splitted[5];\n        if (!scheme) return;\n        if (allowHttps) {\n            if (scheme.toLowerCase() != \"https\") return;\n        } else {\n            if (scheme.toLowerCase() != \"http\") return;\n        }\n        // fully-qualified URIs must have an authority section that is\n        // a valid host\n        if (!authority) {\n            return;\n        }\n        // enable port component\n        if (/:(\\d+)$/.test(authority)) {\n            port = authority.match(/:(\\d+)$/)[0];\n            authority = authority.replace(/:\\d+$/, \"\");\n        }\n        out += scheme + \":\";\n        out += \"//\" + authority;\n        if (port) {\n            out += port;\n        }\n        out += path;\n        if (query && query.length) {\n            out += \"?\" + query;\n        }\n        if (fragment && fragment.length) {\n            out += \"#\" + fragment;\n        }\n        return out;\n    }\n    function is_https_iri(value) {\n        return is_http_iri(value, true);\n    }\n    function is_web_iri(value) {\n        return is_http_iri(value) || is_https_iri(value);\n    }\n})(module);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/valid-url/index.js\n");

/***/ })

};
;