"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ethers";
exports.ids = ["vendor-chunks/ethers"];
exports.modules = {

/***/ "(rsc)/./node_modules/ethers/node_modules/tslib/tslib.es6.js":
/*!*************************************************************!*\
  !*** ./node_modules/ethers/node_modules/tslib/tslib.es6.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __assign: () => (/* binding */ __assign),\n/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),\n/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),\n/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),\n/* harmony export */   __await: () => (/* binding */ __await),\n/* harmony export */   __awaiter: () => (/* binding */ __awaiter),\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldIn: () => (/* binding */ __classPrivateFieldIn),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   __createBinding: () => (/* binding */ __createBinding),\n/* harmony export */   __decorate: () => (/* binding */ __decorate),\n/* harmony export */   __exportStar: () => (/* binding */ __exportStar),\n/* harmony export */   __extends: () => (/* binding */ __extends),\n/* harmony export */   __generator: () => (/* binding */ __generator),\n/* harmony export */   __importDefault: () => (/* binding */ __importDefault),\n/* harmony export */   __importStar: () => (/* binding */ __importStar),\n/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),\n/* harmony export */   __metadata: () => (/* binding */ __metadata),\n/* harmony export */   __param: () => (/* binding */ __param),\n/* harmony export */   __read: () => (/* binding */ __read),\n/* harmony export */   __rest: () => (/* binding */ __rest),\n/* harmony export */   __spread: () => (/* binding */ __spread),\n/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),\n/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),\n/* harmony export */   __values: () => (/* binding */ __values)\n/* harmony export */ });\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __param(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nvar __createBinding = Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n};\nfunction __exportStar(m, o) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\n/** @deprecated */ function __spread() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));\n    return ar;\n}\n/** @deprecated */ function __spreadArrays() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\nfunction __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\nfunction __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await(o[n](v)),\n                done: n === \"return\"\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) {\n        Object.defineProperty(cooked, \"raw\", {\n            value: raw\n        });\n    } else {\n        cooked.raw = raw;\n    }\n    return cooked;\n}\n;\nvar __setModuleDefault = Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n};\nfunction __importStar(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n}\nfunction __importDefault(mod) {\n    return mod && mod.__esModule ? mod : {\n        default: mod\n    };\n}\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\nfunction __classPrivateFieldIn(state, receiver) {\n    if (receiver === null || typeof receiver !== \"object\" && typeof receiver !== \"function\") throw new TypeError(\"Cannot use 'in' operator on non-object\");\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/tslib/tslib.es6.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/ws/index.js":
/*!******************************************************!*\
  !*** ./node_modules/ethers/node_modules/ws/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst WebSocket = __webpack_require__(/*! ./lib/websocket */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/websocket.js\");\nWebSocket.createWebSocketStream = __webpack_require__(/*! ./lib/stream */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/stream.js\");\nWebSocket.Server = __webpack_require__(/*! ./lib/websocket-server */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/websocket-server.js\");\nWebSocket.Receiver = __webpack_require__(/*! ./lib/receiver */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/receiver.js\");\nWebSocket.Sender = __webpack_require__(/*! ./lib/sender */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/sender.js\");\nWebSocket.WebSocket = WebSocket;\nWebSocket.WebSocketServer = WebSocket.Server;\nmodule.exports = WebSocket;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL25vZGVfbW9kdWxlcy93cy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFlBQVlDLG1CQUFPQSxDQUFDO0FBRTFCRCxVQUFVRSxxQkFBcUIsR0FBR0QsbUJBQU9BLENBQUM7QUFDMUNELFVBQVVHLE1BQU0sR0FBR0YsbUJBQU9BLENBQUM7QUFDM0JELFVBQVVJLFFBQVEsR0FBR0gsbUJBQU9BLENBQUM7QUFDN0JELFVBQVVLLE1BQU0sR0FBR0osbUJBQU9BLENBQUM7QUFFM0JELFVBQVVBLFNBQVMsR0FBR0E7QUFDdEJBLFVBQVVNLGVBQWUsR0FBR04sVUFBVUcsTUFBTTtBQUU1Q0ksT0FBT0MsT0FBTyxHQUFHUiIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbm9kZV9tb2R1bGVzL3dzL2luZGV4LmpzPzNmOWEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBXZWJTb2NrZXQgPSByZXF1aXJlKCcuL2xpYi93ZWJzb2NrZXQnKTtcblxuV2ViU29ja2V0LmNyZWF0ZVdlYlNvY2tldFN0cmVhbSA9IHJlcXVpcmUoJy4vbGliL3N0cmVhbScpO1xuV2ViU29ja2V0LlNlcnZlciA9IHJlcXVpcmUoJy4vbGliL3dlYnNvY2tldC1zZXJ2ZXInKTtcbldlYlNvY2tldC5SZWNlaXZlciA9IHJlcXVpcmUoJy4vbGliL3JlY2VpdmVyJyk7XG5XZWJTb2NrZXQuU2VuZGVyID0gcmVxdWlyZSgnLi9saWIvc2VuZGVyJyk7XG5cbldlYlNvY2tldC5XZWJTb2NrZXQgPSBXZWJTb2NrZXQ7XG5XZWJTb2NrZXQuV2ViU29ja2V0U2VydmVyID0gV2ViU29ja2V0LlNlcnZlcjtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWJTb2NrZXQ7XG4iXSwibmFtZXMiOlsiV2ViU29ja2V0IiwicmVxdWlyZSIsImNyZWF0ZVdlYlNvY2tldFN0cmVhbSIsIlNlcnZlciIsIlJlY2VpdmVyIiwiU2VuZGVyIiwiV2ViU29ja2V0U2VydmVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/ws/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/ws/lib/buffer-util.js":
/*!****************************************************************!*\
  !*** ./node_modules/ethers/node_modules/ws/lib/buffer-util.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/constants.js\");\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */ function concat(list, totalLength) {\n    if (list.length === 0) return EMPTY_BUFFER;\n    if (list.length === 1) return list[0];\n    const target = Buffer.allocUnsafe(totalLength);\n    let offset = 0;\n    for(let i = 0; i < list.length; i++){\n        const buf = list[i];\n        target.set(buf, offset);\n        offset += buf.length;\n    }\n    if (offset < totalLength) return target.slice(0, offset);\n    return target;\n}\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */ function _mask(source, mask, output, offset, length) {\n    for(let i = 0; i < length; i++){\n        output[offset + i] = source[i] ^ mask[i & 3];\n    }\n}\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */ function _unmask(buffer, mask) {\n    for(let i = 0; i < buffer.length; i++){\n        buffer[i] ^= mask[i & 3];\n    }\n}\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */ function toArrayBuffer(buf) {\n    if (buf.byteLength === buf.buffer.byteLength) {\n        return buf.buffer;\n    }\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n}\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */ function toBuffer(data) {\n    toBuffer.readOnly = true;\n    if (Buffer.isBuffer(data)) return data;\n    let buf;\n    if (data instanceof ArrayBuffer) {\n        buf = Buffer.from(data);\n    } else if (ArrayBuffer.isView(data)) {\n        buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n    } else {\n        buf = Buffer.from(data);\n        toBuffer.readOnly = false;\n    }\n    return buf;\n}\ntry {\n    const bufferUtil = __webpack_require__(/*! bufferutil */ \"(rsc)/./node_modules/bufferutil/index.js\");\n    module.exports = {\n        concat,\n        mask (source, mask, output, offset, length) {\n            if (length < 48) _mask(source, mask, output, offset, length);\n            else bufferUtil.mask(source, mask, output, offset, length);\n        },\n        toArrayBuffer,\n        toBuffer,\n        unmask (buffer, mask) {\n            if (buffer.length < 32) _unmask(buffer, mask);\n            else bufferUtil.unmask(buffer, mask);\n        }\n    };\n} catch (e) /* istanbul ignore next */ {\n    module.exports = {\n        concat,\n        mask: _mask,\n        toArrayBuffer,\n        toBuffer,\n        unmask: _unmask\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL25vZGVfbW9kdWxlcy93cy9saWIvYnVmZmVyLXV0aWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLFlBQVksRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUVqQzs7Ozs7OztDQU9DLEdBQ0QsU0FBU0MsT0FBT0MsSUFBSSxFQUFFQyxXQUFXO0lBQy9CLElBQUlELEtBQUtFLE1BQU0sS0FBSyxHQUFHLE9BQU9MO0lBQzlCLElBQUlHLEtBQUtFLE1BQU0sS0FBSyxHQUFHLE9BQU9GLElBQUksQ0FBQyxFQUFFO0lBRXJDLE1BQU1HLFNBQVNDLE9BQU9DLFdBQVcsQ0FBQ0o7SUFDbEMsSUFBSUssU0FBUztJQUViLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJUCxLQUFLRSxNQUFNLEVBQUVLLElBQUs7UUFDcEMsTUFBTUMsTUFBTVIsSUFBSSxDQUFDTyxFQUFFO1FBQ25CSixPQUFPTSxHQUFHLENBQUNELEtBQUtGO1FBQ2hCQSxVQUFVRSxJQUFJTixNQUFNO0lBQ3RCO0lBRUEsSUFBSUksU0FBU0wsYUFBYSxPQUFPRSxPQUFPTyxLQUFLLENBQUMsR0FBR0o7SUFFakQsT0FBT0g7QUFDVDtBQUVBOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVNRLE1BQU1DLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUVSLE1BQU0sRUFBRUosTUFBTTtJQUNqRCxJQUFLLElBQUlLLElBQUksR0FBR0EsSUFBSUwsUUFBUUssSUFBSztRQUMvQk8sTUFBTSxDQUFDUixTQUFTQyxFQUFFLEdBQUdLLE1BQU0sQ0FBQ0wsRUFBRSxHQUFHTSxJQUFJLENBQUNOLElBQUksRUFBRTtJQUM5QztBQUNGO0FBRUE7Ozs7OztDQU1DLEdBQ0QsU0FBU1EsUUFBUUMsTUFBTSxFQUFFSCxJQUFJO0lBQzNCLElBQUssSUFBSU4sSUFBSSxHQUFHQSxJQUFJUyxPQUFPZCxNQUFNLEVBQUVLLElBQUs7UUFDdENTLE1BQU0sQ0FBQ1QsRUFBRSxJQUFJTSxJQUFJLENBQUNOLElBQUksRUFBRTtJQUMxQjtBQUNGO0FBRUE7Ozs7OztDQU1DLEdBQ0QsU0FBU1UsY0FBY1QsR0FBRztJQUN4QixJQUFJQSxJQUFJVSxVQUFVLEtBQUtWLElBQUlRLE1BQU0sQ0FBQ0UsVUFBVSxFQUFFO1FBQzVDLE9BQU9WLElBQUlRLE1BQU07SUFDbkI7SUFFQSxPQUFPUixJQUFJUSxNQUFNLENBQUNOLEtBQUssQ0FBQ0YsSUFBSVcsVUFBVSxFQUFFWCxJQUFJVyxVQUFVLEdBQUdYLElBQUlVLFVBQVU7QUFDekU7QUFFQTs7Ozs7OztDQU9DLEdBQ0QsU0FBU0UsU0FBU0MsSUFBSTtJQUNwQkQsU0FBU0UsUUFBUSxHQUFHO0lBRXBCLElBQUlsQixPQUFPbUIsUUFBUSxDQUFDRixPQUFPLE9BQU9BO0lBRWxDLElBQUliO0lBRUosSUFBSWEsZ0JBQWdCRyxhQUFhO1FBQy9CaEIsTUFBTUosT0FBT3FCLElBQUksQ0FBQ0o7SUFDcEIsT0FBTyxJQUFJRyxZQUFZRSxNQUFNLENBQUNMLE9BQU87UUFDbkNiLE1BQU1KLE9BQU9xQixJQUFJLENBQUNKLEtBQUtMLE1BQU0sRUFBRUssS0FBS0YsVUFBVSxFQUFFRSxLQUFLSCxVQUFVO0lBQ2pFLE9BQU87UUFDTFYsTUFBTUosT0FBT3FCLElBQUksQ0FBQ0o7UUFDbEJELFNBQVNFLFFBQVEsR0FBRztJQUN0QjtJQUVBLE9BQU9kO0FBQ1Q7QUFFQSxJQUFJO0lBQ0YsTUFBTW1CLGFBQWE3QixtQkFBT0EsQ0FBQztJQUUzQjhCLE9BQU9DLE9BQU8sR0FBRztRQUNmOUI7UUFDQWMsTUFBS0QsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRVIsTUFBTSxFQUFFSixNQUFNO1lBQ3ZDLElBQUlBLFNBQVMsSUFBSVMsTUFBTUMsUUFBUUMsTUFBTUMsUUFBUVIsUUFBUUo7aUJBQ2hEeUIsV0FBV2QsSUFBSSxDQUFDRCxRQUFRQyxNQUFNQyxRQUFRUixRQUFRSjtRQUNyRDtRQUNBZTtRQUNBRztRQUNBVSxRQUFPZCxNQUFNLEVBQUVILElBQUk7WUFDakIsSUFBSUcsT0FBT2QsTUFBTSxHQUFHLElBQUlhLFFBQVFDLFFBQVFIO2lCQUNuQ2MsV0FBV0csTUFBTSxDQUFDZCxRQUFRSDtRQUNqQztJQUNGO0FBQ0YsRUFBRSxPQUFPa0IsR0FBRyx3QkFBd0IsR0FBRztJQUNyQ0gsT0FBT0MsT0FBTyxHQUFHO1FBQ2Y5QjtRQUNBYyxNQUFNRjtRQUNOTTtRQUNBRztRQUNBVSxRQUFRZjtJQUNWO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL25vZGVfbW9kdWxlcy93cy9saWIvYnVmZmVyLXV0aWwuanM/NmNhZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHsgRU1QVFlfQlVGRkVSIH0gPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuXG4vKipcbiAqIE1lcmdlcyBhbiBhcnJheSBvZiBidWZmZXJzIGludG8gYSBuZXcgYnVmZmVyLlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyW119IGxpc3QgVGhlIGFycmF5IG9mIGJ1ZmZlcnMgdG8gY29uY2F0XG4gKiBAcGFyYW0ge051bWJlcn0gdG90YWxMZW5ndGggVGhlIHRvdGFsIGxlbmd0aCBvZiBidWZmZXJzIGluIHRoZSBsaXN0XG4gKiBAcmV0dXJuIHtCdWZmZXJ9IFRoZSByZXN1bHRpbmcgYnVmZmVyXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGNvbmNhdChsaXN0LCB0b3RhbExlbmd0aCkge1xuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHJldHVybiBFTVBUWV9CVUZGRVI7XG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkgcmV0dXJuIGxpc3RbMF07XG5cbiAgY29uc3QgdGFyZ2V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKHRvdGFsTGVuZ3RoKTtcbiAgbGV0IG9mZnNldCA9IDA7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYnVmID0gbGlzdFtpXTtcbiAgICB0YXJnZXQuc2V0KGJ1Ziwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gYnVmLmxlbmd0aDtcbiAgfVxuXG4gIGlmIChvZmZzZXQgPCB0b3RhbExlbmd0aCkgcmV0dXJuIHRhcmdldC5zbGljZSgwLCBvZmZzZXQpO1xuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogTWFza3MgYSBidWZmZXIgdXNpbmcgdGhlIGdpdmVuIG1hc2suXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IHNvdXJjZSBUaGUgYnVmZmVyIHRvIG1hc2tcbiAqIEBwYXJhbSB7QnVmZmVyfSBtYXNrIFRoZSBtYXNrIHRvIHVzZVxuICogQHBhcmFtIHtCdWZmZXJ9IG91dHB1dCBUaGUgYnVmZmVyIHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgVGhlIG9mZnNldCBhdCB3aGljaCB0byBzdGFydCB3cml0aW5nXG4gKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIFRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gbWFzay5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gX21hc2soc291cmNlLCBtYXNrLCBvdXRwdXQsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBvdXRwdXRbb2Zmc2V0ICsgaV0gPSBzb3VyY2VbaV0gXiBtYXNrW2kgJiAzXTtcbiAgfVxufVxuXG4vKipcbiAqIFVubWFza3MgYSBidWZmZXIgdXNpbmcgdGhlIGdpdmVuIG1hc2suXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIHVubWFza1xuICogQHBhcmFtIHtCdWZmZXJ9IG1hc2sgVGhlIG1hc2sgdG8gdXNlXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIF91bm1hc2soYnVmZmVyLCBtYXNrKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgYnVmZmVyW2ldIF49IG1hc2tbaSAmIDNdO1xuICB9XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBidWZmZXIgdG8gYW4gYEFycmF5QnVmZmVyYC5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmIFRoZSBidWZmZXIgdG8gY29udmVydFxuICogQHJldHVybiB7QXJyYXlCdWZmZXJ9IENvbnZlcnRlZCBidWZmZXJcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdG9BcnJheUJ1ZmZlcihidWYpIHtcbiAgaWYgKGJ1Zi5ieXRlTGVuZ3RoID09PSBidWYuYnVmZmVyLmJ5dGVMZW5ndGgpIHtcbiAgICByZXR1cm4gYnVmLmJ1ZmZlcjtcbiAgfVxuXG4gIHJldHVybiBidWYuYnVmZmVyLnNsaWNlKGJ1Zi5ieXRlT2Zmc2V0LCBidWYuYnl0ZU9mZnNldCArIGJ1Zi5ieXRlTGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgZGF0YWAgdG8gYSBgQnVmZmVyYC5cbiAqXG4gKiBAcGFyYW0geyp9IGRhdGEgVGhlIGRhdGEgdG8gY29udmVydFxuICogQHJldHVybiB7QnVmZmVyfSBUaGUgYnVmZmVyXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9XG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHRvQnVmZmVyKGRhdGEpIHtcbiAgdG9CdWZmZXIucmVhZE9ubHkgPSB0cnVlO1xuXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIHJldHVybiBkYXRhO1xuXG4gIGxldCBidWY7XG5cbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIGJ1ZiA9IEJ1ZmZlci5mcm9tKGRhdGEpO1xuICB9IGVsc2UgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhkYXRhKSkge1xuICAgIGJ1ZiA9IEJ1ZmZlci5mcm9tKGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aCk7XG4gIH0gZWxzZSB7XG4gICAgYnVmID0gQnVmZmVyLmZyb20oZGF0YSk7XG4gICAgdG9CdWZmZXIucmVhZE9ubHkgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBidWY7XG59XG5cbnRyeSB7XG4gIGNvbnN0IGJ1ZmZlclV0aWwgPSByZXF1aXJlKCdidWZmZXJ1dGlsJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgY29uY2F0LFxuICAgIG1hc2soc291cmNlLCBtYXNrLCBvdXRwdXQsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICBpZiAobGVuZ3RoIDwgNDgpIF9tYXNrKHNvdXJjZSwgbWFzaywgb3V0cHV0LCBvZmZzZXQsIGxlbmd0aCk7XG4gICAgICBlbHNlIGJ1ZmZlclV0aWwubWFzayhzb3VyY2UsIG1hc2ssIG91dHB1dCwgb2Zmc2V0LCBsZW5ndGgpO1xuICAgIH0sXG4gICAgdG9BcnJheUJ1ZmZlcixcbiAgICB0b0J1ZmZlcixcbiAgICB1bm1hc2soYnVmZmVyLCBtYXNrKSB7XG4gICAgICBpZiAoYnVmZmVyLmxlbmd0aCA8IDMyKSBfdW5tYXNrKGJ1ZmZlciwgbWFzayk7XG4gICAgICBlbHNlIGJ1ZmZlclV0aWwudW5tYXNrKGJ1ZmZlciwgbWFzayk7XG4gICAgfVxuICB9O1xufSBjYXRjaCAoZSkgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8ge1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBjb25jYXQsXG4gICAgbWFzazogX21hc2ssXG4gICAgdG9BcnJheUJ1ZmZlcixcbiAgICB0b0J1ZmZlcixcbiAgICB1bm1hc2s6IF91bm1hc2tcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJFTVBUWV9CVUZGRVIiLCJyZXF1aXJlIiwiY29uY2F0IiwibGlzdCIsInRvdGFsTGVuZ3RoIiwibGVuZ3RoIiwidGFyZ2V0IiwiQnVmZmVyIiwiYWxsb2NVbnNhZmUiLCJvZmZzZXQiLCJpIiwiYnVmIiwic2V0Iiwic2xpY2UiLCJfbWFzayIsInNvdXJjZSIsIm1hc2siLCJvdXRwdXQiLCJfdW5tYXNrIiwiYnVmZmVyIiwidG9BcnJheUJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJieXRlT2Zmc2V0IiwidG9CdWZmZXIiLCJkYXRhIiwicmVhZE9ubHkiLCJpc0J1ZmZlciIsIkFycmF5QnVmZmVyIiwiZnJvbSIsImlzVmlldyIsImJ1ZmZlclV0aWwiLCJtb2R1bGUiLCJleHBvcnRzIiwidW5tYXNrIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/ws/lib/buffer-util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/ws/lib/constants.js":
/*!**************************************************************!*\
  !*** ./node_modules/ethers/node_modules/ws/lib/constants.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    BINARY_TYPES: [\n        \"nodebuffer\",\n        \"arraybuffer\",\n        \"fragments\"\n    ],\n    EMPTY_BUFFER: Buffer.alloc(0),\n    GUID: \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\",\n    kForOnEventAttribute: Symbol(\"kIsForOnEventAttribute\"),\n    kListener: Symbol(\"kListener\"),\n    kStatusCode: Symbol(\"status-code\"),\n    kWebSocket: Symbol(\"websocket\"),\n    NOOP: ()=>{}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL25vZGVfbW9kdWxlcy93cy9saWIvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxjQUFjO1FBQUM7UUFBYztRQUFlO0tBQVk7SUFDeERDLGNBQWNDLE9BQU9DLEtBQUssQ0FBQztJQUMzQkMsTUFBTTtJQUNOQyxzQkFBc0JDLE9BQU87SUFDN0JDLFdBQVdELE9BQU87SUFDbEJFLGFBQWFGLE9BQU87SUFDcEJHLFlBQVlILE9BQU87SUFDbkJJLE1BQU0sS0FBTztBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9ub2RlX21vZHVsZXMvd3MvbGliL2NvbnN0YW50cy5qcz9kZTAzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEJJTkFSWV9UWVBFUzogWydub2RlYnVmZmVyJywgJ2FycmF5YnVmZmVyJywgJ2ZyYWdtZW50cyddLFxuICBFTVBUWV9CVUZGRVI6IEJ1ZmZlci5hbGxvYygwKSxcbiAgR1VJRDogJzI1OEVBRkE1LUU5MTQtNDdEQS05NUNBLUM1QUIwREM4NUIxMScsXG4gIGtGb3JPbkV2ZW50QXR0cmlidXRlOiBTeW1ib2woJ2tJc0Zvck9uRXZlbnRBdHRyaWJ1dGUnKSxcbiAga0xpc3RlbmVyOiBTeW1ib2woJ2tMaXN0ZW5lcicpLFxuICBrU3RhdHVzQ29kZTogU3ltYm9sKCdzdGF0dXMtY29kZScpLFxuICBrV2ViU29ja2V0OiBTeW1ib2woJ3dlYnNvY2tldCcpLFxuICBOT09QOiAoKSA9PiB7fVxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQklOQVJZX1RZUEVTIiwiRU1QVFlfQlVGRkVSIiwiQnVmZmVyIiwiYWxsb2MiLCJHVUlEIiwia0Zvck9uRXZlbnRBdHRyaWJ1dGUiLCJTeW1ib2wiLCJrTGlzdGVuZXIiLCJrU3RhdHVzQ29kZSIsImtXZWJTb2NrZXQiLCJOT09QIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/ws/lib/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/ws/lib/event-target.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ethers/node_modules/ws/lib/event-target.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { kForOnEventAttribute, kListener } = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/constants.js\");\nconst kCode = Symbol(\"kCode\");\nconst kData = Symbol(\"kData\");\nconst kError = Symbol(\"kError\");\nconst kMessage = Symbol(\"kMessage\");\nconst kReason = Symbol(\"kReason\");\nconst kTarget = Symbol(\"kTarget\");\nconst kType = Symbol(\"kType\");\nconst kWasClean = Symbol(\"kWasClean\");\n/**\n * Class representing an event.\n */ class Event {\n    /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @throws {TypeError} If the `type` argument is not specified\n   */ constructor(type){\n        this[kTarget] = null;\n        this[kType] = type;\n    }\n    /**\n   * @type {*}\n   */ get target() {\n        return this[kTarget];\n    }\n    /**\n   * @type {String}\n   */ get type() {\n        return this[kType];\n    }\n}\nObject.defineProperty(Event.prototype, \"target\", {\n    enumerable: true\n});\nObject.defineProperty(Event.prototype, \"type\", {\n    enumerable: true\n});\n/**\n * Class representing a close event.\n *\n * @extends Event\n */ class CloseEvent extends Event {\n    /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {Number} [options.code=0] The status code explaining why the\n   *     connection was closed\n   * @param {String} [options.reason=''] A human-readable string explaining why\n   *     the connection was closed\n   * @param {Boolean} [options.wasClean=false] Indicates whether or not the\n   *     connection was cleanly closed\n   */ constructor(type, options = {}){\n        super(type);\n        this[kCode] = options.code === undefined ? 0 : options.code;\n        this[kReason] = options.reason === undefined ? \"\" : options.reason;\n        this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;\n    }\n    /**\n   * @type {Number}\n   */ get code() {\n        return this[kCode];\n    }\n    /**\n   * @type {String}\n   */ get reason() {\n        return this[kReason];\n    }\n    /**\n   * @type {Boolean}\n   */ get wasClean() {\n        return this[kWasClean];\n    }\n}\nObject.defineProperty(CloseEvent.prototype, \"code\", {\n    enumerable: true\n});\nObject.defineProperty(CloseEvent.prototype, \"reason\", {\n    enumerable: true\n});\nObject.defineProperty(CloseEvent.prototype, \"wasClean\", {\n    enumerable: true\n});\n/**\n * Class representing an error event.\n *\n * @extends Event\n */ class ErrorEvent extends Event {\n    /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.error=null] The error that generated this event\n   * @param {String} [options.message=''] The error message\n   */ constructor(type, options = {}){\n        super(type);\n        this[kError] = options.error === undefined ? null : options.error;\n        this[kMessage] = options.message === undefined ? \"\" : options.message;\n    }\n    /**\n   * @type {*}\n   */ get error() {\n        return this[kError];\n    }\n    /**\n   * @type {String}\n   */ get message() {\n        return this[kMessage];\n    }\n}\nObject.defineProperty(ErrorEvent.prototype, \"error\", {\n    enumerable: true\n});\nObject.defineProperty(ErrorEvent.prototype, \"message\", {\n    enumerable: true\n});\n/**\n * Class representing a message event.\n *\n * @extends Event\n */ class MessageEvent extends Event {\n    /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.data=null] The message content\n   */ constructor(type, options = {}){\n        super(type);\n        this[kData] = options.data === undefined ? null : options.data;\n    }\n    /**\n   * @type {*}\n   */ get data() {\n        return this[kData];\n    }\n}\nObject.defineProperty(MessageEvent.prototype, \"data\", {\n    enumerable: true\n});\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */ const EventTarget = {\n    /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */ addEventListener (type, listener, options = {}) {\n        let wrapper;\n        if (type === \"message\") {\n            wrapper = function onMessage(data, isBinary) {\n                const event = new MessageEvent(\"message\", {\n                    data: isBinary ? data : data.toString()\n                });\n                event[kTarget] = this;\n                listener.call(this, event);\n            };\n        } else if (type === \"close\") {\n            wrapper = function onClose(code, message) {\n                const event = new CloseEvent(\"close\", {\n                    code,\n                    reason: message.toString(),\n                    wasClean: this._closeFrameReceived && this._closeFrameSent\n                });\n                event[kTarget] = this;\n                listener.call(this, event);\n            };\n        } else if (type === \"error\") {\n            wrapper = function onError(error) {\n                const event = new ErrorEvent(\"error\", {\n                    error,\n                    message: error.message\n                });\n                event[kTarget] = this;\n                listener.call(this, event);\n            };\n        } else if (type === \"open\") {\n            wrapper = function onOpen() {\n                const event = new Event(\"open\");\n                event[kTarget] = this;\n                listener.call(this, event);\n            };\n        } else {\n            return;\n        }\n        wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];\n        wrapper[kListener] = listener;\n        if (options.once) {\n            this.once(type, wrapper);\n        } else {\n            this.on(type, wrapper);\n        }\n    },\n    /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {Function} handler The listener to remove\n   * @public\n   */ removeEventListener (type, handler) {\n        for (const listener of this.listeners(type)){\n            if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {\n                this.removeListener(type, listener);\n                break;\n            }\n        }\n    }\n};\nmodule.exports = {\n    CloseEvent,\n    ErrorEvent,\n    Event,\n    EventTarget,\n    MessageEvent\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/ws/lib/event-target.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/ws/lib/extension.js":
/*!**************************************************************!*\
  !*** ./node_modules/ethers/node_modules/ws/lib/extension.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { tokenChars } = __webpack_require__(/*! ./validation */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/validation.js\");\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */ function push(dest, name, elem) {\n    if (dest[name] === undefined) dest[name] = [\n        elem\n    ];\n    else dest[name].push(elem);\n}\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */ function parse(header) {\n    const offers = Object.create(null);\n    let params = Object.create(null);\n    let mustUnescape = false;\n    let isEscaping = false;\n    let inQuotes = false;\n    let extensionName;\n    let paramName;\n    let start = -1;\n    let code = -1;\n    let end = -1;\n    let i = 0;\n    for(; i < header.length; i++){\n        code = header.charCodeAt(i);\n        if (extensionName === undefined) {\n            if (end === -1 && tokenChars[code] === 1) {\n                if (start === -1) start = i;\n            } else if (i !== 0 && (code === 0x20 /* ' ' */  || code === 0x09)) {\n                if (end === -1 && start !== -1) end = i;\n            } else if (code === 0x3b /* ';' */  || code === 0x2c /* ',' */ ) {\n                if (start === -1) {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n                if (end === -1) end = i;\n                const name = header.slice(start, end);\n                if (code === 0x2c) {\n                    push(offers, name, params);\n                    params = Object.create(null);\n                } else {\n                    extensionName = name;\n                }\n                start = end = -1;\n            } else {\n                throw new SyntaxError(`Unexpected character at index ${i}`);\n            }\n        } else if (paramName === undefined) {\n            if (end === -1 && tokenChars[code] === 1) {\n                if (start === -1) start = i;\n            } else if (code === 0x20 || code === 0x09) {\n                if (end === -1 && start !== -1) end = i;\n            } else if (code === 0x3b || code === 0x2c) {\n                if (start === -1) {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n                if (end === -1) end = i;\n                push(params, header.slice(start, end), true);\n                if (code === 0x2c) {\n                    push(offers, extensionName, params);\n                    params = Object.create(null);\n                    extensionName = undefined;\n                }\n                start = end = -1;\n            } else if (code === 0x3d /* '=' */  && start !== -1 && end === -1) {\n                paramName = header.slice(start, i);\n                start = end = -1;\n            } else {\n                throw new SyntaxError(`Unexpected character at index ${i}`);\n            }\n        } else {\n            //\n            // The value of a quoted-string after unescaping must conform to the\n            // token ABNF, so only token characters are valid.\n            // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n            //\n            if (isEscaping) {\n                if (tokenChars[code] !== 1) {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n                if (start === -1) start = i;\n                else if (!mustUnescape) mustUnescape = true;\n                isEscaping = false;\n            } else if (inQuotes) {\n                if (tokenChars[code] === 1) {\n                    if (start === -1) start = i;\n                } else if (code === 0x22 /* '\"' */  && start !== -1) {\n                    inQuotes = false;\n                    end = i;\n                } else if (code === 0x5c /* '\\' */ ) {\n                    isEscaping = true;\n                } else {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n            } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n                inQuotes = true;\n            } else if (end === -1 && tokenChars[code] === 1) {\n                if (start === -1) start = i;\n            } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n                if (end === -1) end = i;\n            } else if (code === 0x3b || code === 0x2c) {\n                if (start === -1) {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n                if (end === -1) end = i;\n                let value = header.slice(start, end);\n                if (mustUnescape) {\n                    value = value.replace(/\\\\/g, \"\");\n                    mustUnescape = false;\n                }\n                push(params, paramName, value);\n                if (code === 0x2c) {\n                    push(offers, extensionName, params);\n                    params = Object.create(null);\n                    extensionName = undefined;\n                }\n                paramName = undefined;\n                start = end = -1;\n            } else {\n                throw new SyntaxError(`Unexpected character at index ${i}`);\n            }\n        }\n    }\n    if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {\n        throw new SyntaxError(\"Unexpected end of input\");\n    }\n    if (end === -1) end = i;\n    const token = header.slice(start, end);\n    if (extensionName === undefined) {\n        push(offers, token, params);\n    } else {\n        if (paramName === undefined) {\n            push(params, token, true);\n        } else if (mustUnescape) {\n            push(params, paramName, token.replace(/\\\\/g, \"\"));\n        } else {\n            push(params, paramName, token);\n        }\n        push(offers, extensionName, params);\n    }\n    return offers;\n}\n/**\n * Builds the `Sec-WebSocket-Extensions` header field value.\n *\n * @param {Object} extensions The map of extensions and parameters to format\n * @return {String} A string representing the given object\n * @public\n */ function format(extensions) {\n    return Object.keys(extensions).map((extension)=>{\n        let configurations = extensions[extension];\n        if (!Array.isArray(configurations)) configurations = [\n            configurations\n        ];\n        return configurations.map((params)=>{\n            return [\n                extension\n            ].concat(Object.keys(params).map((k)=>{\n                let values = params[k];\n                if (!Array.isArray(values)) values = [\n                    values\n                ];\n                return values.map((v)=>v === true ? k : `${k}=${v}`).join(\"; \");\n            })).join(\"; \");\n        }).join(\", \");\n    }).join(\", \");\n}\nmodule.exports = {\n    format,\n    parse\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/ws/lib/extension.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/ws/lib/limiter.js":
/*!************************************************************!*\
  !*** ./node_modules/ethers/node_modules/ws/lib/limiter.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\nconst kDone = Symbol(\"kDone\");\nconst kRun = Symbol(\"kRun\");\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */ class Limiter {\n    /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */ constructor(concurrency){\n        this[kDone] = ()=>{\n            this.pending--;\n            this[kRun]();\n        };\n        this.concurrency = concurrency || Infinity;\n        this.jobs = [];\n        this.pending = 0;\n    }\n    /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */ add(job) {\n        this.jobs.push(job);\n        this[kRun]();\n    }\n    /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */ [kRun]() {\n        if (this.pending === this.concurrency) return;\n        if (this.jobs.length) {\n            const job = this.jobs.shift();\n            this.pending++;\n            job(this[kDone]);\n        }\n    }\n}\nmodule.exports = Limiter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL25vZGVfbW9kdWxlcy93cy9saWIvbGltaXRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFFBQVFDLE9BQU87QUFDckIsTUFBTUMsT0FBT0QsT0FBTztBQUVwQjs7O0NBR0MsR0FDRCxNQUFNRTtJQUNKOzs7OztHQUtDLEdBQ0RDLFlBQVlDLFdBQVcsQ0FBRTtRQUN2QixJQUFJLENBQUNMLE1BQU0sR0FBRztZQUNaLElBQUksQ0FBQ00sT0FBTztZQUNaLElBQUksQ0FBQ0osS0FBSztRQUNaO1FBQ0EsSUFBSSxDQUFDRyxXQUFXLEdBQUdBLGVBQWVFO1FBQ2xDLElBQUksQ0FBQ0MsSUFBSSxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUNGLE9BQU8sR0FBRztJQUNqQjtJQUVBOzs7OztHQUtDLEdBQ0RHLElBQUlDLEdBQUcsRUFBRTtRQUNQLElBQUksQ0FBQ0YsSUFBSSxDQUFDRyxJQUFJLENBQUNEO1FBQ2YsSUFBSSxDQUFDUixLQUFLO0lBQ1o7SUFFQTs7OztHQUlDLEdBQ0QsQ0FBQ0EsS0FBSyxHQUFHO1FBQ1AsSUFBSSxJQUFJLENBQUNJLE9BQU8sS0FBSyxJQUFJLENBQUNELFdBQVcsRUFBRTtRQUV2QyxJQUFJLElBQUksQ0FBQ0csSUFBSSxDQUFDSSxNQUFNLEVBQUU7WUFDcEIsTUFBTUYsTUFBTSxJQUFJLENBQUNGLElBQUksQ0FBQ0ssS0FBSztZQUUzQixJQUFJLENBQUNQLE9BQU87WUFDWkksSUFBSSxJQUFJLENBQUNWLE1BQU07UUFDakI7SUFDRjtBQUNGO0FBRUFjLE9BQU9DLE9BQU8sR0FBR1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL25vZGVfbW9kdWxlcy93cy9saWIvbGltaXRlci5qcz9kMzM5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3Qga0RvbmUgPSBTeW1ib2woJ2tEb25lJyk7XG5jb25zdCBrUnVuID0gU3ltYm9sKCdrUnVuJyk7XG5cbi8qKlxuICogQSB2ZXJ5IHNpbXBsZSBqb2IgcXVldWUgd2l0aCBhZGp1c3RhYmxlIGNvbmN1cnJlbmN5LiBBZGFwdGVkIGZyb21cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9TVFJNTC9hc3luYy1saW1pdGVyXG4gKi9cbmNsYXNzIExpbWl0ZXIge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBgTGltaXRlcmAuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uY3VycmVuY3k9SW5maW5pdHldIFRoZSBtYXhpbXVtIG51bWJlciBvZiBqb2JzIGFsbG93ZWRcbiAgICogICAgIHRvIHJ1biBjb25jdXJyZW50bHlcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbmN1cnJlbmN5KSB7XG4gICAgdGhpc1trRG9uZV0gPSAoKSA9PiB7XG4gICAgICB0aGlzLnBlbmRpbmctLTtcbiAgICAgIHRoaXNba1J1bl0oKTtcbiAgICB9O1xuICAgIHRoaXMuY29uY3VycmVuY3kgPSBjb25jdXJyZW5jeSB8fCBJbmZpbml0eTtcbiAgICB0aGlzLmpvYnMgPSBbXTtcbiAgICB0aGlzLnBlbmRpbmcgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBqb2IgdG8gdGhlIHF1ZXVlLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBqb2IgVGhlIGpvYiB0byBydW5cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgYWRkKGpvYikge1xuICAgIHRoaXMuam9icy5wdXNoKGpvYik7XG4gICAgdGhpc1trUnVuXSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBqb2IgZnJvbSB0aGUgcXVldWUgYW5kIHJ1bnMgaXQgaWYgcG9zc2libGUuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBba1J1bl0oKSB7XG4gICAgaWYgKHRoaXMucGVuZGluZyA9PT0gdGhpcy5jb25jdXJyZW5jeSkgcmV0dXJuO1xuXG4gICAgaWYgKHRoaXMuam9icy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGpvYiA9IHRoaXMuam9icy5zaGlmdCgpO1xuXG4gICAgICB0aGlzLnBlbmRpbmcrKztcbiAgICAgIGpvYih0aGlzW2tEb25lXSk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTGltaXRlcjtcbiJdLCJuYW1lcyI6WyJrRG9uZSIsIlN5bWJvbCIsImtSdW4iLCJMaW1pdGVyIiwiY29uc3RydWN0b3IiLCJjb25jdXJyZW5jeSIsInBlbmRpbmciLCJJbmZpbml0eSIsImpvYnMiLCJhZGQiLCJqb2IiLCJwdXNoIiwibGVuZ3RoIiwic2hpZnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/ws/lib/limiter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/ws/lib/permessage-deflate.js":
/*!***********************************************************************!*\
  !*** ./node_modules/ethers/node_modules/ws/lib/permessage-deflate.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst bufferUtil = __webpack_require__(/*! ./buffer-util */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/buffer-util.js\");\nconst Limiter = __webpack_require__(/*! ./limiter */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/limiter.js\");\nconst { kStatusCode } = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/constants.js\");\nconst TRAILER = Buffer.from([\n    0x00,\n    0x00,\n    0xff,\n    0xff\n]);\nconst kPerMessageDeflate = Symbol(\"permessage-deflate\");\nconst kTotalLength = Symbol(\"total-length\");\nconst kCallback = Symbol(\"callback\");\nconst kBuffers = Symbol(\"buffers\");\nconst kError = Symbol(\"error\");\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n/**\n * permessage-deflate implementation.\n */ class PerMessageDeflate {\n    /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} [options] Configuration options\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n   *     for, or request, a custom client window size\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n   *     acknowledge disabling of client context takeover\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n   *     calls to zlib\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n   *     use of a custom server window size\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n   *     disabling of server context takeover\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n   *     messages should not be compressed if context takeover is disabled\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n   *     deflate\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n   *     inflate\n   * @param {Boolean} [isServer=false] Create the instance in either server or\n   *     client mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */ constructor(options, isServer, maxPayload){\n        this._maxPayload = maxPayload | 0;\n        this._options = options || {};\n        this._threshold = this._options.threshold !== undefined ? this._options.threshold : 1024;\n        this._isServer = !!isServer;\n        this._deflate = null;\n        this._inflate = null;\n        this.params = null;\n        if (!zlibLimiter) {\n            const concurrency = this._options.concurrencyLimit !== undefined ? this._options.concurrencyLimit : 10;\n            zlibLimiter = new Limiter(concurrency);\n        }\n    }\n    /**\n   * @type {String}\n   */ static get extensionName() {\n        return \"permessage-deflate\";\n    }\n    /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */ offer() {\n        const params = {};\n        if (this._options.serverNoContextTakeover) {\n            params.server_no_context_takeover = true;\n        }\n        if (this._options.clientNoContextTakeover) {\n            params.client_no_context_takeover = true;\n        }\n        if (this._options.serverMaxWindowBits) {\n            params.server_max_window_bits = this._options.serverMaxWindowBits;\n        }\n        if (this._options.clientMaxWindowBits) {\n            params.client_max_window_bits = this._options.clientMaxWindowBits;\n        } else if (this._options.clientMaxWindowBits == null) {\n            params.client_max_window_bits = true;\n        }\n        return params;\n    }\n    /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */ accept(configurations) {\n        configurations = this.normalizeParams(configurations);\n        this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);\n        return this.params;\n    }\n    /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */ cleanup() {\n        if (this._inflate) {\n            this._inflate.close();\n            this._inflate = null;\n        }\n        if (this._deflate) {\n            const callback = this._deflate[kCallback];\n            this._deflate.close();\n            this._deflate = null;\n            if (callback) {\n                callback(new Error(\"The deflate stream was closed while data was being processed\"));\n            }\n        }\n    }\n    /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */ acceptAsServer(offers) {\n        const opts = this._options;\n        const accepted = offers.find((params)=>{\n            if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === \"number\" && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === \"number\" && !params.client_max_window_bits) {\n                return false;\n            }\n            return true;\n        });\n        if (!accepted) {\n            throw new Error(\"None of the extension offers can be accepted\");\n        }\n        if (opts.serverNoContextTakeover) {\n            accepted.server_no_context_takeover = true;\n        }\n        if (opts.clientNoContextTakeover) {\n            accepted.client_no_context_takeover = true;\n        }\n        if (typeof opts.serverMaxWindowBits === \"number\") {\n            accepted.server_max_window_bits = opts.serverMaxWindowBits;\n        }\n        if (typeof opts.clientMaxWindowBits === \"number\") {\n            accepted.client_max_window_bits = opts.clientMaxWindowBits;\n        } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {\n            delete accepted.client_max_window_bits;\n        }\n        return accepted;\n    }\n    /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */ acceptAsClient(response) {\n        const params = response[0];\n        if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {\n            throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n        }\n        if (!params.client_max_window_bits) {\n            if (typeof this._options.clientMaxWindowBits === \"number\") {\n                params.client_max_window_bits = this._options.clientMaxWindowBits;\n            }\n        } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === \"number\" && params.client_max_window_bits > this._options.clientMaxWindowBits) {\n            throw new Error('Unexpected or invalid parameter \"client_max_window_bits\"');\n        }\n        return params;\n    }\n    /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */ normalizeParams(configurations) {\n        configurations.forEach((params)=>{\n            Object.keys(params).forEach((key)=>{\n                let value = params[key];\n                if (value.length > 1) {\n                    throw new Error(`Parameter \"${key}\" must have only a single value`);\n                }\n                value = value[0];\n                if (key === \"client_max_window_bits\") {\n                    if (value !== true) {\n                        const num = +value;\n                        if (!Number.isInteger(num) || num < 8 || num > 15) {\n                            throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                        }\n                        value = num;\n                    } else if (!this._isServer) {\n                        throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                    }\n                } else if (key === \"server_max_window_bits\") {\n                    const num = +value;\n                    if (!Number.isInteger(num) || num < 8 || num > 15) {\n                        throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                    }\n                    value = num;\n                } else if (key === \"client_no_context_takeover\" || key === \"server_no_context_takeover\") {\n                    if (value !== true) {\n                        throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                    }\n                } else {\n                    throw new Error(`Unknown parameter \"${key}\"`);\n                }\n                params[key] = value;\n            });\n        });\n        return configurations;\n    }\n    /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */ decompress(data, fin, callback) {\n        zlibLimiter.add((done)=>{\n            this._decompress(data, fin, (err, result)=>{\n                done();\n                callback(err, result);\n            });\n        });\n    }\n    /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */ compress(data, fin, callback) {\n        zlibLimiter.add((done)=>{\n            this._compress(data, fin, (err, result)=>{\n                done();\n                callback(err, result);\n            });\n        });\n    }\n    /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */ _decompress(data, fin, callback) {\n        const endpoint = this._isServer ? \"client\" : \"server\";\n        if (!this._inflate) {\n            const key = `${endpoint}_max_window_bits`;\n            const windowBits = typeof this.params[key] !== \"number\" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];\n            this._inflate = zlib.createInflateRaw({\n                ...this._options.zlibInflateOptions,\n                windowBits\n            });\n            this._inflate[kPerMessageDeflate] = this;\n            this._inflate[kTotalLength] = 0;\n            this._inflate[kBuffers] = [];\n            this._inflate.on(\"error\", inflateOnError);\n            this._inflate.on(\"data\", inflateOnData);\n        }\n        this._inflate[kCallback] = callback;\n        this._inflate.write(data);\n        if (fin) this._inflate.write(TRAILER);\n        this._inflate.flush(()=>{\n            const err = this._inflate[kError];\n            if (err) {\n                this._inflate.close();\n                this._inflate = null;\n                callback(err);\n                return;\n            }\n            const data = bufferUtil.concat(this._inflate[kBuffers], this._inflate[kTotalLength]);\n            if (this._inflate._readableState.endEmitted) {\n                this._inflate.close();\n                this._inflate = null;\n            } else {\n                this._inflate[kTotalLength] = 0;\n                this._inflate[kBuffers] = [];\n                if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n                    this._inflate.reset();\n                }\n            }\n            callback(null, data);\n        });\n    }\n    /**\n   * Compress data.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */ _compress(data, fin, callback) {\n        const endpoint = this._isServer ? \"server\" : \"client\";\n        if (!this._deflate) {\n            const key = `${endpoint}_max_window_bits`;\n            const windowBits = typeof this.params[key] !== \"number\" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];\n            this._deflate = zlib.createDeflateRaw({\n                ...this._options.zlibDeflateOptions,\n                windowBits\n            });\n            this._deflate[kTotalLength] = 0;\n            this._deflate[kBuffers] = [];\n            this._deflate.on(\"data\", deflateOnData);\n        }\n        this._deflate[kCallback] = callback;\n        this._deflate.write(data);\n        this._deflate.flush(zlib.Z_SYNC_FLUSH, ()=>{\n            if (!this._deflate) {\n                //\n                // The deflate stream was closed while data was being processed.\n                //\n                return;\n            }\n            let data = bufferUtil.concat(this._deflate[kBuffers], this._deflate[kTotalLength]);\n            if (fin) data = data.slice(0, data.length - 4);\n            //\n            // Ensure that the callback will not be called again in\n            // `PerMessageDeflate#cleanup()`.\n            //\n            this._deflate[kCallback] = null;\n            this._deflate[kTotalLength] = 0;\n            this._deflate[kBuffers] = [];\n            if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n                this._deflate.reset();\n            }\n            callback(null, data);\n        });\n    }\n}\nmodule.exports = PerMessageDeflate;\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */ function deflateOnData(chunk) {\n    this[kBuffers].push(chunk);\n    this[kTotalLength] += chunk.length;\n}\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */ function inflateOnData(chunk) {\n    this[kTotalLength] += chunk.length;\n    if (this[kPerMessageDeflate]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload) {\n        this[kBuffers].push(chunk);\n        return;\n    }\n    this[kError] = new RangeError(\"Max payload size exceeded\");\n    this[kError].code = \"WS_ERR_UNSUPPORTED_MESSAGE_LENGTH\";\n    this[kError][kStatusCode] = 1009;\n    this.removeListener(\"data\", inflateOnData);\n    this.reset();\n}\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */ function inflateOnError(err) {\n    //\n    // There is no need to call `Zlib#close()` as the handle is automatically\n    // closed when an error is emitted.\n    //\n    this[kPerMessageDeflate]._inflate = null;\n    err[kStatusCode] = 1007;\n    this[kCallback](err);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/ws/lib/permessage-deflate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/ws/lib/receiver.js":
/*!*************************************************************!*\
  !*** ./node_modules/ethers/node_modules/ws/lib/receiver.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Writable } = __webpack_require__(/*! stream */ \"stream\");\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/permessage-deflate.js\");\nconst { BINARY_TYPES, EMPTY_BUFFER, kStatusCode, kWebSocket } = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/constants.js\");\nconst { concat, toArrayBuffer, unmask } = __webpack_require__(/*! ./buffer-util */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/buffer-util.js\");\nconst { isValidStatusCode, isValidUTF8 } = __webpack_require__(/*! ./validation */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/validation.js\");\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\n/**\n * HyBi Receiver implementation.\n *\n * @extends Writable\n */ class Receiver extends Writable {\n    /**\n   * Creates a Receiver instance.\n   *\n   * @param {Object} [options] Options object\n   * @param {String} [options.binaryType=nodebuffer] The type for binary data\n   * @param {Object} [options.extensions] An object containing the negotiated\n   *     extensions\n   * @param {Boolean} [options.isServer=false] Specifies whether to operate in\n   *     client or server mode\n   * @param {Number} [options.maxPayload=0] The maximum allowed message length\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   */ constructor(options = {}){\n        super();\n        this._binaryType = options.binaryType || BINARY_TYPES[0];\n        this._extensions = options.extensions || {};\n        this._isServer = !!options.isServer;\n        this._maxPayload = options.maxPayload | 0;\n        this._skipUTF8Validation = !!options.skipUTF8Validation;\n        this[kWebSocket] = undefined;\n        this._bufferedBytes = 0;\n        this._buffers = [];\n        this._compressed = false;\n        this._payloadLength = 0;\n        this._mask = undefined;\n        this._fragmented = 0;\n        this._masked = false;\n        this._fin = false;\n        this._opcode = 0;\n        this._totalPayloadLength = 0;\n        this._messageLength = 0;\n        this._fragments = [];\n        this._state = GET_INFO;\n        this._loop = false;\n    }\n    /**\n   * Implements `Writable.prototype._write()`.\n   *\n   * @param {Buffer} chunk The chunk of data to write\n   * @param {String} encoding The character encoding of `chunk`\n   * @param {Function} cb Callback\n   * @private\n   */ _write(chunk, encoding, cb) {\n        if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n        this._bufferedBytes += chunk.length;\n        this._buffers.push(chunk);\n        this.startLoop(cb);\n    }\n    /**\n   * Consumes `n` bytes from the buffered data.\n   *\n   * @param {Number} n The number of bytes to consume\n   * @return {Buffer} The consumed bytes\n   * @private\n   */ consume(n) {\n        this._bufferedBytes -= n;\n        if (n === this._buffers[0].length) return this._buffers.shift();\n        if (n < this._buffers[0].length) {\n            const buf = this._buffers[0];\n            this._buffers[0] = buf.slice(n);\n            return buf.slice(0, n);\n        }\n        const dst = Buffer.allocUnsafe(n);\n        do {\n            const buf = this._buffers[0];\n            const offset = dst.length - n;\n            if (n >= buf.length) {\n                dst.set(this._buffers.shift(), offset);\n            } else {\n                dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n                this._buffers[0] = buf.slice(n);\n            }\n            n -= buf.length;\n        }while (n > 0);\n        return dst;\n    }\n    /**\n   * Starts the parsing loop.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */ startLoop(cb) {\n        let err;\n        this._loop = true;\n        do {\n            switch(this._state){\n                case GET_INFO:\n                    err = this.getInfo();\n                    break;\n                case GET_PAYLOAD_LENGTH_16:\n                    err = this.getPayloadLength16();\n                    break;\n                case GET_PAYLOAD_LENGTH_64:\n                    err = this.getPayloadLength64();\n                    break;\n                case GET_MASK:\n                    this.getMask();\n                    break;\n                case GET_DATA:\n                    err = this.getData(cb);\n                    break;\n                default:\n                    // `INFLATING`\n                    this._loop = false;\n                    return;\n            }\n        }while (this._loop);\n        cb(err);\n    }\n    /**\n   * Reads the first two bytes of a frame.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */ getInfo() {\n        if (this._bufferedBytes < 2) {\n            this._loop = false;\n            return;\n        }\n        const buf = this.consume(2);\n        if ((buf[0] & 0x30) !== 0x00) {\n            this._loop = false;\n            return error(RangeError, \"RSV2 and RSV3 must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_RSV_2_3\");\n        }\n        const compressed = (buf[0] & 0x40) === 0x40;\n        if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n            this._loop = false;\n            return error(RangeError, \"RSV1 must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_RSV_1\");\n        }\n        this._fin = (buf[0] & 0x80) === 0x80;\n        this._opcode = buf[0] & 0x0f;\n        this._payloadLength = buf[1] & 0x7f;\n        if (this._opcode === 0x00) {\n            if (compressed) {\n                this._loop = false;\n                return error(RangeError, \"RSV1 must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_RSV_1\");\n            }\n            if (!this._fragmented) {\n                this._loop = false;\n                return error(RangeError, \"invalid opcode 0\", true, 1002, \"WS_ERR_INVALID_OPCODE\");\n            }\n            this._opcode = this._fragmented;\n        } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n            if (this._fragmented) {\n                this._loop = false;\n                return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002, \"WS_ERR_INVALID_OPCODE\");\n            }\n            this._compressed = compressed;\n        } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n            if (!this._fin) {\n                this._loop = false;\n                return error(RangeError, \"FIN must be set\", true, 1002, \"WS_ERR_EXPECTED_FIN\");\n            }\n            if (compressed) {\n                this._loop = false;\n                return error(RangeError, \"RSV1 must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_RSV_1\");\n            }\n            if (this._payloadLength > 0x7d) {\n                this._loop = false;\n                return error(RangeError, `invalid payload length ${this._payloadLength}`, true, 1002, \"WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH\");\n            }\n        } else {\n            this._loop = false;\n            return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002, \"WS_ERR_INVALID_OPCODE\");\n        }\n        if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n        this._masked = (buf[1] & 0x80) === 0x80;\n        if (this._isServer) {\n            if (!this._masked) {\n                this._loop = false;\n                return error(RangeError, \"MASK must be set\", true, 1002, \"WS_ERR_EXPECTED_MASK\");\n            }\n        } else if (this._masked) {\n            this._loop = false;\n            return error(RangeError, \"MASK must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_MASK\");\n        }\n        if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n        else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n        else return this.haveLength();\n    }\n    /**\n   * Gets extended payload length (7+16).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */ getPayloadLength16() {\n        if (this._bufferedBytes < 2) {\n            this._loop = false;\n            return;\n        }\n        this._payloadLength = this.consume(2).readUInt16BE(0);\n        return this.haveLength();\n    }\n    /**\n   * Gets extended payload length (7+64).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */ getPayloadLength64() {\n        if (this._bufferedBytes < 8) {\n            this._loop = false;\n            return;\n        }\n        const buf = this.consume(8);\n        const num = buf.readUInt32BE(0);\n        //\n        // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n        // if payload length is greater than this number.\n        //\n        if (num > Math.pow(2, 53 - 32) - 1) {\n            this._loop = false;\n            return error(RangeError, \"Unsupported WebSocket frame: payload length > 2^53 - 1\", false, 1009, \"WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH\");\n        }\n        this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n        return this.haveLength();\n    }\n    /**\n   * Payload length has been read.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */ haveLength() {\n        if (this._payloadLength && this._opcode < 0x08) {\n            this._totalPayloadLength += this._payloadLength;\n            if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n                this._loop = false;\n                return error(RangeError, \"Max payload size exceeded\", false, 1009, \"WS_ERR_UNSUPPORTED_MESSAGE_LENGTH\");\n            }\n        }\n        if (this._masked) this._state = GET_MASK;\n        else this._state = GET_DATA;\n    }\n    /**\n   * Reads mask bytes.\n   *\n   * @private\n   */ getMask() {\n        if (this._bufferedBytes < 4) {\n            this._loop = false;\n            return;\n        }\n        this._mask = this.consume(4);\n        this._state = GET_DATA;\n    }\n    /**\n   * Reads data bytes.\n   *\n   * @param {Function} cb Callback\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */ getData(cb) {\n        let data = EMPTY_BUFFER;\n        if (this._payloadLength) {\n            if (this._bufferedBytes < this._payloadLength) {\n                this._loop = false;\n                return;\n            }\n            data = this.consume(this._payloadLength);\n            if (this._masked && (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0) {\n                unmask(data, this._mask);\n            }\n        }\n        if (this._opcode > 0x07) return this.controlMessage(data);\n        if (this._compressed) {\n            this._state = INFLATING;\n            this.decompress(data, cb);\n            return;\n        }\n        if (data.length) {\n            //\n            // This message is not compressed so its length is the sum of the payload\n            // length of all fragments.\n            //\n            this._messageLength = this._totalPayloadLength;\n            this._fragments.push(data);\n        }\n        return this.dataMessage();\n    }\n    /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Function} cb Callback\n   * @private\n   */ decompress(data, cb) {\n        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n        perMessageDeflate.decompress(data, this._fin, (err, buf)=>{\n            if (err) return cb(err);\n            if (buf.length) {\n                this._messageLength += buf.length;\n                if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n                    return cb(error(RangeError, \"Max payload size exceeded\", false, 1009, \"WS_ERR_UNSUPPORTED_MESSAGE_LENGTH\"));\n                }\n                this._fragments.push(buf);\n            }\n            const er = this.dataMessage();\n            if (er) return cb(er);\n            this.startLoop(cb);\n        });\n    }\n    /**\n   * Handles a data message.\n   *\n   * @return {(Error|undefined)} A possible error\n   * @private\n   */ dataMessage() {\n        if (this._fin) {\n            const messageLength = this._messageLength;\n            const fragments = this._fragments;\n            this._totalPayloadLength = 0;\n            this._messageLength = 0;\n            this._fragmented = 0;\n            this._fragments = [];\n            if (this._opcode === 2) {\n                let data;\n                if (this._binaryType === \"nodebuffer\") {\n                    data = concat(fragments, messageLength);\n                } else if (this._binaryType === \"arraybuffer\") {\n                    data = toArrayBuffer(concat(fragments, messageLength));\n                } else {\n                    data = fragments;\n                }\n                this.emit(\"message\", data, true);\n            } else {\n                const buf = concat(fragments, messageLength);\n                if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n                    this._loop = false;\n                    return error(Error, \"invalid UTF-8 sequence\", true, 1007, \"WS_ERR_INVALID_UTF8\");\n                }\n                this.emit(\"message\", buf, false);\n            }\n        }\n        this._state = GET_INFO;\n    }\n    /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */ controlMessage(data) {\n        if (this._opcode === 0x08) {\n            this._loop = false;\n            if (data.length === 0) {\n                this.emit(\"conclude\", 1005, EMPTY_BUFFER);\n                this.end();\n            } else if (data.length === 1) {\n                return error(RangeError, \"invalid payload length 1\", true, 1002, \"WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH\");\n            } else {\n                const code = data.readUInt16BE(0);\n                if (!isValidStatusCode(code)) {\n                    return error(RangeError, `invalid status code ${code}`, true, 1002, \"WS_ERR_INVALID_CLOSE_CODE\");\n                }\n                const buf = data.slice(2);\n                if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n                    return error(Error, \"invalid UTF-8 sequence\", true, 1007, \"WS_ERR_INVALID_UTF8\");\n                }\n                this.emit(\"conclude\", code, buf);\n                this.end();\n            }\n        } else if (this._opcode === 0x09) {\n            this.emit(\"ping\", data);\n        } else {\n            this.emit(\"pong\", data);\n        }\n        this._state = GET_INFO;\n    }\n}\nmodule.exports = Receiver;\n/**\n * Builds an error object.\n *\n * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\n * @param {String} message The error message\n * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n *     `message`\n * @param {Number} statusCode The status code\n * @param {String} errorCode The exposed error code\n * @return {(Error|RangeError)} The error\n * @private\n */ function error(ErrorCtor, message, prefix, statusCode, errorCode) {\n    const err = new ErrorCtor(prefix ? `Invalid WebSocket frame: ${message}` : message);\n    Error.captureStackTrace(err, error);\n    err.code = errorCode;\n    err[kStatusCode] = statusCode;\n    return err;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/ws/lib/receiver.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/ws/lib/sender.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/node_modules/ws/lib/sender.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls$\" }] */ \nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { randomFillSync } = __webpack_require__(/*! crypto */ \"crypto\");\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/permessage-deflate.js\");\nconst { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/constants.js\");\nconst { isValidStatusCode } = __webpack_require__(/*! ./validation */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/validation.js\");\nconst { mask: applyMask, toBuffer } = __webpack_require__(/*! ./buffer-util */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/buffer-util.js\");\nconst kByteLength = Symbol(\"kByteLength\");\nconst maskBuffer = Buffer.alloc(4);\n/**\n * HyBi Sender implementation.\n */ class Sender {\n    /**\n   * Creates a Sender instance.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The connection socket\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   * @param {Function} [generateMask] The function used to generate the masking\n   *     key\n   */ constructor(socket, extensions, generateMask){\n        this._extensions = extensions || {};\n        if (generateMask) {\n            this._generateMask = generateMask;\n            this._maskBuffer = Buffer.alloc(4);\n        }\n        this._socket = socket;\n        this._firstFragment = true;\n        this._compress = false;\n        this._bufferedBytes = 0;\n        this._deflating = false;\n        this._queue = [];\n    }\n    /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {(Buffer|String)} data The data to frame\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @return {(Buffer|String)[]} The framed data\n   * @public\n   */ static frame(data, options) {\n        let mask;\n        let merge = false;\n        let offset = 2;\n        let skipMasking = false;\n        if (options.mask) {\n            mask = options.maskBuffer || maskBuffer;\n            if (options.generateMask) {\n                options.generateMask(mask);\n            } else {\n                randomFillSync(mask, 0, 4);\n            }\n            skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;\n            offset = 6;\n        }\n        let dataLength;\n        if (typeof data === \"string\") {\n            if ((!options.mask || skipMasking) && options[kByteLength] !== undefined) {\n                dataLength = options[kByteLength];\n            } else {\n                data = Buffer.from(data);\n                dataLength = data.length;\n            }\n        } else {\n            dataLength = data.length;\n            merge = options.mask && options.readOnly && !skipMasking;\n        }\n        let payloadLength = dataLength;\n        if (dataLength >= 65536) {\n            offset += 8;\n            payloadLength = 127;\n        } else if (dataLength > 125) {\n            offset += 2;\n            payloadLength = 126;\n        }\n        const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);\n        target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n        if (options.rsv1) target[0] |= 0x40;\n        target[1] = payloadLength;\n        if (payloadLength === 126) {\n            target.writeUInt16BE(dataLength, 2);\n        } else if (payloadLength === 127) {\n            target[2] = target[3] = 0;\n            target.writeUIntBE(dataLength, 4, 6);\n        }\n        if (!options.mask) return [\n            target,\n            data\n        ];\n        target[1] |= 0x80;\n        target[offset - 4] = mask[0];\n        target[offset - 3] = mask[1];\n        target[offset - 2] = mask[2];\n        target[offset - 1] = mask[3];\n        if (skipMasking) return [\n            target,\n            data\n        ];\n        if (merge) {\n            applyMask(data, mask, target, offset, dataLength);\n            return [\n                target\n            ];\n        }\n        applyMask(data, mask, data, 0, dataLength);\n        return [\n            target,\n            data\n        ];\n    }\n    /**\n   * Sends a close message to the other peer.\n   *\n   * @param {Number} [code] The status code component of the body\n   * @param {(String|Buffer)} [data] The message component of the body\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n   * @param {Function} [cb] Callback\n   * @public\n   */ close(code, data, mask, cb) {\n        let buf;\n        if (code === undefined) {\n            buf = EMPTY_BUFFER;\n        } else if (typeof code !== \"number\" || !isValidStatusCode(code)) {\n            throw new TypeError(\"First argument must be a valid error code number\");\n        } else if (data === undefined || !data.length) {\n            buf = Buffer.allocUnsafe(2);\n            buf.writeUInt16BE(code, 0);\n        } else {\n            const length = Buffer.byteLength(data);\n            if (length > 123) {\n                throw new RangeError(\"The message must not be greater than 123 bytes\");\n            }\n            buf = Buffer.allocUnsafe(2 + length);\n            buf.writeUInt16BE(code, 0);\n            if (typeof data === \"string\") {\n                buf.write(data, 2);\n            } else {\n                buf.set(data, 2);\n            }\n        }\n        const options = {\n            [kByteLength]: buf.length,\n            fin: true,\n            generateMask: this._generateMask,\n            mask,\n            maskBuffer: this._maskBuffer,\n            opcode: 0x08,\n            readOnly: false,\n            rsv1: false\n        };\n        if (this._deflating) {\n            this.enqueue([\n                this.dispatch,\n                buf,\n                false,\n                options,\n                cb\n            ]);\n        } else {\n            this.sendFrame(Sender.frame(buf, options), cb);\n        }\n    }\n    /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */ ping(data, mask, cb) {\n        let byteLength;\n        let readOnly;\n        if (typeof data === \"string\") {\n            byteLength = Buffer.byteLength(data);\n            readOnly = false;\n        } else {\n            data = toBuffer(data);\n            byteLength = data.length;\n            readOnly = toBuffer.readOnly;\n        }\n        if (byteLength > 125) {\n            throw new RangeError(\"The data size must not be greater than 125 bytes\");\n        }\n        const options = {\n            [kByteLength]: byteLength,\n            fin: true,\n            generateMask: this._generateMask,\n            mask,\n            maskBuffer: this._maskBuffer,\n            opcode: 0x09,\n            readOnly,\n            rsv1: false\n        };\n        if (this._deflating) {\n            this.enqueue([\n                this.dispatch,\n                data,\n                false,\n                options,\n                cb\n            ]);\n        } else {\n            this.sendFrame(Sender.frame(data, options), cb);\n        }\n    }\n    /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */ pong(data, mask, cb) {\n        let byteLength;\n        let readOnly;\n        if (typeof data === \"string\") {\n            byteLength = Buffer.byteLength(data);\n            readOnly = false;\n        } else {\n            data = toBuffer(data);\n            byteLength = data.length;\n            readOnly = toBuffer.readOnly;\n        }\n        if (byteLength > 125) {\n            throw new RangeError(\"The data size must not be greater than 125 bytes\");\n        }\n        const options = {\n            [kByteLength]: byteLength,\n            fin: true,\n            generateMask: this._generateMask,\n            mask,\n            maskBuffer: this._maskBuffer,\n            opcode: 0x0a,\n            readOnly,\n            rsv1: false\n        };\n        if (this._deflating) {\n            this.enqueue([\n                this.dispatch,\n                data,\n                false,\n                options,\n                cb\n            ]);\n        } else {\n            this.sendFrame(Sender.frame(data, options), cb);\n        }\n    }\n    /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n   *     or text\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\n   *     compress `data`\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */ send(data, options, cb) {\n        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n        let opcode = options.binary ? 2 : 1;\n        let rsv1 = options.compress;\n        let byteLength;\n        let readOnly;\n        if (typeof data === \"string\") {\n            byteLength = Buffer.byteLength(data);\n            readOnly = false;\n        } else {\n            data = toBuffer(data);\n            byteLength = data.length;\n            readOnly = toBuffer.readOnly;\n        }\n        if (this._firstFragment) {\n            this._firstFragment = false;\n            if (rsv1 && perMessageDeflate && perMessageDeflate.params[perMessageDeflate._isServer ? \"server_no_context_takeover\" : \"client_no_context_takeover\"]) {\n                rsv1 = byteLength >= perMessageDeflate._threshold;\n            }\n            this._compress = rsv1;\n        } else {\n            rsv1 = false;\n            opcode = 0;\n        }\n        if (options.fin) this._firstFragment = true;\n        if (perMessageDeflate) {\n            const opts = {\n                [kByteLength]: byteLength,\n                fin: options.fin,\n                generateMask: this._generateMask,\n                mask: options.mask,\n                maskBuffer: this._maskBuffer,\n                opcode,\n                readOnly,\n                rsv1\n            };\n            if (this._deflating) {\n                this.enqueue([\n                    this.dispatch,\n                    data,\n                    this._compress,\n                    opts,\n                    cb\n                ]);\n            } else {\n                this.dispatch(data, this._compress, opts, cb);\n            }\n        } else {\n            this.sendFrame(Sender.frame(data, {\n                [kByteLength]: byteLength,\n                fin: options.fin,\n                generateMask: this._generateMask,\n                mask: options.mask,\n                maskBuffer: this._maskBuffer,\n                opcode,\n                readOnly,\n                rsv1: false\n            }), cb);\n        }\n    }\n    /**\n   * Dispatches a message.\n   *\n   * @param {(Buffer|String)} data The message to send\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     `data`\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */ dispatch(data, compress, options, cb) {\n        if (!compress) {\n            this.sendFrame(Sender.frame(data, options), cb);\n            return;\n        }\n        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n        this._bufferedBytes += options[kByteLength];\n        this._deflating = true;\n        perMessageDeflate.compress(data, options.fin, (_, buf)=>{\n            if (this._socket.destroyed) {\n                const err = new Error(\"The socket was closed while data was being compressed\");\n                if (typeof cb === \"function\") cb(err);\n                for(let i = 0; i < this._queue.length; i++){\n                    const params = this._queue[i];\n                    const callback = params[params.length - 1];\n                    if (typeof callback === \"function\") callback(err);\n                }\n                return;\n            }\n            this._bufferedBytes -= options[kByteLength];\n            this._deflating = false;\n            options.readOnly = false;\n            this.sendFrame(Sender.frame(buf, options), cb);\n            this.dequeue();\n        });\n    }\n    /**\n   * Executes queued send operations.\n   *\n   * @private\n   */ dequeue() {\n        while(!this._deflating && this._queue.length){\n            const params = this._queue.shift();\n            this._bufferedBytes -= params[3][kByteLength];\n            Reflect.apply(params[0], this, params.slice(1));\n        }\n    }\n    /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */ enqueue(params) {\n        this._bufferedBytes += params[3][kByteLength];\n        this._queue.push(params);\n    }\n    /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} [cb] Callback\n   * @private\n   */ sendFrame(list, cb) {\n        if (list.length === 2) {\n            this._socket.cork();\n            this._socket.write(list[0]);\n            this._socket.write(list[1], cb);\n            this._socket.uncork();\n        } else {\n            this._socket.write(list[0], cb);\n        }\n    }\n}\nmodule.exports = Sender;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/ws/lib/sender.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/ws/lib/stream.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/node_modules/ws/lib/stream.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Duplex } = __webpack_require__(/*! stream */ \"stream\");\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */ function emitClose(stream) {\n    stream.emit(\"close\");\n}\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */ function duplexOnEnd() {\n    if (!this.destroyed && this._writableState.finished) {\n        this.destroy();\n    }\n}\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */ function duplexOnError(err) {\n    this.removeListener(\"error\", duplexOnError);\n    this.destroy();\n    if (this.listenerCount(\"error\") === 0) {\n        // Do not suppress the throwing behavior.\n        this.emit(\"error\", err);\n    }\n}\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */ function createWebSocketStream(ws, options) {\n    let terminateOnDestroy = true;\n    const duplex = new Duplex({\n        ...options,\n        autoDestroy: false,\n        emitClose: false,\n        objectMode: false,\n        writableObjectMode: false\n    });\n    ws.on(\"message\", function message(msg, isBinary) {\n        const data = !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\n        if (!duplex.push(data)) ws.pause();\n    });\n    ws.once(\"error\", function error(err) {\n        if (duplex.destroyed) return;\n        // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n        //\n        // - If the `'error'` event is emitted before the `'open'` event, then\n        //   `ws.terminate()` is a noop as no socket is assigned.\n        // - Otherwise, the error is re-emitted by the listener of the `'error'`\n        //   event of the `Receiver` object. The listener already closes the\n        //   connection by calling `ws.close()`. This allows a close frame to be\n        //   sent to the other peer. If `ws.terminate()` is called right after this,\n        //   then the close frame might not be sent.\n        terminateOnDestroy = false;\n        duplex.destroy(err);\n    });\n    ws.once(\"close\", function close() {\n        if (duplex.destroyed) return;\n        duplex.push(null);\n    });\n    duplex._destroy = function(err, callback) {\n        if (ws.readyState === ws.CLOSED) {\n            callback(err);\n            process.nextTick(emitClose, duplex);\n            return;\n        }\n        let called = false;\n        ws.once(\"error\", function error(err) {\n            called = true;\n            callback(err);\n        });\n        ws.once(\"close\", function close() {\n            if (!called) callback(err);\n            process.nextTick(emitClose, duplex);\n        });\n        if (terminateOnDestroy) ws.terminate();\n    };\n    duplex._final = function(callback) {\n        if (ws.readyState === ws.CONNECTING) {\n            ws.once(\"open\", function open() {\n                duplex._final(callback);\n            });\n            return;\n        }\n        // If the value of the `_socket` property is `null` it means that `ws` is a\n        // client websocket and the handshake failed. In fact, when this happens, a\n        // socket is never assigned to the websocket. Wait for the `'error'` event\n        // that will be emitted by the websocket.\n        if (ws._socket === null) return;\n        if (ws._socket._writableState.finished) {\n            callback();\n            if (duplex._readableState.endEmitted) duplex.destroy();\n        } else {\n            ws._socket.once(\"finish\", function finish() {\n                // `duplex` is not destroyed here because the `'end'` event will be\n                // emitted on `duplex` after this `'finish'` event. The EOF signaling\n                // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n                callback();\n            });\n            ws.close();\n        }\n    };\n    duplex._read = function() {\n        if (ws.isPaused) ws.resume();\n    };\n    duplex._write = function(chunk, encoding, callback) {\n        if (ws.readyState === ws.CONNECTING) {\n            ws.once(\"open\", function open() {\n                duplex._write(chunk, encoding, callback);\n            });\n            return;\n        }\n        ws.send(chunk, callback);\n    };\n    duplex.on(\"end\", duplexOnEnd);\n    duplex.on(\"error\", duplexOnError);\n    return duplex;\n}\nmodule.exports = createWebSocketStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/ws/lib/stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/ws/lib/subprotocol.js":
/*!****************************************************************!*\
  !*** ./node_modules/ethers/node_modules/ws/lib/subprotocol.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { tokenChars } = __webpack_require__(/*! ./validation */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/validation.js\");\n/**\n * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.\n *\n * @param {String} header The field value of the header\n * @return {Set} The subprotocol names\n * @public\n */ function parse(header) {\n    const protocols = new Set();\n    let start = -1;\n    let end = -1;\n    let i = 0;\n    for(i; i < header.length; i++){\n        const code = header.charCodeAt(i);\n        if (end === -1 && tokenChars[code] === 1) {\n            if (start === -1) start = i;\n        } else if (i !== 0 && (code === 0x20 /* ' ' */  || code === 0x09)) {\n            if (end === -1 && start !== -1) end = i;\n        } else if (code === 0x2c /* ',' */ ) {\n            if (start === -1) {\n                throw new SyntaxError(`Unexpected character at index ${i}`);\n            }\n            if (end === -1) end = i;\n            const protocol = header.slice(start, end);\n            if (protocols.has(protocol)) {\n                throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n            }\n            protocols.add(protocol);\n            start = end = -1;\n        } else {\n            throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n    }\n    if (start === -1 || end !== -1) {\n        throw new SyntaxError(\"Unexpected end of input\");\n    }\n    const protocol = header.slice(start, i);\n    if (protocols.has(protocol)) {\n        throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n    }\n    protocols.add(protocol);\n    return protocols;\n}\nmodule.exports = {\n    parse\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL25vZGVfbW9kdWxlcy93cy9saWIvc3VicHJvdG9jb2wuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLFVBQVUsRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUUvQjs7Ozs7O0NBTUMsR0FDRCxTQUFTQyxNQUFNQyxNQUFNO0lBQ25CLE1BQU1DLFlBQVksSUFBSUM7SUFDdEIsSUFBSUMsUUFBUSxDQUFDO0lBQ2IsSUFBSUMsTUFBTSxDQUFDO0lBQ1gsSUFBSUMsSUFBSTtJQUVSLElBQUtBLEdBQUdBLElBQUlMLE9BQU9NLE1BQU0sRUFBRUQsSUFBSztRQUM5QixNQUFNRSxPQUFPUCxPQUFPUSxVQUFVLENBQUNIO1FBRS9CLElBQUlELFFBQVEsQ0FBQyxLQUFLUCxVQUFVLENBQUNVLEtBQUssS0FBSyxHQUFHO1lBQ3hDLElBQUlKLFVBQVUsQ0FBQyxHQUFHQSxRQUFRRTtRQUM1QixPQUFPLElBQ0xBLE1BQU0sS0FDTEUsQ0FBQUEsU0FBUyxLQUFLLE9BQU8sT0FBTUEsU0FBUyxJQUFHLEdBQ3hDO1lBQ0EsSUFBSUgsUUFBUSxDQUFDLEtBQUtELFVBQVUsQ0FBQyxHQUFHQyxNQUFNQztRQUN4QyxPQUFPLElBQUlFLFNBQVMsS0FBSyxPQUFPLEtBQUk7WUFDbEMsSUFBSUosVUFBVSxDQUFDLEdBQUc7Z0JBQ2hCLE1BQU0sSUFBSU0sWUFBWSxDQUFDLDhCQUE4QixFQUFFSixFQUFFLENBQUM7WUFDNUQ7WUFFQSxJQUFJRCxRQUFRLENBQUMsR0FBR0EsTUFBTUM7WUFFdEIsTUFBTUssV0FBV1YsT0FBT1csS0FBSyxDQUFDUixPQUFPQztZQUVyQyxJQUFJSCxVQUFVVyxHQUFHLENBQUNGLFdBQVc7Z0JBQzNCLE1BQU0sSUFBSUQsWUFBWSxDQUFDLEtBQUssRUFBRUMsU0FBUywyQkFBMkIsQ0FBQztZQUNyRTtZQUVBVCxVQUFVWSxHQUFHLENBQUNIO1lBQ2RQLFFBQVFDLE1BQU0sQ0FBQztRQUNqQixPQUFPO1lBQ0wsTUFBTSxJQUFJSyxZQUFZLENBQUMsOEJBQThCLEVBQUVKLEVBQUUsQ0FBQztRQUM1RDtJQUNGO0lBRUEsSUFBSUYsVUFBVSxDQUFDLEtBQUtDLFFBQVEsQ0FBQyxHQUFHO1FBQzlCLE1BQU0sSUFBSUssWUFBWTtJQUN4QjtJQUVBLE1BQU1DLFdBQVdWLE9BQU9XLEtBQUssQ0FBQ1IsT0FBT0U7SUFFckMsSUFBSUosVUFBVVcsR0FBRyxDQUFDRixXQUFXO1FBQzNCLE1BQU0sSUFBSUQsWUFBWSxDQUFDLEtBQUssRUFBRUMsU0FBUywyQkFBMkIsQ0FBQztJQUNyRTtJQUVBVCxVQUFVWSxHQUFHLENBQUNIO0lBQ2QsT0FBT1Q7QUFDVDtBQUVBYSxPQUFPQyxPQUFPLEdBQUc7SUFBRWhCO0FBQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL25vZGVfbW9kdWxlcy93cy9saWIvc3VicHJvdG9jb2wuanM/YWMyNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHsgdG9rZW5DaGFycyB9ID0gcmVxdWlyZSgnLi92YWxpZGF0aW9uJyk7XG5cbi8qKlxuICogUGFyc2VzIHRoZSBgU2VjLVdlYlNvY2tldC1Qcm90b2NvbGAgaGVhZGVyIGludG8gYSBzZXQgb2Ygc3VicHJvdG9jb2wgbmFtZXMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlciBUaGUgZmllbGQgdmFsdWUgb2YgdGhlIGhlYWRlclxuICogQHJldHVybiB7U2V0fSBUaGUgc3VicHJvdG9jb2wgbmFtZXNcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcGFyc2UoaGVhZGVyKSB7XG4gIGNvbnN0IHByb3RvY29scyA9IG5ldyBTZXQoKTtcbiAgbGV0IHN0YXJ0ID0gLTE7XG4gIGxldCBlbmQgPSAtMTtcbiAgbGV0IGkgPSAwO1xuXG4gIGZvciAoaTsgaSA8IGhlYWRlci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNvZGUgPSBoZWFkZXIuY2hhckNvZGVBdChpKTtcblxuICAgIGlmIChlbmQgPT09IC0xICYmIHRva2VuQ2hhcnNbY29kZV0gPT09IDEpIHtcbiAgICAgIGlmIChzdGFydCA9PT0gLTEpIHN0YXJ0ID0gaTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgaSAhPT0gMCAmJlxuICAgICAgKGNvZGUgPT09IDB4MjAgLyogJyAnICovIHx8IGNvZGUgPT09IDB4MDkpIC8qICdcXHQnICovXG4gICAgKSB7XG4gICAgICBpZiAoZW5kID09PSAtMSAmJiBzdGFydCAhPT0gLTEpIGVuZCA9IGk7XG4gICAgfSBlbHNlIGlmIChjb2RlID09PSAweDJjIC8qICcsJyAqLykge1xuICAgICAgaWYgKHN0YXJ0ID09PSAtMSkge1xuICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYFVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7aX1gKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZCA9PT0gLTEpIGVuZCA9IGk7XG5cbiAgICAgIGNvbnN0IHByb3RvY29sID0gaGVhZGVyLnNsaWNlKHN0YXJ0LCBlbmQpO1xuXG4gICAgICBpZiAocHJvdG9jb2xzLmhhcyhwcm90b2NvbCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBUaGUgXCIke3Byb3RvY29sfVwiIHN1YnByb3RvY29sIGlzIGR1cGxpY2F0ZWRgKTtcbiAgICAgIH1cblxuICAgICAgcHJvdG9jb2xzLmFkZChwcm90b2NvbCk7XG4gICAgICBzdGFydCA9IGVuZCA9IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYFVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7aX1gKTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhcnQgPT09IC0xIHx8IGVuZCAhPT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1VuZXhwZWN0ZWQgZW5kIG9mIGlucHV0Jyk7XG4gIH1cblxuICBjb25zdCBwcm90b2NvbCA9IGhlYWRlci5zbGljZShzdGFydCwgaSk7XG5cbiAgaWYgKHByb3RvY29scy5oYXMocHJvdG9jb2wpKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBUaGUgXCIke3Byb3RvY29sfVwiIHN1YnByb3RvY29sIGlzIGR1cGxpY2F0ZWRgKTtcbiAgfVxuXG4gIHByb3RvY29scy5hZGQocHJvdG9jb2wpO1xuICByZXR1cm4gcHJvdG9jb2xzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgcGFyc2UgfTtcbiJdLCJuYW1lcyI6WyJ0b2tlbkNoYXJzIiwicmVxdWlyZSIsInBhcnNlIiwiaGVhZGVyIiwicHJvdG9jb2xzIiwiU2V0Iiwic3RhcnQiLCJlbmQiLCJpIiwibGVuZ3RoIiwiY29kZSIsImNoYXJDb2RlQXQiLCJTeW50YXhFcnJvciIsInByb3RvY29sIiwic2xpY2UiLCJoYXMiLCJhZGQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/ws/lib/subprotocol.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/ws/lib/validation.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/node_modules/ws/lib/validation.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\n// prettier-ignore\nconst tokenChars = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    0,\n    1,\n    1,\n    0,\n    1,\n    1,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    1,\n    0,\n    1,\n    0 // 112 - 127\n];\n/**\n * Checks if a status code is allowed in a close frame.\n *\n * @param {Number} code The status code\n * @return {Boolean} `true` if the status code is valid, else `false`\n * @public\n */ function isValidStatusCode(code) {\n    return code >= 1000 && code <= 1014 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3000 && code <= 4999;\n}\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */ function _isValidUTF8(buf) {\n    const len = buf.length;\n    let i = 0;\n    while(i < len){\n        if ((buf[i] & 0x80) === 0) {\n            // 0xxxxxxx\n            i++;\n        } else if ((buf[i] & 0xe0) === 0xc0) {\n            // 110xxxxx 10xxxxxx\n            if (i + 1 === len || (buf[i + 1] & 0xc0) !== 0x80 || (buf[i] & 0xfe) === 0xc0 // Overlong\n            ) {\n                return false;\n            }\n            i += 2;\n        } else if ((buf[i] & 0xf0) === 0xe0) {\n            // 1110xxxx 10xxxxxx 10xxxxxx\n            if (i + 2 >= len || (buf[i + 1] & 0xc0) !== 0x80 || (buf[i + 2] & 0xc0) !== 0x80 || buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80 || // Overlong\n            buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0 // Surrogate (U+D800 - U+DFFF)\n            ) {\n                return false;\n            }\n            i += 3;\n        } else if ((buf[i] & 0xf8) === 0xf0) {\n            // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n            if (i + 3 >= len || (buf[i + 1] & 0xc0) !== 0x80 || (buf[i + 2] & 0xc0) !== 0x80 || (buf[i + 3] & 0xc0) !== 0x80 || buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80 || // Overlong\n            buf[i] === 0xf4 && buf[i + 1] > 0x8f || buf[i] > 0xf4 // > U+10FFFF\n            ) {\n                return false;\n            }\n            i += 4;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\ntry {\n    const isValidUTF8 = __webpack_require__(/*! utf-8-validate */ \"(rsc)/./node_modules/utf-8-validate/index.js\");\n    module.exports = {\n        isValidStatusCode,\n        isValidUTF8 (buf) {\n            return buf.length < 150 ? _isValidUTF8(buf) : isValidUTF8(buf);\n        },\n        tokenChars\n    };\n} catch (e) /* istanbul ignore next */ {\n    module.exports = {\n        isValidStatusCode,\n        isValidUTF8: _isValidUTF8,\n        tokenChars\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/ws/lib/validation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/ws/lib/websocket-server.js":
/*!*********************************************************************!*\
  !*** ./node_modules/ethers/node_modules/ws/lib/websocket-server.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls|https$\" }] */ \nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { createHash } = __webpack_require__(/*! crypto */ \"crypto\");\nconst extension = __webpack_require__(/*! ./extension */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/extension.js\");\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/permessage-deflate.js\");\nconst subprotocol = __webpack_require__(/*! ./subprotocol */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/subprotocol.js\");\nconst WebSocket = __webpack_require__(/*! ./websocket */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/websocket.js\");\nconst { GUID, kWebSocket } = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/constants.js\");\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */ class WebSocketServer extends EventEmitter {\n    /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`\n   *     class to use. It must be the `WebSocket` class or class that extends it\n   * @param {Function} [callback] A listener for the `listening` event\n   */ constructor(options, callback){\n        super();\n        options = {\n            maxPayload: 100 * 1024 * 1024,\n            skipUTF8Validation: false,\n            perMessageDeflate: false,\n            handleProtocols: null,\n            clientTracking: true,\n            verifyClient: null,\n            noServer: false,\n            backlog: null,\n            server: null,\n            host: null,\n            path: null,\n            port: null,\n            WebSocket,\n            ...options\n        };\n        if (options.port == null && !options.server && !options.noServer || options.port != null && (options.server || options.noServer) || options.server && options.noServer) {\n            throw new TypeError('One and only one of the \"port\", \"server\", or \"noServer\" options ' + \"must be specified\");\n        }\n        if (options.port != null) {\n            this._server = http.createServer((req, res)=>{\n                const body = http.STATUS_CODES[426];\n                res.writeHead(426, {\n                    \"Content-Length\": body.length,\n                    \"Content-Type\": \"text/plain\"\n                });\n                res.end(body);\n            });\n            this._server.listen(options.port, options.host, options.backlog, callback);\n        } else if (options.server) {\n            this._server = options.server;\n        }\n        if (this._server) {\n            const emitConnection = this.emit.bind(this, \"connection\");\n            this._removeListeners = addListeners(this._server, {\n                listening: this.emit.bind(this, \"listening\"),\n                error: this.emit.bind(this, \"error\"),\n                upgrade: (req, socket, head)=>{\n                    this.handleUpgrade(req, socket, head, emitConnection);\n                }\n            });\n        }\n        if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n        if (options.clientTracking) {\n            this.clients = new Set();\n            this._shouldEmitClose = false;\n        }\n        this.options = options;\n        this._state = RUNNING;\n    }\n    /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */ address() {\n        if (this.options.noServer) {\n            throw new Error('The server is operating in \"noServer\" mode');\n        }\n        if (!this._server) return null;\n        return this._server.address();\n    }\n    /**\n   * Stop the server from accepting new connections and emit the `'close'` event\n   * when all existing connections are closed.\n   *\n   * @param {Function} [cb] A one-time listener for the `'close'` event\n   * @public\n   */ close(cb) {\n        if (this._state === CLOSED) {\n            if (cb) {\n                this.once(\"close\", ()=>{\n                    cb(new Error(\"The server is not running\"));\n                });\n            }\n            process.nextTick(emitClose, this);\n            return;\n        }\n        if (cb) this.once(\"close\", cb);\n        if (this._state === CLOSING) return;\n        this._state = CLOSING;\n        if (this.options.noServer || this.options.server) {\n            if (this._server) {\n                this._removeListeners();\n                this._removeListeners = this._server = null;\n            }\n            if (this.clients) {\n                if (!this.clients.size) {\n                    process.nextTick(emitClose, this);\n                } else {\n                    this._shouldEmitClose = true;\n                }\n            } else {\n                process.nextTick(emitClose, this);\n            }\n        } else {\n            const server = this._server;\n            this._removeListeners();\n            this._removeListeners = this._server = null;\n            //\n            // The HTTP/S server was created internally. Close it, and rely on its\n            // `'close'` event.\n            //\n            server.close(()=>{\n                emitClose(this);\n            });\n        }\n    }\n    /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */ shouldHandle(req) {\n        if (this.options.path) {\n            const index = req.url.indexOf(\"?\");\n            const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n            if (pathname !== this.options.path) return false;\n        }\n        return true;\n    }\n    /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */ handleUpgrade(req, socket, head, cb) {\n        socket.on(\"error\", socketOnError);\n        const key = req.headers[\"sec-websocket-key\"] !== undefined ? req.headers[\"sec-websocket-key\"] : false;\n        const version = +req.headers[\"sec-websocket-version\"];\n        if (req.method !== \"GET\" || req.headers.upgrade.toLowerCase() !== \"websocket\" || !key || !keyRegex.test(key) || version !== 8 && version !== 13 || !this.shouldHandle(req)) {\n            return abortHandshake(socket, 400);\n        }\n        const secWebSocketProtocol = req.headers[\"sec-websocket-protocol\"];\n        let protocols = new Set();\n        if (secWebSocketProtocol !== undefined) {\n            try {\n                protocols = subprotocol.parse(secWebSocketProtocol);\n            } catch (err) {\n                return abortHandshake(socket, 400);\n            }\n        }\n        const secWebSocketExtensions = req.headers[\"sec-websocket-extensions\"];\n        const extensions = {};\n        if (this.options.perMessageDeflate && secWebSocketExtensions !== undefined) {\n            const perMessageDeflate = new PerMessageDeflate(this.options.perMessageDeflate, true, this.options.maxPayload);\n            try {\n                const offers = extension.parse(secWebSocketExtensions);\n                if (offers[PerMessageDeflate.extensionName]) {\n                    perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n                    extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n                }\n            } catch (err) {\n                return abortHandshake(socket, 400);\n            }\n        }\n        //\n        // Optionally call external client verification handler.\n        //\n        if (this.options.verifyClient) {\n            const info = {\n                origin: req.headers[`${version === 8 ? \"sec-websocket-origin\" : \"origin\"}`],\n                secure: !!(req.socket.authorized || req.socket.encrypted),\n                req\n            };\n            if (this.options.verifyClient.length === 2) {\n                this.options.verifyClient(info, (verified, code, message, headers)=>{\n                    if (!verified) {\n                        return abortHandshake(socket, code || 401, message, headers);\n                    }\n                    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n                });\n                return;\n            }\n            if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n        }\n        this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n    }\n    /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {Object} extensions The accepted extensions\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Set} protocols The subprotocols\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */ completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\n        //\n        // Destroy the socket if the client has already sent a FIN packet.\n        //\n        if (!socket.readable || !socket.writable) return socket.destroy();\n        if (socket[kWebSocket]) {\n            throw new Error(\"server.handleUpgrade() was called more than once with the same \" + \"socket, possibly due to a misconfiguration\");\n        }\n        if (this._state > RUNNING) return abortHandshake(socket, 503);\n        const digest = createHash(\"sha1\").update(key + GUID).digest(\"base64\");\n        const headers = [\n            \"HTTP/1.1 101 Switching Protocols\",\n            \"Upgrade: websocket\",\n            \"Connection: Upgrade\",\n            `Sec-WebSocket-Accept: ${digest}`\n        ];\n        const ws = new this.options.WebSocket(null);\n        if (protocols.size) {\n            //\n            // Optionally call external protocol selection handler.\n            //\n            const protocol = this.options.handleProtocols ? this.options.handleProtocols(protocols, req) : protocols.values().next().value;\n            if (protocol) {\n                headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n                ws._protocol = protocol;\n            }\n        }\n        if (extensions[PerMessageDeflate.extensionName]) {\n            const params = extensions[PerMessageDeflate.extensionName].params;\n            const value = extension.format({\n                [PerMessageDeflate.extensionName]: [\n                    params\n                ]\n            });\n            headers.push(`Sec-WebSocket-Extensions: ${value}`);\n            ws._extensions = extensions;\n        }\n        //\n        // Allow external modification/inspection of handshake headers.\n        //\n        this.emit(\"headers\", headers, req);\n        socket.write(headers.concat(\"\\r\\n\").join(\"\\r\\n\"));\n        socket.removeListener(\"error\", socketOnError);\n        ws.setSocket(socket, head, {\n            maxPayload: this.options.maxPayload,\n            skipUTF8Validation: this.options.skipUTF8Validation\n        });\n        if (this.clients) {\n            this.clients.add(ws);\n            ws.on(\"close\", ()=>{\n                this.clients.delete(ws);\n                if (this._shouldEmitClose && !this.clients.size) {\n                    process.nextTick(emitClose, this);\n                }\n            });\n        }\n        cb(ws, req);\n    }\n}\nmodule.exports = WebSocketServer;\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */ function addListeners(server, map) {\n    for (const event of Object.keys(map))server.on(event, map[event]);\n    return function removeListeners() {\n        for (const event of Object.keys(map)){\n            server.removeListener(event, map[event]);\n        }\n    };\n}\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */ function emitClose(server) {\n    server._state = CLOSED;\n    server.emit(\"close\");\n}\n/**\n * Handle premature socket errors.\n *\n * @private\n */ function socketOnError() {\n    this.destroy();\n}\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */ function abortHandshake(socket, code, message, headers) {\n    if (socket.writable) {\n        message = message || http.STATUS_CODES[code];\n        headers = {\n            Connection: \"close\",\n            \"Content-Type\": \"text/html\",\n            \"Content-Length\": Buffer.byteLength(message),\n            ...headers\n        };\n        socket.write(`HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` + Object.keys(headers).map((h)=>`${h}: ${headers[h]}`).join(\"\\r\\n\") + \"\\r\\n\\r\\n\" + message);\n    }\n    socket.removeListener(\"error\", socketOnError);\n    socket.destroy();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/ws/lib/websocket-server.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/ws/lib/websocket.js":
/*!**************************************************************!*\
  !*** ./node_modules/ethers/node_modules/ws/lib/websocket.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Readable$\" }] */ \nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { randomBytes, createHash } = __webpack_require__(/*! crypto */ \"crypto\");\nconst { Readable } = __webpack_require__(/*! stream */ \"stream\");\nconst { URL } = __webpack_require__(/*! url */ \"url\");\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/permessage-deflate.js\");\nconst Receiver = __webpack_require__(/*! ./receiver */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/receiver.js\");\nconst Sender = __webpack_require__(/*! ./sender */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/sender.js\");\nconst { BINARY_TYPES, EMPTY_BUFFER, GUID, kForOnEventAttribute, kListener, kStatusCode, kWebSocket, NOOP } = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/constants.js\");\nconst { EventTarget: { addEventListener, removeEventListener } } = __webpack_require__(/*! ./event-target */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/event-target.js\");\nconst { format, parse } = __webpack_require__(/*! ./extension */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/extension.js\");\nconst { toBuffer } = __webpack_require__(/*! ./buffer-util */ \"(rsc)/./node_modules/ethers/node_modules/ws/lib/buffer-util.js\");\nconst readyStates = [\n    \"CONNECTING\",\n    \"OPEN\",\n    \"CLOSING\",\n    \"CLOSED\"\n];\nconst subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\nconst protocolVersions = [\n    8,\n    13\n];\nconst closeTimeout = 30 * 1000;\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */ class WebSocket extends EventEmitter {\n    /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */ constructor(address, protocols, options){\n        super();\n        this._binaryType = BINARY_TYPES[0];\n        this._closeCode = 1006;\n        this._closeFrameReceived = false;\n        this._closeFrameSent = false;\n        this._closeMessage = EMPTY_BUFFER;\n        this._closeTimer = null;\n        this._extensions = {};\n        this._paused = false;\n        this._protocol = \"\";\n        this._readyState = WebSocket.CONNECTING;\n        this._receiver = null;\n        this._sender = null;\n        this._socket = null;\n        if (address !== null) {\n            this._bufferedAmount = 0;\n            this._isServer = false;\n            this._redirects = 0;\n            if (protocols === undefined) {\n                protocols = [];\n            } else if (!Array.isArray(protocols)) {\n                if (typeof protocols === \"object\" && protocols !== null) {\n                    options = protocols;\n                    protocols = [];\n                } else {\n                    protocols = [\n                        protocols\n                    ];\n                }\n            }\n            initAsClient(this, address, protocols, options);\n        } else {\n            this._isServer = true;\n        }\n    }\n    /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */ get binaryType() {\n        return this._binaryType;\n    }\n    set binaryType(type) {\n        if (!BINARY_TYPES.includes(type)) return;\n        this._binaryType = type;\n        //\n        // Allow to change `binaryType` on the fly.\n        //\n        if (this._receiver) this._receiver._binaryType = type;\n    }\n    /**\n   * @type {Number}\n   */ get bufferedAmount() {\n        if (!this._socket) return this._bufferedAmount;\n        return this._socket._writableState.length + this._sender._bufferedBytes;\n    }\n    /**\n   * @type {String}\n   */ get extensions() {\n        return Object.keys(this._extensions).join();\n    }\n    /**\n   * @type {Boolean}\n   */ get isPaused() {\n        return this._paused;\n    }\n    /**\n   * @type {Function}\n   */ /* istanbul ignore next */ get onclose() {\n        return null;\n    }\n    /**\n   * @type {Function}\n   */ /* istanbul ignore next */ get onerror() {\n        return null;\n    }\n    /**\n   * @type {Function}\n   */ /* istanbul ignore next */ get onopen() {\n        return null;\n    }\n    /**\n   * @type {Function}\n   */ /* istanbul ignore next */ get onmessage() {\n        return null;\n    }\n    /**\n   * @type {String}\n   */ get protocol() {\n        return this._protocol;\n    }\n    /**\n   * @type {Number}\n   */ get readyState() {\n        return this._readyState;\n    }\n    /**\n   * @type {String}\n   */ get url() {\n        return this._url;\n    }\n    /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Object} options Options object\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @private\n   */ setSocket(socket, head, options) {\n        const receiver = new Receiver({\n            binaryType: this.binaryType,\n            extensions: this._extensions,\n            isServer: this._isServer,\n            maxPayload: options.maxPayload,\n            skipUTF8Validation: options.skipUTF8Validation\n        });\n        this._sender = new Sender(socket, this._extensions, options.generateMask);\n        this._receiver = receiver;\n        this._socket = socket;\n        receiver[kWebSocket] = this;\n        socket[kWebSocket] = this;\n        receiver.on(\"conclude\", receiverOnConclude);\n        receiver.on(\"drain\", receiverOnDrain);\n        receiver.on(\"error\", receiverOnError);\n        receiver.on(\"message\", receiverOnMessage);\n        receiver.on(\"ping\", receiverOnPing);\n        receiver.on(\"pong\", receiverOnPong);\n        socket.setTimeout(0);\n        socket.setNoDelay();\n        if (head.length > 0) socket.unshift(head);\n        socket.on(\"close\", socketOnClose);\n        socket.on(\"data\", socketOnData);\n        socket.on(\"end\", socketOnEnd);\n        socket.on(\"error\", socketOnError);\n        this._readyState = WebSocket.OPEN;\n        this.emit(\"open\");\n    }\n    /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */ emitClose() {\n        if (!this._socket) {\n            this._readyState = WebSocket.CLOSED;\n            this.emit(\"close\", this._closeCode, this._closeMessage);\n            return;\n        }\n        if (this._extensions[PerMessageDeflate.extensionName]) {\n            this._extensions[PerMessageDeflate.extensionName].cleanup();\n        }\n        this._receiver.removeAllListeners();\n        this._readyState = WebSocket.CLOSED;\n        this.emit(\"close\", this._closeCode, this._closeMessage);\n    }\n    /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {(String|Buffer)} [data] The reason why the connection is\n   *     closing\n   * @public\n   */ close(code, data) {\n        if (this.readyState === WebSocket.CLOSED) return;\n        if (this.readyState === WebSocket.CONNECTING) {\n            const msg = \"WebSocket was closed before the connection was established\";\n            return abortHandshake(this, this._req, msg);\n        }\n        if (this.readyState === WebSocket.CLOSING) {\n            if (this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted)) {\n                this._socket.end();\n            }\n            return;\n        }\n        this._readyState = WebSocket.CLOSING;\n        this._sender.close(code, data, !this._isServer, (err)=>{\n            //\n            // This error is handled by the `'error'` listener on the socket. We only\n            // want to know if the close frame has been sent here.\n            //\n            if (err) return;\n            this._closeFrameSent = true;\n            if (this._closeFrameReceived || this._receiver._writableState.errorEmitted) {\n                this._socket.end();\n            }\n        });\n        //\n        // Specify a timeout for the closing handshake to complete.\n        //\n        this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), closeTimeout);\n    }\n    /**\n   * Pause the socket.\n   *\n   * @public\n   */ pause() {\n        if (this.readyState === WebSocket.CONNECTING || this.readyState === WebSocket.CLOSED) {\n            return;\n        }\n        this._paused = true;\n        this._socket.pause();\n    }\n    /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */ ping(data, mask, cb) {\n        if (this.readyState === WebSocket.CONNECTING) {\n            throw new Error(\"WebSocket is not open: readyState 0 (CONNECTING)\");\n        }\n        if (typeof data === \"function\") {\n            cb = data;\n            data = mask = undefined;\n        } else if (typeof mask === \"function\") {\n            cb = mask;\n            mask = undefined;\n        }\n        if (typeof data === \"number\") data = data.toString();\n        if (this.readyState !== WebSocket.OPEN) {\n            sendAfterClose(this, data, cb);\n            return;\n        }\n        if (mask === undefined) mask = !this._isServer;\n        this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n    }\n    /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */ pong(data, mask, cb) {\n        if (this.readyState === WebSocket.CONNECTING) {\n            throw new Error(\"WebSocket is not open: readyState 0 (CONNECTING)\");\n        }\n        if (typeof data === \"function\") {\n            cb = data;\n            data = mask = undefined;\n        } else if (typeof mask === \"function\") {\n            cb = mask;\n            mask = undefined;\n        }\n        if (typeof data === \"number\") data = data.toString();\n        if (this.readyState !== WebSocket.OPEN) {\n            sendAfterClose(this, data, cb);\n            return;\n        }\n        if (mask === undefined) mask = !this._isServer;\n        this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n    }\n    /**\n   * Resume the socket.\n   *\n   * @public\n   */ resume() {\n        if (this.readyState === WebSocket.CONNECTING || this.readyState === WebSocket.CLOSED) {\n            return;\n        }\n        this._paused = false;\n        if (!this._receiver._writableState.needDrain) this._socket.resume();\n    }\n    /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */ send(data, options, cb) {\n        if (this.readyState === WebSocket.CONNECTING) {\n            throw new Error(\"WebSocket is not open: readyState 0 (CONNECTING)\");\n        }\n        if (typeof options === \"function\") {\n            cb = options;\n            options = {};\n        }\n        if (typeof data === \"number\") data = data.toString();\n        if (this.readyState !== WebSocket.OPEN) {\n            sendAfterClose(this, data, cb);\n            return;\n        }\n        const opts = {\n            binary: typeof data !== \"string\",\n            mask: !this._isServer,\n            compress: true,\n            fin: true,\n            ...options\n        };\n        if (!this._extensions[PerMessageDeflate.extensionName]) {\n            opts.compress = false;\n        }\n        this._sender.send(data || EMPTY_BUFFER, opts, cb);\n    }\n    /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */ terminate() {\n        if (this.readyState === WebSocket.CLOSED) return;\n        if (this.readyState === WebSocket.CONNECTING) {\n            const msg = \"WebSocket was closed before the connection was established\";\n            return abortHandshake(this, this._req, msg);\n        }\n        if (this._socket) {\n            this._readyState = WebSocket.CLOSING;\n            this._socket.destroy();\n        }\n    }\n}\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */ Object.defineProperty(WebSocket, \"CONNECTING\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CONNECTING\")\n});\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */ Object.defineProperty(WebSocket.prototype, \"CONNECTING\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CONNECTING\")\n});\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */ Object.defineProperty(WebSocket, \"OPEN\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"OPEN\")\n});\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */ Object.defineProperty(WebSocket.prototype, \"OPEN\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"OPEN\")\n});\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */ Object.defineProperty(WebSocket, \"CLOSING\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CLOSING\")\n});\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */ Object.defineProperty(WebSocket.prototype, \"CLOSING\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CLOSING\")\n});\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */ Object.defineProperty(WebSocket, \"CLOSED\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CLOSED\")\n});\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */ Object.defineProperty(WebSocket.prototype, \"CLOSED\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CLOSED\")\n});\n[\n    \"binaryType\",\n    \"bufferedAmount\",\n    \"extensions\",\n    \"isPaused\",\n    \"protocol\",\n    \"readyState\",\n    \"url\"\n].forEach((property)=>{\n    Object.defineProperty(WebSocket.prototype, property, {\n        enumerable: true\n    });\n});\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n[\n    \"open\",\n    \"error\",\n    \"close\",\n    \"message\"\n].forEach((method)=>{\n    Object.defineProperty(WebSocket.prototype, `on${method}`, {\n        enumerable: true,\n        get () {\n            for (const listener of this.listeners(method)){\n                if (listener[kForOnEventAttribute]) return listener[kListener];\n            }\n            return null;\n        },\n        set (handler) {\n            for (const listener of this.listeners(method)){\n                if (listener[kForOnEventAttribute]) {\n                    this.removeListener(method, listener);\n                    break;\n                }\n            }\n            if (typeof handler !== \"function\") return;\n            this.addEventListener(method, handler, {\n                [kForOnEventAttribute]: true\n            });\n        }\n    });\n});\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\nmodule.exports = WebSocket;\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {Array} protocols The subprotocols\n * @param {Object} [options] Connection options\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Function} [options.generateMask] The function used to generate the\n *     masking key\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n *     not to skip UTF-8 validation for text and close messages\n * @private\n */ function initAsClient(websocket, address, protocols, options) {\n    const opts = {\n        protocolVersion: protocolVersions[1],\n        maxPayload: 100 * 1024 * 1024,\n        skipUTF8Validation: false,\n        perMessageDeflate: true,\n        followRedirects: false,\n        maxRedirects: 10,\n        ...options,\n        createConnection: undefined,\n        socketPath: undefined,\n        hostname: undefined,\n        protocol: undefined,\n        timeout: undefined,\n        method: undefined,\n        host: undefined,\n        path: undefined,\n        port: undefined\n    };\n    if (!protocolVersions.includes(opts.protocolVersion)) {\n        throw new RangeError(`Unsupported protocol version: ${opts.protocolVersion} ` + `(supported versions: ${protocolVersions.join(\", \")})`);\n    }\n    let parsedUrl;\n    if (address instanceof URL) {\n        parsedUrl = address;\n        websocket._url = address.href;\n    } else {\n        try {\n            parsedUrl = new URL(address);\n        } catch (e) {\n            throw new SyntaxError(`Invalid URL: ${address}`);\n        }\n        websocket._url = address;\n    }\n    const isSecure = parsedUrl.protocol === \"wss:\";\n    const isUnixSocket = parsedUrl.protocol === \"ws+unix:\";\n    let invalidURLMessage;\n    if (parsedUrl.protocol !== \"ws:\" && !isSecure && !isUnixSocket) {\n        invalidURLMessage = 'The URL\\'s protocol must be one of \"ws:\", \"wss:\", or \"ws+unix:\"';\n    } else if (isUnixSocket && !parsedUrl.pathname) {\n        invalidURLMessage = \"The URL's pathname is empty\";\n    } else if (parsedUrl.hash) {\n        invalidURLMessage = \"The URL contains a fragment identifier\";\n    }\n    if (invalidURLMessage) {\n        const err = new SyntaxError(invalidURLMessage);\n        if (websocket._redirects === 0) {\n            throw err;\n        } else {\n            emitErrorAndClose(websocket, err);\n            return;\n        }\n    }\n    const defaultPort = isSecure ? 443 : 80;\n    const key = randomBytes(16).toString(\"base64\");\n    const get = isSecure ? https.get : http.get;\n    const protocolSet = new Set();\n    let perMessageDeflate;\n    opts.createConnection = isSecure ? tlsConnect : netConnect;\n    opts.defaultPort = opts.defaultPort || defaultPort;\n    opts.port = parsedUrl.port || defaultPort;\n    opts.host = parsedUrl.hostname.startsWith(\"[\") ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;\n    opts.headers = {\n        \"Sec-WebSocket-Version\": opts.protocolVersion,\n        \"Sec-WebSocket-Key\": key,\n        Connection: \"Upgrade\",\n        Upgrade: \"websocket\",\n        ...opts.headers\n    };\n    opts.path = parsedUrl.pathname + parsedUrl.search;\n    opts.timeout = opts.handshakeTimeout;\n    if (opts.perMessageDeflate) {\n        perMessageDeflate = new PerMessageDeflate(opts.perMessageDeflate !== true ? opts.perMessageDeflate : {}, false, opts.maxPayload);\n        opts.headers[\"Sec-WebSocket-Extensions\"] = format({\n            [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n        });\n    }\n    if (protocols.length) {\n        for (const protocol of protocols){\n            if (typeof protocol !== \"string\" || !subprotocolRegex.test(protocol) || protocolSet.has(protocol)) {\n                throw new SyntaxError(\"An invalid or duplicated subprotocol was specified\");\n            }\n            protocolSet.add(protocol);\n        }\n        opts.headers[\"Sec-WebSocket-Protocol\"] = protocols.join(\",\");\n    }\n    if (opts.origin) {\n        if (opts.protocolVersion < 13) {\n            opts.headers[\"Sec-WebSocket-Origin\"] = opts.origin;\n        } else {\n            opts.headers.Origin = opts.origin;\n        }\n    }\n    if (parsedUrl.username || parsedUrl.password) {\n        opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n    }\n    if (isUnixSocket) {\n        const parts = opts.path.split(\":\");\n        opts.socketPath = parts[0];\n        opts.path = parts[1];\n    }\n    if (opts.followRedirects) {\n        if (websocket._redirects === 0) {\n            websocket._originalHost = parsedUrl.host;\n            const headers = options && options.headers;\n            //\n            // Shallow copy the user provided options so that headers can be changed\n            // without mutating the original object.\n            //\n            options = {\n                ...options,\n                headers: {}\n            };\n            if (headers) {\n                for (const [key, value] of Object.entries(headers)){\n                    options.headers[key.toLowerCase()] = value;\n                }\n            }\n        } else if (parsedUrl.host !== websocket._originalHost) {\n            //\n            // Match curl 7.77.0 behavior and drop the following headers. These\n            // headers are also dropped when following a redirect to a subdomain.\n            //\n            delete opts.headers.authorization;\n            delete opts.headers.cookie;\n            delete opts.headers.host;\n            opts.auth = undefined;\n        }\n        //\n        // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n        // If the `Authorization` header is set, then there is nothing to do as it\n        // will take precedence.\n        //\n        if (opts.auth && !options.headers.authorization) {\n            options.headers.authorization = \"Basic \" + Buffer.from(opts.auth).toString(\"base64\");\n        }\n    }\n    let req = websocket._req = get(opts);\n    if (opts.timeout) {\n        req.on(\"timeout\", ()=>{\n            abortHandshake(websocket, req, \"Opening handshake has timed out\");\n        });\n    }\n    req.on(\"error\", (err)=>{\n        if (req === null || req.aborted) return;\n        req = websocket._req = null;\n        emitErrorAndClose(websocket, err);\n    });\n    req.on(\"response\", (res)=>{\n        const location = res.headers.location;\n        const statusCode = res.statusCode;\n        if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {\n            if (++websocket._redirects > opts.maxRedirects) {\n                abortHandshake(websocket, req, \"Maximum redirects exceeded\");\n                return;\n            }\n            req.abort();\n            let addr;\n            try {\n                addr = new URL(location, address);\n            } catch (e) {\n                const err = new SyntaxError(`Invalid URL: ${location}`);\n                emitErrorAndClose(websocket, err);\n                return;\n            }\n            initAsClient(websocket, addr, protocols, options);\n        } else if (!websocket.emit(\"unexpected-response\", req, res)) {\n            abortHandshake(websocket, req, `Unexpected server response: ${res.statusCode}`);\n        }\n    });\n    req.on(\"upgrade\", (res, socket, head)=>{\n        websocket.emit(\"upgrade\", res);\n        //\n        // The user may have closed the connection from a listener of the `upgrade`\n        // event.\n        //\n        if (websocket.readyState !== WebSocket.CONNECTING) return;\n        req = websocket._req = null;\n        const digest = createHash(\"sha1\").update(key + GUID).digest(\"base64\");\n        if (res.headers[\"sec-websocket-accept\"] !== digest) {\n            abortHandshake(websocket, socket, \"Invalid Sec-WebSocket-Accept header\");\n            return;\n        }\n        const serverProt = res.headers[\"sec-websocket-protocol\"];\n        let protError;\n        if (serverProt !== undefined) {\n            if (!protocolSet.size) {\n                protError = \"Server sent a subprotocol but none was requested\";\n            } else if (!protocolSet.has(serverProt)) {\n                protError = \"Server sent an invalid subprotocol\";\n            }\n        } else if (protocolSet.size) {\n            protError = \"Server sent no subprotocol\";\n        }\n        if (protError) {\n            abortHandshake(websocket, socket, protError);\n            return;\n        }\n        if (serverProt) websocket._protocol = serverProt;\n        const secWebSocketExtensions = res.headers[\"sec-websocket-extensions\"];\n        if (secWebSocketExtensions !== undefined) {\n            if (!perMessageDeflate) {\n                const message = \"Server sent a Sec-WebSocket-Extensions header but no extension \" + \"was requested\";\n                abortHandshake(websocket, socket, message);\n                return;\n            }\n            let extensions;\n            try {\n                extensions = parse(secWebSocketExtensions);\n            } catch (err) {\n                const message = \"Invalid Sec-WebSocket-Extensions header\";\n                abortHandshake(websocket, socket, message);\n                return;\n            }\n            const extensionNames = Object.keys(extensions);\n            if (extensionNames.length !== 1 || extensionNames[0] !== PerMessageDeflate.extensionName) {\n                const message = \"Server indicated an extension that was not requested\";\n                abortHandshake(websocket, socket, message);\n                return;\n            }\n            try {\n                perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n            } catch (err) {\n                const message = \"Invalid Sec-WebSocket-Extensions header\";\n                abortHandshake(websocket, socket, message);\n                return;\n            }\n            websocket._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n        websocket.setSocket(socket, head, {\n            generateMask: opts.generateMask,\n            maxPayload: opts.maxPayload,\n            skipUTF8Validation: opts.skipUTF8Validation\n        });\n    });\n}\n/**\n * Emit the `'error'` and `'close'` event.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {Error} The error to emit\n * @private\n */ function emitErrorAndClose(websocket, err) {\n    websocket._readyState = WebSocket.CLOSING;\n    websocket.emit(\"error\", err);\n    websocket.emitClose();\n}\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */ function netConnect(options) {\n    options.path = options.socketPath;\n    return net.connect(options);\n}\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */ function tlsConnect(options) {\n    options.path = undefined;\n    if (!options.servername && options.servername !== \"\") {\n        options.servername = net.isIP(options.host) ? \"\" : options.host;\n    }\n    return tls.connect(options);\n}\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */ function abortHandshake(websocket, stream, message) {\n    websocket._readyState = WebSocket.CLOSING;\n    const err = new Error(message);\n    Error.captureStackTrace(err, abortHandshake);\n    if (stream.setHeader) {\n        stream.abort();\n        if (stream.socket && !stream.socket.destroyed) {\n            //\n            // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n            // called after the request completed. See\n            // https://github.com/websockets/ws/issues/1869.\n            //\n            stream.socket.destroy();\n        }\n        stream.once(\"abort\", websocket.emitClose.bind(websocket));\n        websocket.emit(\"error\", err);\n    } else {\n        stream.destroy(err);\n        stream.once(\"error\", websocket.emit.bind(websocket, \"error\"));\n        stream.once(\"close\", websocket.emitClose.bind(websocket));\n    }\n}\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */ function sendAfterClose(websocket, data, cb) {\n    if (data) {\n        const length = toBuffer(data).length;\n        //\n        // The `_bufferedAmount` property is used only when the peer is a client and\n        // the opening handshake fails. Under these circumstances, in fact, the\n        // `setSocket()` method is not called, so the `_socket` and `_sender`\n        // properties are set to `null`.\n        //\n        if (websocket._socket) websocket._sender._bufferedBytes += length;\n        else websocket._bufferedAmount += length;\n    }\n    if (cb) {\n        const err = new Error(`WebSocket is not open: readyState ${websocket.readyState} ` + `(${readyStates[websocket.readyState]})`);\n        cb(err);\n    }\n}\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {Buffer} reason The reason for closing\n * @private\n */ function receiverOnConclude(code, reason) {\n    const websocket = this[kWebSocket];\n    websocket._closeFrameReceived = true;\n    websocket._closeMessage = reason;\n    websocket._closeCode = code;\n    if (websocket._socket[kWebSocket] === undefined) return;\n    websocket._socket.removeListener(\"data\", socketOnData);\n    process.nextTick(resume, websocket._socket);\n    if (code === 1005) websocket.close();\n    else websocket.close(code, reason);\n}\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */ function receiverOnDrain() {\n    const websocket = this[kWebSocket];\n    if (!websocket.isPaused) websocket._socket.resume();\n}\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */ function receiverOnError(err) {\n    const websocket = this[kWebSocket];\n    if (websocket._socket[kWebSocket] !== undefined) {\n        websocket._socket.removeListener(\"data\", socketOnData);\n        //\n        // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n        // https://github.com/websockets/ws/issues/1940.\n        //\n        process.nextTick(resume, websocket._socket);\n        websocket.close(err[kStatusCode]);\n    }\n    websocket.emit(\"error\", err);\n}\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */ function receiverOnFinish() {\n    this[kWebSocket].emitClose();\n}\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\n * @param {Boolean} isBinary Specifies whether the message is binary or not\n * @private\n */ function receiverOnMessage(data, isBinary) {\n    this[kWebSocket].emit(\"message\", data, isBinary);\n}\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */ function receiverOnPing(data) {\n    const websocket = this[kWebSocket];\n    websocket.pong(data, !websocket._isServer, NOOP);\n    websocket.emit(\"ping\", data);\n}\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */ function receiverOnPong(data) {\n    this[kWebSocket].emit(\"pong\", data);\n}\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */ function resume(stream) {\n    stream.resume();\n}\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */ function socketOnClose() {\n    const websocket = this[kWebSocket];\n    this.removeListener(\"close\", socketOnClose);\n    this.removeListener(\"data\", socketOnData);\n    this.removeListener(\"end\", socketOnEnd);\n    websocket._readyState = WebSocket.CLOSING;\n    let chunk;\n    //\n    // The close frame might not have been received or the `'end'` event emitted,\n    // for example, if the socket was destroyed due to an error. Ensure that the\n    // `receiver` stream is closed after writing any remaining buffered data to\n    // it. If the readable side of the socket is in flowing mode then there is no\n    // buffered data as everything has been already written and `readable.read()`\n    // will return `null`. If instead, the socket is paused, any possible buffered\n    // data will be read as a single chunk.\n    //\n    if (!this._readableState.endEmitted && !websocket._closeFrameReceived && !websocket._receiver._writableState.errorEmitted && (chunk = websocket._socket.read()) !== null) {\n        websocket._receiver.write(chunk);\n    }\n    websocket._receiver.end();\n    this[kWebSocket] = undefined;\n    clearTimeout(websocket._closeTimer);\n    if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {\n        websocket.emitClose();\n    } else {\n        websocket._receiver.on(\"error\", receiverOnFinish);\n        websocket._receiver.on(\"finish\", receiverOnFinish);\n    }\n}\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */ function socketOnData(chunk) {\n    if (!this[kWebSocket]._receiver.write(chunk)) {\n        this.pause();\n    }\n}\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */ function socketOnEnd() {\n    const websocket = this[kWebSocket];\n    websocket._readyState = WebSocket.CLOSING;\n    websocket._receiver.end();\n    this.end();\n}\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */ function socketOnError() {\n    const websocket = this[kWebSocket];\n    this.removeListener(\"error\", socketOnError);\n    this.on(\"error\", NOOP);\n    if (websocket) {\n        websocket._readyState = WebSocket.CLOSING;\n        this.destroy();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/ws/lib/websocket.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/_version.js":
/*!******************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/_version.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/* Do NOT modify this file; see /src.ts/_admin/update-version.ts */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.version = void 0;\n/**\n *  The current version of Ethers.\n */ exports.version = \"6.8.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGlFQUFpRSxHQUNqRUEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGVBQWUsR0FBRyxLQUFLO0FBQ3ZCOztDQUVDLEdBQ0RBLGVBQWUsR0FBRyxTQUNsQixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9fdmVyc2lvbi5qcz9lZDJjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogRG8gTk9UIG1vZGlmeSB0aGlzIGZpbGU7IHNlZSAvc3JjLnRzL19hZG1pbi91cGRhdGUtdmVyc2lvbi50cyAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy52ZXJzaW9uID0gdm9pZCAwO1xuLyoqXG4gKiAgVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBFdGhlcnMuXG4gKi9cbmV4cG9ydHMudmVyc2lvbiA9IFwiNi44LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInZlcnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/_version.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/abi/abi-coder.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/abi/abi-coder.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  When sending values to or receiving values from a [[Contract]], the\n *  data is generally encoded using the [ABI standard](link-solc-abi).\n *\n *  The AbiCoder provides a utility to encode values to ABI data and\n *  decode values from ABI data.\n *\n *  Most of the time, developers should favour the [[Contract]] class,\n *  which further abstracts a lot of the finer details of ABI data.\n *\n *  @_section api/abi/abi-coder:ABI Encoding\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AbiCoder = void 0;\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst abstract_coder_js_1 = __webpack_require__(/*! ./coders/abstract-coder.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js\");\nconst address_js_1 = __webpack_require__(/*! ./coders/address.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/address.js\");\nconst array_js_1 = __webpack_require__(/*! ./coders/array.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/array.js\");\nconst boolean_js_1 = __webpack_require__(/*! ./coders/boolean.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/boolean.js\");\nconst bytes_js_1 = __webpack_require__(/*! ./coders/bytes.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/bytes.js\");\nconst fixed_bytes_js_1 = __webpack_require__(/*! ./coders/fixed-bytes.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/fixed-bytes.js\");\nconst null_js_1 = __webpack_require__(/*! ./coders/null.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/null.js\");\nconst number_js_1 = __webpack_require__(/*! ./coders/number.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/number.js\");\nconst string_js_1 = __webpack_require__(/*! ./coders/string.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/string.js\");\nconst tuple_js_1 = __webpack_require__(/*! ./coders/tuple.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/tuple.js\");\nconst fragments_js_1 = __webpack_require__(/*! ./fragments.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/fragments.js\");\nconst index_js_2 = __webpack_require__(/*! ../address/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/index.js\");\nconst index_js_3 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\n// https://docs.soliditylang.org/en/v0.8.17/control-structures.html\nconst PanicReasons = new Map();\nPanicReasons.set(0x00, \"GENERIC_PANIC\");\nPanicReasons.set(0x01, \"ASSERT_FALSE\");\nPanicReasons.set(0x11, \"OVERFLOW\");\nPanicReasons.set(0x12, \"DIVIDE_BY_ZERO\");\nPanicReasons.set(0x21, \"ENUM_RANGE_ERROR\");\nPanicReasons.set(0x22, \"BAD_STORAGE_DATA\");\nPanicReasons.set(0x31, \"STACK_UNDERFLOW\");\nPanicReasons.set(0x32, \"ARRAY_RANGE_ERROR\");\nPanicReasons.set(0x41, \"OUT_OF_MEMORY\");\nPanicReasons.set(0x51, \"UNINITIALIZED_FUNCTION_CALL\");\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nlet defaultCoder = null;\nfunction getBuiltinCallException(action, tx, data, abiCoder) {\n    let message = \"missing revert data\";\n    let reason = null;\n    const invocation = null;\n    let revert = null;\n    if (data) {\n        message = \"execution reverted\";\n        const bytes = (0, index_js_3.getBytes)(data);\n        data = (0, index_js_3.hexlify)(data);\n        if (bytes.length === 0) {\n            message += \" (no data present; likely require(false) occurred\";\n            reason = \"require(false)\";\n        } else if (bytes.length % 32 !== 4) {\n            message += \" (could not decode reason; invalid data length)\";\n        } else if ((0, index_js_3.hexlify)(bytes.slice(0, 4)) === \"0x08c379a0\") {\n            // Error(string)\n            try {\n                reason = abiCoder.decode([\n                    \"string\"\n                ], bytes.slice(4))[0];\n                revert = {\n                    signature: \"Error(string)\",\n                    name: \"Error\",\n                    args: [\n                        reason\n                    ]\n                };\n                message += `: ${JSON.stringify(reason)}`;\n            } catch (error) {\n                message += \" (could not decode reason; invalid string data)\";\n            }\n        } else if ((0, index_js_3.hexlify)(bytes.slice(0, 4)) === \"0x4e487b71\") {\n            // Panic(uint256)\n            try {\n                const code = Number(abiCoder.decode([\n                    \"uint256\"\n                ], bytes.slice(4))[0]);\n                revert = {\n                    signature: \"Panic(uint256)\",\n                    name: \"Panic\",\n                    args: [\n                        code\n                    ]\n                };\n                reason = `Panic due to ${PanicReasons.get(code) || \"UNKNOWN\"}(${code})`;\n                message += `: ${reason}`;\n            } catch (error) {\n                message += \" (could not decode panic code)\";\n            }\n        } else {\n            message += \" (unknown custom error)\";\n        }\n    }\n    const transaction = {\n        to: tx.to ? (0, index_js_2.getAddress)(tx.to) : null,\n        data: tx.data || \"0x\"\n    };\n    if (tx.from) {\n        transaction.from = (0, index_js_2.getAddress)(tx.from);\n    }\n    return (0, index_js_3.makeError)(message, \"CALL_EXCEPTION\", {\n        action,\n        data,\n        reason,\n        transaction,\n        invocation,\n        revert\n    });\n}\n/**\n *  The **AbiCoder** is a low-level class responsible for encoding JavaScript\n *  values into binary data and decoding binary data into JavaScript values.\n */ class AbiCoder {\n    #getCoder(param) {\n        if (param.isArray()) {\n            return new array_js_1.ArrayCoder(this.#getCoder(param.arrayChildren), param.arrayLength, param.name);\n        }\n        if (param.isTuple()) {\n            return new tuple_js_1.TupleCoder(param.components.map((c)=>this.#getCoder(c)), param.name);\n        }\n        switch(param.baseType){\n            case \"address\":\n                return new address_js_1.AddressCoder(param.name);\n            case \"bool\":\n                return new boolean_js_1.BooleanCoder(param.name);\n            case \"string\":\n                return new string_js_1.StringCoder(param.name);\n            case \"bytes\":\n                return new bytes_js_1.BytesCoder(param.name);\n            case \"\":\n                return new null_js_1.NullCoder(param.name);\n        }\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            (0, index_js_1.assertArgument)(size !== 0 && size <= 256 && size % 8 === 0, \"invalid \" + match[1] + \" bit length\", \"param\", param);\n            return new number_js_1.NumberCoder(size / 8, match[1] === \"int\", param.name);\n        }\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            (0, index_js_1.assertArgument)(size !== 0 && size <= 32, \"invalid bytes length\", \"param\", param);\n            return new fixed_bytes_js_1.FixedBytesCoder(size, param.name);\n        }\n        (0, index_js_1.assertArgument)(false, \"invalid type\", \"type\", param.type);\n    }\n    /**\n     *  Get the default values for the given %%types%%.\n     *\n     *  For example, a ``uint`` is by default ``0`` and ``bool``\n     *  is by default ``false``.\n     */ getDefaultValue(types) {\n        const coders = types.map((type)=>this.#getCoder(fragments_js_1.ParamType.from(type)));\n        const coder = new tuple_js_1.TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n    /**\n     *  Encode the %%values%% as the %%types%% into ABI data.\n     *\n     *  @returns DataHexstring\n     */ encode(types, values) {\n        (0, index_js_1.assertArgumentCount)(values.length, types.length, \"types/values length mismatch\");\n        const coders = types.map((type)=>this.#getCoder(fragments_js_1.ParamType.from(type)));\n        const coder = new tuple_js_1.TupleCoder(coders, \"_\");\n        const writer = new abstract_coder_js_1.Writer();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n    /**\n     *  Decode the ABI %%data%% as the %%types%% into values.\n     *\n     *  If %%loose%% decoding is enabled, then strict padding is\n     *  not enforced. Some older versions of Solidity incorrectly\n     *  padded event data emitted from ``external`` functions.\n     */ decode(types, data, loose) {\n        const coders = types.map((type)=>this.#getCoder(fragments_js_1.ParamType.from(type)));\n        const coder = new tuple_js_1.TupleCoder(coders, \"_\");\n        return coder.decode(new abstract_coder_js_1.Reader(data, loose));\n    }\n    /**\n     *  Returns the shared singleton instance of a default [[AbiCoder]].\n     *\n     *  On the first call, the instance is created internally.\n     */ static defaultAbiCoder() {\n        if (defaultCoder == null) {\n            defaultCoder = new AbiCoder();\n        }\n        return defaultCoder;\n    }\n    /**\n     *  Returns an ethers-compatible [[CallExceptionError]] Error for the given\n     *  result %%data%% for the [[CallExceptionAction]] %%action%% against\n     *  the Transaction %%tx%%.\n     */ static getBuiltinCallException(action, tx, data) {\n        return getBuiltinCallException(action, tx, data, AbiCoder.defaultAbiCoder());\n    }\n}\nexports.AbiCoder = AbiCoder; //# sourceMappingURL=abi-coder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/abi/abi-coder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/abi/bytes32.js":
/*!*********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/abi/bytes32.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  About bytes32 strings...\n *\n *  @_docloc: api/utils:Bytes32 Strings\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decodeBytes32String = exports.encodeBytes32String = void 0;\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\n/**\n *  Encodes %%text%% as a Bytes32 string.\n */ function encodeBytes32String(text) {\n    // Get the bytes\n    const bytes = (0, index_js_1.toUtf8Bytes)(text);\n    // Check we have room for null-termination\n    if (bytes.length > 31) {\n        throw new Error(\"bytes32 string must be less than 32 bytes\");\n    }\n    // Zero-pad (implicitly null-terminates)\n    return (0, index_js_1.zeroPadBytes)(bytes, 32);\n}\nexports.encodeBytes32String = encodeBytes32String;\n/**\n *  Encodes the Bytes32-encoded %%bytes%% into a string.\n */ function decodeBytes32String(_bytes) {\n    const data = (0, index_js_1.getBytes)(_bytes, \"bytes\");\n    // Must be 32 bytes with a null-termination\n    if (data.length !== 32) {\n        throw new Error(\"invalid bytes32 - not 32 bytes long\");\n    }\n    if (data[31] !== 0) {\n        throw new Error(\"invalid bytes32 string - no null terminator\");\n    }\n    // Find the null termination\n    let length = 31;\n    while(data[length - 1] === 0){\n        length--;\n    }\n    // Determine the string value\n    return (0, index_js_1.toUtf8String)(data.slice(0, length));\n}\nexports.decodeBytes32String = decodeBytes32String; //# sourceMappingURL=bytes32.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9hYmkvYnl0ZXMzMi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7O0NBSUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHQSwyQkFBMkIsR0FBRyxLQUFLO0FBQ2pFLE1BQU1JLGFBQWFDLG1CQUFPQSxDQUFDLGtGQUFtQjtBQUM5Qzs7Q0FFQyxHQUNELFNBQVNGLG9CQUFvQkcsSUFBSTtJQUM3QixnQkFBZ0I7SUFDaEIsTUFBTUMsUUFBUSxDQUFDLEdBQUdILFdBQVdJLFdBQVcsRUFBRUY7SUFDMUMsMENBQTBDO0lBQzFDLElBQUlDLE1BQU1FLE1BQU0sR0FBRyxJQUFJO1FBQ25CLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtJQUNBLHdDQUF3QztJQUN4QyxPQUFPLENBQUMsR0FBR04sV0FBV08sWUFBWSxFQUFFSixPQUFPO0FBQy9DO0FBQ0FQLDJCQUEyQixHQUFHRztBQUM5Qjs7Q0FFQyxHQUNELFNBQVNELG9CQUFvQlUsTUFBTTtJQUMvQixNQUFNQyxPQUFPLENBQUMsR0FBR1QsV0FBV1UsUUFBUSxFQUFFRixRQUFRO0lBQzlDLDJDQUEyQztJQUMzQyxJQUFJQyxLQUFLSixNQUFNLEtBQUssSUFBSTtRQUNwQixNQUFNLElBQUlDLE1BQU07SUFDcEI7SUFDQSxJQUFJRyxJQUFJLENBQUMsR0FBRyxLQUFLLEdBQUc7UUFDaEIsTUFBTSxJQUFJSCxNQUFNO0lBQ3BCO0lBQ0EsNEJBQTRCO0lBQzVCLElBQUlELFNBQVM7SUFDYixNQUFPSSxJQUFJLENBQUNKLFNBQVMsRUFBRSxLQUFLLEVBQUc7UUFDM0JBO0lBQ0o7SUFDQSw2QkFBNkI7SUFDN0IsT0FBTyxDQUFDLEdBQUdMLFdBQVdXLFlBQVksRUFBRUYsS0FBS0csS0FBSyxDQUFDLEdBQUdQO0FBQ3REO0FBQ0FULDJCQUEyQixHQUFHRSxxQkFDOUIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvYWJpL2J5dGVzMzIuanM/ZTRmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogIEFib3V0IGJ5dGVzMzIgc3RyaW5ncy4uLlxuICpcbiAqICBAX2RvY2xvYzogYXBpL3V0aWxzOkJ5dGVzMzIgU3RyaW5nc1xuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlY29kZUJ5dGVzMzJTdHJpbmcgPSBleHBvcnRzLmVuY29kZUJ5dGVzMzJTdHJpbmcgPSB2b2lkIDA7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4uL3V0aWxzL2luZGV4LmpzXCIpO1xuLyoqXG4gKiAgRW5jb2RlcyAlJXRleHQlJSBhcyBhIEJ5dGVzMzIgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBlbmNvZGVCeXRlczMyU3RyaW5nKHRleHQpIHtcbiAgICAvLyBHZXQgdGhlIGJ5dGVzXG4gICAgY29uc3QgYnl0ZXMgPSAoMCwgaW5kZXhfanNfMS50b1V0ZjhCeXRlcykodGV4dCk7XG4gICAgLy8gQ2hlY2sgd2UgaGF2ZSByb29tIGZvciBudWxsLXRlcm1pbmF0aW9uXG4gICAgaWYgKGJ5dGVzLmxlbmd0aCA+IDMxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImJ5dGVzMzIgc3RyaW5nIG11c3QgYmUgbGVzcyB0aGFuIDMyIGJ5dGVzXCIpO1xuICAgIH1cbiAgICAvLyBaZXJvLXBhZCAoaW1wbGljaXRseSBudWxsLXRlcm1pbmF0ZXMpXG4gICAgcmV0dXJuICgwLCBpbmRleF9qc18xLnplcm9QYWRCeXRlcykoYnl0ZXMsIDMyKTtcbn1cbmV4cG9ydHMuZW5jb2RlQnl0ZXMzMlN0cmluZyA9IGVuY29kZUJ5dGVzMzJTdHJpbmc7XG4vKipcbiAqICBFbmNvZGVzIHRoZSBCeXRlczMyLWVuY29kZWQgJSVieXRlcyUlIGludG8gYSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGRlY29kZUJ5dGVzMzJTdHJpbmcoX2J5dGVzKSB7XG4gICAgY29uc3QgZGF0YSA9ICgwLCBpbmRleF9qc18xLmdldEJ5dGVzKShfYnl0ZXMsIFwiYnl0ZXNcIik7XG4gICAgLy8gTXVzdCBiZSAzMiBieXRlcyB3aXRoIGEgbnVsbC10ZXJtaW5hdGlvblxuICAgIGlmIChkYXRhLmxlbmd0aCAhPT0gMzIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBieXRlczMyIC0gbm90IDMyIGJ5dGVzIGxvbmdcIik7XG4gICAgfVxuICAgIGlmIChkYXRhWzMxXSAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGJ5dGVzMzIgc3RyaW5nIC0gbm8gbnVsbCB0ZXJtaW5hdG9yXCIpO1xuICAgIH1cbiAgICAvLyBGaW5kIHRoZSBudWxsIHRlcm1pbmF0aW9uXG4gICAgbGV0IGxlbmd0aCA9IDMxO1xuICAgIHdoaWxlIChkYXRhW2xlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICAgIGxlbmd0aC0tO1xuICAgIH1cbiAgICAvLyBEZXRlcm1pbmUgdGhlIHN0cmluZyB2YWx1ZVxuICAgIHJldHVybiAoMCwgaW5kZXhfanNfMS50b1V0ZjhTdHJpbmcpKGRhdGEuc2xpY2UoMCwgbGVuZ3RoKSk7XG59XG5leHBvcnRzLmRlY29kZUJ5dGVzMzJTdHJpbmcgPSBkZWNvZGVCeXRlczMyU3RyaW5nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ynl0ZXMzMi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWNvZGVCeXRlczMyU3RyaW5nIiwiZW5jb2RlQnl0ZXMzMlN0cmluZyIsImluZGV4X2pzXzEiLCJyZXF1aXJlIiwidGV4dCIsImJ5dGVzIiwidG9VdGY4Qnl0ZXMiLCJsZW5ndGgiLCJFcnJvciIsInplcm9QYWRCeXRlcyIsIl9ieXRlcyIsImRhdGEiLCJnZXRCeXRlcyIsInRvVXRmOFN0cmluZyIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/abi/bytes32.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js":
/*!***********************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Reader = exports.Writer = exports.Coder = exports.checkResultErrors = exports.Result = exports.WordSize = void 0;\nconst index_js_1 = __webpack_require__(/*! ../../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\n/**\n * @_ignore:\n */ exports.WordSize = 32;\nconst Padding = new Uint8Array(exports.WordSize);\n// Properties used to immediate pass through to the underlying object\n// - `then` is used to detect if an object is a Promise for await\nconst passProperties = [\n    \"then\"\n];\nconst _guard = {};\nfunction throwError(name, error) {\n    const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);\n    wrapped.error = error;\n    throw wrapped;\n}\n/**\n *  A [[Result]] is a sub-class of Array, which allows accessing any\n *  of its values either positionally by its index or, if keys are\n *  provided by its name.\n *\n *  @_docloc: api/abi\n */ class Result extends Array {\n    #names;\n    /**\n     *  @private\n     */ constructor(...args){\n        // To properly sub-class Array so the other built-in\n        // functions work, the constructor has to behave fairly\n        // well. So, in the event we are created via fromItems()\n        // we build the read-only Result object we want, but on\n        // any other input, we use the default constructor\n        // constructor(guard: any, items: Array<any>, keys?: Array<null | string>);\n        const guard = args[0];\n        let items = args[1];\n        let names = (args[2] || []).slice();\n        let wrap = true;\n        if (guard !== _guard) {\n            items = args;\n            names = [];\n            wrap = false;\n        }\n        // Can't just pass in ...items since an array of length 1\n        // is a special case in the super.\n        super(items.length);\n        items.forEach((item, index)=>{\n            this[index] = item;\n        });\n        // Find all unique keys\n        const nameCounts = names.reduce((accum, name)=>{\n            if (typeof name === \"string\") {\n                accum.set(name, (accum.get(name) || 0) + 1);\n            }\n            return accum;\n        }, new Map());\n        // Remove any key thats not unique\n        this.#names = Object.freeze(items.map((item, index)=>{\n            const name = names[index];\n            if (name != null && nameCounts.get(name) === 1) {\n                return name;\n            }\n            return null;\n        }));\n        if (!wrap) {\n            return;\n        }\n        // A wrapped Result is immutable\n        Object.freeze(this);\n        // Proxy indices and names so we can trap deferred errors\n        return new Proxy(this, {\n            get: (target, prop, receiver)=>{\n                if (typeof prop === \"string\") {\n                    // Index accessor\n                    if (prop.match(/^[0-9]+$/)) {\n                        const index = (0, index_js_1.getNumber)(prop, \"%index\");\n                        if (index < 0 || index >= this.length) {\n                            throw new RangeError(\"out of result range\");\n                        }\n                        const item = target[index];\n                        if (item instanceof Error) {\n                            throwError(`index ${index}`, item);\n                        }\n                        return item;\n                    }\n                    // Pass important checks (like `then` for Promise) through\n                    if (passProperties.indexOf(prop) >= 0) {\n                        return Reflect.get(target, prop, receiver);\n                    }\n                    const value = target[prop];\n                    if (value instanceof Function) {\n                        // Make sure functions work with private variables\n                        // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#no_private_property_forwarding\n                        return function(...args) {\n                            return value.apply(this === receiver ? target : this, args);\n                        };\n                    } else if (!(prop in target)) {\n                        // Possible name accessor\n                        return target.getValue.apply(this === receiver ? target : this, [\n                            prop\n                        ]);\n                    }\n                }\n                return Reflect.get(target, prop, receiver);\n            }\n        });\n    }\n    /**\n     *  Returns the Result as a normal Array.\n     *\n     *  This will throw if there are any outstanding deferred\n     *  errors.\n     */ toArray() {\n        const result = [];\n        this.forEach((item, index)=>{\n            if (item instanceof Error) {\n                throwError(`index ${index}`, item);\n            }\n            result.push(item);\n        });\n        return result;\n    }\n    /**\n     *  Returns the Result as an Object with each name-value pair.\n     *\n     *  This will throw if any value is unnamed, or if there are\n     *  any outstanding deferred errors.\n     */ toObject() {\n        return this.#names.reduce((accum, name, index)=>{\n            (0, index_js_1.assert)(name != null, \"value at index ${ index } unnamed\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"toObject()\"\n            });\n            // Add values for names that don't conflict\n            if (!(name in accum)) {\n                accum[name] = this.getValue(name);\n            }\n            return accum;\n        }, {});\n    }\n    /**\n     *  @_ignore\n     */ slice(start, end) {\n        if (start == null) {\n            start = 0;\n        }\n        if (start < 0) {\n            start += this.length;\n            if (start < 0) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.length;\n        }\n        if (end < 0) {\n            end += this.length;\n            if (end < 0) {\n                end = 0;\n            }\n        }\n        if (end > this.length) {\n            end = this.length;\n        }\n        const result = [], names = [];\n        for(let i = start; i < end; i++){\n            result.push(this[i]);\n            names.push(this.#names[i]);\n        }\n        return new Result(_guard, result, names);\n    }\n    /**\n     *  @_ignore\n     */ filter(callback, thisArg) {\n        const result = [], names = [];\n        for(let i = 0; i < this.length; i++){\n            const item = this[i];\n            if (item instanceof Error) {\n                throwError(`index ${i}`, item);\n            }\n            if (callback.call(thisArg, item, i, this)) {\n                result.push(item);\n                names.push(this.#names[i]);\n            }\n        }\n        return new Result(_guard, result, names);\n    }\n    /**\n     *  @_ignore\n     */ map(callback, thisArg) {\n        const result = [];\n        for(let i = 0; i < this.length; i++){\n            const item = this[i];\n            if (item instanceof Error) {\n                throwError(`index ${i}`, item);\n            }\n            result.push(callback.call(thisArg, item, i, this));\n        }\n        return result;\n    }\n    /**\n     *  Returns the value for %%name%%.\n     *\n     *  Since it is possible to have a key whose name conflicts with\n     *  a method on a [[Result]] or its superclass Array, or any\n     *  JavaScript keyword, this ensures all named values are still\n     *  accessible by name.\n     */ getValue(name) {\n        const index = this.#names.indexOf(name);\n        if (index === -1) {\n            return undefined;\n        }\n        const value = this[index];\n        if (value instanceof Error) {\n            throwError(`property ${JSON.stringify(name)}`, value.error);\n        }\n        return value;\n    }\n    /**\n     *  Creates a new [[Result]] for %%items%% with each entry\n     *  also accessible by its corresponding name in %%keys%%.\n     */ static fromItems(items, keys) {\n        return new Result(_guard, items, keys);\n    }\n}\nexports.Result = Result;\n/**\n *  Returns all errors found in a [[Result]].\n *\n *  Since certain errors encountered when creating a [[Result]] do\n *  not impact the ability to continue parsing data, they are\n *  deferred until they are actually accessed. Hence a faulty string\n *  in an Event that is never used does not impact the program flow.\n *\n *  However, sometimes it may be useful to access, identify or\n *  validate correctness of a [[Result]].\n *\n *  @_docloc api/abi\n */ function checkResultErrors(result) {\n    // Find the first error (if any)\n    const errors = [];\n    const checkErrors = function(path, object) {\n        if (!Array.isArray(object)) {\n            return;\n        }\n        for(let key in object){\n            const childPath = path.slice();\n            childPath.push(key);\n            try {\n                checkErrors(childPath, object[key]);\n            } catch (error) {\n                errors.push({\n                    path: childPath,\n                    error: error\n                });\n            }\n        }\n    };\n    checkErrors([], result);\n    return errors;\n}\nexports.checkResultErrors = checkResultErrors;\nfunction getValue(value) {\n    let bytes = (0, index_js_1.toBeArray)(value);\n    (0, index_js_1.assert)(bytes.length <= exports.WordSize, \"value out-of-bounds\", \"BUFFER_OVERRUN\", {\n        buffer: bytes,\n        length: exports.WordSize,\n        offset: bytes.length\n    });\n    if (bytes.length !== exports.WordSize) {\n        bytes = (0, index_js_1.getBytesCopy)((0, index_js_1.concat)([\n            Padding.slice(bytes.length % exports.WordSize),\n            bytes\n        ]));\n    }\n    return bytes;\n}\n/**\n *  @_ignore\n */ class Coder {\n    constructor(name, type, localName, dynamic){\n        (0, index_js_1.defineProperties)(this, {\n            name,\n            type,\n            localName,\n            dynamic\n        }, {\n            name: \"string\",\n            type: \"string\",\n            localName: \"string\",\n            dynamic: \"boolean\"\n        });\n    }\n    _throwError(message, value) {\n        (0, index_js_1.assertArgument)(false, message, this.localName, value);\n    }\n}\nexports.Coder = Coder;\n/**\n *  @_ignore\n */ class Writer {\n    // An array of WordSize lengthed objects to concatenation\n    #data;\n    #dataLength;\n    constructor(){\n        this.#data = [];\n        this.#dataLength = 0;\n    }\n    get data() {\n        return (0, index_js_1.concat)(this.#data);\n    }\n    get length() {\n        return this.#dataLength;\n    }\n    #writeData(data) {\n        this.#data.push(data);\n        this.#dataLength += data.length;\n        return data.length;\n    }\n    appendWriter(writer) {\n        return this.#writeData((0, index_js_1.getBytesCopy)(writer.data));\n    }\n    // Arrayish item; pad on the right to *nearest* WordSize\n    writeBytes(value) {\n        let bytes = (0, index_js_1.getBytesCopy)(value);\n        const paddingOffset = bytes.length % exports.WordSize;\n        if (paddingOffset) {\n            bytes = (0, index_js_1.getBytesCopy)((0, index_js_1.concat)([\n                bytes,\n                Padding.slice(paddingOffset)\n            ]));\n        }\n        return this.#writeData(bytes);\n    }\n    // Numeric item; pad on the left *to* WordSize\n    writeValue(value) {\n        return this.#writeData(getValue(value));\n    }\n    // Inserts a numeric place-holder, returning a callback that can\n    // be used to asjust the value later\n    writeUpdatableValue() {\n        const offset = this.#data.length;\n        this.#data.push(Padding);\n        this.#dataLength += exports.WordSize;\n        return (value)=>{\n            this.#data[offset] = getValue(value);\n        };\n    }\n}\nexports.Writer = Writer;\n/**\n *  @_ignore\n */ class Reader {\n    #data;\n    #offset;\n    constructor(data, allowLoose){\n        (0, index_js_1.defineProperties)(this, {\n            allowLoose: !!allowLoose\n        });\n        this.#data = (0, index_js_1.getBytesCopy)(data);\n        this.#offset = 0;\n    }\n    get data() {\n        return (0, index_js_1.hexlify)(this.#data);\n    }\n    get dataLength() {\n        return this.#data.length;\n    }\n    get consumed() {\n        return this.#offset;\n    }\n    get bytes() {\n        return new Uint8Array(this.#data);\n    }\n    #peekBytes(offset, length, loose) {\n        let alignedLength = Math.ceil(length / exports.WordSize) * exports.WordSize;\n        if (this.#offset + alignedLength > this.#data.length) {\n            if (this.allowLoose && loose && this.#offset + length <= this.#data.length) {\n                alignedLength = length;\n            } else {\n                (0, index_js_1.assert)(false, \"data out-of-bounds\", \"BUFFER_OVERRUN\", {\n                    buffer: (0, index_js_1.getBytesCopy)(this.#data),\n                    length: this.#data.length,\n                    offset: this.#offset + alignedLength\n                });\n            }\n        }\n        return this.#data.slice(this.#offset, this.#offset + alignedLength);\n    }\n    // Create a sub-reader with the same underlying data, but offset\n    subReader(offset) {\n        return new Reader(this.#data.slice(this.#offset + offset), this.allowLoose);\n    }\n    // Read bytes\n    readBytes(length, loose) {\n        let bytes = this.#peekBytes(0, length, !!loose);\n        this.#offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n    // Read a numeric values\n    readValue() {\n        return (0, index_js_1.toBigInt)(this.readBytes(exports.WordSize));\n    }\n    readIndex() {\n        return (0, index_js_1.toNumber)(this.readBytes(exports.WordSize));\n    }\n}\nexports.Reader = Reader; //# sourceMappingURL=abstract-coder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/address.js":
/*!****************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/abi/coders/address.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AddressCoder = void 0;\nconst index_js_1 = __webpack_require__(/*! ../../address/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/index.js\");\nconst maths_js_1 = __webpack_require__(/*! ../../utils/maths.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/maths.js\");\nconst typed_js_1 = __webpack_require__(/*! ../typed.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/typed.js\");\nconst abstract_coder_js_1 = __webpack_require__(/*! ./abstract-coder.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js\");\n/**\n *  @_ignore\n */ class AddressCoder extends abstract_coder_js_1.Coder {\n    constructor(localName){\n        super(\"address\", \"address\", localName, false);\n    }\n    defaultValue() {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n    encode(writer, _value) {\n        let value = typed_js_1.Typed.dereference(_value, \"string\");\n        try {\n            value = (0, index_js_1.getAddress)(value);\n        } catch (error) {\n            return this._throwError(error.message, _value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        return (0, index_js_1.getAddress)((0, maths_js_1.toBeHex)(reader.readValue(), 20));\n    }\n}\nexports.AddressCoder = AddressCoder; //# sourceMappingURL=address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9hYmkvY29kZXJzL2FkZHJlc3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHLEtBQUs7QUFDNUIsTUFBTUcsYUFBYUMsbUJBQU9BLENBQUMseUZBQXdCO0FBQ25ELE1BQU1DLGFBQWFELG1CQUFPQSxDQUFDLHFGQUFzQjtBQUNqRCxNQUFNRSxhQUFhRixtQkFBT0EsQ0FBQywwRUFBYTtBQUN4QyxNQUFNRyxzQkFBc0JILG1CQUFPQSxDQUFDLGtHQUFxQjtBQUN6RDs7Q0FFQyxHQUNELE1BQU1GLHFCQUFxQkssb0JBQW9CQyxLQUFLO0lBQ2hEQyxZQUFZQyxTQUFTLENBQUU7UUFDbkIsS0FBSyxDQUFDLFdBQVcsV0FBV0EsV0FBVztJQUMzQztJQUNBQyxlQUFlO1FBQ1gsT0FBTztJQUNYO0lBQ0FDLE9BQU9DLE1BQU0sRUFBRUMsTUFBTSxFQUFFO1FBQ25CLElBQUliLFFBQVFLLFdBQVdTLEtBQUssQ0FBQ0MsV0FBVyxDQUFDRixRQUFRO1FBQ2pELElBQUk7WUFDQWIsUUFBUSxDQUFDLEdBQUdFLFdBQVdjLFVBQVUsRUFBRWhCO1FBQ3ZDLEVBQ0EsT0FBT2lCLE9BQU87WUFDVixPQUFPLElBQUksQ0FBQ0MsV0FBVyxDQUFDRCxNQUFNRSxPQUFPLEVBQUVOO1FBQzNDO1FBQ0EsT0FBT0QsT0FBT1EsVUFBVSxDQUFDcEI7SUFDN0I7SUFDQXFCLE9BQU9DLE1BQU0sRUFBRTtRQUNYLE9BQU8sQ0FBQyxHQUFHcEIsV0FBV2MsVUFBVSxFQUFFLENBQUMsR0FBR1osV0FBV21CLE9BQU8sRUFBRUQsT0FBT0UsU0FBUyxJQUFJO0lBQ2xGO0FBQ0o7QUFDQXpCLG9CQUFvQixHQUFHRSxjQUN2QixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9hYmkvY29kZXJzL2FkZHJlc3MuanM/MWU0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWRkcmVzc0NvZGVyID0gdm9pZCAwO1xuY29uc3QgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9hZGRyZXNzL2luZGV4LmpzXCIpO1xuY29uc3QgbWF0aHNfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy9tYXRocy5qc1wiKTtcbmNvbnN0IHR5cGVkX2pzXzEgPSByZXF1aXJlKFwiLi4vdHlwZWQuanNcIik7XG5jb25zdCBhYnN0cmFjdF9jb2Rlcl9qc18xID0gcmVxdWlyZShcIi4vYWJzdHJhY3QtY29kZXIuanNcIik7XG4vKipcbiAqICBAX2lnbm9yZVxuICovXG5jbGFzcyBBZGRyZXNzQ29kZXIgZXh0ZW5kcyBhYnN0cmFjdF9jb2Rlcl9qc18xLkNvZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbE5hbWUpIHtcbiAgICAgICAgc3VwZXIoXCJhZGRyZXNzXCIsIFwiYWRkcmVzc1wiLCBsb2NhbE5hbWUsIGZhbHNlKTtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIjtcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgX3ZhbHVlKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IHR5cGVkX2pzXzEuVHlwZWQuZGVyZWZlcmVuY2UoX3ZhbHVlLCBcInN0cmluZ1wiKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhbHVlID0gKDAsIGluZGV4X2pzXzEuZ2V0QWRkcmVzcykodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Rocm93RXJyb3IoZXJyb3IubWVzc2FnZSwgX3ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyLndyaXRlVmFsdWUodmFsdWUpO1xuICAgIH1cbiAgICBkZWNvZGUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiAoMCwgaW5kZXhfanNfMS5nZXRBZGRyZXNzKSgoMCwgbWF0aHNfanNfMS50b0JlSGV4KShyZWFkZXIucmVhZFZhbHVlKCksIDIwKSk7XG4gICAgfVxufVxuZXhwb3J0cy5BZGRyZXNzQ29kZXIgPSBBZGRyZXNzQ29kZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRyZXNzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkFkZHJlc3NDb2RlciIsImluZGV4X2pzXzEiLCJyZXF1aXJlIiwibWF0aHNfanNfMSIsInR5cGVkX2pzXzEiLCJhYnN0cmFjdF9jb2Rlcl9qc18xIiwiQ29kZXIiLCJjb25zdHJ1Y3RvciIsImxvY2FsTmFtZSIsImRlZmF1bHRWYWx1ZSIsImVuY29kZSIsIndyaXRlciIsIl92YWx1ZSIsIlR5cGVkIiwiZGVyZWZlcmVuY2UiLCJnZXRBZGRyZXNzIiwiZXJyb3IiLCJfdGhyb3dFcnJvciIsIm1lc3NhZ2UiLCJ3cml0ZVZhbHVlIiwiZGVjb2RlIiwicmVhZGVyIiwidG9CZUhleCIsInJlYWRWYWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/address.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/anonymous.js":
/*!******************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/abi/coders/anonymous.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AnonymousCoder = void 0;\nconst abstract_coder_js_1 = __webpack_require__(/*! ./abstract-coder.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js\");\n/**\n *  Clones the functionality of an existing Coder, but without a localName\n *\n *  @_ignore\n */ class AnonymousCoder extends abstract_coder_js_1.Coder {\n    constructor(coder){\n        super(coder.name, coder.type, \"_\", coder.dynamic);\n        this.coder = coder;\n    }\n    defaultValue() {\n        return this.coder.defaultValue();\n    }\n    encode(writer, value) {\n        return this.coder.encode(writer, value);\n    }\n    decode(reader) {\n        return this.coder.decode(reader);\n    }\n}\nexports.AnonymousCoder = AnonymousCoder; //# sourceMappingURL=anonymous.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9hYmkvY29kZXJzL2Fub255bW91cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsc0JBQXNCLEdBQUcsS0FBSztBQUM5QixNQUFNRyxzQkFBc0JDLG1CQUFPQSxDQUFDLGtHQUFxQjtBQUN6RDs7OztDQUlDLEdBQ0QsTUFBTUYsdUJBQXVCQyxvQkFBb0JFLEtBQUs7SUFFbERDLFlBQVlDLEtBQUssQ0FBRTtRQUNmLEtBQUssQ0FBQ0EsTUFBTUMsSUFBSSxFQUFFRCxNQUFNRSxJQUFJLEVBQUUsS0FBS0YsTUFBTUcsT0FBTztRQUNoRCxJQUFJLENBQUNILEtBQUssR0FBR0E7SUFDakI7SUFDQUksZUFBZTtRQUNYLE9BQU8sSUFBSSxDQUFDSixLQUFLLENBQUNJLFlBQVk7SUFDbEM7SUFDQUMsT0FBT0MsTUFBTSxFQUFFWixLQUFLLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUNNLEtBQUssQ0FBQ0ssTUFBTSxDQUFDQyxRQUFRWjtJQUNyQztJQUNBYSxPQUFPQyxNQUFNLEVBQUU7UUFDWCxPQUFPLElBQUksQ0FBQ1IsS0FBSyxDQUFDTyxNQUFNLENBQUNDO0lBQzdCO0FBQ0o7QUFDQWYsc0JBQXNCLEdBQUdFLGdCQUN6QixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9hYmkvY29kZXJzL2Fub255bW91cy5qcz8zNzViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bbm9ueW1vdXNDb2RlciA9IHZvaWQgMDtcbmNvbnN0IGFic3RyYWN0X2NvZGVyX2pzXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdC1jb2Rlci5qc1wiKTtcbi8qKlxuICogIENsb25lcyB0aGUgZnVuY3Rpb25hbGl0eSBvZiBhbiBleGlzdGluZyBDb2RlciwgYnV0IHdpdGhvdXQgYSBsb2NhbE5hbWVcbiAqXG4gKiAgQF9pZ25vcmVcbiAqL1xuY2xhc3MgQW5vbnltb3VzQ29kZXIgZXh0ZW5kcyBhYnN0cmFjdF9jb2Rlcl9qc18xLkNvZGVyIHtcbiAgICBjb2RlcjtcbiAgICBjb25zdHJ1Y3Rvcihjb2Rlcikge1xuICAgICAgICBzdXBlcihjb2Rlci5uYW1lLCBjb2Rlci50eXBlLCBcIl9cIiwgY29kZXIuZHluYW1pYyk7XG4gICAgICAgIHRoaXMuY29kZXIgPSBjb2RlcjtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2Rlci5kZWZhdWx0VmFsdWUoKTtcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29kZXIuZW5jb2RlKHdyaXRlciwgdmFsdWUpO1xuICAgIH1cbiAgICBkZWNvZGUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvZGVyLmRlY29kZShyZWFkZXIpO1xuICAgIH1cbn1cbmV4cG9ydHMuQW5vbnltb3VzQ29kZXIgPSBBbm9ueW1vdXNDb2Rlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFub255bW91cy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBbm9ueW1vdXNDb2RlciIsImFic3RyYWN0X2NvZGVyX2pzXzEiLCJyZXF1aXJlIiwiQ29kZXIiLCJjb25zdHJ1Y3RvciIsImNvZGVyIiwibmFtZSIsInR5cGUiLCJkeW5hbWljIiwiZGVmYXVsdFZhbHVlIiwiZW5jb2RlIiwid3JpdGVyIiwiZGVjb2RlIiwicmVhZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/anonymous.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/array.js":
/*!**************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/abi/coders/array.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ArrayCoder = exports.unpack = exports.pack = void 0;\nconst index_js_1 = __webpack_require__(/*! ../../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst typed_js_1 = __webpack_require__(/*! ../typed.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/typed.js\");\nconst abstract_coder_js_1 = __webpack_require__(/*! ./abstract-coder.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js\");\nconst anonymous_js_1 = __webpack_require__(/*! ./anonymous.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/anonymous.js\");\n/**\n *  @_ignore\n */ function pack(writer, coders, values) {\n    let arrayValues = [];\n    if (Array.isArray(values)) {\n        arrayValues = values;\n    } else if (values && typeof values === \"object\") {\n        let unique = {};\n        arrayValues = coders.map((coder)=>{\n            const name = coder.localName;\n            (0, index_js_1.assert)(name, \"cannot encode object for signature with missing names\", \"INVALID_ARGUMENT\", {\n                argument: \"values\",\n                info: {\n                    coder\n                },\n                value: values\n            });\n            (0, index_js_1.assert)(!unique[name], \"cannot encode object for signature with duplicate names\", \"INVALID_ARGUMENT\", {\n                argument: \"values\",\n                info: {\n                    coder\n                },\n                value: values\n            });\n            unique[name] = true;\n            return values[name];\n        });\n    } else {\n        (0, index_js_1.assertArgument)(false, \"invalid tuple value\", \"tuple\", values);\n    }\n    (0, index_js_1.assertArgument)(coders.length === arrayValues.length, \"types/value length mismatch\", \"tuple\", values);\n    let staticWriter = new abstract_coder_js_1.Writer();\n    let dynamicWriter = new abstract_coder_js_1.Writer();\n    let updateFuncs = [];\n    coders.forEach((coder, index)=>{\n        let value = arrayValues[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset)=>{\n                updateFunc(baseOffset + dynamicOffset);\n            });\n        } else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func)=>{\n        func(staticWriter.length);\n    });\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\nexports.pack = pack;\n/**\n *  @_ignore\n */ function unpack(reader, coders) {\n    let values = [];\n    let keys = [];\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n    coders.forEach((coder)=>{\n        let value = null;\n        if (coder.dynamic) {\n            let offset = reader.readIndex();\n            let offsetReader = baseReader.subReader(offset);\n            try {\n                value = coder.decode(offsetReader);\n            } catch (error) {\n                // Cannot recover from this\n                if ((0, index_js_1.isError)(error, \"BUFFER_OVERRUN\")) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        } else {\n            try {\n                value = coder.decode(reader);\n            } catch (error) {\n                // Cannot recover from this\n                if ((0, index_js_1.isError)(error, \"BUFFER_OVERRUN\")) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value == undefined) {\n            throw new Error(\"investigate\");\n        }\n        values.push(value);\n        keys.push(coder.localName || null);\n    });\n    return abstract_coder_js_1.Result.fromItems(values, keys);\n}\nexports.unpack = unpack;\n/**\n *  @_ignore\n */ class ArrayCoder extends abstract_coder_js_1.Coder {\n    constructor(coder, length, localName){\n        const type = coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\";\n        const dynamic = length === -1 || coder.dynamic;\n        super(\"array\", type, localName, dynamic);\n        (0, index_js_1.defineProperties)(this, {\n            coder,\n            length\n        });\n    }\n    defaultValue() {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n        const result = [];\n        for(let i = 0; i < this.length; i++){\n            result.push(defaultChild);\n        }\n        return result;\n    }\n    encode(writer, _value) {\n        const value = typed_js_1.Typed.dereference(_value, \"array\");\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        let count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        (0, index_js_1.assertArgumentCount)(value.length, count, \"coder array\" + (this.localName ? \" \" + this.localName : \"\"));\n        let coders = [];\n        for(let i = 0; i < value.length; i++){\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    }\n    decode(reader) {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readIndex();\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            (0, index_js_1.assert)(count * abstract_coder_js_1.WordSize <= reader.dataLength, \"insufficient data length\", \"BUFFER_OVERRUN\", {\n                buffer: reader.bytes,\n                offset: count * abstract_coder_js_1.WordSize,\n                length: reader.dataLength\n            });\n        }\n        let coders = [];\n        for(let i = 0; i < count; i++){\n            coders.push(new anonymous_js_1.AnonymousCoder(this.coder));\n        }\n        return unpack(reader, coders);\n    }\n}\nexports.ArrayCoder = ArrayCoder; //# sourceMappingURL=array.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/array.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/boolean.js":
/*!****************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/abi/coders/boolean.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BooleanCoder = void 0;\nconst typed_js_1 = __webpack_require__(/*! ../typed.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/typed.js\");\nconst abstract_coder_js_1 = __webpack_require__(/*! ./abstract-coder.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js\");\n/**\n *  @_ignore\n */ class BooleanCoder extends abstract_coder_js_1.Coder {\n    constructor(localName){\n        super(\"bool\", \"bool\", localName, false);\n    }\n    defaultValue() {\n        return false;\n    }\n    encode(writer, _value) {\n        const value = typed_js_1.Typed.dereference(_value, \"bool\");\n        return writer.writeValue(value ? 1 : 0);\n    }\n    decode(reader) {\n        return !!reader.readValue();\n    }\n}\nexports.BooleanCoder = BooleanCoder; //# sourceMappingURL=boolean.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9hYmkvY29kZXJzL2Jvb2xlYW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHLEtBQUs7QUFDNUIsTUFBTUcsYUFBYUMsbUJBQU9BLENBQUMsMEVBQWE7QUFDeEMsTUFBTUMsc0JBQXNCRCxtQkFBT0EsQ0FBQyxrR0FBcUI7QUFDekQ7O0NBRUMsR0FDRCxNQUFNRixxQkFBcUJHLG9CQUFvQkMsS0FBSztJQUNoREMsWUFBWUMsU0FBUyxDQUFFO1FBQ25CLEtBQUssQ0FBQyxRQUFRLFFBQVFBLFdBQVc7SUFDckM7SUFDQUMsZUFBZTtRQUNYLE9BQU87SUFDWDtJQUNBQyxPQUFPQyxNQUFNLEVBQUVDLE1BQU0sRUFBRTtRQUNuQixNQUFNWCxRQUFRRSxXQUFXVSxLQUFLLENBQUNDLFdBQVcsQ0FBQ0YsUUFBUTtRQUNuRCxPQUFPRCxPQUFPSSxVQUFVLENBQUNkLFFBQVEsSUFBSTtJQUN6QztJQUNBZSxPQUFPQyxNQUFNLEVBQUU7UUFDWCxPQUFPLENBQUMsQ0FBQ0EsT0FBT0MsU0FBUztJQUM3QjtBQUNKO0FBQ0FsQixvQkFBb0IsR0FBR0UsY0FDdkIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvYWJpL2NvZGVycy9ib29sZWFuLmpzPzk4ZmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJvb2xlYW5Db2RlciA9IHZvaWQgMDtcbmNvbnN0IHR5cGVkX2pzXzEgPSByZXF1aXJlKFwiLi4vdHlwZWQuanNcIik7XG5jb25zdCBhYnN0cmFjdF9jb2Rlcl9qc18xID0gcmVxdWlyZShcIi4vYWJzdHJhY3QtY29kZXIuanNcIik7XG4vKipcbiAqICBAX2lnbm9yZVxuICovXG5jbGFzcyBCb29sZWFuQ29kZXIgZXh0ZW5kcyBhYnN0cmFjdF9jb2Rlcl9qc18xLkNvZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbE5hbWUpIHtcbiAgICAgICAgc3VwZXIoXCJib29sXCIsIFwiYm9vbFwiLCBsb2NhbE5hbWUsIGZhbHNlKTtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVuY29kZSh3cml0ZXIsIF92YWx1ZSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHR5cGVkX2pzXzEuVHlwZWQuZGVyZWZlcmVuY2UoX3ZhbHVlLCBcImJvb2xcIik7XG4gICAgICAgIHJldHVybiB3cml0ZXIud3JpdGVWYWx1ZSh2YWx1ZSA/IDEgOiAwKTtcbiAgICB9XG4gICAgZGVjb2RlKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gISFyZWFkZXIucmVhZFZhbHVlKCk7XG4gICAgfVxufVxuZXhwb3J0cy5Cb29sZWFuQ29kZXIgPSBCb29sZWFuQ29kZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ib29sZWFuLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkJvb2xlYW5Db2RlciIsInR5cGVkX2pzXzEiLCJyZXF1aXJlIiwiYWJzdHJhY3RfY29kZXJfanNfMSIsIkNvZGVyIiwiY29uc3RydWN0b3IiLCJsb2NhbE5hbWUiLCJkZWZhdWx0VmFsdWUiLCJlbmNvZGUiLCJ3cml0ZXIiLCJfdmFsdWUiLCJUeXBlZCIsImRlcmVmZXJlbmNlIiwid3JpdGVWYWx1ZSIsImRlY29kZSIsInJlYWRlciIsInJlYWRWYWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/boolean.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/bytes.js":
/*!**************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/abi/coders/bytes.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BytesCoder = exports.DynamicBytesCoder = void 0;\nconst index_js_1 = __webpack_require__(/*! ../../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst abstract_coder_js_1 = __webpack_require__(/*! ./abstract-coder.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js\");\n/**\n *  @_ignore\n */ class DynamicBytesCoder extends abstract_coder_js_1.Coder {\n    constructor(type, localName){\n        super(type, type, localName, true);\n    }\n    defaultValue() {\n        return \"0x\";\n    }\n    encode(writer, value) {\n        value = (0, index_js_1.getBytesCopy)(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n    decode(reader) {\n        return reader.readBytes(reader.readIndex(), true);\n    }\n}\nexports.DynamicBytesCoder = DynamicBytesCoder;\n/**\n *  @_ignore\n */ class BytesCoder extends DynamicBytesCoder {\n    constructor(localName){\n        super(\"bytes\", localName);\n    }\n    decode(reader) {\n        return (0, index_js_1.hexlify)(super.decode(reader));\n    }\n}\nexports.BytesCoder = BytesCoder; //# sourceMappingURL=bytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9hYmkvY29kZXJzL2J5dGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBR0EseUJBQXlCLEdBQUcsS0FBSztBQUN0RCxNQUFNSSxhQUFhQyxtQkFBT0EsQ0FBQyxxRkFBc0I7QUFDakQsTUFBTUMsc0JBQXNCRCxtQkFBT0EsQ0FBQyxrR0FBcUI7QUFDekQ7O0NBRUMsR0FDRCxNQUFNRiwwQkFBMEJHLG9CQUFvQkMsS0FBSztJQUNyREMsWUFBWUMsSUFBSSxFQUFFQyxTQUFTLENBQUU7UUFDekIsS0FBSyxDQUFDRCxNQUFNQSxNQUFNQyxXQUFXO0lBQ2pDO0lBQ0FDLGVBQWU7UUFDWCxPQUFPO0lBQ1g7SUFDQUMsT0FBT0MsTUFBTSxFQUFFWixLQUFLLEVBQUU7UUFDbEJBLFFBQVEsQ0FBQyxHQUFHRyxXQUFXVSxZQUFZLEVBQUViO1FBQ3JDLElBQUljLFNBQVNGLE9BQU9HLFVBQVUsQ0FBQ2YsTUFBTWMsTUFBTTtRQUMzQ0EsVUFBVUYsT0FBT0ksVUFBVSxDQUFDaEI7UUFDNUIsT0FBT2M7SUFDWDtJQUNBRyxPQUFPQyxNQUFNLEVBQUU7UUFDWCxPQUFPQSxPQUFPQyxTQUFTLENBQUNELE9BQU9FLFNBQVMsSUFBSTtJQUNoRDtBQUNKO0FBQ0FyQix5QkFBeUIsR0FBR0c7QUFDNUI7O0NBRUMsR0FDRCxNQUFNRCxtQkFBbUJDO0lBQ3JCSyxZQUFZRSxTQUFTLENBQUU7UUFDbkIsS0FBSyxDQUFDLFNBQVNBO0lBQ25CO0lBQ0FRLE9BQU9DLE1BQU0sRUFBRTtRQUNYLE9BQU8sQ0FBQyxHQUFHZixXQUFXa0IsT0FBTyxFQUFFLEtBQUssQ0FBQ0osT0FBT0M7SUFDaEQ7QUFDSjtBQUNBbkIsa0JBQWtCLEdBQUdFLFlBQ3JCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL2FiaS9jb2RlcnMvYnl0ZXMuanM/ODZhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnl0ZXNDb2RlciA9IGV4cG9ydHMuRHluYW1pY0J5dGVzQ29kZXIgPSB2b2lkIDA7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL2luZGV4LmpzXCIpO1xuY29uc3QgYWJzdHJhY3RfY29kZXJfanNfMSA9IHJlcXVpcmUoXCIuL2Fic3RyYWN0LWNvZGVyLmpzXCIpO1xuLyoqXG4gKiAgQF9pZ25vcmVcbiAqL1xuY2xhc3MgRHluYW1pY0J5dGVzQ29kZXIgZXh0ZW5kcyBhYnN0cmFjdF9jb2Rlcl9qc18xLkNvZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCBsb2NhbE5hbWUpIHtcbiAgICAgICAgc3VwZXIodHlwZSwgdHlwZSwgbG9jYWxOYW1lLCB0cnVlKTtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gXCIweFwiO1xuICAgIH1cbiAgICBlbmNvZGUod3JpdGVyLCB2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9ICgwLCBpbmRleF9qc18xLmdldEJ5dGVzQ29weSkodmFsdWUpO1xuICAgICAgICBsZXQgbGVuZ3RoID0gd3JpdGVyLndyaXRlVmFsdWUodmFsdWUubGVuZ3RoKTtcbiAgICAgICAgbGVuZ3RoICs9IHdyaXRlci53cml0ZUJ5dGVzKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gICAgZGVjb2RlKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gcmVhZGVyLnJlYWRCeXRlcyhyZWFkZXIucmVhZEluZGV4KCksIHRydWUpO1xuICAgIH1cbn1cbmV4cG9ydHMuRHluYW1pY0J5dGVzQ29kZXIgPSBEeW5hbWljQnl0ZXNDb2Rlcjtcbi8qKlxuICogIEBfaWdub3JlXG4gKi9cbmNsYXNzIEJ5dGVzQ29kZXIgZXh0ZW5kcyBEeW5hbWljQnl0ZXNDb2RlciB7XG4gICAgY29uc3RydWN0b3IobG9jYWxOYW1lKSB7XG4gICAgICAgIHN1cGVyKFwiYnl0ZXNcIiwgbG9jYWxOYW1lKTtcbiAgICB9XG4gICAgZGVjb2RlKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gKDAsIGluZGV4X2pzXzEuaGV4bGlmeSkoc3VwZXIuZGVjb2RlKHJlYWRlcikpO1xuICAgIH1cbn1cbmV4cG9ydHMuQnl0ZXNDb2RlciA9IEJ5dGVzQ29kZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ieXRlcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJCeXRlc0NvZGVyIiwiRHluYW1pY0J5dGVzQ29kZXIiLCJpbmRleF9qc18xIiwicmVxdWlyZSIsImFic3RyYWN0X2NvZGVyX2pzXzEiLCJDb2RlciIsImNvbnN0cnVjdG9yIiwidHlwZSIsImxvY2FsTmFtZSIsImRlZmF1bHRWYWx1ZSIsImVuY29kZSIsIndyaXRlciIsImdldEJ5dGVzQ29weSIsImxlbmd0aCIsIndyaXRlVmFsdWUiLCJ3cml0ZUJ5dGVzIiwiZGVjb2RlIiwicmVhZGVyIiwicmVhZEJ5dGVzIiwicmVhZEluZGV4IiwiaGV4bGlmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/bytes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/fixed-bytes.js":
/*!********************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/abi/coders/fixed-bytes.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FixedBytesCoder = void 0;\nconst index_js_1 = __webpack_require__(/*! ../../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst typed_js_1 = __webpack_require__(/*! ../typed.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/typed.js\");\nconst abstract_coder_js_1 = __webpack_require__(/*! ./abstract-coder.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js\");\n/**\n *  @_ignore\n */ class FixedBytesCoder extends abstract_coder_js_1.Coder {\n    constructor(size, localName){\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        (0, index_js_1.defineProperties)(this, {\n            size\n        }, {\n            size: \"number\"\n        });\n    }\n    defaultValue() {\n        return \"0x0000000000000000000000000000000000000000000000000000000000000000\".substring(0, 2 + this.size * 2);\n    }\n    encode(writer, _value) {\n        let data = (0, index_js_1.getBytesCopy)(typed_js_1.Typed.dereference(_value, this.type));\n        if (data.length !== this.size) {\n            this._throwError(\"incorrect data length\", _value);\n        }\n        return writer.writeBytes(data);\n    }\n    decode(reader) {\n        return (0, index_js_1.hexlify)(reader.readBytes(this.size));\n    }\n}\nexports.FixedBytesCoder = FixedBytesCoder; //# sourceMappingURL=fixed-bytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9hYmkvY29kZXJzL2ZpeGVkLWJ5dGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx1QkFBdUIsR0FBRyxLQUFLO0FBQy9CLE1BQU1HLGFBQWFDLG1CQUFPQSxDQUFDLHFGQUFzQjtBQUNqRCxNQUFNQyxhQUFhRCxtQkFBT0EsQ0FBQywwRUFBYTtBQUN4QyxNQUFNRSxzQkFBc0JGLG1CQUFPQSxDQUFDLGtHQUFxQjtBQUN6RDs7Q0FFQyxHQUNELE1BQU1GLHdCQUF3Qkksb0JBQW9CQyxLQUFLO0lBRW5EQyxZQUFZQyxJQUFJLEVBQUVDLFNBQVMsQ0FBRTtRQUN6QixJQUFJQyxPQUFPLFVBQVVDLE9BQU9IO1FBQzVCLEtBQUssQ0FBQ0UsTUFBTUEsTUFBTUQsV0FBVztRQUM1QixJQUFHUCxXQUFXVSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUU7WUFBRUo7UUFBSyxHQUFHO1lBQUVBLE1BQU07UUFBUztJQUN0RTtJQUNBSyxlQUFlO1FBQ1gsT0FBTyxxRUFBdUVDLFNBQVMsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDTixJQUFJLEdBQUc7SUFDL0c7SUFDQU8sT0FBT0MsTUFBTSxFQUFFQyxNQUFNLEVBQUU7UUFDbkIsSUFBSUMsT0FBTyxDQUFDLEdBQUdoQixXQUFXaUIsWUFBWSxFQUFFZixXQUFXZ0IsS0FBSyxDQUFDQyxXQUFXLENBQUNKLFFBQVEsSUFBSSxDQUFDSyxJQUFJO1FBQ3RGLElBQUlKLEtBQUtLLE1BQU0sS0FBSyxJQUFJLENBQUNmLElBQUksRUFBRTtZQUMzQixJQUFJLENBQUNnQixXQUFXLENBQUMseUJBQXlCUDtRQUM5QztRQUNBLE9BQU9ELE9BQU9TLFVBQVUsQ0FBQ1A7SUFDN0I7SUFDQVEsT0FBT0MsTUFBTSxFQUFFO1FBQ1gsT0FBTyxDQUFDLEdBQUd6QixXQUFXMEIsT0FBTyxFQUFFRCxPQUFPRSxTQUFTLENBQUMsSUFBSSxDQUFDckIsSUFBSTtJQUM3RDtBQUNKO0FBQ0FULHVCQUF1QixHQUFHRSxpQkFDMUIsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvYWJpL2NvZGVycy9maXhlZC1ieXRlcy5qcz8xNjMzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5GaXhlZEJ5dGVzQ29kZXIgPSB2b2lkIDA7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL2luZGV4LmpzXCIpO1xuY29uc3QgdHlwZWRfanNfMSA9IHJlcXVpcmUoXCIuLi90eXBlZC5qc1wiKTtcbmNvbnN0IGFic3RyYWN0X2NvZGVyX2pzXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdC1jb2Rlci5qc1wiKTtcbi8qKlxuICogIEBfaWdub3JlXG4gKi9cbmNsYXNzIEZpeGVkQnl0ZXNDb2RlciBleHRlbmRzIGFic3RyYWN0X2NvZGVyX2pzXzEuQ29kZXIge1xuICAgIHNpemU7XG4gICAgY29uc3RydWN0b3Ioc2l6ZSwgbG9jYWxOYW1lKSB7XG4gICAgICAgIGxldCBuYW1lID0gXCJieXRlc1wiICsgU3RyaW5nKHNpemUpO1xuICAgICAgICBzdXBlcihuYW1lLCBuYW1lLCBsb2NhbE5hbWUsIGZhbHNlKTtcbiAgICAgICAgKDAsIGluZGV4X2pzXzEuZGVmaW5lUHJvcGVydGllcykodGhpcywgeyBzaXplIH0sIHsgc2l6ZTogXCJudW1iZXJcIiB9KTtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gKFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIpLnN1YnN0cmluZygwLCAyICsgdGhpcy5zaXplICogMik7XG4gICAgfVxuICAgIGVuY29kZSh3cml0ZXIsIF92YWx1ZSkge1xuICAgICAgICBsZXQgZGF0YSA9ICgwLCBpbmRleF9qc18xLmdldEJ5dGVzQ29weSkodHlwZWRfanNfMS5UeXBlZC5kZXJlZmVyZW5jZShfdmFsdWUsIHRoaXMudHlwZSkpO1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggIT09IHRoaXMuc2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5fdGhyb3dFcnJvcihcImluY29ycmVjdCBkYXRhIGxlbmd0aFwiLCBfdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXIud3JpdGVCeXRlcyhkYXRhKTtcbiAgICB9XG4gICAgZGVjb2RlKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gKDAsIGluZGV4X2pzXzEuaGV4bGlmeSkocmVhZGVyLnJlYWRCeXRlcyh0aGlzLnNpemUpKTtcbiAgICB9XG59XG5leHBvcnRzLkZpeGVkQnl0ZXNDb2RlciA9IEZpeGVkQnl0ZXNDb2Rlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpeGVkLWJ5dGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkZpeGVkQnl0ZXNDb2RlciIsImluZGV4X2pzXzEiLCJyZXF1aXJlIiwidHlwZWRfanNfMSIsImFic3RyYWN0X2NvZGVyX2pzXzEiLCJDb2RlciIsImNvbnN0cnVjdG9yIiwic2l6ZSIsImxvY2FsTmFtZSIsIm5hbWUiLCJTdHJpbmciLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmYXVsdFZhbHVlIiwic3Vic3RyaW5nIiwiZW5jb2RlIiwid3JpdGVyIiwiX3ZhbHVlIiwiZGF0YSIsImdldEJ5dGVzQ29weSIsIlR5cGVkIiwiZGVyZWZlcmVuY2UiLCJ0eXBlIiwibGVuZ3RoIiwiX3Rocm93RXJyb3IiLCJ3cml0ZUJ5dGVzIiwiZGVjb2RlIiwicmVhZGVyIiwiaGV4bGlmeSIsInJlYWRCeXRlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/fixed-bytes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/null.js":
/*!*************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/abi/coders/null.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.NullCoder = void 0;\nconst abstract_coder_js_1 = __webpack_require__(/*! ./abstract-coder.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js\");\nconst Empty = new Uint8Array([]);\n/**\n *  @_ignore\n */ class NullCoder extends abstract_coder_js_1.Coder {\n    constructor(localName){\n        super(\"null\", \"\", localName, false);\n    }\n    defaultValue() {\n        return null;\n    }\n    encode(writer, value) {\n        if (value != null) {\n            this._throwError(\"not null\", value);\n        }\n        return writer.writeBytes(Empty);\n    }\n    decode(reader) {\n        reader.readBytes(0);\n        return null;\n    }\n}\nexports.NullCoder = NullCoder; //# sourceMappingURL=null.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9hYmkvY29kZXJzL251bGwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHLEtBQUs7QUFDekIsTUFBTUcsc0JBQXNCQyxtQkFBT0EsQ0FBQyxrR0FBcUI7QUFDekQsTUFBTUMsUUFBUSxJQUFJQyxXQUFXLEVBQUU7QUFDL0I7O0NBRUMsR0FDRCxNQUFNSixrQkFBa0JDLG9CQUFvQkksS0FBSztJQUM3Q0MsWUFBWUMsU0FBUyxDQUFFO1FBQ25CLEtBQUssQ0FBQyxRQUFRLElBQUlBLFdBQVc7SUFDakM7SUFDQUMsZUFBZTtRQUNYLE9BQU87SUFDWDtJQUNBQyxPQUFPQyxNQUFNLEVBQUVYLEtBQUssRUFBRTtRQUNsQixJQUFJQSxTQUFTLE1BQU07WUFDZixJQUFJLENBQUNZLFdBQVcsQ0FBQyxZQUFZWjtRQUNqQztRQUNBLE9BQU9XLE9BQU9FLFVBQVUsQ0FBQ1Q7SUFDN0I7SUFDQVUsT0FBT0MsTUFBTSxFQUFFO1FBQ1hBLE9BQU9DLFNBQVMsQ0FBQztRQUNqQixPQUFPO0lBQ1g7QUFDSjtBQUNBakIsaUJBQWlCLEdBQUdFLFdBQ3BCLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL2FiaS9jb2RlcnMvbnVsbC5qcz85OTYwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5OdWxsQ29kZXIgPSB2b2lkIDA7XG5jb25zdCBhYnN0cmFjdF9jb2Rlcl9qc18xID0gcmVxdWlyZShcIi4vYWJzdHJhY3QtY29kZXIuanNcIik7XG5jb25zdCBFbXB0eSA9IG5ldyBVaW50OEFycmF5KFtdKTtcbi8qKlxuICogIEBfaWdub3JlXG4gKi9cbmNsYXNzIE51bGxDb2RlciBleHRlbmRzIGFic3RyYWN0X2NvZGVyX2pzXzEuQ29kZXIge1xuICAgIGNvbnN0cnVjdG9yKGxvY2FsTmFtZSkge1xuICAgICAgICBzdXBlcihcIm51bGxcIiwgXCJcIiwgbG9jYWxOYW1lLCBmYWxzZSk7XG4gICAgfVxuICAgIGRlZmF1bHRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGVuY29kZSh3cml0ZXIsIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl90aHJvd0Vycm9yKFwibm90IG51bGxcIiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXIud3JpdGVCeXRlcyhFbXB0eSk7XG4gICAgfVxuICAgIGRlY29kZShyZWFkZXIpIHtcbiAgICAgICAgcmVhZGVyLnJlYWRCeXRlcygwKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuZXhwb3J0cy5OdWxsQ29kZXIgPSBOdWxsQ29kZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1udWxsLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIk51bGxDb2RlciIsImFic3RyYWN0X2NvZGVyX2pzXzEiLCJyZXF1aXJlIiwiRW1wdHkiLCJVaW50OEFycmF5IiwiQ29kZXIiLCJjb25zdHJ1Y3RvciIsImxvY2FsTmFtZSIsImRlZmF1bHRWYWx1ZSIsImVuY29kZSIsIndyaXRlciIsIl90aHJvd0Vycm9yIiwid3JpdGVCeXRlcyIsImRlY29kZSIsInJlYWRlciIsInJlYWRCeXRlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/null.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/number.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/abi/coders/number.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.NumberCoder = void 0;\nconst index_js_1 = __webpack_require__(/*! ../../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst typed_js_1 = __webpack_require__(/*! ../typed.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/typed.js\");\nconst abstract_coder_js_1 = __webpack_require__(/*! ./abstract-coder.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js\");\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n/**\n *  @_ignore\n */ class NumberCoder extends abstract_coder_js_1.Coder {\n    constructor(size, signed, localName){\n        const name = (signed ? \"int\" : \"uint\") + size * 8;\n        super(name, name, localName, false);\n        (0, index_js_1.defineProperties)(this, {\n            size,\n            signed\n        }, {\n            size: \"number\",\n            signed: \"boolean\"\n        });\n    }\n    defaultValue() {\n        return 0;\n    }\n    encode(writer, _value) {\n        let value = (0, index_js_1.getBigInt)(typed_js_1.Typed.dereference(_value, this.type));\n        // Check bounds are safe for encoding\n        let maxUintValue = (0, index_js_1.mask)(BN_MAX_UINT256, abstract_coder_js_1.WordSize * 8);\n        if (this.signed) {\n            let bounds = (0, index_js_1.mask)(maxUintValue, this.size * 8 - 1);\n            if (value > bounds || value < -(bounds + BN_1)) {\n                this._throwError(\"value out-of-bounds\", _value);\n            }\n            value = (0, index_js_1.toTwos)(value, 8 * abstract_coder_js_1.WordSize);\n        } else if (value < BN_0 || value > (0, index_js_1.mask)(maxUintValue, this.size * 8)) {\n            this._throwError(\"value out-of-bounds\", _value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        let value = (0, index_js_1.mask)(reader.readValue(), this.size * 8);\n        if (this.signed) {\n            value = (0, index_js_1.fromTwos)(value, this.size * 8);\n        }\n        return value;\n    }\n}\nexports.NumberCoder = NumberCoder; //# sourceMappingURL=number.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9hYmkvY29kZXJzL251bWJlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUJBQW1CLEdBQUcsS0FBSztBQUMzQixNQUFNRyxhQUFhQyxtQkFBT0EsQ0FBQyxxRkFBc0I7QUFDakQsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUMsMEVBQWE7QUFDeEMsTUFBTUUsc0JBQXNCRixtQkFBT0EsQ0FBQyxrR0FBcUI7QUFDekQsTUFBTUcsT0FBT0MsT0FBTztBQUNwQixNQUFNQyxPQUFPRCxPQUFPO0FBQ3BCLE1BQU1FLGlCQUFpQkYsT0FBTztBQUM5Qjs7Q0FFQyxHQUNELE1BQU1OLG9CQUFvQkksb0JBQW9CSyxLQUFLO0lBRy9DQyxZQUFZQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsU0FBUyxDQUFFO1FBQ2pDLE1BQU1DLE9BQVEsQ0FBQ0YsU0FBUyxRQUFRLE1BQUssSUFBTUQsT0FBTztRQUNsRCxLQUFLLENBQUNHLE1BQU1BLE1BQU1ELFdBQVc7UUFDNUIsSUFBR1osV0FBV2MsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFO1lBQUVKO1lBQU1DO1FBQU8sR0FBRztZQUFFRCxNQUFNO1lBQVVDLFFBQVE7UUFBVTtJQUNqRztJQUNBSSxlQUFlO1FBQ1gsT0FBTztJQUNYO0lBQ0FDLE9BQU9DLE1BQU0sRUFBRUMsTUFBTSxFQUFFO1FBQ25CLElBQUlwQixRQUFRLENBQUMsR0FBR0UsV0FBV21CLFNBQVMsRUFBRWpCLFdBQVdrQixLQUFLLENBQUNDLFdBQVcsQ0FBQ0gsUUFBUSxJQUFJLENBQUNJLElBQUk7UUFDcEYscUNBQXFDO1FBQ3JDLElBQUlDLGVBQWUsQ0FBQyxHQUFHdkIsV0FBV3dCLElBQUksRUFBRWpCLGdCQUFnQkosb0JBQW9Cc0IsUUFBUSxHQUFHO1FBQ3ZGLElBQUksSUFBSSxDQUFDZCxNQUFNLEVBQUU7WUFDYixJQUFJZSxTQUFTLENBQUMsR0FBRzFCLFdBQVd3QixJQUFJLEVBQUVELGNBQWMsSUFBSyxDQUFDYixJQUFJLEdBQUcsSUFBSztZQUNsRSxJQUFJWixRQUFRNEIsVUFBVTVCLFFBQVEsQ0FBRTRCLENBQUFBLFNBQVNwQixJQUFHLEdBQUk7Z0JBQzVDLElBQUksQ0FBQ3FCLFdBQVcsQ0FBQyx1QkFBdUJUO1lBQzVDO1lBQ0FwQixRQUFRLENBQUMsR0FBR0UsV0FBVzRCLE1BQU0sRUFBRTlCLE9BQU8sSUFBSUssb0JBQW9Cc0IsUUFBUTtRQUMxRSxPQUNLLElBQUkzQixRQUFRTSxRQUFRTixRQUFRLENBQUMsR0FBR0UsV0FBV3dCLElBQUksRUFBRUQsY0FBYyxJQUFJLENBQUNiLElBQUksR0FBRyxJQUFJO1lBQ2hGLElBQUksQ0FBQ2lCLFdBQVcsQ0FBQyx1QkFBdUJUO1FBQzVDO1FBQ0EsT0FBT0QsT0FBT1ksVUFBVSxDQUFDL0I7SUFDN0I7SUFDQWdDLE9BQU9DLE1BQU0sRUFBRTtRQUNYLElBQUlqQyxRQUFRLENBQUMsR0FBR0UsV0FBV3dCLElBQUksRUFBRU8sT0FBT0MsU0FBUyxJQUFJLElBQUksQ0FBQ3RCLElBQUksR0FBRztRQUNqRSxJQUFJLElBQUksQ0FBQ0MsTUFBTSxFQUFFO1lBQ2JiLFFBQVEsQ0FBQyxHQUFHRSxXQUFXaUMsUUFBUSxFQUFFbkMsT0FBTyxJQUFJLENBQUNZLElBQUksR0FBRztRQUN4RDtRQUNBLE9BQU9aO0lBQ1g7QUFDSjtBQUNBRCxtQkFBbUIsR0FBR0UsYUFDdEIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvYWJpL2NvZGVycy9udW1iZXIuanM/OWQ4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTnVtYmVyQ29kZXIgPSB2b2lkIDA7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL2luZGV4LmpzXCIpO1xuY29uc3QgdHlwZWRfanNfMSA9IHJlcXVpcmUoXCIuLi90eXBlZC5qc1wiKTtcbmNvbnN0IGFic3RyYWN0X2NvZGVyX2pzXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdC1jb2Rlci5qc1wiKTtcbmNvbnN0IEJOXzAgPSBCaWdJbnQoMCk7XG5jb25zdCBCTl8xID0gQmlnSW50KDEpO1xuY29uc3QgQk5fTUFYX1VJTlQyNTYgPSBCaWdJbnQoXCIweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZcIik7XG4vKipcbiAqICBAX2lnbm9yZVxuICovXG5jbGFzcyBOdW1iZXJDb2RlciBleHRlbmRzIGFic3RyYWN0X2NvZGVyX2pzXzEuQ29kZXIge1xuICAgIHNpemU7XG4gICAgc2lnbmVkO1xuICAgIGNvbnN0cnVjdG9yKHNpemUsIHNpZ25lZCwgbG9jYWxOYW1lKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSAoKHNpZ25lZCA/IFwiaW50XCIgOiBcInVpbnRcIikgKyAoc2l6ZSAqIDgpKTtcbiAgICAgICAgc3VwZXIobmFtZSwgbmFtZSwgbG9jYWxOYW1lLCBmYWxzZSk7XG4gICAgICAgICgwLCBpbmRleF9qc18xLmRlZmluZVByb3BlcnRpZXMpKHRoaXMsIHsgc2l6ZSwgc2lnbmVkIH0sIHsgc2l6ZTogXCJudW1iZXJcIiwgc2lnbmVkOiBcImJvb2xlYW5cIiB9KTtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgX3ZhbHVlKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9ICgwLCBpbmRleF9qc18xLmdldEJpZ0ludCkodHlwZWRfanNfMS5UeXBlZC5kZXJlZmVyZW5jZShfdmFsdWUsIHRoaXMudHlwZSkpO1xuICAgICAgICAvLyBDaGVjayBib3VuZHMgYXJlIHNhZmUgZm9yIGVuY29kaW5nXG4gICAgICAgIGxldCBtYXhVaW50VmFsdWUgPSAoMCwgaW5kZXhfanNfMS5tYXNrKShCTl9NQVhfVUlOVDI1NiwgYWJzdHJhY3RfY29kZXJfanNfMS5Xb3JkU2l6ZSAqIDgpO1xuICAgICAgICBpZiAodGhpcy5zaWduZWQpIHtcbiAgICAgICAgICAgIGxldCBib3VuZHMgPSAoMCwgaW5kZXhfanNfMS5tYXNrKShtYXhVaW50VmFsdWUsICh0aGlzLnNpemUgKiA4KSAtIDEpO1xuICAgICAgICAgICAgaWYgKHZhbHVlID4gYm91bmRzIHx8IHZhbHVlIDwgLShib3VuZHMgKyBCTl8xKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Rocm93RXJyb3IoXCJ2YWx1ZSBvdXQtb2YtYm91bmRzXCIsIF92YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZSA9ICgwLCBpbmRleF9qc18xLnRvVHdvcykodmFsdWUsIDggKiBhYnN0cmFjdF9jb2Rlcl9qc18xLldvcmRTaXplKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSA8IEJOXzAgfHwgdmFsdWUgPiAoMCwgaW5kZXhfanNfMS5tYXNrKShtYXhVaW50VmFsdWUsIHRoaXMuc2l6ZSAqIDgpKSB7XG4gICAgICAgICAgICB0aGlzLl90aHJvd0Vycm9yKFwidmFsdWUgb3V0LW9mLWJvdW5kc1wiLCBfdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXIud3JpdGVWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuICAgIGRlY29kZShyZWFkZXIpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gKDAsIGluZGV4X2pzXzEubWFzaykocmVhZGVyLnJlYWRWYWx1ZSgpLCB0aGlzLnNpemUgKiA4KTtcbiAgICAgICAgaWYgKHRoaXMuc2lnbmVkKSB7XG4gICAgICAgICAgICB2YWx1ZSA9ICgwLCBpbmRleF9qc18xLmZyb21Ud29zKSh2YWx1ZSwgdGhpcy5zaXplICogOCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn1cbmV4cG9ydHMuTnVtYmVyQ29kZXIgPSBOdW1iZXJDb2Rlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW51bWJlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJOdW1iZXJDb2RlciIsImluZGV4X2pzXzEiLCJyZXF1aXJlIiwidHlwZWRfanNfMSIsImFic3RyYWN0X2NvZGVyX2pzXzEiLCJCTl8wIiwiQmlnSW50IiwiQk5fMSIsIkJOX01BWF9VSU5UMjU2IiwiQ29kZXIiLCJjb25zdHJ1Y3RvciIsInNpemUiLCJzaWduZWQiLCJsb2NhbE5hbWUiLCJuYW1lIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmF1bHRWYWx1ZSIsImVuY29kZSIsIndyaXRlciIsIl92YWx1ZSIsImdldEJpZ0ludCIsIlR5cGVkIiwiZGVyZWZlcmVuY2UiLCJ0eXBlIiwibWF4VWludFZhbHVlIiwibWFzayIsIldvcmRTaXplIiwiYm91bmRzIiwiX3Rocm93RXJyb3IiLCJ0b1R3b3MiLCJ3cml0ZVZhbHVlIiwiZGVjb2RlIiwicmVhZGVyIiwicmVhZFZhbHVlIiwiZnJvbVR3b3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/number.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/string.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/abi/coders/string.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StringCoder = void 0;\nconst utf8_js_1 = __webpack_require__(/*! ../../utils/utf8.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/utf8.js\");\nconst typed_js_1 = __webpack_require__(/*! ../typed.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/typed.js\");\nconst bytes_js_1 = __webpack_require__(/*! ./bytes.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/bytes.js\");\n/**\n *  @_ignore\n */ class StringCoder extends bytes_js_1.DynamicBytesCoder {\n    constructor(localName){\n        super(\"string\", localName);\n    }\n    defaultValue() {\n        return \"\";\n    }\n    encode(writer, _value) {\n        return super.encode(writer, (0, utf8_js_1.toUtf8Bytes)(typed_js_1.Typed.dereference(_value, \"string\")));\n    }\n    decode(reader) {\n        return (0, utf8_js_1.toUtf8String)(super.decode(reader));\n    }\n}\nexports.StringCoder = StringCoder; //# sourceMappingURL=string.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9hYmkvY29kZXJzL3N0cmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUJBQW1CLEdBQUcsS0FBSztBQUMzQixNQUFNRyxZQUFZQyxtQkFBT0EsQ0FBQyxtRkFBcUI7QUFDL0MsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUMsMEVBQWE7QUFDeEMsTUFBTUUsYUFBYUYsbUJBQU9BLENBQUMsZ0ZBQVk7QUFDdkM7O0NBRUMsR0FDRCxNQUFNRixvQkFBb0JJLFdBQVdDLGlCQUFpQjtJQUNsREMsWUFBWUMsU0FBUyxDQUFFO1FBQ25CLEtBQUssQ0FBQyxVQUFVQTtJQUNwQjtJQUNBQyxlQUFlO1FBQ1gsT0FBTztJQUNYO0lBQ0FDLE9BQU9DLE1BQU0sRUFBRUMsTUFBTSxFQUFFO1FBQ25CLE9BQU8sS0FBSyxDQUFDRixPQUFPQyxRQUFRLENBQUMsR0FBR1QsVUFBVVcsV0FBVyxFQUFFVCxXQUFXVSxLQUFLLENBQUNDLFdBQVcsQ0FBQ0gsUUFBUTtJQUNoRztJQUNBSSxPQUFPQyxNQUFNLEVBQUU7UUFDWCxPQUFPLENBQUMsR0FBR2YsVUFBVWdCLFlBQVksRUFBRSxLQUFLLENBQUNGLE9BQU9DO0lBQ3BEO0FBQ0o7QUFDQWxCLG1CQUFtQixHQUFHRSxhQUN0QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9hYmkvY29kZXJzL3N0cmluZy5qcz9kZWY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdHJpbmdDb2RlciA9IHZvaWQgMDtcbmNvbnN0IHV0ZjhfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy91dGY4LmpzXCIpO1xuY29uc3QgdHlwZWRfanNfMSA9IHJlcXVpcmUoXCIuLi90eXBlZC5qc1wiKTtcbmNvbnN0IGJ5dGVzX2pzXzEgPSByZXF1aXJlKFwiLi9ieXRlcy5qc1wiKTtcbi8qKlxuICogIEBfaWdub3JlXG4gKi9cbmNsYXNzIFN0cmluZ0NvZGVyIGV4dGVuZHMgYnl0ZXNfanNfMS5EeW5hbWljQnl0ZXNDb2RlciB7XG4gICAgY29uc3RydWN0b3IobG9jYWxOYW1lKSB7XG4gICAgICAgIHN1cGVyKFwic3RyaW5nXCIsIGxvY2FsTmFtZSk7XG4gICAgfVxuICAgIGRlZmF1bHRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIGVuY29kZSh3cml0ZXIsIF92YWx1ZSkge1xuICAgICAgICByZXR1cm4gc3VwZXIuZW5jb2RlKHdyaXRlciwgKDAsIHV0ZjhfanNfMS50b1V0ZjhCeXRlcykodHlwZWRfanNfMS5UeXBlZC5kZXJlZmVyZW5jZShfdmFsdWUsIFwic3RyaW5nXCIpKSk7XG4gICAgfVxuICAgIGRlY29kZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuICgwLCB1dGY4X2pzXzEudG9VdGY4U3RyaW5nKShzdXBlci5kZWNvZGUocmVhZGVyKSk7XG4gICAgfVxufVxuZXhwb3J0cy5TdHJpbmdDb2RlciA9IFN0cmluZ0NvZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaW5nLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlN0cmluZ0NvZGVyIiwidXRmOF9qc18xIiwicmVxdWlyZSIsInR5cGVkX2pzXzEiLCJieXRlc19qc18xIiwiRHluYW1pY0J5dGVzQ29kZXIiLCJjb25zdHJ1Y3RvciIsImxvY2FsTmFtZSIsImRlZmF1bHRWYWx1ZSIsImVuY29kZSIsIndyaXRlciIsIl92YWx1ZSIsInRvVXRmOEJ5dGVzIiwiVHlwZWQiLCJkZXJlZmVyZW5jZSIsImRlY29kZSIsInJlYWRlciIsInRvVXRmOFN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/string.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/tuple.js":
/*!**************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/abi/coders/tuple.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TupleCoder = void 0;\nconst properties_js_1 = __webpack_require__(/*! ../../utils/properties.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/properties.js\");\nconst typed_js_1 = __webpack_require__(/*! ../typed.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/typed.js\");\nconst abstract_coder_js_1 = __webpack_require__(/*! ./abstract-coder.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js\");\nconst array_js_1 = __webpack_require__(/*! ./array.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/array.js\");\n/**\n *  @_ignore\n */ class TupleCoder extends abstract_coder_js_1.Coder {\n    constructor(coders, localName){\n        let dynamic = false;\n        const types = [];\n        coders.forEach((coder)=>{\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        const type = \"tuple(\" + types.join(\",\") + \")\";\n        super(\"tuple\", type, localName, dynamic);\n        (0, properties_js_1.defineProperties)(this, {\n            coders: Object.freeze(coders.slice())\n        });\n    }\n    defaultValue() {\n        const values = [];\n        this.coders.forEach((coder)=>{\n            values.push(coder.defaultValue());\n        });\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder)=>{\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) {\n                    accum[name] = 0;\n                }\n                accum[name]++;\n            }\n            return accum;\n        }, {});\n        // Add named values\n        this.coders.forEach((coder, index)=>{\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) {\n                return;\n            }\n            if (name === \"length\") {\n                name = \"_length\";\n            }\n            if (values[name] != null) {\n                return;\n            }\n            values[name] = values[index];\n        });\n        return Object.freeze(values);\n    }\n    encode(writer, _value) {\n        const value = typed_js_1.Typed.dereference(_value, \"tuple\");\n        return (0, array_js_1.pack)(writer, this.coders, value);\n    }\n    decode(reader) {\n        return (0, array_js_1.unpack)(reader, this.coders);\n    }\n}\nexports.TupleCoder = TupleCoder; //# sourceMappingURL=tuple.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9hYmkvY29kZXJzL3R1cGxlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBRyxLQUFLO0FBQzFCLE1BQU1HLGtCQUFrQkMsbUJBQU9BLENBQUMsK0ZBQTJCO0FBQzNELE1BQU1DLGFBQWFELG1CQUFPQSxDQUFDLDBFQUFhO0FBQ3hDLE1BQU1FLHNCQUFzQkYsbUJBQU9BLENBQUMsa0dBQXFCO0FBQ3pELE1BQU1HLGFBQWFILG1CQUFPQSxDQUFDLGdGQUFZO0FBQ3ZDOztDQUVDLEdBQ0QsTUFBTUYsbUJBQW1CSSxvQkFBb0JFLEtBQUs7SUFFOUNDLFlBQVlDLE1BQU0sRUFBRUMsU0FBUyxDQUFFO1FBQzNCLElBQUlDLFVBQVU7UUFDZCxNQUFNQyxRQUFRLEVBQUU7UUFDaEJILE9BQU9JLE9BQU8sQ0FBQyxDQUFDQztZQUNaLElBQUlBLE1BQU1ILE9BQU8sRUFBRTtnQkFDZkEsVUFBVTtZQUNkO1lBQ0FDLE1BQU1HLElBQUksQ0FBQ0QsTUFBTUUsSUFBSTtRQUN6QjtRQUNBLE1BQU1BLE9BQVEsV0FBV0osTUFBTUssSUFBSSxDQUFDLE9BQU87UUFDM0MsS0FBSyxDQUFDLFNBQVNELE1BQU1OLFdBQVdDO1FBQy9CLElBQUdULGdCQUFnQmdCLGdCQUFnQixFQUFFLElBQUksRUFBRTtZQUFFVCxRQUFRWixPQUFPc0IsTUFBTSxDQUFDVixPQUFPVyxLQUFLO1FBQUk7SUFDeEY7SUFDQUMsZUFBZTtRQUNYLE1BQU1DLFNBQVMsRUFBRTtRQUNqQixJQUFJLENBQUNiLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDLENBQUNDO1lBQ2pCUSxPQUFPUCxJQUFJLENBQUNELE1BQU1PLFlBQVk7UUFDbEM7UUFDQSw0REFBNEQ7UUFDNUQsTUFBTUUsY0FBYyxJQUFJLENBQUNkLE1BQU0sQ0FBQ2UsTUFBTSxDQUFDLENBQUNDLE9BQU9YO1lBQzNDLE1BQU1ZLE9BQU9aLE1BQU1KLFNBQVM7WUFDNUIsSUFBSWdCLE1BQU07Z0JBQ04sSUFBSSxDQUFDRCxLQUFLLENBQUNDLEtBQUssRUFBRTtvQkFDZEQsS0FBSyxDQUFDQyxLQUFLLEdBQUc7Z0JBQ2xCO2dCQUNBRCxLQUFLLENBQUNDLEtBQUs7WUFDZjtZQUNBLE9BQU9EO1FBQ1gsR0FBRyxDQUFDO1FBQ0osbUJBQW1CO1FBQ25CLElBQUksQ0FBQ2hCLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDLENBQUNDLE9BQU9hO1lBQ3hCLElBQUlELE9BQU9aLE1BQU1KLFNBQVM7WUFDMUIsSUFBSSxDQUFDZ0IsUUFBUUgsV0FBVyxDQUFDRyxLQUFLLEtBQUssR0FBRztnQkFDbEM7WUFDSjtZQUNBLElBQUlBLFNBQVMsVUFBVTtnQkFDbkJBLE9BQU87WUFDWDtZQUNBLElBQUlKLE1BQU0sQ0FBQ0ksS0FBSyxJQUFJLE1BQU07Z0JBQ3RCO1lBQ0o7WUFDQUosTUFBTSxDQUFDSSxLQUFLLEdBQUdKLE1BQU0sQ0FBQ0ssTUFBTTtRQUNoQztRQUNBLE9BQU85QixPQUFPc0IsTUFBTSxDQUFDRztJQUN6QjtJQUNBTSxPQUFPQyxNQUFNLEVBQUVDLE1BQU0sRUFBRTtRQUNuQixNQUFNOUIsUUFBUUksV0FBVzJCLEtBQUssQ0FBQ0MsV0FBVyxDQUFDRixRQUFRO1FBQ25ELE9BQU8sQ0FBQyxHQUFHeEIsV0FBVzJCLElBQUksRUFBRUosUUFBUSxJQUFJLENBQUNwQixNQUFNLEVBQUVUO0lBQ3JEO0lBQ0FrQyxPQUFPQyxNQUFNLEVBQUU7UUFDWCxPQUFPLENBQUMsR0FBRzdCLFdBQVc4QixNQUFNLEVBQUVELFFBQVEsSUFBSSxDQUFDMUIsTUFBTTtJQUNyRDtBQUNKO0FBQ0FWLGtCQUFrQixHQUFHRSxZQUNyQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9hYmkvY29kZXJzL3R1cGxlLmpzPzU5MDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlR1cGxlQ29kZXIgPSB2b2lkIDA7XG5jb25zdCBwcm9wZXJ0aWVzX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvcHJvcGVydGllcy5qc1wiKTtcbmNvbnN0IHR5cGVkX2pzXzEgPSByZXF1aXJlKFwiLi4vdHlwZWQuanNcIik7XG5jb25zdCBhYnN0cmFjdF9jb2Rlcl9qc18xID0gcmVxdWlyZShcIi4vYWJzdHJhY3QtY29kZXIuanNcIik7XG5jb25zdCBhcnJheV9qc18xID0gcmVxdWlyZShcIi4vYXJyYXkuanNcIik7XG4vKipcbiAqICBAX2lnbm9yZVxuICovXG5jbGFzcyBUdXBsZUNvZGVyIGV4dGVuZHMgYWJzdHJhY3RfY29kZXJfanNfMS5Db2RlciB7XG4gICAgY29kZXJzO1xuICAgIGNvbnN0cnVjdG9yKGNvZGVycywgbG9jYWxOYW1lKSB7XG4gICAgICAgIGxldCBkeW5hbWljID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHR5cGVzID0gW107XG4gICAgICAgIGNvZGVycy5mb3JFYWNoKChjb2RlcikgPT4ge1xuICAgICAgICAgICAgaWYgKGNvZGVyLmR5bmFtaWMpIHtcbiAgICAgICAgICAgICAgICBkeW5hbWljID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHR5cGVzLnB1c2goY29kZXIudHlwZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB0eXBlID0gKFwidHVwbGUoXCIgKyB0eXBlcy5qb2luKFwiLFwiKSArIFwiKVwiKTtcbiAgICAgICAgc3VwZXIoXCJ0dXBsZVwiLCB0eXBlLCBsb2NhbE5hbWUsIGR5bmFtaWMpO1xuICAgICAgICAoMCwgcHJvcGVydGllc19qc18xLmRlZmluZVByb3BlcnRpZXMpKHRoaXMsIHsgY29kZXJzOiBPYmplY3QuZnJlZXplKGNvZGVycy5zbGljZSgpKSB9KTtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5jb2RlcnMuZm9yRWFjaCgoY29kZXIpID0+IHtcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKGNvZGVyLmRlZmF1bHRWYWx1ZSgpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFdlIG9ubHkgb3V0cHV0IG5hbWVkIHByb3BlcnRpZXMgZm9yIHVuaXF1ZWx5IG5hbWVkIGNvZGVyc1xuICAgICAgICBjb25zdCB1bmlxdWVOYW1lcyA9IHRoaXMuY29kZXJzLnJlZHVjZSgoYWNjdW0sIGNvZGVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gY29kZXIubG9jYWxOYW1lO1xuICAgICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWFjY3VtW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjY3VtW25hbWVdID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWNjdW1bbmFtZV0rKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhY2N1bTtcbiAgICAgICAgfSwge30pO1xuICAgICAgICAvLyBBZGQgbmFtZWQgdmFsdWVzXG4gICAgICAgIHRoaXMuY29kZXJzLmZvckVhY2goKGNvZGVyLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgbGV0IG5hbWUgPSBjb2Rlci5sb2NhbE5hbWU7XG4gICAgICAgICAgICBpZiAoIW5hbWUgfHwgdW5pcXVlTmFtZXNbbmFtZV0gIT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gXCJsZW5ndGhcIikge1xuICAgICAgICAgICAgICAgIG5hbWUgPSBcIl9sZW5ndGhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWx1ZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlc1tuYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh2YWx1ZXMpO1xuICAgIH1cbiAgICBlbmNvZGUod3JpdGVyLCBfdmFsdWUpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0eXBlZF9qc18xLlR5cGVkLmRlcmVmZXJlbmNlKF92YWx1ZSwgXCJ0dXBsZVwiKTtcbiAgICAgICAgcmV0dXJuICgwLCBhcnJheV9qc18xLnBhY2spKHdyaXRlciwgdGhpcy5jb2RlcnMsIHZhbHVlKTtcbiAgICB9XG4gICAgZGVjb2RlKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gKDAsIGFycmF5X2pzXzEudW5wYWNrKShyZWFkZXIsIHRoaXMuY29kZXJzKTtcbiAgICB9XG59XG5leHBvcnRzLlR1cGxlQ29kZXIgPSBUdXBsZUNvZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHVwbGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVHVwbGVDb2RlciIsInByb3BlcnRpZXNfanNfMSIsInJlcXVpcmUiLCJ0eXBlZF9qc18xIiwiYWJzdHJhY3RfY29kZXJfanNfMSIsImFycmF5X2pzXzEiLCJDb2RlciIsImNvbnN0cnVjdG9yIiwiY29kZXJzIiwibG9jYWxOYW1lIiwiZHluYW1pYyIsInR5cGVzIiwiZm9yRWFjaCIsImNvZGVyIiwicHVzaCIsInR5cGUiLCJqb2luIiwiZGVmaW5lUHJvcGVydGllcyIsImZyZWV6ZSIsInNsaWNlIiwiZGVmYXVsdFZhbHVlIiwidmFsdWVzIiwidW5pcXVlTmFtZXMiLCJyZWR1Y2UiLCJhY2N1bSIsIm5hbWUiLCJpbmRleCIsImVuY29kZSIsIndyaXRlciIsIl92YWx1ZSIsIlR5cGVkIiwiZGVyZWZlcmVuY2UiLCJwYWNrIiwiZGVjb2RlIiwicmVhZGVyIiwidW5wYWNrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/tuple.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/abi/fragments.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/abi/fragments.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  A fragment is a single item from an ABI, which may represent any of:\n *\n *  - [Functions](FunctionFragment)\n *  - [Events](EventFragment)\n *  - [Constructors](ConstructorFragment)\n *  - Custom [Errors](ErrorFragment)\n *  - [Fallback or Receive](FallbackFragment) functions\n *\n *  @_subsection api/abi/abi-coder:Fragments  [about-fragments]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StructFragment = exports.FunctionFragment = exports.FallbackFragment = exports.ConstructorFragment = exports.EventFragment = exports.ErrorFragment = exports.NamedFragment = exports.Fragment = exports.ParamType = void 0;\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../hash/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/hash/index.js\");\n;\n// [ \"a\", \"b\" ] => { \"a\": 1, \"b\": 1 }\nfunction setify(items) {\n    const result = new Set();\n    items.forEach((k)=>result.add(k));\n    return Object.freeze(result);\n}\nconst _kwVisibDeploy = \"external public payable\";\nconst KwVisibDeploy = setify(_kwVisibDeploy.split(\" \"));\n// Visibility Keywords\nconst _kwVisib = \"constant external internal payable private public pure view\";\nconst KwVisib = setify(_kwVisib.split(\" \"));\nconst _kwTypes = \"constructor error event fallback function receive struct\";\nconst KwTypes = setify(_kwTypes.split(\" \"));\nconst _kwModifiers = \"calldata memory storage payable indexed\";\nconst KwModifiers = setify(_kwModifiers.split(\" \"));\nconst _kwOther = \"tuple returns\";\n// All Keywords\nconst _keywords = [\n    _kwTypes,\n    _kwModifiers,\n    _kwOther,\n    _kwVisib\n].join(\" \");\nconst Keywords = setify(_keywords.split(\" \"));\n// Single character tokens\nconst SimpleTokens = {\n    \"(\": \"OPEN_PAREN\",\n    \")\": \"CLOSE_PAREN\",\n    \"[\": \"OPEN_BRACKET\",\n    \"]\": \"CLOSE_BRACKET\",\n    \",\": \"COMMA\",\n    \"@\": \"AT\"\n};\n// Parser regexes to consume the next token\nconst regexWhitespacePrefix = new RegExp(\"^(\\\\s*)\");\nconst regexNumberPrefix = new RegExp(\"^([0-9]+)\");\nconst regexIdPrefix = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)\");\n// Parser regexs to check validity\nconst regexId = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)$\");\nconst regexType = new RegExp(\"^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$\");\nclass TokenString {\n    #offset;\n    #tokens;\n    get offset() {\n        return this.#offset;\n    }\n    get length() {\n        return this.#tokens.length - this.#offset;\n    }\n    constructor(tokens){\n        this.#offset = 0;\n        this.#tokens = tokens.slice();\n    }\n    clone() {\n        return new TokenString(this.#tokens);\n    }\n    reset() {\n        this.#offset = 0;\n    }\n    #subTokenString(from = 0, to = 0) {\n        return new TokenString(this.#tokens.slice(from, to).map((t)=>{\n            return Object.freeze(Object.assign({}, t, {\n                match: t.match - from,\n                linkBack: t.linkBack - from,\n                linkNext: t.linkNext - from\n            }));\n        }));\n    }\n    // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens\n    popKeyword(allowed) {\n        const top = this.peek();\n        if (top.type !== \"KEYWORD\" || !allowed.has(top.text)) {\n            throw new Error(`expected keyword ${top.text}`);\n        }\n        return this.pop().text;\n    }\n    // Pops and returns the value of the next token if it is `type`; throws if out of tokens\n    popType(type) {\n        if (this.peek().type !== type) {\n            throw new Error(`expected ${type}; got ${JSON.stringify(this.peek())}`);\n        }\n        return this.pop().text;\n    }\n    // Pops and returns a \"(\" TOKENS \")\"\n    popParen() {\n        const top = this.peek();\n        if (top.type !== \"OPEN_PAREN\") {\n            throw new Error(\"bad start\");\n        }\n        const result = this.#subTokenString(this.#offset + 1, top.match + 1);\n        this.#offset = top.match + 1;\n        return result;\n    }\n    // Pops and returns the items within \"(\" ITEM1 \",\" ITEM2 \",\" ... \")\"\n    popParams() {\n        const top = this.peek();\n        if (top.type !== \"OPEN_PAREN\") {\n            throw new Error(\"bad start\");\n        }\n        const result = [];\n        while(this.#offset < top.match - 1){\n            const link = this.peek().linkNext;\n            result.push(this.#subTokenString(this.#offset + 1, link));\n            this.#offset = link;\n        }\n        this.#offset = top.match + 1;\n        return result;\n    }\n    // Returns the top Token, throwing if out of tokens\n    peek() {\n        if (this.#offset >= this.#tokens.length) {\n            throw new Error(\"out-of-bounds\");\n        }\n        return this.#tokens[this.#offset];\n    }\n    // Returns the next value, if it is a keyword in `allowed`\n    peekKeyword(allowed) {\n        const top = this.peekType(\"KEYWORD\");\n        return top != null && allowed.has(top) ? top : null;\n    }\n    // Returns the value of the next token if it is `type`\n    peekType(type) {\n        if (this.length === 0) {\n            return null;\n        }\n        const top = this.peek();\n        return top.type === type ? top.text : null;\n    }\n    // Returns the next token; throws if out of tokens\n    pop() {\n        const result = this.peek();\n        this.#offset++;\n        return result;\n    }\n    toString() {\n        const tokens = [];\n        for(let i = this.#offset; i < this.#tokens.length; i++){\n            const token = this.#tokens[i];\n            tokens.push(`${token.type}:${token.text}`);\n        }\n        return `<TokenString ${tokens.join(\" \")}>`;\n    }\n}\nfunction lex(text) {\n    const tokens = [];\n    const throwError = (message)=>{\n        const token = offset < text.length ? JSON.stringify(text[offset]) : \"$EOI\";\n        throw new Error(`invalid token ${token} at ${offset}: ${message}`);\n    };\n    let brackets = [];\n    let commas = [];\n    let offset = 0;\n    while(offset < text.length){\n        // Strip off any leading whitespace\n        let cur = text.substring(offset);\n        let match = cur.match(regexWhitespacePrefix);\n        if (match) {\n            offset += match[1].length;\n            cur = text.substring(offset);\n        }\n        const token = {\n            depth: brackets.length,\n            linkBack: -1,\n            linkNext: -1,\n            match: -1,\n            type: \"\",\n            text: \"\",\n            offset,\n            value: -1\n        };\n        tokens.push(token);\n        let type = SimpleTokens[cur[0]] || \"\";\n        if (type) {\n            token.type = type;\n            token.text = cur[0];\n            offset++;\n            if (type === \"OPEN_PAREN\") {\n                brackets.push(tokens.length - 1);\n                commas.push(tokens.length - 1);\n            } else if (type == \"CLOSE_PAREN\") {\n                if (brackets.length === 0) {\n                    throwError(\"no matching open bracket\");\n                }\n                token.match = brackets.pop();\n                tokens[token.match].match = tokens.length - 1;\n                token.depth--;\n                token.linkBack = commas.pop();\n                tokens[token.linkBack].linkNext = tokens.length - 1;\n            } else if (type === \"COMMA\") {\n                token.linkBack = commas.pop();\n                tokens[token.linkBack].linkNext = tokens.length - 1;\n                commas.push(tokens.length - 1);\n            } else if (type === \"OPEN_BRACKET\") {\n                token.type = \"BRACKET\";\n            } else if (type === \"CLOSE_BRACKET\") {\n                // Remove the CLOSE_BRACKET\n                let suffix = tokens.pop().text;\n                if (tokens.length > 0 && tokens[tokens.length - 1].type === \"NUMBER\") {\n                    const value = tokens.pop().text;\n                    suffix = value + suffix;\n                    tokens[tokens.length - 1].value = (0, index_js_1.getNumber)(value);\n                }\n                if (tokens.length === 0 || tokens[tokens.length - 1].type !== \"BRACKET\") {\n                    throw new Error(\"missing opening bracket\");\n                }\n                tokens[tokens.length - 1].text += suffix;\n            }\n            continue;\n        }\n        match = cur.match(regexIdPrefix);\n        if (match) {\n            token.text = match[1];\n            offset += token.text.length;\n            if (Keywords.has(token.text)) {\n                token.type = \"KEYWORD\";\n                continue;\n            }\n            if (token.text.match(regexType)) {\n                token.type = \"TYPE\";\n                continue;\n            }\n            token.type = \"ID\";\n            continue;\n        }\n        match = cur.match(regexNumberPrefix);\n        if (match) {\n            token.text = match[1];\n            token.type = \"NUMBER\";\n            offset += token.text.length;\n            continue;\n        }\n        throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);\n    }\n    return new TokenString(tokens.map((t)=>Object.freeze(t)));\n}\n// Check only one of `allowed` is in `set`\nfunction allowSingle(set, allowed) {\n    let included = [];\n    for(const key in allowed.keys()){\n        if (set.has(key)) {\n            included.push(key);\n        }\n    }\n    if (included.length > 1) {\n        throw new Error(`conflicting types: ${included.join(\", \")}`);\n    }\n}\n// Functions to process a Solidity Signature TokenString from left-to-right for...\n// ...the name with an optional type, returning the name\nfunction consumeName(type, tokens) {\n    if (tokens.peekKeyword(KwTypes)) {\n        const keyword = tokens.pop().text;\n        if (keyword !== type) {\n            throw new Error(`expected ${type}, got ${keyword}`);\n        }\n    }\n    return tokens.popType(\"ID\");\n}\n// ...all keywords matching allowed, returning the keywords\nfunction consumeKeywords(tokens, allowed) {\n    const keywords = new Set();\n    while(true){\n        const keyword = tokens.peekType(\"KEYWORD\");\n        if (keyword == null || allowed && !allowed.has(keyword)) {\n            break;\n        }\n        tokens.pop();\n        if (keywords.has(keyword)) {\n            throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);\n        }\n        keywords.add(keyword);\n    }\n    return Object.freeze(keywords);\n}\n// ...all visibility keywords, returning the coalesced mutability\nfunction consumeMutability(tokens) {\n    let modifiers = consumeKeywords(tokens, KwVisib);\n    // Detect conflicting modifiers\n    allowSingle(modifiers, setify(\"constant payable nonpayable\".split(\" \")));\n    allowSingle(modifiers, setify(\"pure view payable nonpayable\".split(\" \")));\n    // Process mutability states\n    if (modifiers.has(\"view\")) {\n        return \"view\";\n    }\n    if (modifiers.has(\"pure\")) {\n        return \"pure\";\n    }\n    if (modifiers.has(\"payable\")) {\n        return \"payable\";\n    }\n    if (modifiers.has(\"nonpayable\")) {\n        return \"nonpayable\";\n    }\n    // Process legacy `constant` last\n    if (modifiers.has(\"constant\")) {\n        return \"view\";\n    }\n    return \"nonpayable\";\n}\n// ...a parameter list, returning the ParamType list\nfunction consumeParams(tokens, allowIndexed) {\n    return tokens.popParams().map((t)=>ParamType.from(t, allowIndexed));\n}\n// ...a gas limit, returning a BigNumber or null if none\nfunction consumeGas(tokens) {\n    if (tokens.peekType(\"AT\")) {\n        tokens.pop();\n        if (tokens.peekType(\"NUMBER\")) {\n            return (0, index_js_1.getBigInt)(tokens.pop().text);\n        }\n        throw new Error(\"invalid gas\");\n    }\n    return null;\n}\nfunction consumeEoi(tokens) {\n    if (tokens.length) {\n        throw new Error(`unexpected tokens: ${tokens.toString()}`);\n    }\n}\nconst regexArrayType = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nfunction verifyBasicType(type) {\n    const match = type.match(regexType);\n    (0, index_js_1.assertArgument)(match, \"invalid type\", \"type\", type);\n    if (type === \"uint\") {\n        return \"uint256\";\n    }\n    if (type === \"int\") {\n        return \"int256\";\n    }\n    if (match[2]) {\n        // bytesXX\n        const length = parseInt(match[2]);\n        (0, index_js_1.assertArgument)(length !== 0 && length <= 32, \"invalid bytes length\", \"type\", type);\n    } else if (match[3]) {\n        // intXX or uintXX\n        const size = parseInt(match[3]);\n        (0, index_js_1.assertArgument)(size !== 0 && size <= 256 && size % 8 === 0, \"invalid numeric width\", \"type\", type);\n    }\n    return type;\n}\n// Make the Fragment constructors effectively private\nconst _guard = {};\nconst internal = Symbol.for(\"_ethers_internal\");\nconst ParamTypeInternal = \"_ParamTypeInternal\";\nconst ErrorFragmentInternal = \"_ErrorInternal\";\nconst EventFragmentInternal = \"_EventInternal\";\nconst ConstructorFragmentInternal = \"_ConstructorInternal\";\nconst FallbackFragmentInternal = \"_FallbackInternal\";\nconst FunctionFragmentInternal = \"_FunctionInternal\";\nconst StructFragmentInternal = \"_StructInternal\";\n/**\n *  Each input and output of a [[Fragment]] is an Array of **ParamType**.\n */ class ParamType {\n    /**\n     *  @private\n     */ constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren){\n        (0, index_js_1.assertPrivate)(guard, _guard, \"ParamType\");\n        Object.defineProperty(this, internal, {\n            value: ParamTypeInternal\n        });\n        if (components) {\n            components = Object.freeze(components.slice());\n        }\n        if (baseType === \"array\") {\n            if (arrayLength == null || arrayChildren == null) {\n                throw new Error(\"\");\n            }\n        } else if (arrayLength != null || arrayChildren != null) {\n            throw new Error(\"\");\n        }\n        if (baseType === \"tuple\") {\n            if (components == null) {\n                throw new Error(\"\");\n            }\n        } else if (components != null) {\n            throw new Error(\"\");\n        }\n        (0, index_js_1.defineProperties)(this, {\n            name,\n            type,\n            baseType,\n            indexed,\n            components,\n            arrayLength,\n            arrayChildren\n        });\n    }\n    /**\n     *  Return a string representation of this type.\n     *\n     *  For example,\n     *\n     *  ``sighash\" => \"(uint256,address)\"``\n     *\n     *  ``\"minimal\" => \"tuple(uint256,address) indexed\"``\n     *\n     *  ``\"full\" => \"tuple(uint256 foo, address bar) indexed baz\"``\n     */ format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            const name = this.name || \"\";\n            if (this.isArray()) {\n                const result = JSON.parse(this.arrayChildren.format(\"json\"));\n                result.name = name;\n                result.type += `[${this.arrayLength < 0 ? \"\" : String(this.arrayLength)}]`;\n                return JSON.stringify(result);\n            }\n            const result = {\n                type: this.baseType === \"tuple\" ? \"tuple\" : this.type,\n                name\n            };\n            if (typeof this.indexed === \"boolean\") {\n                result.indexed = this.indexed;\n            }\n            if (this.isTuple()) {\n                result.components = this.components.map((c)=>JSON.parse(c.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n        let result = \"\";\n        // Array\n        if (this.isArray()) {\n            result += this.arrayChildren.format(format);\n            result += `[${this.arrayLength < 0 ? \"\" : String(this.arrayLength)}]`;\n        } else {\n            if (this.isTuple()) {\n                if (format !== \"sighash\") {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map((comp)=>comp.format(format)).join(format === \"full\" ? \", \" : \",\") + \")\";\n            } else {\n                result += this.type;\n            }\n        }\n        if (format !== \"sighash\") {\n            if (this.indexed === true) {\n                result += \" indexed\";\n            }\n            if (format === \"full\" && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n        return result;\n    }\n    /**\n     *  Returns true if %%this%% is an Array type.\n     *\n     *  This provides a type gaurd ensuring that [[arrayChildren]]\n     *  and [[arrayLength]] are non-null.\n     */ isArray() {\n        return this.baseType === \"array\";\n    }\n    /**\n     *  Returns true if %%this%% is a Tuple type.\n     *\n     *  This provides a type gaurd ensuring that [[components]]\n     *  is non-null.\n     */ isTuple() {\n        return this.baseType === \"tuple\";\n    }\n    /**\n     *  Returns true if %%this%% is an Indexable type.\n     *\n     *  This provides a type gaurd ensuring that [[indexed]]\n     *  is non-null.\n     */ isIndexable() {\n        return this.indexed != null;\n    }\n    /**\n     *  Walks the **ParamType** with %%value%%, calling %%process%%\n     *  on each type, destructing the %%value%% recursively.\n     */ walk(value, process) {\n        if (this.isArray()) {\n            if (!Array.isArray(value)) {\n                throw new Error(\"invalid array value\");\n            }\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n                throw new Error(\"array is wrong length\");\n            }\n            const _this = this;\n            return value.map((v)=>_this.arrayChildren.walk(v, process));\n        }\n        if (this.isTuple()) {\n            if (!Array.isArray(value)) {\n                throw new Error(\"invalid tuple value\");\n            }\n            if (value.length !== this.components.length) {\n                throw new Error(\"array is wrong length\");\n            }\n            const _this = this;\n            return value.map((v, i)=>_this.components[i].walk(v, process));\n        }\n        return process(this.type, value);\n    }\n    #walkAsync(promises, value, process, setValue) {\n        if (this.isArray()) {\n            if (!Array.isArray(value)) {\n                throw new Error(\"invalid array value\");\n            }\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n                throw new Error(\"array is wrong length\");\n            }\n            const childType = this.arrayChildren;\n            const result = value.slice();\n            result.forEach((value, index)=>{\n                childType.#walkAsync(promises, value, process, (value)=>{\n                    result[index] = value;\n                });\n            });\n            setValue(result);\n            return;\n        }\n        if (this.isTuple()) {\n            const components = this.components;\n            // Convert the object into an array\n            let result;\n            if (Array.isArray(value)) {\n                result = value.slice();\n            } else {\n                if (value == null || typeof value !== \"object\") {\n                    throw new Error(\"invalid tuple value\");\n                }\n                result = components.map((param)=>{\n                    if (!param.name) {\n                        throw new Error(\"cannot use object value with unnamed components\");\n                    }\n                    if (!(param.name in value)) {\n                        throw new Error(`missing value for component ${param.name}`);\n                    }\n                    return value[param.name];\n                });\n            }\n            if (result.length !== this.components.length) {\n                throw new Error(\"array is wrong length\");\n            }\n            result.forEach((value, index)=>{\n                components[index].#walkAsync(promises, value, process, (value)=>{\n                    result[index] = value;\n                });\n            });\n            setValue(result);\n            return;\n        }\n        const result = process(this.type, value);\n        if (result.then) {\n            promises.push(async function() {\n                setValue(await result);\n            }());\n        } else {\n            setValue(result);\n        }\n    }\n    /**\n     *  Walks the **ParamType** with %%value%%, asynchronously calling\n     *  %%process%% on each type, destructing the %%value%% recursively.\n     *\n     *  This can be used to resolve ENS naes by walking and resolving each\n     *  ``\"address\"`` type.\n     */ async walkAsync(value, process) {\n        const promises = [];\n        const result = [\n            value\n        ];\n        this.#walkAsync(promises, value, process, (value)=>{\n            result[0] = value;\n        });\n        if (promises.length) {\n            await Promise.all(promises);\n        }\n        return result[0];\n    }\n    /**\n     *  Creates a new **ParamType** for %%obj%%.\n     *\n     *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,\n     *  otherwise the ``indexed`` keyword will throw an error.\n     */ static from(obj, allowIndexed) {\n        if (ParamType.isParamType(obj)) {\n            return obj;\n        }\n        if (typeof obj === \"string\") {\n            try {\n                return ParamType.from(lex(obj), allowIndexed);\n            } catch (error) {\n                (0, index_js_1.assertArgument)(false, \"invalid param type\", \"obj\", obj);\n            }\n        } else if (obj instanceof TokenString) {\n            let type = \"\", baseType = \"\";\n            let comps = null;\n            if (consumeKeywords(obj, setify([\n                \"tuple\"\n            ])).has(\"tuple\") || obj.peekType(\"OPEN_PAREN\")) {\n                // Tuple\n                baseType = \"tuple\";\n                comps = obj.popParams().map((t)=>ParamType.from(t));\n                type = `tuple(${comps.map((c)=>c.format()).join(\",\")})`;\n            } else {\n                // Normal\n                type = verifyBasicType(obj.popType(\"TYPE\"));\n                baseType = type;\n            }\n            // Check for Array\n            let arrayChildren = null;\n            let arrayLength = null;\n            while(obj.length && obj.peekType(\"BRACKET\")){\n                const bracket = obj.pop(); //arrays[i];\n                arrayChildren = new ParamType(_guard, \"\", type, baseType, null, comps, arrayLength, arrayChildren);\n                arrayLength = bracket.value;\n                type += bracket.text;\n                baseType = \"array\";\n                comps = null;\n            }\n            let indexed = null;\n            const keywords = consumeKeywords(obj, KwModifiers);\n            if (keywords.has(\"indexed\")) {\n                if (!allowIndexed) {\n                    throw new Error(\"\");\n                }\n                indexed = true;\n            }\n            const name = obj.peekType(\"ID\") ? obj.pop().text : \"\";\n            if (obj.length) {\n                throw new Error(\"leftover tokens\");\n            }\n            return new ParamType(_guard, name, type, baseType, indexed, comps, arrayLength, arrayChildren);\n        }\n        const name = obj.name;\n        (0, index_js_1.assertArgument)(!name || typeof name === \"string\" && name.match(regexId), \"invalid name\", \"obj.name\", name);\n        let indexed = obj.indexed;\n        if (indexed != null) {\n            (0, index_js_1.assertArgument)(allowIndexed, \"parameter cannot be indexed\", \"obj.indexed\", obj.indexed);\n            indexed = !!indexed;\n        }\n        let type = obj.type;\n        let arrayMatch = type.match(regexArrayType);\n        if (arrayMatch) {\n            const arrayLength = parseInt(arrayMatch[2] || \"-1\");\n            const arrayChildren = ParamType.from({\n                type: arrayMatch[1],\n                components: obj.components\n            });\n            return new ParamType(_guard, name || \"\", type, \"array\", indexed, null, arrayLength, arrayChildren);\n        }\n        if (type === \"tuple\" || type.startsWith(\"tuple(\" /* fix: ) */ ) || type.startsWith(\"(\" /* fix: ) */ )) {\n            const comps = obj.components != null ? obj.components.map((c)=>ParamType.from(c)) : null;\n            const tuple = new ParamType(_guard, name || \"\", type, \"tuple\", indexed, comps, null, null);\n            // @TODO: use lexer to validate and normalize type\n            return tuple;\n        }\n        type = verifyBasicType(obj.type);\n        return new ParamType(_guard, name || \"\", type, type, indexed, null, null, null);\n    }\n    /**\n     *  Returns true if %%value%% is a **ParamType**.\n     */ static isParamType(value) {\n        return value && value[internal] === ParamTypeInternal;\n    }\n}\nexports.ParamType = ParamType;\n/**\n *  An abstract class to represent An individual fragment from a parse ABI.\n */ class Fragment {\n    /**\n     *  @private\n     */ constructor(guard, type, inputs){\n        (0, index_js_1.assertPrivate)(guard, _guard, \"Fragment\");\n        inputs = Object.freeze(inputs.slice());\n        (0, index_js_1.defineProperties)(this, {\n            type,\n            inputs\n        });\n    }\n    /**\n     *  Creates a new **Fragment** for %%obj%%, wich can be any supported\n     *  ABI frgament type.\n     */ static from(obj) {\n        if (typeof obj === \"string\") {\n            // Try parsing JSON...\n            try {\n                Fragment.from(JSON.parse(obj));\n            } catch (e) {}\n            // ...otherwise, use the human-readable lexer\n            return Fragment.from(lex(obj));\n        }\n        if (obj instanceof TokenString) {\n            // Human-readable ABI (already lexed)\n            const type = obj.peekKeyword(KwTypes);\n            switch(type){\n                case \"constructor\":\n                    return ConstructorFragment.from(obj);\n                case \"error\":\n                    return ErrorFragment.from(obj);\n                case \"event\":\n                    return EventFragment.from(obj);\n                case \"fallback\":\n                case \"receive\":\n                    return FallbackFragment.from(obj);\n                case \"function\":\n                    return FunctionFragment.from(obj);\n                case \"struct\":\n                    return StructFragment.from(obj);\n            }\n        } else if (typeof obj === \"object\") {\n            // JSON ABI\n            switch(obj.type){\n                case \"constructor\":\n                    return ConstructorFragment.from(obj);\n                case \"error\":\n                    return ErrorFragment.from(obj);\n                case \"event\":\n                    return EventFragment.from(obj);\n                case \"fallback\":\n                case \"receive\":\n                    return FallbackFragment.from(obj);\n                case \"function\":\n                    return FunctionFragment.from(obj);\n                case \"struct\":\n                    return StructFragment.from(obj);\n            }\n            (0, index_js_1.assert)(false, `unsupported type: ${obj.type}`, \"UNSUPPORTED_OPERATION\", {\n                operation: \"Fragment.from\"\n            });\n        }\n        (0, index_js_1.assertArgument)(false, \"unsupported frgament object\", \"obj\", obj);\n    }\n    /**\n     *  Returns true if %%value%% is a [[ConstructorFragment]].\n     */ static isConstructor(value) {\n        return ConstructorFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is an [[ErrorFragment]].\n     */ static isError(value) {\n        return ErrorFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is an [[EventFragment]].\n     */ static isEvent(value) {\n        return EventFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is a [[FunctionFragment]].\n     */ static isFunction(value) {\n        return FunctionFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is a [[StructFragment]].\n     */ static isStruct(value) {\n        return StructFragment.isFragment(value);\n    }\n}\nexports.Fragment = Fragment;\n/**\n *  An abstract class to represent An individual fragment\n *  which has a name from a parse ABI.\n */ class NamedFragment extends Fragment {\n    /**\n     *  @private\n     */ constructor(guard, type, name, inputs){\n        super(guard, type, inputs);\n        (0, index_js_1.assertArgument)(typeof name === \"string\" && name.match(regexId), \"invalid identifier\", \"name\", name);\n        inputs = Object.freeze(inputs.slice());\n        (0, index_js_1.defineProperties)(this, {\n            name\n        });\n    }\n}\nexports.NamedFragment = NamedFragment;\nfunction joinParams(format, params) {\n    return \"(\" + params.map((p)=>p.format(format)).join(format === \"full\" ? \", \" : \",\") + \")\";\n}\n/**\n *  A Fragment which represents a //Custom Error//.\n */ class ErrorFragment extends NamedFragment {\n    /**\n     *  @private\n     */ constructor(guard, name, inputs){\n        super(guard, \"error\", name, inputs);\n        Object.defineProperty(this, internal, {\n            value: ErrorFragmentInternal\n        });\n    }\n    /**\n     *  The Custom Error selector.\n     */ get selector() {\n        return (0, index_js_2.id)(this.format(\"sighash\")).substring(0, 10);\n    }\n    /**\n     *  Returns a string representation of this fragment as %%format%%.\n     */ format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input)=>JSON.parse(input.format(format)))\n            });\n        }\n        const result = [];\n        if (format !== \"sighash\") {\n            result.push(\"error\");\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        return result.join(\" \");\n    }\n    /**\n     *  Returns a new **ErrorFragment** for %%obj%%.\n     */ static from(obj) {\n        if (ErrorFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof obj === \"string\") {\n            return ErrorFragment.from(lex(obj));\n        } else if (obj instanceof TokenString) {\n            const name = consumeName(\"error\", obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n            return new ErrorFragment(_guard, name, inputs);\n        }\n        return new ErrorFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is an\n     *  **ErrorFragment**.\n     */ static isFragment(value) {\n        return value && value[internal] === ErrorFragmentInternal;\n    }\n}\nexports.ErrorFragment = ErrorFragment;\n/**\n *  A Fragment which represents an Event.\n */ class EventFragment extends NamedFragment {\n    /**\n     *  @private\n     */ constructor(guard, name, inputs, anonymous){\n        super(guard, \"event\", name, inputs);\n        Object.defineProperty(this, internal, {\n            value: EventFragmentInternal\n        });\n        (0, index_js_1.defineProperties)(this, {\n            anonymous\n        });\n    }\n    /**\n     *  The Event topic hash.\n     */ get topicHash() {\n        return (0, index_js_2.id)(this.format(\"sighash\"));\n    }\n    /**\n     *  Returns a string representation of this event as %%format%%.\n     */ format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((i)=>JSON.parse(i.format(format)))\n            });\n        }\n        const result = [];\n        if (format !== \"sighash\") {\n            result.push(\"event\");\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        if (format !== \"sighash\" && this.anonymous) {\n            result.push(\"anonymous\");\n        }\n        return result.join(\" \");\n    }\n    /**\n     *  Return the topic hash for an event with %%name%% and %%params%%.\n     */ static getTopicHash(name, params) {\n        params = (params || []).map((p)=>ParamType.from(p));\n        const fragment = new EventFragment(_guard, name, params, false);\n        return fragment.topicHash;\n    }\n    /**\n     *  Returns a new **EventFragment** for %%obj%%.\n     */ static from(obj) {\n        if (EventFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof obj === \"string\") {\n            try {\n                return EventFragment.from(lex(obj));\n            } catch (error) {\n                (0, index_js_1.assertArgument)(false, \"invalid event fragment\", \"obj\", obj);\n            }\n        } else if (obj instanceof TokenString) {\n            const name = consumeName(\"event\", obj);\n            const inputs = consumeParams(obj, true);\n            const anonymous = !!consumeKeywords(obj, setify([\n                \"anonymous\"\n            ])).has(\"anonymous\");\n            consumeEoi(obj);\n            return new EventFragment(_guard, name, inputs, anonymous);\n        }\n        return new EventFragment(_guard, obj.name, obj.inputs ? obj.inputs.map((p)=>ParamType.from(p, true)) : [], !!obj.anonymous);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is an\n     *  **EventFragment**.\n     */ static isFragment(value) {\n        return value && value[internal] === EventFragmentInternal;\n    }\n}\nexports.EventFragment = EventFragment;\n/**\n *  A Fragment which represents a constructor.\n */ class ConstructorFragment extends Fragment {\n    /**\n     *  @private\n     */ constructor(guard, type, inputs, payable, gas){\n        super(guard, type, inputs);\n        Object.defineProperty(this, internal, {\n            value: ConstructorFragmentInternal\n        });\n        (0, index_js_1.defineProperties)(this, {\n            payable,\n            gas\n        });\n    }\n    /**\n     *  Returns a string representation of this constructor as %%format%%.\n     */ format(format) {\n        (0, index_js_1.assert)(format != null && format !== \"sighash\", \"cannot format a constructor for sighash\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"format(sighash)\"\n        });\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: this.payable ? \"payable\" : \"undefined\",\n                payable: this.payable,\n                gas: this.gas != null ? this.gas : undefined,\n                inputs: this.inputs.map((i)=>JSON.parse(i.format(format)))\n            });\n        }\n        const result = [\n            `constructor${joinParams(format, this.inputs)}`\n        ];\n        result.push(this.payable ? \"payable\" : \"nonpayable\");\n        if (this.gas != null) {\n            result.push(`@${this.gas.toString()}`);\n        }\n        return result.join(\" \");\n    }\n    /**\n     *  Returns a new **ConstructorFragment** for %%obj%%.\n     */ static from(obj) {\n        if (ConstructorFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof obj === \"string\") {\n            try {\n                return ConstructorFragment.from(lex(obj));\n            } catch (error) {\n                (0, index_js_1.assertArgument)(false, \"invalid constuctor fragment\", \"obj\", obj);\n            }\n        } else if (obj instanceof TokenString) {\n            consumeKeywords(obj, setify([\n                \"constructor\"\n            ]));\n            const inputs = consumeParams(obj);\n            const payable = !!consumeKeywords(obj, KwVisibDeploy).has(\"payable\");\n            const gas = consumeGas(obj);\n            consumeEoi(obj);\n            return new ConstructorFragment(_guard, \"constructor\", inputs, payable, gas);\n        }\n        return new ConstructorFragment(_guard, \"constructor\", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **ConstructorFragment**.\n     */ static isFragment(value) {\n        return value && value[internal] === ConstructorFragmentInternal;\n    }\n}\nexports.ConstructorFragment = ConstructorFragment;\n/**\n *  A Fragment which represents a method.\n */ class FallbackFragment extends Fragment {\n    constructor(guard, inputs, payable){\n        super(guard, \"fallback\", inputs);\n        Object.defineProperty(this, internal, {\n            value: FallbackFragmentInternal\n        });\n        (0, index_js_1.defineProperties)(this, {\n            payable\n        });\n    }\n    /**\n     *  Returns a string representation of this fallback as %%format%%.\n     */ format(format) {\n        const type = this.inputs.length === 0 ? \"receive\" : \"fallback\";\n        if (format === \"json\") {\n            const stateMutability = this.payable ? \"payable\" : \"nonpayable\";\n            return JSON.stringify({\n                type,\n                stateMutability\n            });\n        }\n        return `${type}()${this.payable ? \" payable\" : \"\"}`;\n    }\n    /**\n     *  Returns a new **FallbackFragment** for %%obj%%.\n     */ static from(obj) {\n        if (FallbackFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof obj === \"string\") {\n            try {\n                return FallbackFragment.from(lex(obj));\n            } catch (error) {\n                (0, index_js_1.assertArgument)(false, \"invalid fallback fragment\", \"obj\", obj);\n            }\n        } else if (obj instanceof TokenString) {\n            const errorObj = obj.toString();\n            const topIsValid = obj.peekKeyword(setify([\n                \"fallback\",\n                \"receive\"\n            ]));\n            (0, index_js_1.assertArgument)(topIsValid, \"type must be fallback or receive\", \"obj\", errorObj);\n            const type = obj.popKeyword(setify([\n                \"fallback\",\n                \"receive\"\n            ]));\n            // receive()\n            if (type === \"receive\") {\n                const inputs = consumeParams(obj);\n                (0, index_js_1.assertArgument)(inputs.length === 0, `receive cannot have arguments`, \"obj.inputs\", inputs);\n                consumeKeywords(obj, setify([\n                    \"payable\"\n                ]));\n                consumeEoi(obj);\n                return new FallbackFragment(_guard, [], true);\n            }\n            // fallback() [payable]\n            // fallback(bytes) [payable] returns (bytes)\n            let inputs = consumeParams(obj);\n            if (inputs.length) {\n                (0, index_js_1.assertArgument)(inputs.length === 1 && inputs[0].type === \"bytes\", \"invalid fallback inputs\", \"obj.inputs\", inputs.map((i)=>i.format(\"minimal\")).join(\", \"));\n            } else {\n                inputs = [\n                    ParamType.from(\"bytes\")\n                ];\n            }\n            const mutability = consumeMutability(obj);\n            (0, index_js_1.assertArgument)(mutability === \"nonpayable\" || mutability === \"payable\", \"fallback cannot be constants\", \"obj.stateMutability\", mutability);\n            if (consumeKeywords(obj, setify([\n                \"returns\"\n            ])).has(\"returns\")) {\n                const outputs = consumeParams(obj);\n                (0, index_js_1.assertArgument)(outputs.length === 1 && outputs[0].type === \"bytes\", \"invalid fallback outputs\", \"obj.outputs\", outputs.map((i)=>i.format(\"minimal\")).join(\", \"));\n            }\n            consumeEoi(obj);\n            return new FallbackFragment(_guard, inputs, mutability === \"payable\");\n        }\n        if (obj.type === \"receive\") {\n            return new FallbackFragment(_guard, [], true);\n        }\n        if (obj.type === \"fallback\") {\n            const inputs = [\n                ParamType.from(\"bytes\")\n            ];\n            const payable = obj.stateMutability === \"payable\";\n            return new FallbackFragment(_guard, inputs, payable);\n        }\n        (0, index_js_1.assertArgument)(false, \"invalid fallback description\", \"obj\", obj);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **FallbackFragment**.\n     */ static isFragment(value) {\n        return value && value[internal] === FallbackFragmentInternal;\n    }\n}\nexports.FallbackFragment = FallbackFragment;\n/**\n *  A Fragment which represents a method.\n */ class FunctionFragment extends NamedFragment {\n    /**\n     *  @private\n     */ constructor(guard, name, stateMutability, inputs, outputs, gas){\n        super(guard, \"function\", name, inputs);\n        Object.defineProperty(this, internal, {\n            value: FunctionFragmentInternal\n        });\n        outputs = Object.freeze(outputs.slice());\n        const constant = stateMutability === \"view\" || stateMutability === \"pure\";\n        const payable = stateMutability === \"payable\";\n        (0, index_js_1.defineProperties)(this, {\n            constant,\n            gas,\n            outputs,\n            payable,\n            stateMutability\n        });\n    }\n    /**\n     *  The Function selector.\n     */ get selector() {\n        return (0, index_js_2.id)(this.format(\"sighash\")).substring(0, 10);\n    }\n    /**\n     *  Returns a string representation of this function as %%format%%.\n     */ format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n                payable: this.payable,\n                gas: this.gas != null ? this.gas : undefined,\n                inputs: this.inputs.map((i)=>JSON.parse(i.format(format))),\n                outputs: this.outputs.map((o)=>JSON.parse(o.format(format)))\n            });\n        }\n        const result = [];\n        if (format !== \"sighash\") {\n            result.push(\"function\");\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        if (format !== \"sighash\") {\n            if (this.stateMutability !== \"nonpayable\") {\n                result.push(this.stateMutability);\n            }\n            if (this.outputs && this.outputs.length) {\n                result.push(\"returns\");\n                result.push(joinParams(format, this.outputs));\n            }\n            if (this.gas != null) {\n                result.push(`@${this.gas.toString()}`);\n            }\n        }\n        return result.join(\" \");\n    }\n    /**\n     *  Return the selector for a function with %%name%% and %%params%%.\n     */ static getSelector(name, params) {\n        params = (params || []).map((p)=>ParamType.from(p));\n        const fragment = new FunctionFragment(_guard, name, \"view\", params, [], null);\n        return fragment.selector;\n    }\n    /**\n     *  Returns a new **FunctionFragment** for %%obj%%.\n     */ static from(obj) {\n        if (FunctionFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof obj === \"string\") {\n            try {\n                return FunctionFragment.from(lex(obj));\n            } catch (error) {\n                (0, index_js_1.assertArgument)(false, \"invalid function fragment\", \"obj\", obj);\n            }\n        } else if (obj instanceof TokenString) {\n            const name = consumeName(\"function\", obj);\n            const inputs = consumeParams(obj);\n            const mutability = consumeMutability(obj);\n            let outputs = [];\n            if (consumeKeywords(obj, setify([\n                \"returns\"\n            ])).has(\"returns\")) {\n                outputs = consumeParams(obj);\n            }\n            const gas = consumeGas(obj);\n            consumeEoi(obj);\n            return new FunctionFragment(_guard, name, mutability, inputs, outputs, gas);\n        }\n        let stateMutability = obj.stateMutability;\n        // Use legacy Solidity ABI logic if stateMutability is missing\n        if (stateMutability == null) {\n            stateMutability = \"payable\";\n            if (typeof obj.constant === \"boolean\") {\n                stateMutability = \"view\";\n                if (!obj.constant) {\n                    stateMutability = \"payable\";\n                    if (typeof obj.payable === \"boolean\" && !obj.payable) {\n                        stateMutability = \"nonpayable\";\n                    }\n                }\n            } else if (typeof obj.payable === \"boolean\" && !obj.payable) {\n                stateMutability = \"nonpayable\";\n            }\n        }\n        // @TODO: verifyState for stateMutability (e.g. throw if\n        //        payable: false but stateMutability is \"nonpayable\")\n        return new FunctionFragment(_guard, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], obj.gas != null ? obj.gas : null);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **FunctionFragment**.\n     */ static isFragment(value) {\n        return value && value[internal] === FunctionFragmentInternal;\n    }\n}\nexports.FunctionFragment = FunctionFragment;\n/**\n *  A Fragment which represents a structure.\n */ class StructFragment extends NamedFragment {\n    /**\n     *  @private\n     */ constructor(guard, name, inputs){\n        super(guard, \"struct\", name, inputs);\n        Object.defineProperty(this, internal, {\n            value: StructFragmentInternal\n        });\n    }\n    /**\n     *  Returns a string representation of this struct as %%format%%.\n     */ format() {\n        throw new Error(\"@TODO\");\n    }\n    /**\n     *  Returns a new **StructFragment** for %%obj%%.\n     */ static from(obj) {\n        if (typeof obj === \"string\") {\n            try {\n                return StructFragment.from(lex(obj));\n            } catch (error) {\n                (0, index_js_1.assertArgument)(false, \"invalid struct fragment\", \"obj\", obj);\n            }\n        } else if (obj instanceof TokenString) {\n            const name = consumeName(\"struct\", obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n            return new StructFragment(_guard, name, inputs);\n        }\n        return new StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n    }\n    // @TODO: fix this return type\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **StructFragment**.\n     */ static isFragment(value) {\n        return value && value[internal] === StructFragmentInternal;\n    }\n}\nexports.StructFragment = StructFragment; //# sourceMappingURL=fragments.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/abi/fragments.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/abi/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/abi/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  The Application Binary Interface (ABI) describes how method input\n *  parameters should be encoded, their results decoded, and how to\n *  decode events and errors.\n *\n *  See [About ABIs](docs-abi) for more details how they are used.\n *\n *  @_section api/abi:Application Binary Interface  [about-abi]\n *  @_navTitle: ABI\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Typed = exports.Result = exports.TransactionDescription = exports.LogDescription = exports.ErrorDescription = exports.Interface = exports.Indexed = exports.checkResultErrors = exports.StructFragment = exports.ParamType = exports.NamedFragment = exports.FunctionFragment = exports.Fragment = exports.FallbackFragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.encodeBytes32String = exports.decodeBytes32String = exports.AbiCoder = void 0;\n//////\nvar abi_coder_js_1 = __webpack_require__(/*! ./abi-coder.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/abi-coder.js\");\nObject.defineProperty(exports, \"AbiCoder\", ({\n    enumerable: true,\n    get: function() {\n        return abi_coder_js_1.AbiCoder;\n    }\n}));\nvar bytes32_js_1 = __webpack_require__(/*! ./bytes32.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/bytes32.js\");\nObject.defineProperty(exports, \"decodeBytes32String\", ({\n    enumerable: true,\n    get: function() {\n        return bytes32_js_1.decodeBytes32String;\n    }\n}));\nObject.defineProperty(exports, \"encodeBytes32String\", ({\n    enumerable: true,\n    get: function() {\n        return bytes32_js_1.encodeBytes32String;\n    }\n}));\nvar fragments_js_1 = __webpack_require__(/*! ./fragments.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/fragments.js\");\nObject.defineProperty(exports, \"ConstructorFragment\", ({\n    enumerable: true,\n    get: function() {\n        return fragments_js_1.ConstructorFragment;\n    }\n}));\nObject.defineProperty(exports, \"ErrorFragment\", ({\n    enumerable: true,\n    get: function() {\n        return fragments_js_1.ErrorFragment;\n    }\n}));\nObject.defineProperty(exports, \"EventFragment\", ({\n    enumerable: true,\n    get: function() {\n        return fragments_js_1.EventFragment;\n    }\n}));\nObject.defineProperty(exports, \"FallbackFragment\", ({\n    enumerable: true,\n    get: function() {\n        return fragments_js_1.FallbackFragment;\n    }\n}));\nObject.defineProperty(exports, \"Fragment\", ({\n    enumerable: true,\n    get: function() {\n        return fragments_js_1.Fragment;\n    }\n}));\nObject.defineProperty(exports, \"FunctionFragment\", ({\n    enumerable: true,\n    get: function() {\n        return fragments_js_1.FunctionFragment;\n    }\n}));\nObject.defineProperty(exports, \"NamedFragment\", ({\n    enumerable: true,\n    get: function() {\n        return fragments_js_1.NamedFragment;\n    }\n}));\nObject.defineProperty(exports, \"ParamType\", ({\n    enumerable: true,\n    get: function() {\n        return fragments_js_1.ParamType;\n    }\n}));\nObject.defineProperty(exports, \"StructFragment\", ({\n    enumerable: true,\n    get: function() {\n        return fragments_js_1.StructFragment;\n    }\n}));\nvar interface_js_1 = __webpack_require__(/*! ./interface.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/interface.js\");\nObject.defineProperty(exports, \"checkResultErrors\", ({\n    enumerable: true,\n    get: function() {\n        return interface_js_1.checkResultErrors;\n    }\n}));\nObject.defineProperty(exports, \"Indexed\", ({\n    enumerable: true,\n    get: function() {\n        return interface_js_1.Indexed;\n    }\n}));\nObject.defineProperty(exports, \"Interface\", ({\n    enumerable: true,\n    get: function() {\n        return interface_js_1.Interface;\n    }\n}));\nObject.defineProperty(exports, \"ErrorDescription\", ({\n    enumerable: true,\n    get: function() {\n        return interface_js_1.ErrorDescription;\n    }\n}));\nObject.defineProperty(exports, \"LogDescription\", ({\n    enumerable: true,\n    get: function() {\n        return interface_js_1.LogDescription;\n    }\n}));\nObject.defineProperty(exports, \"TransactionDescription\", ({\n    enumerable: true,\n    get: function() {\n        return interface_js_1.TransactionDescription;\n    }\n}));\nObject.defineProperty(exports, \"Result\", ({\n    enumerable: true,\n    get: function() {\n        return interface_js_1.Result;\n    }\n}));\nvar typed_js_1 = __webpack_require__(/*! ./typed.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/typed.js\");\nObject.defineProperty(exports, \"Typed\", ({\n    enumerable: true,\n    get: function() {\n        return typed_js_1.Typed;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/abi/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/abi/interface.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/abi/interface.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  The Interface class is a low-level class that accepts an\n *  ABI and provides all the necessary functionality to encode\n *  and decode paramaters to and results from methods, events\n *  and errors.\n *\n *  It also provides several convenience methods to automatically\n *  search and find matching transactions and events to parse them.\n *\n *  @_subsection api/abi:Interfaces  [interfaces]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Interface = exports.Indexed = exports.ErrorDescription = exports.TransactionDescription = exports.LogDescription = exports.Result = exports.checkResultErrors = void 0;\nconst index_js_1 = __webpack_require__(/*! ../crypto/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../hash/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/hash/index.js\");\nconst index_js_3 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst abi_coder_js_1 = __webpack_require__(/*! ./abi-coder.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/abi-coder.js\");\nconst abstract_coder_js_1 = __webpack_require__(/*! ./coders/abstract-coder.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js\");\nObject.defineProperty(exports, \"checkResultErrors\", ({\n    enumerable: true,\n    get: function() {\n        return abstract_coder_js_1.checkResultErrors;\n    }\n}));\nObject.defineProperty(exports, \"Result\", ({\n    enumerable: true,\n    get: function() {\n        return abstract_coder_js_1.Result;\n    }\n}));\nconst fragments_js_1 = __webpack_require__(/*! ./fragments.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/fragments.js\");\nconst typed_js_1 = __webpack_require__(/*! ./typed.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/typed.js\");\n/**\n *  When using the [[Interface-parseLog]] to automatically match a Log to its event\n *  for parsing, a **LogDescription** is returned.\n */ class LogDescription {\n    /**\n     *  @_ignore:\n     */ constructor(fragment, topic, args){\n        const name = fragment.name, signature = fragment.format();\n        (0, index_js_3.defineProperties)(this, {\n            fragment,\n            name,\n            signature,\n            topic,\n            args\n        });\n    }\n}\nexports.LogDescription = LogDescription;\n/**\n *  When using the [[Interface-parseTransaction]] to automatically match\n *  a transaction data to its function for parsing,\n *  a **TransactionDescription** is returned.\n */ class TransactionDescription {\n    /**\n     *  @_ignore:\n     */ constructor(fragment, selector, args, value){\n        const name = fragment.name, signature = fragment.format();\n        (0, index_js_3.defineProperties)(this, {\n            fragment,\n            name,\n            args,\n            signature,\n            selector,\n            value\n        });\n    }\n}\nexports.TransactionDescription = TransactionDescription;\n/**\n *  When using the [[Interface-parseError]] to automatically match an\n *  error for a call result for parsing, an **ErrorDescription** is returned.\n */ class ErrorDescription {\n    /**\n     *  @_ignore:\n     */ constructor(fragment, selector, args){\n        const name = fragment.name, signature = fragment.format();\n        (0, index_js_3.defineProperties)(this, {\n            fragment,\n            name,\n            args,\n            signature,\n            selector\n        });\n    }\n}\nexports.ErrorDescription = ErrorDescription;\n/**\n *  An **Indexed** is used as a value when a value that does not\n *  fit within a topic (i.e. not a fixed-length, 32-byte type). It\n *  is the ``keccak256`` of the value, and used for types such as\n *  arrays, tuples, bytes and strings.\n */ class Indexed {\n    /**\n     *  Returns ``true`` if %%value%% is an **Indexed**.\n     *\n     *  This provides a Type Guard for property access.\n     */ static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n    /**\n     *  @_ignore:\n     */ constructor(hash){\n        (0, index_js_3.defineProperties)(this, {\n            hash,\n            _isIndexed: true\n        });\n    }\n}\nexports.Indexed = Indexed;\n// https://docs.soliditylang.org/en/v0.8.13/control-structures.html?highlight=panic#panic-via-assert-and-error-via-require\nconst PanicReasons = {\n    \"0\": \"generic panic\",\n    \"1\": \"assert(false)\",\n    \"17\": \"arithmetic overflow\",\n    \"18\": \"division or modulo by zero\",\n    \"33\": \"enum overflow\",\n    \"34\": \"invalid encoded storage byte array accessed\",\n    \"49\": \"out-of-bounds array access; popping on an empty array\",\n    \"50\": \"out-of-bounds access of an array or bytesN\",\n    \"65\": \"out of memory\",\n    \"81\": \"uninitialized function\"\n};\nconst BuiltinErrors = {\n    \"0x08c379a0\": {\n        signature: \"Error(string)\",\n        name: \"Error\",\n        inputs: [\n            \"string\"\n        ],\n        reason: (message)=>{\n            return `reverted with reason string ${JSON.stringify(message)}`;\n        }\n    },\n    \"0x4e487b71\": {\n        signature: \"Panic(uint256)\",\n        name: \"Panic\",\n        inputs: [\n            \"uint256\"\n        ],\n        reason: (code)=>{\n            let reason = \"unknown panic code\";\n            if (code >= 0 && code <= 0xff && PanicReasons[code.toString()]) {\n                reason = PanicReasons[code.toString()];\n            }\n            return `reverted with panic code 0x${code.toString(16)} (${reason})`;\n        }\n    }\n};\n/**\n *  An Interface abstracts many of the low-level details for\n *  encoding and decoding the data on the blockchain.\n *\n *  An ABI provides information on how to encode data to send to\n *  a Contract, how to decode the results and events and how to\n *  interpret revert errors.\n *\n *  The ABI can be specified by [any supported format](InterfaceAbi).\n */ class Interface {\n    #errors;\n    #events;\n    #functions;\n    //    #structs: Map<string, StructFragment>;\n    #abiCoder;\n    /**\n     *  Create a new Interface for the %%fragments%%.\n     */ constructor(fragments){\n        let abi = [];\n        if (typeof fragments === \"string\") {\n            abi = JSON.parse(fragments);\n        } else {\n            abi = fragments;\n        }\n        this.#functions = new Map();\n        this.#errors = new Map();\n        this.#events = new Map();\n        //        this.#structs = new Map();\n        const frags = [];\n        for (const a of abi){\n            try {\n                frags.push(fragments_js_1.Fragment.from(a));\n            } catch (error) {\n                console.log(\"EE\", error);\n            }\n        }\n        (0, index_js_3.defineProperties)(this, {\n            fragments: Object.freeze(frags)\n        });\n        let fallback = null;\n        let receive = false;\n        this.#abiCoder = this.getAbiCoder();\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment, index)=>{\n            let bucket;\n            switch(fragment.type){\n                case \"constructor\":\n                    if (this.deploy) {\n                        console.log(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    (0, index_js_3.defineProperties)(this, {\n                        deploy: fragment\n                    });\n                    return;\n                case \"fallback\":\n                    if (fragment.inputs.length === 0) {\n                        receive = true;\n                    } else {\n                        (0, index_js_3.assertArgument)(!fallback || fragment.payable !== fallback.payable, \"conflicting fallback fragments\", `fragments[${index}]`, fragment);\n                        fallback = fragment;\n                        receive = fallback.payable;\n                    }\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.#functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.#events;\n                    break;\n                case \"error\":\n                    bucket = this.#errors;\n                    break;\n                default:\n                    return;\n            }\n            // Two identical entries; ignore it\n            const signature = fragment.format();\n            if (bucket.has(signature)) {\n                return;\n            }\n            bucket.set(signature, fragment);\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            (0, index_js_3.defineProperties)(this, {\n                deploy: fragments_js_1.ConstructorFragment.from(\"constructor()\")\n            });\n        }\n        (0, index_js_3.defineProperties)(this, {\n            fallback,\n            receive\n        });\n    }\n    /**\n     *  Returns the entire Human-Readable ABI, as an array of\n     *  signatures, optionally as %%minimal%% strings, which\n     *  removes parameter names and unneceesary spaces.\n     */ format(minimal) {\n        const format = minimal ? \"minimal\" : \"full\";\n        const abi = this.fragments.map((f)=>f.format(format));\n        return abi;\n    }\n    /**\n     *  Return the JSON-encoded ABI. This is the format Solidiy\n     *  returns.\n     */ formatJson() {\n        const abi = this.fragments.map((f)=>f.format(\"json\"));\n        // We need to re-bundle the JSON fragments a bit\n        return JSON.stringify(abi.map((j)=>JSON.parse(j)));\n    }\n    /**\n     *  The ABI coder that will be used to encode and decode binary\n     *  data.\n     */ getAbiCoder() {\n        return abi_coder_js_1.AbiCoder.defaultAbiCoder();\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    #getFunction(key, values, forceUnique) {\n        // Selector\n        if ((0, index_js_3.isHexString)(key)) {\n            const selector = key.toLowerCase();\n            for (const fragment of this.#functions.values()){\n                if (selector === fragment.selector) {\n                    return fragment;\n                }\n            }\n            return null;\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf(\"(\") === -1) {\n            const matching = [];\n            for (const [name, fragment] of this.#functions){\n                if (name.split(\"(\" /* fix:) */ )[0] === key) {\n                    matching.push(fragment);\n                }\n            }\n            if (values) {\n                const lastValue = values.length > 0 ? values[values.length - 1] : null;\n                let valueLength = values.length;\n                let allowOptions = true;\n                if (typed_js_1.Typed.isTyped(lastValue) && lastValue.type === \"overrides\") {\n                    allowOptions = false;\n                    valueLength--;\n                }\n                // Remove all matches that don't have a compatible length. The args\n                // may contain an overrides, so the match may have n or n - 1 parameters\n                for(let i = matching.length - 1; i >= 0; i--){\n                    const inputs = matching[i].inputs.length;\n                    if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {\n                        matching.splice(i, 1);\n                    }\n                }\n                // Remove all matches that don't match the Typed signature\n                for(let i = matching.length - 1; i >= 0; i--){\n                    const inputs = matching[i].inputs;\n                    for(let j = 0; j < values.length; j++){\n                        // Not a typed value\n                        if (!typed_js_1.Typed.isTyped(values[j])) {\n                            continue;\n                        }\n                        // We are past the inputs\n                        if (j >= inputs.length) {\n                            if (values[j].type === \"overrides\") {\n                                continue;\n                            }\n                            matching.splice(i, 1);\n                            break;\n                        }\n                        // Make sure the value type matches the input type\n                        if (values[j].type !== inputs[j].baseType) {\n                            matching.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n            // We found a single matching signature with an overrides, but the\n            // last value is something that cannot possibly be an options\n            if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {\n                const lastArg = values[values.length - 1];\n                if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== \"object\") {\n                    matching.splice(0, 1);\n                }\n            }\n            if (matching.length === 0) {\n                return null;\n            }\n            if (matching.length > 1 && forceUnique) {\n                const matchStr = matching.map((m)=>JSON.stringify(m.format())).join(\", \");\n                (0, index_js_3.assertArgument)(false, `ambiguous function description (i.e. matches ${matchStr})`, \"key\", key);\n            }\n            return matching[0];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.#functions.get(fragments_js_1.FunctionFragment.from(key).format());\n        if (result) {\n            return result;\n        }\n        return null;\n    }\n    /**\n     *  Get the function name for %%key%%, which may be a function selector,\n     *  function name or function signature that belongs to the ABI.\n     */ getFunctionName(key) {\n        const fragment = this.#getFunction(key, null, false);\n        (0, index_js_3.assertArgument)(fragment, \"no matching function\", \"key\", key);\n        return fragment.name;\n    }\n    /**\n     *  Returns true if %%key%% (a function selector, function name or\n     *  function signature) is present in the ABI.\n     *\n     *  In the case of a function name, the name may be ambiguous, so\n     *  accessing the [[FunctionFragment]] may require refinement.\n     */ hasFunction(key) {\n        return !!this.#getFunction(key, null, false);\n    }\n    /**\n     *  Get the [[FunctionFragment]] for %%key%%, which may be a function\n     *  selector, function name or function signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple functions match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single function in\n     *  the ABI, this will throw.\n     */ getFunction(key, values) {\n        return this.#getFunction(key, values || null, true);\n    }\n    /**\n     *  Iterate over all functions, calling %%callback%%, sorted by their name.\n     */ forEachFunction(callback) {\n        const names = Array.from(this.#functions.keys());\n        names.sort((a, b)=>a.localeCompare(b));\n        for(let i = 0; i < names.length; i++){\n            const name = names[i];\n            callback(this.#functions.get(name), i);\n        }\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    #getEvent(key, values, forceUnique) {\n        // EventTopic\n        if ((0, index_js_3.isHexString)(key)) {\n            const eventTopic = key.toLowerCase();\n            for (const fragment of this.#events.values()){\n                if (eventTopic === fragment.topicHash) {\n                    return fragment;\n                }\n            }\n            return null;\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf(\"(\") === -1) {\n            const matching = [];\n            for (const [name, fragment] of this.#events){\n                if (name.split(\"(\" /* fix:) */ )[0] === key) {\n                    matching.push(fragment);\n                }\n            }\n            if (values) {\n                // Remove all matches that don't have a compatible length.\n                for(let i = matching.length - 1; i >= 0; i--){\n                    if (matching[i].inputs.length < values.length) {\n                        matching.splice(i, 1);\n                    }\n                }\n                // Remove all matches that don't match the Typed signature\n                for(let i = matching.length - 1; i >= 0; i--){\n                    const inputs = matching[i].inputs;\n                    for(let j = 0; j < values.length; j++){\n                        // Not a typed value\n                        if (!typed_js_1.Typed.isTyped(values[j])) {\n                            continue;\n                        }\n                        // Make sure the value type matches the input type\n                        if (values[j].type !== inputs[j].baseType) {\n                            matching.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n            if (matching.length === 0) {\n                return null;\n            }\n            if (matching.length > 1 && forceUnique) {\n                const matchStr = matching.map((m)=>JSON.stringify(m.format())).join(\", \");\n                (0, index_js_3.assertArgument)(false, `ambiguous event description (i.e. matches ${matchStr})`, \"key\", key);\n            }\n            return matching[0];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.#events.get(fragments_js_1.EventFragment.from(key).format());\n        if (result) {\n            return result;\n        }\n        return null;\n    }\n    /**\n     *  Get the event name for %%key%%, which may be a topic hash,\n     *  event name or event signature that belongs to the ABI.\n     */ getEventName(key) {\n        const fragment = this.#getEvent(key, null, false);\n        (0, index_js_3.assertArgument)(fragment, \"no matching event\", \"key\", key);\n        return fragment.name;\n    }\n    /**\n     *  Returns true if %%key%% (an event topic hash, event name or\n     *  event signature) is present in the ABI.\n     *\n     *  In the case of an event name, the name may be ambiguous, so\n     *  accessing the [[EventFragment]] may require refinement.\n     */ hasEvent(key) {\n        return !!this.#getEvent(key, null, false);\n    }\n    /**\n     *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,\n     *  event name or event signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple events match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single event in\n     *  the ABI, this will throw.\n     */ getEvent(key, values) {\n        return this.#getEvent(key, values || null, true);\n    }\n    /**\n     *  Iterate over all events, calling %%callback%%, sorted by their name.\n     */ forEachEvent(callback) {\n        const names = Array.from(this.#events.keys());\n        names.sort((a, b)=>a.localeCompare(b));\n        for(let i = 0; i < names.length; i++){\n            const name = names[i];\n            callback(this.#events.get(name), i);\n        }\n    }\n    /**\n     *  Get the [[ErrorFragment]] for %%key%%, which may be an error\n     *  selector, error name or error signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple errors match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single error in\n     *  the ABI, this will throw.\n     */ getError(key, values) {\n        if ((0, index_js_3.isHexString)(key)) {\n            const selector = key.toLowerCase();\n            if (BuiltinErrors[selector]) {\n                return fragments_js_1.ErrorFragment.from(BuiltinErrors[selector].signature);\n            }\n            for (const fragment of this.#errors.values()){\n                if (selector === fragment.selector) {\n                    return fragment;\n                }\n            }\n            return null;\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf(\"(\") === -1) {\n            const matching = [];\n            for (const [name, fragment] of this.#errors){\n                if (name.split(\"(\" /* fix:) */ )[0] === key) {\n                    matching.push(fragment);\n                }\n            }\n            if (matching.length === 0) {\n                if (key === \"Error\") {\n                    return fragments_js_1.ErrorFragment.from(\"error Error(string)\");\n                }\n                if (key === \"Panic\") {\n                    return fragments_js_1.ErrorFragment.from(\"error Panic(uint256)\");\n                }\n                return null;\n            } else if (matching.length > 1) {\n                const matchStr = matching.map((m)=>JSON.stringify(m.format())).join(\", \");\n                (0, index_js_3.assertArgument)(false, `ambiguous error description (i.e. ${matchStr})`, \"name\", key);\n            }\n            return matching[0];\n        }\n        // Normalize the signature and lookup the function\n        key = fragments_js_1.ErrorFragment.from(key).format();\n        if (key === \"Error(string)\") {\n            return fragments_js_1.ErrorFragment.from(\"error Error(string)\");\n        }\n        if (key === \"Panic(uint256)\") {\n            return fragments_js_1.ErrorFragment.from(\"error Panic(uint256)\");\n        }\n        const result = this.#errors.get(key);\n        if (result) {\n            return result;\n        }\n        return null;\n    }\n    /**\n     *  Iterate over all errors, calling %%callback%%, sorted by their name.\n     */ forEachError(callback) {\n        const names = Array.from(this.#errors.keys());\n        names.sort((a, b)=>a.localeCompare(b));\n        for(let i = 0; i < names.length; i++){\n            const name = names[i];\n            callback(this.#errors.get(name), i);\n        }\n    }\n    // Get the 4-byte selector used by Solidity to identify a function\n    /*\ngetSelector(fragment: ErrorFragment | FunctionFragment): string {\n    if (typeof(fragment) === \"string\") {\n        const matches: Array<Fragment> = [ ];\n\n        try { matches.push(this.getFunction(fragment)); } catch (error) { }\n        try { matches.push(this.getError(<string>fragment)); } catch (_) { }\n\n        if (matches.length === 0) {\n            logger.throwArgumentError(\"unknown fragment\", \"key\", fragment);\n        } else if (matches.length > 1) {\n            logger.throwArgumentError(\"ambiguous fragment matches function and error\", \"key\", fragment);\n        }\n\n        fragment = matches[0];\n    }\n\n    return dataSlice(id(fragment.format()), 0, 4);\n}\n    */ // Get the 32-byte topic hash used by Solidity to identify an event\n    /*\n    getEventTopic(fragment: EventFragment): string {\n        //if (typeof(fragment) === \"string\") { fragment = this.getEvent(eventFragment); }\n        return id(fragment.format());\n    }\n    */ _decodeParams(params, data) {\n        return this.#abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this.#abiCoder.encode(params, values);\n    }\n    /**\n     *  Encodes a ``tx.data`` object for deploying the Contract with\n     *  the %%values%% as the constructor arguments.\n     */ encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    /**\n     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n     *  specified error (see [[getError]] for valid values for\n     *  %%key%%).\n     *\n     *  Most developers should prefer the [[parseCallResult]] method instead,\n     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n     *  corresponding error.\n     */ decodeErrorResult(fragment, data) {\n        if (typeof fragment === \"string\") {\n            const f = this.getError(fragment);\n            (0, index_js_3.assertArgument)(f, \"unknown error\", \"fragment\", fragment);\n            fragment = f;\n        }\n        (0, index_js_3.assertArgument)((0, index_js_3.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, \"data\", data);\n        return this._decodeParams(fragment.inputs, (0, index_js_3.dataSlice)(data, 4));\n    }\n    /**\n     *  Encodes the transaction revert data for a call result that\n     *  reverted from the the Contract with the sepcified %%error%%\n     *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.\n     *\n     *  This is generally not used by most developers, unless trying to mock\n     *  a result from a Contract.\n     */ encodeErrorResult(fragment, values) {\n        if (typeof fragment === \"string\") {\n            const f = this.getError(fragment);\n            (0, index_js_3.assertArgument)(f, \"unknown error\", \"fragment\", fragment);\n            fragment = f;\n        }\n        return (0, index_js_3.concat)([\n            fragment.selector,\n            this._encodeParams(fragment.inputs, values || [])\n        ]);\n    }\n    /**\n     *  Decodes the %%data%% from a transaction ``tx.data`` for\n     *  the function specified (see [[getFunction]] for valid values\n     *  for %%fragment%%).\n     *\n     *  Most developers should prefer the [[parseTransaction]] method\n     *  instead, which will automatically detect the fragment.\n     */ decodeFunctionData(fragment, data) {\n        if (typeof fragment === \"string\") {\n            const f = this.getFunction(fragment);\n            (0, index_js_3.assertArgument)(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        (0, index_js_3.assertArgument)((0, index_js_3.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, \"data\", data);\n        return this._decodeParams(fragment.inputs, (0, index_js_3.dataSlice)(data, 4));\n    }\n    /**\n     *  Encodes the ``tx.data`` for a transaction that calls the function\n     *  specified (see [[getFunction]] for valid values for %%fragment%%) with\n     *  the %%values%%.\n     */ encodeFunctionData(fragment, values) {\n        if (typeof fragment === \"string\") {\n            const f = this.getFunction(fragment);\n            (0, index_js_3.assertArgument)(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        return (0, index_js_3.concat)([\n            fragment.selector,\n            this._encodeParams(fragment.inputs, values || [])\n        ]);\n    }\n    /**\n     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n     *  specified function (see [[getFunction]] for valid values for\n     *  %%key%%).\n     *\n     *  Most developers should prefer the [[parseCallResult]] method instead,\n     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n     *  corresponding error.\n     */ decodeFunctionResult(fragment, data) {\n        if (typeof fragment === \"string\") {\n            const f = this.getFunction(fragment);\n            (0, index_js_3.assertArgument)(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        let message = \"invalid length for result data\";\n        const bytes = (0, index_js_3.getBytesCopy)(data);\n        if (bytes.length % 32 === 0) {\n            try {\n                return this.#abiCoder.decode(fragment.outputs, bytes);\n            } catch (error) {\n                message = \"could not decode result data\";\n            }\n        }\n        // Call returned data with no error, but the data is junk\n        (0, index_js_3.assert)(false, message, \"BAD_DATA\", {\n            value: (0, index_js_3.hexlify)(bytes),\n            info: {\n                method: fragment.name,\n                signature: fragment.format()\n            }\n        });\n    }\n    makeError(_data, tx) {\n        const data = (0, index_js_3.getBytes)(_data, \"data\");\n        const error = abi_coder_js_1.AbiCoder.getBuiltinCallException(\"call\", tx, data);\n        // Not a built-in error; try finding a custom error\n        const customPrefix = \"execution reverted (unknown custom error)\";\n        if (error.message.startsWith(customPrefix)) {\n            const selector = (0, index_js_3.hexlify)(data.slice(0, 4));\n            const ef = this.getError(selector);\n            if (ef) {\n                try {\n                    const args = this.#abiCoder.decode(ef.inputs, data.slice(4));\n                    error.revert = {\n                        name: ef.name,\n                        signature: ef.format(),\n                        args\n                    };\n                    error.reason = error.revert.signature;\n                    error.message = `execution reverted: ${error.reason}`;\n                } catch (e) {\n                    error.message = `execution reverted (coult not decode custom error)`;\n                }\n            }\n        }\n        // Add the invocation, if available\n        const parsed = this.parseTransaction(tx);\n        if (parsed) {\n            error.invocation = {\n                method: parsed.name,\n                signature: parsed.signature,\n                args: parsed.args\n            };\n        }\n        return error;\n    }\n    /**\n     *  Encodes the result data (e.g. from an ``eth_call``) for the\n     *  specified function (see [[getFunction]] for valid values\n     *  for %%fragment%%) with %%values%%.\n     *\n     *  This is generally not used by most developers, unless trying to mock\n     *  a result from a Contract.\n     */ encodeFunctionResult(fragment, values) {\n        if (typeof fragment === \"string\") {\n            const f = this.getFunction(fragment);\n            (0, index_js_3.assertArgument)(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        return (0, index_js_3.hexlify)(this.#abiCoder.encode(fragment.outputs, values || []));\n    }\n    /*\n        spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {\n            const promises: Array<Promise<>> = [ ];\n            const process = function(type: ParamType, value: any): any {\n                if (type.baseType === \"array\") {\n                    return descend(type.child\n                }\n                if (type. === \"address\") {\n                }\n            };\n    \n            const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {\n                if (inputs.length !== values.length) { throw new Error(\"length mismatch\"); }\n                \n            };\n    \n            const result: Array<any> = [ ];\n            values.forEach((value, index) => {\n                if (value == null) {\n                    topics.push(null);\n                } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                    logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n                } else if (Array.isArray(value)) {\n                    topics.push(value.map((value) => encodeTopic(param, value)));\n                } else {\n                    topics.push(encodeTopic(param, value));\n                }\n            });\n        }\n    */ // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(fragment, values) {\n        if (typeof fragment === \"string\") {\n            const f = this.getEvent(fragment);\n            (0, index_js_3.assertArgument)(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n        (0, index_js_3.assert)(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, \"UNEXPECTED_ARGUMENT\", {\n            count: values.length,\n            expectedCount: fragment.inputs.length\n        });\n        const topics = [];\n        if (!fragment.anonymous) {\n            topics.push(fragment.topicHash);\n        }\n        // @TODO: Use the coders for this; to properly support tuples, etc.\n        const encodeTopic = (param, value)=>{\n            if (param.type === \"string\") {\n                return (0, index_js_2.id)(value);\n            } else if (param.type === \"bytes\") {\n                return (0, index_js_1.keccak256)((0, index_js_3.hexlify)(value));\n            }\n            if (param.type === \"bool\" && typeof value === \"boolean\") {\n                value = value ? \"0x01\" : \"0x00\";\n            } else if (param.type.match(/^u?int/)) {\n                value = (0, index_js_3.toBeHex)(value); // @TODO: Should this toTwos??\n            } else if (param.type.match(/^bytes/)) {\n                value = (0, index_js_3.zeroPadBytes)(value, 32);\n            } else if (param.type === \"address\") {\n                // Check addresses are valid\n                this.#abiCoder.encode([\n                    \"address\"\n                ], [\n                    value\n                ]);\n            }\n            return (0, index_js_3.zeroPadValue)((0, index_js_3.hexlify)(value), 32);\n        };\n        values.forEach((value, index)=>{\n            const param = fragment.inputs[index];\n            if (!param.indexed) {\n                (0, index_js_3.assertArgument)(value == null, \"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                (0, index_js_3.assertArgument)(false, \"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value)=>encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while(topics.length && topics[topics.length - 1] === null){\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(fragment, values) {\n        if (typeof fragment === \"string\") {\n            const f = this.getEvent(fragment);\n            (0, index_js_3.assertArgument)(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!fragment.anonymous) {\n            topics.push(fragment.topicHash);\n        }\n        (0, index_js_3.assertArgument)(values.length === fragment.inputs.length, \"event arguments/values mismatch\", \"values\", values);\n        fragment.inputs.forEach((param, index)=>{\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push((0, index_js_2.id)(value));\n                } else if (param.type === \"bytes\") {\n                    topics.push((0, index_js_1.keccak256)(value));\n                } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                } else {\n                    topics.push(this.#abiCoder.encode([\n                        param.type\n                    ], [\n                        value\n                    ]));\n                }\n            } else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this.#abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(fragment, data, topics) {\n        if (typeof fragment === \"string\") {\n            const f = this.getEvent(fragment);\n            (0, index_js_3.assertArgument)(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n        if (topics != null && !fragment.anonymous) {\n            const eventTopic = fragment.topicHash;\n            (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(topics[0], 32) && topics[0].toLowerCase() === eventTopic, \"fragment/topic mismatch\", \"topics[0]\", topics[0]);\n            topics = topics.slice(1);\n        }\n        const indexed = [];\n        const nonIndexed = [];\n        const dynamic = [];\n        fragment.inputs.forEach((param, index)=>{\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(fragments_js_1.ParamType.from({\n                        type: \"bytes32\",\n                        name: param.name\n                    }));\n                    dynamic.push(true);\n                } else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            } else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        const resultIndexed = topics != null ? this.#abiCoder.decode(indexed, (0, index_js_3.concat)(topics)) : null;\n        const resultNonIndexed = this.#abiCoder.decode(nonIndexed, data, true);\n        //const result: (Array<any> & { [ key: string ]: any }) = [ ];\n        const values = [];\n        const keys = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        fragment.inputs.forEach((param, index)=>{\n            let value = null;\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    value = new Indexed(null);\n                } else if (dynamic[index]) {\n                    value = new Indexed(resultIndexed[indexedIndex++]);\n                } else {\n                    try {\n                        value = resultIndexed[indexedIndex++];\n                    } catch (error) {\n                        value = error;\n                    }\n                }\n            } else {\n                try {\n                    value = resultNonIndexed[nonIndexedIndex++];\n                } catch (error) {\n                    value = error;\n                }\n            }\n            values.push(value);\n            keys.push(param.name || null);\n        });\n        return abstract_coder_js_1.Result.fromItems(values, keys);\n    }\n    /**\n     *  Parses a transaction, finding the matching function and extracts\n     *  the parameter values along with other useful function details.\n     *\n     *  If the matching function cannot be found, return null.\n     */ parseTransaction(tx) {\n        const data = (0, index_js_3.getBytes)(tx.data, \"tx.data\");\n        const value = (0, index_js_3.getBigInt)(tx.value != null ? tx.value : 0, \"tx.value\");\n        const fragment = this.getFunction((0, index_js_3.hexlify)(data.slice(0, 4)));\n        if (!fragment) {\n            return null;\n        }\n        const args = this.#abiCoder.decode(fragment.inputs, data.slice(4));\n        return new TransactionDescription(fragment, fragment.selector, args, value);\n    }\n    parseCallResult(data) {\n        throw new Error(\"@TODO\");\n    }\n    /**\n     *  Parses a receipt log, finding the matching event and extracts\n     *  the parameter values along with other useful event details.\n     *\n     *  If the matching event cannot be found, returns null.\n     */ parseLog(log) {\n        const fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n        return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));\n    }\n    /**\n     *  Parses a revert data, finding the matching error and extracts\n     *  the parameter values along with other useful error details.\n     *\n     *  If the matching error cannot be found, returns null.\n     */ parseError(data) {\n        const hexData = (0, index_js_3.hexlify)(data);\n        const fragment = this.getError((0, index_js_3.dataSlice)(hexData, 0, 4));\n        if (!fragment) {\n            return null;\n        }\n        const args = this.#abiCoder.decode(fragment.inputs, (0, index_js_3.dataSlice)(hexData, 4));\n        return new ErrorDescription(fragment, fragment.selector, args);\n    }\n    /**\n     *  Creates a new [[Interface]] from the ABI %%value%%.\n     *\n     *  The %%value%% may be provided as an existing [[Interface]] object,\n     *  a JSON-encoded ABI or any Human-Readable ABI format.\n     */ static from(value) {\n        // Already an Interface, which is immutable\n        if (value instanceof Interface) {\n            return value;\n        }\n        // JSON\n        if (typeof value === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        // Maybe an interface from an older version, or from a symlinked copy\n        if (typeof value.format === \"function\") {\n            return new Interface(value.format(\"json\"));\n        }\n        // Array of fragments\n        return new Interface(value);\n    }\n}\nexports.Interface = Interface; //# sourceMappingURL=interface.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/abi/interface.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/abi/typed.js":
/*!*******************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/abi/typed.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  A Typed object allows a value to have its type explicitly\n *  specified.\n *\n *  For example, in Solidity, the value ``45`` could represent a\n *  ``uint8`` or a ``uint256``. The value ``0x1234`` could represent\n *  a ``bytes2`` or ``bytes``.\n *\n *  Since JavaScript has no meaningful way to explicitly inform any\n *  APIs which what the type is, this allows transparent interoperation\n *  with Soldity.\n *\n *  @_subsection: api/abi:Typed Values\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Typed = void 0;\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst _gaurd = {};\nfunction n(value, width) {\n    let signed = false;\n    if (width < 0) {\n        signed = true;\n        width *= -1;\n    }\n    // @TODO: Check range is valid for value\n    return new Typed(_gaurd, `${signed ? \"\" : \"u\"}int${width}`, value, {\n        signed,\n        width\n    });\n}\nfunction b(value, size) {\n    // @TODO: Check range is valid for value\n    return new Typed(_gaurd, `bytes${size ? size : \"\"}`, value, {\n        size\n    });\n}\nconst _typedSymbol = Symbol.for(\"_ethers_typed\");\n/**\n *  The **Typed** class to wrap values providing explicit type information.\n */ class Typed {\n    #options;\n    /**\n     *  @_ignore:\n     */ constructor(gaurd, type, value, options){\n        if (options == null) {\n            options = null;\n        }\n        (0, index_js_1.assertPrivate)(_gaurd, gaurd, \"Typed\");\n        (0, index_js_1.defineProperties)(this, {\n            _typedSymbol,\n            type,\n            value\n        });\n        this.#options = options;\n        // Check the value is valid\n        this.format();\n    }\n    /**\n     *  Format the type as a Human-Readable type.\n     */ format() {\n        if (this.type === \"array\") {\n            throw new Error(\"\");\n        } else if (this.type === \"dynamicArray\") {\n            throw new Error(\"\");\n        } else if (this.type === \"tuple\") {\n            return `tuple(${this.value.map((v)=>v.format()).join(\",\")})`;\n        }\n        return this.type;\n    }\n    /**\n     *  The default value returned by this type.\n     */ defaultValue() {\n        return 0;\n    }\n    /**\n     *  The minimum value for numeric types.\n     */ minValue() {\n        return 0;\n    }\n    /**\n     *  The maximum value for numeric types.\n     */ maxValue() {\n        return 0;\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].\n     */ isBigInt() {\n        return !!this.type.match(/^u?int[0-9]+$/);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedData]].\n     */ isData() {\n        return this.type.startsWith(\"bytes\");\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedString]].\n     */ isString() {\n        return this.type === \"string\";\n    }\n    /**\n     *  Returns the tuple name, if this is a tuple. Throws otherwise.\n     */ get tupleName() {\n        if (this.type !== \"tuple\") {\n            throw TypeError(\"not a tuple\");\n        }\n        return this.#options;\n    }\n    // Returns the length of this type as an array\n    // - `null` indicates the length is unforced, it could be dynamic\n    // - `-1` indicates the length is dynamic\n    // - any other value indicates it is a static array and is its length\n    /**\n     *  Returns the length of the array type or ``-1`` if it is dynamic.\n     *\n     *  Throws if the type is not an array.\n     */ get arrayLength() {\n        if (this.type !== \"array\") {\n            throw TypeError(\"not an array\");\n        }\n        if (this.#options === true) {\n            return -1;\n        }\n        if (this.#options === false) {\n            return this.value.length;\n        }\n        return null;\n    }\n    /**\n     *  Returns a new **Typed** of %%type%% with the %%value%%.\n     */ static from(type, value) {\n        return new Typed(_gaurd, type, value);\n    }\n    /**\n     *  Return a new ``uint8`` type for %%v%%.\n     */ static uint8(v) {\n        return n(v, 8);\n    }\n    /**\n     *  Return a new ``uint16`` type for %%v%%.\n     */ static uint16(v) {\n        return n(v, 16);\n    }\n    /**\n     *  Return a new ``uint24`` type for %%v%%.\n     */ static uint24(v) {\n        return n(v, 24);\n    }\n    /**\n     *  Return a new ``uint32`` type for %%v%%.\n     */ static uint32(v) {\n        return n(v, 32);\n    }\n    /**\n     *  Return a new ``uint40`` type for %%v%%.\n     */ static uint40(v) {\n        return n(v, 40);\n    }\n    /**\n     *  Return a new ``uint48`` type for %%v%%.\n     */ static uint48(v) {\n        return n(v, 48);\n    }\n    /**\n     *  Return a new ``uint56`` type for %%v%%.\n     */ static uint56(v) {\n        return n(v, 56);\n    }\n    /**\n     *  Return a new ``uint64`` type for %%v%%.\n     */ static uint64(v) {\n        return n(v, 64);\n    }\n    /**\n     *  Return a new ``uint72`` type for %%v%%.\n     */ static uint72(v) {\n        return n(v, 72);\n    }\n    /**\n     *  Return a new ``uint80`` type for %%v%%.\n     */ static uint80(v) {\n        return n(v, 80);\n    }\n    /**\n     *  Return a new ``uint88`` type for %%v%%.\n     */ static uint88(v) {\n        return n(v, 88);\n    }\n    /**\n     *  Return a new ``uint96`` type for %%v%%.\n     */ static uint96(v) {\n        return n(v, 96);\n    }\n    /**\n     *  Return a new ``uint104`` type for %%v%%.\n     */ static uint104(v) {\n        return n(v, 104);\n    }\n    /**\n     *  Return a new ``uint112`` type for %%v%%.\n     */ static uint112(v) {\n        return n(v, 112);\n    }\n    /**\n     *  Return a new ``uint120`` type for %%v%%.\n     */ static uint120(v) {\n        return n(v, 120);\n    }\n    /**\n     *  Return a new ``uint128`` type for %%v%%.\n     */ static uint128(v) {\n        return n(v, 128);\n    }\n    /**\n     *  Return a new ``uint136`` type for %%v%%.\n     */ static uint136(v) {\n        return n(v, 136);\n    }\n    /**\n     *  Return a new ``uint144`` type for %%v%%.\n     */ static uint144(v) {\n        return n(v, 144);\n    }\n    /**\n     *  Return a new ``uint152`` type for %%v%%.\n     */ static uint152(v) {\n        return n(v, 152);\n    }\n    /**\n     *  Return a new ``uint160`` type for %%v%%.\n     */ static uint160(v) {\n        return n(v, 160);\n    }\n    /**\n     *  Return a new ``uint168`` type for %%v%%.\n     */ static uint168(v) {\n        return n(v, 168);\n    }\n    /**\n     *  Return a new ``uint176`` type for %%v%%.\n     */ static uint176(v) {\n        return n(v, 176);\n    }\n    /**\n     *  Return a new ``uint184`` type for %%v%%.\n     */ static uint184(v) {\n        return n(v, 184);\n    }\n    /**\n     *  Return a new ``uint192`` type for %%v%%.\n     */ static uint192(v) {\n        return n(v, 192);\n    }\n    /**\n     *  Return a new ``uint200`` type for %%v%%.\n     */ static uint200(v) {\n        return n(v, 200);\n    }\n    /**\n     *  Return a new ``uint208`` type for %%v%%.\n     */ static uint208(v) {\n        return n(v, 208);\n    }\n    /**\n     *  Return a new ``uint216`` type for %%v%%.\n     */ static uint216(v) {\n        return n(v, 216);\n    }\n    /**\n     *  Return a new ``uint224`` type for %%v%%.\n     */ static uint224(v) {\n        return n(v, 224);\n    }\n    /**\n     *  Return a new ``uint232`` type for %%v%%.\n     */ static uint232(v) {\n        return n(v, 232);\n    }\n    /**\n     *  Return a new ``uint240`` type for %%v%%.\n     */ static uint240(v) {\n        return n(v, 240);\n    }\n    /**\n     *  Return a new ``uint248`` type for %%v%%.\n     */ static uint248(v) {\n        return n(v, 248);\n    }\n    /**\n     *  Return a new ``uint256`` type for %%v%%.\n     */ static uint256(v) {\n        return n(v, 256);\n    }\n    /**\n     *  Return a new ``uint256`` type for %%v%%.\n     */ static uint(v) {\n        return n(v, 256);\n    }\n    /**\n     *  Return a new ``int8`` type for %%v%%.\n     */ static int8(v) {\n        return n(v, -8);\n    }\n    /**\n     *  Return a new ``int16`` type for %%v%%.\n     */ static int16(v) {\n        return n(v, -16);\n    }\n    /**\n     *  Return a new ``int24`` type for %%v%%.\n     */ static int24(v) {\n        return n(v, -24);\n    }\n    /**\n     *  Return a new ``int32`` type for %%v%%.\n     */ static int32(v) {\n        return n(v, -32);\n    }\n    /**\n     *  Return a new ``int40`` type for %%v%%.\n     */ static int40(v) {\n        return n(v, -40);\n    }\n    /**\n     *  Return a new ``int48`` type for %%v%%.\n     */ static int48(v) {\n        return n(v, -48);\n    }\n    /**\n     *  Return a new ``int56`` type for %%v%%.\n     */ static int56(v) {\n        return n(v, -56);\n    }\n    /**\n     *  Return a new ``int64`` type for %%v%%.\n     */ static int64(v) {\n        return n(v, -64);\n    }\n    /**\n     *  Return a new ``int72`` type for %%v%%.\n     */ static int72(v) {\n        return n(v, -72);\n    }\n    /**\n     *  Return a new ``int80`` type for %%v%%.\n     */ static int80(v) {\n        return n(v, -80);\n    }\n    /**\n     *  Return a new ``int88`` type for %%v%%.\n     */ static int88(v) {\n        return n(v, -88);\n    }\n    /**\n     *  Return a new ``int96`` type for %%v%%.\n     */ static int96(v) {\n        return n(v, -96);\n    }\n    /**\n     *  Return a new ``int104`` type for %%v%%.\n     */ static int104(v) {\n        return n(v, -104);\n    }\n    /**\n     *  Return a new ``int112`` type for %%v%%.\n     */ static int112(v) {\n        return n(v, -112);\n    }\n    /**\n     *  Return a new ``int120`` type for %%v%%.\n     */ static int120(v) {\n        return n(v, -120);\n    }\n    /**\n     *  Return a new ``int128`` type for %%v%%.\n     */ static int128(v) {\n        return n(v, -128);\n    }\n    /**\n     *  Return a new ``int136`` type for %%v%%.\n     */ static int136(v) {\n        return n(v, -136);\n    }\n    /**\n     *  Return a new ``int144`` type for %%v%%.\n     */ static int144(v) {\n        return n(v, -144);\n    }\n    /**\n     *  Return a new ``int52`` type for %%v%%.\n     */ static int152(v) {\n        return n(v, -152);\n    }\n    /**\n     *  Return a new ``int160`` type for %%v%%.\n     */ static int160(v) {\n        return n(v, -160);\n    }\n    /**\n     *  Return a new ``int168`` type for %%v%%.\n     */ static int168(v) {\n        return n(v, -168);\n    }\n    /**\n     *  Return a new ``int176`` type for %%v%%.\n     */ static int176(v) {\n        return n(v, -176);\n    }\n    /**\n     *  Return a new ``int184`` type for %%v%%.\n     */ static int184(v) {\n        return n(v, -184);\n    }\n    /**\n     *  Return a new ``int92`` type for %%v%%.\n     */ static int192(v) {\n        return n(v, -192);\n    }\n    /**\n     *  Return a new ``int200`` type for %%v%%.\n     */ static int200(v) {\n        return n(v, -200);\n    }\n    /**\n     *  Return a new ``int208`` type for %%v%%.\n     */ static int208(v) {\n        return n(v, -208);\n    }\n    /**\n     *  Return a new ``int216`` type for %%v%%.\n     */ static int216(v) {\n        return n(v, -216);\n    }\n    /**\n     *  Return a new ``int224`` type for %%v%%.\n     */ static int224(v) {\n        return n(v, -224);\n    }\n    /**\n     *  Return a new ``int232`` type for %%v%%.\n     */ static int232(v) {\n        return n(v, -232);\n    }\n    /**\n     *  Return a new ``int240`` type for %%v%%.\n     */ static int240(v) {\n        return n(v, -240);\n    }\n    /**\n     *  Return a new ``int248`` type for %%v%%.\n     */ static int248(v) {\n        return n(v, -248);\n    }\n    /**\n     *  Return a new ``int256`` type for %%v%%.\n     */ static int256(v) {\n        return n(v, -256);\n    }\n    /**\n     *  Return a new ``int256`` type for %%v%%.\n     */ static int(v) {\n        return n(v, -256);\n    }\n    /**\n     *  Return a new ``bytes1`` type for %%v%%.\n     */ static bytes1(v) {\n        return b(v, 1);\n    }\n    /**\n     *  Return a new ``bytes2`` type for %%v%%.\n     */ static bytes2(v) {\n        return b(v, 2);\n    }\n    /**\n     *  Return a new ``bytes3`` type for %%v%%.\n     */ static bytes3(v) {\n        return b(v, 3);\n    }\n    /**\n     *  Return a new ``bytes4`` type for %%v%%.\n     */ static bytes4(v) {\n        return b(v, 4);\n    }\n    /**\n     *  Return a new ``bytes5`` type for %%v%%.\n     */ static bytes5(v) {\n        return b(v, 5);\n    }\n    /**\n     *  Return a new ``bytes6`` type for %%v%%.\n     */ static bytes6(v) {\n        return b(v, 6);\n    }\n    /**\n     *  Return a new ``bytes7`` type for %%v%%.\n     */ static bytes7(v) {\n        return b(v, 7);\n    }\n    /**\n     *  Return a new ``bytes8`` type for %%v%%.\n     */ static bytes8(v) {\n        return b(v, 8);\n    }\n    /**\n     *  Return a new ``bytes9`` type for %%v%%.\n     */ static bytes9(v) {\n        return b(v, 9);\n    }\n    /**\n     *  Return a new ``bytes10`` type for %%v%%.\n     */ static bytes10(v) {\n        return b(v, 10);\n    }\n    /**\n     *  Return a new ``bytes11`` type for %%v%%.\n     */ static bytes11(v) {\n        return b(v, 11);\n    }\n    /**\n     *  Return a new ``bytes12`` type for %%v%%.\n     */ static bytes12(v) {\n        return b(v, 12);\n    }\n    /**\n     *  Return a new ``bytes13`` type for %%v%%.\n     */ static bytes13(v) {\n        return b(v, 13);\n    }\n    /**\n     *  Return a new ``bytes14`` type for %%v%%.\n     */ static bytes14(v) {\n        return b(v, 14);\n    }\n    /**\n     *  Return a new ``bytes15`` type for %%v%%.\n     */ static bytes15(v) {\n        return b(v, 15);\n    }\n    /**\n     *  Return a new ``bytes16`` type for %%v%%.\n     */ static bytes16(v) {\n        return b(v, 16);\n    }\n    /**\n     *  Return a new ``bytes17`` type for %%v%%.\n     */ static bytes17(v) {\n        return b(v, 17);\n    }\n    /**\n     *  Return a new ``bytes18`` type for %%v%%.\n     */ static bytes18(v) {\n        return b(v, 18);\n    }\n    /**\n     *  Return a new ``bytes19`` type for %%v%%.\n     */ static bytes19(v) {\n        return b(v, 19);\n    }\n    /**\n     *  Return a new ``bytes20`` type for %%v%%.\n     */ static bytes20(v) {\n        return b(v, 20);\n    }\n    /**\n     *  Return a new ``bytes21`` type for %%v%%.\n     */ static bytes21(v) {\n        return b(v, 21);\n    }\n    /**\n     *  Return a new ``bytes22`` type for %%v%%.\n     */ static bytes22(v) {\n        return b(v, 22);\n    }\n    /**\n     *  Return a new ``bytes23`` type for %%v%%.\n     */ static bytes23(v) {\n        return b(v, 23);\n    }\n    /**\n     *  Return a new ``bytes24`` type for %%v%%.\n     */ static bytes24(v) {\n        return b(v, 24);\n    }\n    /**\n     *  Return a new ``bytes25`` type for %%v%%.\n     */ static bytes25(v) {\n        return b(v, 25);\n    }\n    /**\n     *  Return a new ``bytes26`` type for %%v%%.\n     */ static bytes26(v) {\n        return b(v, 26);\n    }\n    /**\n     *  Return a new ``bytes27`` type for %%v%%.\n     */ static bytes27(v) {\n        return b(v, 27);\n    }\n    /**\n     *  Return a new ``bytes28`` type for %%v%%.\n     */ static bytes28(v) {\n        return b(v, 28);\n    }\n    /**\n     *  Return a new ``bytes29`` type for %%v%%.\n     */ static bytes29(v) {\n        return b(v, 29);\n    }\n    /**\n     *  Return a new ``bytes30`` type for %%v%%.\n     */ static bytes30(v) {\n        return b(v, 30);\n    }\n    /**\n     *  Return a new ``bytes31`` type for %%v%%.\n     */ static bytes31(v) {\n        return b(v, 31);\n    }\n    /**\n     *  Return a new ``bytes32`` type for %%v%%.\n     */ static bytes32(v) {\n        return b(v, 32);\n    }\n    /**\n     *  Return a new ``address`` type for %%v%%.\n     */ static address(v) {\n        return new Typed(_gaurd, \"address\", v);\n    }\n    /**\n     *  Return a new ``bool`` type for %%v%%.\n     */ static bool(v) {\n        return new Typed(_gaurd, \"bool\", !!v);\n    }\n    /**\n     *  Return a new ``bytes`` type for %%v%%.\n     */ static bytes(v) {\n        return new Typed(_gaurd, \"bytes\", v);\n    }\n    /**\n     *  Return a new ``string`` type for %%v%%.\n     */ static string(v) {\n        return new Typed(_gaurd, \"string\", v);\n    }\n    /**\n     *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.\n     */ static array(v, dynamic) {\n        throw new Error(\"not implemented yet\");\n        return new Typed(_gaurd, \"array\", v, dynamic);\n    }\n    /**\n     *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.\n     */ static tuple(v, name) {\n        throw new Error(\"not implemented yet\");\n        return new Typed(_gaurd, \"tuple\", v, name);\n    }\n    /**\n     *  Return a new ``uint8`` type for %%v%%.\n     */ static overrides(v) {\n        return new Typed(_gaurd, \"overrides\", Object.assign({}, v));\n    }\n    /**\n     *  Returns true only if %%value%% is a [[Typed]] instance.\n     */ static isTyped(value) {\n        return value && typeof value === \"object\" && \"_typedSymbol\" in value && value._typedSymbol === _typedSymbol;\n    }\n    /**\n     *  If the value is a [[Typed]] instance, validates the underlying value\n     *  and returns it, otherwise returns value directly.\n     *\n     *  This is useful for functions that with to accept either a [[Typed]]\n     *  object or values.\n     */ static dereference(value, type) {\n        if (Typed.isTyped(value)) {\n            if (value.type !== type) {\n                throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);\n            }\n            return value.value;\n        }\n        return value;\n    }\n}\nexports.Typed = Typed; //# sourceMappingURL=typed.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9hYmkvdHlwZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7OztDQWFDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxhQUFhLEdBQUcsS0FBSztBQUNyQixNQUFNRyxhQUFhQyxtQkFBT0EsQ0FBQyxrRkFBbUI7QUFDOUMsTUFBTUMsU0FBUyxDQUFDO0FBQ2hCLFNBQVNDLEVBQUVMLEtBQUssRUFBRU0sS0FBSztJQUNuQixJQUFJQyxTQUFTO0lBQ2IsSUFBSUQsUUFBUSxHQUFHO1FBQ1hDLFNBQVM7UUFDVEQsU0FBUyxDQUFDO0lBQ2Q7SUFDQSx3Q0FBd0M7SUFDeEMsT0FBTyxJQUFJTCxNQUFNRyxRQUFRLENBQUMsRUFBRUcsU0FBUyxLQUFLLElBQUksR0FBRyxFQUFFRCxNQUFNLENBQUMsRUFBRU4sT0FBTztRQUFFTztRQUFRRDtJQUFNO0FBQ3ZGO0FBQ0EsU0FBU0UsRUFBRVIsS0FBSyxFQUFFUyxJQUFJO0lBQ2xCLHdDQUF3QztJQUN4QyxPQUFPLElBQUlSLE1BQU1HLFFBQVEsQ0FBQyxLQUFLLEVBQUUsT0FBU0ssT0FBTyxHQUFHLENBQUMsRUFBRVQsT0FBTztRQUFFUztJQUFLO0FBQ3pFO0FBQ0EsTUFBTUMsZUFBZUMsT0FBT0MsR0FBRyxDQUFDO0FBQ2hDOztDQUVDLEdBQ0QsTUFBTVg7SUFTRixDQUFDWSxPQUFPLENBQUM7SUFLVDs7S0FFQyxHQUNEQyxZQUFZQyxLQUFLLEVBQUVDLElBQUksRUFBRWhCLEtBQUssRUFBRWEsT0FBTyxDQUFFO1FBQ3JDLElBQUlBLFdBQVcsTUFBTTtZQUNqQkEsVUFBVTtRQUNkO1FBQ0MsSUFBR1gsV0FBV2UsYUFBYSxFQUFFYixRQUFRVyxPQUFPO1FBQzVDLElBQUdiLFdBQVdnQixnQkFBZ0IsRUFBRSxJQUFJLEVBQUU7WUFBRVI7WUFBY007WUFBTWhCO1FBQU07UUFDbkUsSUFBSSxDQUFD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O0lBQ2xDO0lBQ0E7Ozs7OztLQU1DLEdBQ0QsT0FBT3dJLFlBQVlsSixLQUFLLEVBQUVnQixJQUFJLEVBQUU7UUFDNUIsSUFBSWYsTUFBTWdKLE9BQU8sQ0FBQ2pKLFFBQVE7WUFDdEIsSUFBSUEsTUFBTWdCLElBQUksS0FBS0EsTUFBTTtnQkFDckIsTUFBTSxJQUFJSSxNQUFNLENBQUMsdUJBQXVCLEVBQUVKLEtBQUssTUFBTSxFQUFFaEIsTUFBTWdCLElBQUksQ0FBQyxDQUFDO1lBQ3ZFO1lBQ0EsT0FBT2hCLE1BQU1BLEtBQUs7UUFDdEI7UUFDQSxPQUFPQTtJQUNYO0FBQ0o7QUFDQUQsYUFBYSxHQUFHRSxPQUNoQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9hYmkvdHlwZWQuanM/ZDY1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogIEEgVHlwZWQgb2JqZWN0IGFsbG93cyBhIHZhbHVlIHRvIGhhdmUgaXRzIHR5cGUgZXhwbGljaXRseVxuICogIHNwZWNpZmllZC5cbiAqXG4gKiAgRm9yIGV4YW1wbGUsIGluIFNvbGlkaXR5LCB0aGUgdmFsdWUgYGA0NWBgIGNvdWxkIHJlcHJlc2VudCBhXG4gKiAgYGB1aW50OGBgIG9yIGEgYGB1aW50MjU2YGAuIFRoZSB2YWx1ZSBgYDB4MTIzNGBgIGNvdWxkIHJlcHJlc2VudFxuICogIGEgYGBieXRlczJgYCBvciBgYGJ5dGVzYGAuXG4gKlxuICogIFNpbmNlIEphdmFTY3JpcHQgaGFzIG5vIG1lYW5pbmdmdWwgd2F5IHRvIGV4cGxpY2l0bHkgaW5mb3JtIGFueVxuICogIEFQSXMgd2hpY2ggd2hhdCB0aGUgdHlwZSBpcywgdGhpcyBhbGxvd3MgdHJhbnNwYXJlbnQgaW50ZXJvcGVyYXRpb25cbiAqICB3aXRoIFNvbGRpdHkuXG4gKlxuICogIEBfc3Vic2VjdGlvbjogYXBpL2FiaTpUeXBlZCBWYWx1ZXNcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UeXBlZCA9IHZvaWQgMDtcbmNvbnN0IGluZGV4X2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvaW5kZXguanNcIik7XG5jb25zdCBfZ2F1cmQgPSB7fTtcbmZ1bmN0aW9uIG4odmFsdWUsIHdpZHRoKSB7XG4gICAgbGV0IHNpZ25lZCA9IGZhbHNlO1xuICAgIGlmICh3aWR0aCA8IDApIHtcbiAgICAgICAgc2lnbmVkID0gdHJ1ZTtcbiAgICAgICAgd2lkdGggKj0gLTE7XG4gICAgfVxuICAgIC8vIEBUT0RPOiBDaGVjayByYW5nZSBpcyB2YWxpZCBmb3IgdmFsdWVcbiAgICByZXR1cm4gbmV3IFR5cGVkKF9nYXVyZCwgYCR7c2lnbmVkID8gXCJcIiA6IFwidVwifWludCR7d2lkdGh9YCwgdmFsdWUsIHsgc2lnbmVkLCB3aWR0aCB9KTtcbn1cbmZ1bmN0aW9uIGIodmFsdWUsIHNpemUpIHtcbiAgICAvLyBAVE9ETzogQ2hlY2sgcmFuZ2UgaXMgdmFsaWQgZm9yIHZhbHVlXG4gICAgcmV0dXJuIG5ldyBUeXBlZChfZ2F1cmQsIGBieXRlcyR7KHNpemUpID8gc2l6ZSA6IFwiXCJ9YCwgdmFsdWUsIHsgc2l6ZSB9KTtcbn1cbmNvbnN0IF90eXBlZFN5bWJvbCA9IFN5bWJvbC5mb3IoXCJfZXRoZXJzX3R5cGVkXCIpO1xuLyoqXG4gKiAgVGhlICoqVHlwZWQqKiBjbGFzcyB0byB3cmFwIHZhbHVlcyBwcm92aWRpbmcgZXhwbGljaXQgdHlwZSBpbmZvcm1hdGlvbi5cbiAqL1xuY2xhc3MgVHlwZWQge1xuICAgIC8qKlxuICAgICAqICBUaGUgdHlwZSwgYXMgYSBTb2xpZGl0eS1jb21wYXRpYmxlIHR5cGUuXG4gICAgICovXG4gICAgdHlwZTtcbiAgICAvKipcbiAgICAgKiAgVGhlIGFjdHVhbCB2YWx1ZS5cbiAgICAgKi9cbiAgICB2YWx1ZTtcbiAgICAjb3B0aW9ucztcbiAgICAvKipcbiAgICAgKiAgQF9pZ25vcmU6XG4gICAgICovXG4gICAgX3R5cGVkU3ltYm9sO1xuICAgIC8qKlxuICAgICAqICBAX2lnbm9yZTpcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihnYXVyZCwgdHlwZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgb3B0aW9ucyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgKDAsIGluZGV4X2pzXzEuYXNzZXJ0UHJpdmF0ZSkoX2dhdXJkLCBnYXVyZCwgXCJUeXBlZFwiKTtcbiAgICAgICAgKDAsIGluZGV4X2pzXzEuZGVmaW5lUHJvcGVydGllcykodGhpcywgeyBfdHlwZWRTeW1ib2wsIHR5cGUsIHZhbHVlIH0pO1xuICAgICAgICB0aGlzLiNvcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgLy8gQ2hlY2sgdGhlIHZhbHVlIGlzIHZhbGlkXG4gICAgICAgIHRoaXMuZm9ybWF0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBGb3JtYXQgdGhlIHR5cGUgYXMgYSBIdW1hbi1SZWFkYWJsZSB0eXBlLlxuICAgICAqL1xuICAgIGZvcm1hdCgpIHtcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gXCJhcnJheVwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy50eXBlID09PSBcImR5bmFtaWNBcnJheVwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy50eXBlID09PSBcInR1cGxlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBgdHVwbGUoJHt0aGlzLnZhbHVlLm1hcCgodikgPT4gdi5mb3JtYXQoKSkuam9pbihcIixcIil9KWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBkZWZhdWx0IHZhbHVlIHJldHVybmVkIGJ5IHRoaXMgdHlwZS5cbiAgICAgKi9cbiAgICBkZWZhdWx0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIG1pbmltdW0gdmFsdWUgZm9yIG51bWVyaWMgdHlwZXMuXG4gICAgICovXG4gICAgbWluVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIG1heGltdW0gdmFsdWUgZm9yIG51bWVyaWMgdHlwZXMuXG4gICAgICovXG4gICAgbWF4VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBgYHRydWVgYCBhbmQgcHJvdmlkZXMgYSB0eXBlIGd1YXJkIGlzIHRoaXMgaXMgYSBbW1R5cGVkQmlnSW50XV0uXG4gICAgICovXG4gICAgaXNCaWdJbnQoKSB7XG4gICAgICAgIHJldHVybiAhISh0aGlzLnR5cGUubWF0Y2goL151P2ludFswLTldKyQvKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGBgdHJ1ZWBgIGFuZCBwcm92aWRlcyBhIHR5cGUgZ3VhcmQgaXMgdGhpcyBpcyBhIFtbVHlwZWREYXRhXV0uXG4gICAgICovXG4gICAgaXNEYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlLnN0YXJ0c1dpdGgoXCJieXRlc1wiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgYGB0cnVlYGAgYW5kIHByb3ZpZGVzIGEgdHlwZSBndWFyZCBpcyB0aGlzIGlzIGEgW1tUeXBlZFN0cmluZ11dLlxuICAgICAqL1xuICAgIGlzU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMudHlwZSA9PT0gXCJzdHJpbmdcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRoZSB0dXBsZSBuYW1lLCBpZiB0aGlzIGlzIGEgdHVwbGUuIFRocm93cyBvdGhlcndpc2UuXG4gICAgICovXG4gICAgZ2V0IHR1cGxlTmFtZSgpIHtcbiAgICAgICAgaWYgKHRoaXMudHlwZSAhPT0gXCJ0dXBsZVwiKSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJub3QgYSB0dXBsZVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy4jb3B0aW9ucztcbiAgICB9XG4gICAgLy8gUmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoaXMgdHlwZSBhcyBhbiBhcnJheVxuICAgIC8vIC0gYG51bGxgIGluZGljYXRlcyB0aGUgbGVuZ3RoIGlzIHVuZm9yY2VkLCBpdCBjb3VsZCBiZSBkeW5hbWljXG4gICAgLy8gLSBgLTFgIGluZGljYXRlcyB0aGUgbGVuZ3RoIGlzIGR5bmFtaWNcbiAgICAvLyAtIGFueSBvdGhlciB2YWx1ZSBpbmRpY2F0ZXMgaXQgaXMgYSBzdGF0aWMgYXJyYXkgYW5kIGlzIGl0cyBsZW5ndGhcbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBhcnJheSB0eXBlIG9yIGBgLTFgYCBpZiBpdCBpcyBkeW5hbWljLlxuICAgICAqXG4gICAgICogIFRocm93cyBpZiB0aGUgdHlwZSBpcyBub3QgYW4gYXJyYXkuXG4gICAgICovXG4gICAgZ2V0IGFycmF5TGVuZ3RoKCkge1xuICAgICAgICBpZiAodGhpcy50eXBlICE9PSBcImFycmF5XCIpIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIm5vdCBhbiBhcnJheVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy4jb3B0aW9ucyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLiNvcHRpb25zID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLnZhbHVlKS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGEgbmV3ICoqVHlwZWQqKiBvZiAlJXR5cGUlJSB3aXRoIHRoZSAlJXZhbHVlJSUuXG4gICAgICovXG4gICAgc3RhdGljIGZyb20odHlwZSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUeXBlZChfZ2F1cmQsIHR5cGUsIHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQ4YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQ4KHYpIHsgcmV0dXJuIG4odiwgOCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDE2YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQxNih2KSB7IHJldHVybiBuKHYsIDE2KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MjRgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDI0KHYpIHsgcmV0dXJuIG4odiwgMjQpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQzMmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50MzIodikgeyByZXR1cm4gbih2LCAzMik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDQwYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQ0MCh2KSB7IHJldHVybiBuKHYsIDQwKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50NDhgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDQ4KHYpIHsgcmV0dXJuIG4odiwgNDgpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQ1NmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50NTYodikgeyByZXR1cm4gbih2LCA1Nik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDY0YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQ2NCh2KSB7IHJldHVybiBuKHYsIDY0KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50NzJgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDcyKHYpIHsgcmV0dXJuIG4odiwgNzIpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQ4MGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50ODAodikgeyByZXR1cm4gbih2LCA4MCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDg4YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQ4OCh2KSB7IHJldHVybiBuKHYsIDg4KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50OTZgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDk2KHYpIHsgcmV0dXJuIG4odiwgOTYpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQxMDRgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDEwNCh2KSB7IHJldHVybiBuKHYsIDEwNCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDExMmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50MTEyKHYpIHsgcmV0dXJuIG4odiwgMTEyKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MTIwYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQxMjAodikgeyByZXR1cm4gbih2LCAxMjApOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQxMjhgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDEyOCh2KSB7IHJldHVybiBuKHYsIDEyOCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDEzNmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50MTM2KHYpIHsgcmV0dXJuIG4odiwgMTM2KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MTQ0YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQxNDQodikgeyByZXR1cm4gbih2LCAxNDQpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQxNTJgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDE1Mih2KSB7IHJldHVybiBuKHYsIDE1Mik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDE2MGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50MTYwKHYpIHsgcmV0dXJuIG4odiwgMTYwKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MTY4YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQxNjgodikgeyByZXR1cm4gbih2LCAxNjgpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQxNzZgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDE3Nih2KSB7IHJldHVybiBuKHYsIDE3Nik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDE4NGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50MTg0KHYpIHsgcmV0dXJuIG4odiwgMTg0KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MTkyYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQxOTIodikgeyByZXR1cm4gbih2LCAxOTIpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQyMDBgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDIwMCh2KSB7IHJldHVybiBuKHYsIDIwMCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDIwOGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50MjA4KHYpIHsgcmV0dXJuIG4odiwgMjA4KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MjE2YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQyMTYodikgeyByZXR1cm4gbih2LCAyMTYpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQyMjRgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDIyNCh2KSB7IHJldHVybiBuKHYsIDIyNCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDIzMmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50MjMyKHYpIHsgcmV0dXJuIG4odiwgMjMyKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MjQwYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQyNDAodikgeyByZXR1cm4gbih2LCAyNDApOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQyNDhgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDI0OCh2KSB7IHJldHVybiBuKHYsIDI0OCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDI1NmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50MjU2KHYpIHsgcmV0dXJuIG4odiwgMjU2KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MjU2YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQodikgeyByZXR1cm4gbih2LCAyNTYpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDhgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50OCh2KSB7IHJldHVybiBuKHYsIC04KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQxNmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQxNih2KSB7IHJldHVybiBuKHYsIC0xNik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MjRgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50MjQodikgeyByZXR1cm4gbih2LCAtMjQpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDMyYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDMyKHYpIHsgcmV0dXJuIG4odiwgLTMyKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQ0MGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQ0MCh2KSB7IHJldHVybiBuKHYsIC00MCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50NDhgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50NDgodikgeyByZXR1cm4gbih2LCAtNDgpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDU2YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDU2KHYpIHsgcmV0dXJuIG4odiwgLTU2KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQ2NGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQ2NCh2KSB7IHJldHVybiBuKHYsIC02NCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50NzJgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50NzIodikgeyByZXR1cm4gbih2LCAtNzIpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDgwYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDgwKHYpIHsgcmV0dXJuIG4odiwgLTgwKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQ4OGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQ4OCh2KSB7IHJldHVybiBuKHYsIC04OCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50OTZgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50OTYodikgeyByZXR1cm4gbih2LCAtOTYpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDEwNGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQxMDQodikgeyByZXR1cm4gbih2LCAtMTA0KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQxMTJgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50MTEyKHYpIHsgcmV0dXJuIG4odiwgLTExMik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MTIwYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDEyMCh2KSB7IHJldHVybiBuKHYsIC0xMjApOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDEyOGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQxMjgodikgeyByZXR1cm4gbih2LCAtMTI4KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQxMzZgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50MTM2KHYpIHsgcmV0dXJuIG4odiwgLTEzNik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MTQ0YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDE0NCh2KSB7IHJldHVybiBuKHYsIC0xNDQpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDUyYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDE1Mih2KSB7IHJldHVybiBuKHYsIC0xNTIpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDE2MGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQxNjAodikgeyByZXR1cm4gbih2LCAtMTYwKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQxNjhgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50MTY4KHYpIHsgcmV0dXJuIG4odiwgLTE2OCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MTc2YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDE3Nih2KSB7IHJldHVybiBuKHYsIC0xNzYpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDE4NGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQxODQodikgeyByZXR1cm4gbih2LCAtMTg0KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQ5MmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQxOTIodikgeyByZXR1cm4gbih2LCAtMTkyKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQyMDBgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50MjAwKHYpIHsgcmV0dXJuIG4odiwgLTIwMCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MjA4YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDIwOCh2KSB7IHJldHVybiBuKHYsIC0yMDgpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDIxNmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQyMTYodikgeyByZXR1cm4gbih2LCAtMjE2KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQyMjRgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50MjI0KHYpIHsgcmV0dXJuIG4odiwgLTIyNCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MjMyYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDIzMih2KSB7IHJldHVybiBuKHYsIC0yMzIpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDI0MGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQyNDAodikgeyByZXR1cm4gbih2LCAtMjQwKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQyNDhgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50MjQ4KHYpIHsgcmV0dXJuIG4odiwgLTI0OCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MjU2YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDI1Nih2KSB7IHJldHVybiBuKHYsIC0yNTYpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDI1NmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQodikgeyByZXR1cm4gbih2LCAtMjU2KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczFgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXMxKHYpIHsgcmV0dXJuIGIodiwgMSk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXMyYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzMih2KSB7IHJldHVybiBiKHYsIDIpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzM2BgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczModikgeyByZXR1cm4gYih2LCAzKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczRgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXM0KHYpIHsgcmV0dXJuIGIodiwgNCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXM1YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzNSh2KSB7IHJldHVybiBiKHYsIDUpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzNmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczYodikgeyByZXR1cm4gYih2LCA2KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczdgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXM3KHYpIHsgcmV0dXJuIGIodiwgNyk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXM4YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzOCh2KSB7IHJldHVybiBiKHYsIDgpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzOWBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczkodikgeyByZXR1cm4gYih2LCA5KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczEwYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzMTAodikgeyByZXR1cm4gYih2LCAxMCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXMxMWBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczExKHYpIHsgcmV0dXJuIGIodiwgMTEpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMTJgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXMxMih2KSB7IHJldHVybiBiKHYsIDEyKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczEzYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzMTModikgeyByZXR1cm4gYih2LCAxMyk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXMxNGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczE0KHYpIHsgcmV0dXJuIGIodiwgMTQpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMTVgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXMxNSh2KSB7IHJldHVybiBiKHYsIDE1KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczE2YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzMTYodikgeyByZXR1cm4gYih2LCAxNik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXMxN2BgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczE3KHYpIHsgcmV0dXJuIGIodiwgMTcpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMThgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXMxOCh2KSB7IHJldHVybiBiKHYsIDE4KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczE5YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzMTkodikgeyByZXR1cm4gYih2LCAxOSk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXMyMGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczIwKHYpIHsgcmV0dXJuIGIodiwgMjApOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMjFgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXMyMSh2KSB7IHJldHVybiBiKHYsIDIxKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczIyYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzMjIodikgeyByZXR1cm4gYih2LCAyMik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXMyM2BgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczIzKHYpIHsgcmV0dXJuIGIodiwgMjMpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMjRgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXMyNCh2KSB7IHJldHVybiBiKHYsIDI0KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczI1YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzMjUodikgeyByZXR1cm4gYih2LCAyNSk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXMyNmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczI2KHYpIHsgcmV0dXJuIGIodiwgMjYpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMjdgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXMyNyh2KSB7IHJldHVybiBiKHYsIDI3KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczI4YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzMjgodikgeyByZXR1cm4gYih2LCAyOCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXMyOWBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczI5KHYpIHsgcmV0dXJuIGIodiwgMjkpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMzBgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXMzMCh2KSB7IHJldHVybiBiKHYsIDMwKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczMxYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzMzEodikgeyByZXR1cm4gYih2LCAzMSk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXMzMmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczMyKHYpIHsgcmV0dXJuIGIodiwgMzIpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGFkZHJlc3NgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYWRkcmVzcyh2KSB7IHJldHVybiBuZXcgVHlwZWQoX2dhdXJkLCBcImFkZHJlc3NcIiwgdik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYm9vbGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBib29sKHYpIHsgcmV0dXJuIG5ldyBUeXBlZChfZ2F1cmQsIFwiYm9vbFwiLCAhIXYpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzKHYpIHsgcmV0dXJuIG5ldyBUeXBlZChfZ2F1cmQsIFwiYnl0ZXNcIiwgdik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgc3RyaW5nYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHN0cmluZyh2KSB7IHJldHVybiBuZXcgVHlwZWQoX2dhdXJkLCBcInN0cmluZ1wiLCB2KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBhcnJheWBgIHR5cGUgZm9yICUldiUlLCBhbGxvd2luZyAlJWR5bmFtaWMlJSBsZW5ndGguXG4gICAgICovXG4gICAgc3RhdGljIGFycmF5KHYsIGR5bmFtaWMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm90IGltcGxlbWVudGVkIHlldFwiKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUeXBlZChfZ2F1cmQsIFwiYXJyYXlcIiwgdiwgZHluYW1pYyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB0dXBsZWBgIHR5cGUgZm9yICUldiUlLCB3aXRoIHRoZSBvcHRpb25hbCAlJW5hbWUlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdHVwbGUodiwgbmFtZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub3QgaW1wbGVtZW50ZWQgeWV0XCIpO1xuICAgICAgICByZXR1cm4gbmV3IFR5cGVkKF9nYXVyZCwgXCJ0dXBsZVwiLCB2LCBuYW1lKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQ4YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIG92ZXJyaWRlcyh2KSB7XG4gICAgICAgIHJldHVybiBuZXcgVHlwZWQoX2dhdXJkLCBcIm92ZXJyaWRlc1wiLCBPYmplY3QuYXNzaWduKHt9LCB2KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRydWUgb25seSBpZiAlJXZhbHVlJSUgaXMgYSBbW1R5cGVkXV0gaW5zdGFuY2UuXG4gICAgICovXG4gICAgc3RhdGljIGlzVHlwZWQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZVxuICAgICAgICAgICAgJiYgdHlwZW9mICh2YWx1ZSkgPT09IFwib2JqZWN0XCJcbiAgICAgICAgICAgICYmIFwiX3R5cGVkU3ltYm9sXCIgaW4gdmFsdWVcbiAgICAgICAgICAgICYmIHZhbHVlLl90eXBlZFN5bWJvbCA9PT0gX3R5cGVkU3ltYm9sKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIElmIHRoZSB2YWx1ZSBpcyBhIFtbVHlwZWRdXSBpbnN0YW5jZSwgdmFsaWRhdGVzIHRoZSB1bmRlcmx5aW5nIHZhbHVlXG4gICAgICogIGFuZCByZXR1cm5zIGl0LCBvdGhlcndpc2UgcmV0dXJucyB2YWx1ZSBkaXJlY3RseS5cbiAgICAgKlxuICAgICAqICBUaGlzIGlzIHVzZWZ1bCBmb3IgZnVuY3Rpb25zIHRoYXQgd2l0aCB0byBhY2NlcHQgZWl0aGVyIGEgW1tUeXBlZF1dXG4gICAgICogIG9iamVjdCBvciB2YWx1ZXMuXG4gICAgICovXG4gICAgc3RhdGljIGRlcmVmZXJlbmNlKHZhbHVlLCB0eXBlKSB7XG4gICAgICAgIGlmIChUeXBlZC5pc1R5cGVkKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlLnR5cGUgIT09IHR5cGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgdHlwZTogZXhwZWNldGQgJHt0eXBlfSwgZ290ICR7dmFsdWUudHlwZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuZXhwb3J0cy5UeXBlZCA9IFR5cGVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZWQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVHlwZWQiLCJpbmRleF9qc18xIiwicmVxdWlyZSIsIl9nYXVyZCIsIm4iLCJ3aWR0aCIsInNpZ25lZCIsImIiLCJzaXplIiwiX3R5cGVkU3ltYm9sIiwiU3ltYm9sIiwiZm9yIiwib3B0aW9ucyIsImNvbnN0cnVjdG9yIiwiZ2F1cmQiLCJ0eXBlIiwiYXNzZXJ0UHJpdmF0ZSIsImRlZmluZVByb3BlcnRpZXMiLCJmb3JtYXQiLCJFcnJvciIsIm1hcCIsInYiLCJqb2luIiwiZGVmYXVsdFZhbHVlIiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsImlzQmlnSW50IiwibWF0Y2giLCJpc0RhdGEiLCJzdGFydHNXaXRoIiwiaXNTdHJpbmciLCJ0dXBsZU5hbWUiLCJUeXBlRXJyb3IiLCJhcnJheUxlbmd0aCIsImxlbmd0aCIsImZyb20iLCJ1aW50OCIsInVpbnQxNiIsInVpbnQyNCIsInVpbnQzMiIsInVpbnQ0MCIsInVpbnQ0OCIsInVpbnQ1NiIsInVpbnQ2NCIsInVpbnQ3MiIsInVpbnQ4MCIsInVpbnQ4OCIsInVpbnQ5NiIsInVpbnQxMDQiLCJ1aW50MTEyIiwidWludDEyMCIsInVpbnQxMjgiLCJ1aW50MTM2IiwidWludDE0NCIsInVpbnQxNTIiLCJ1aW50MTYwIiwidWludDE2OCIsInVpbnQxNzYiLCJ1aW50MTg0IiwidWludDE5MiIsInVpbnQyMDAiLCJ1aW50MjA4IiwidWludDIxNiIsInVpbnQyMjQiLCJ1aW50MjMyIiwidWludDI0MCIsInVpbnQyNDgiLCJ1aW50MjU2IiwidWludCIsImludDgiLCJpbnQxNiIsImludDI0IiwiaW50MzIiLCJpbnQ0MCIsImludDQ4IiwiaW50NTYiLCJpbnQ2NCIsImludDcyIiwiaW50ODAiLCJpbnQ4OCIsImludDk2IiwiaW50MTA0IiwiaW50MTEyIiwiaW50MTIwIiwiaW50MTI4IiwiaW50MTM2IiwiaW50MTQ0IiwiaW50MTUyIiwiaW50MTYwIiwiaW50MTY4IiwiaW50MTc2IiwiaW50MTg0IiwiaW50MTkyIiwiaW50MjAwIiwiaW50MjA4IiwiaW50MjE2IiwiaW50MjI0IiwiaW50MjMyIiwiaW50MjQwIiwiaW50MjQ4IiwiaW50MjU2IiwiaW50IiwiYnl0ZXMxIiwiYnl0ZXMyIiwiYnl0ZXMzIiwiYnl0ZXM0IiwiYnl0ZXM1IiwiYnl0ZXM2IiwiYnl0ZXM3IiwiYnl0ZXM4IiwiYnl0ZXM5IiwiYnl0ZXMxMCIsImJ5dGVzMTEiLCJieXRlczEyIiwiYnl0ZXMxMyIsImJ5dGVzMTQiLCJieXRlczE1IiwiYnl0ZXMxNiIsImJ5dGVzMTciLCJieXRlczE4IiwiYnl0ZXMxOSIsImJ5dGVzMjAiLCJieXRlczIxIiwiYnl0ZXMyMiIsImJ5dGVzMjMiLCJieXRlczI0IiwiYnl0ZXMyNSIsImJ5dGVzMjYiLCJieXRlczI3IiwiYnl0ZXMyOCIsImJ5dGVzMjkiLCJieXRlczMwIiwiYnl0ZXMzMSIsImJ5dGVzMzIiLCJhZGRyZXNzIiwiYm9vbCIsImJ5dGVzIiwic3RyaW5nIiwiYXJyYXkiLCJkeW5hbWljIiwidHVwbGUiLCJuYW1lIiwib3ZlcnJpZGVzIiwiYXNzaWduIiwiaXNUeXBlZCIsImRlcmVmZXJlbmNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/abi/typed.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/address/address.js":
/*!*************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/address/address.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getIcapAddress = exports.getAddress = void 0;\nconst index_js_1 = __webpack_require__(/*! ../crypto/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst BN_0 = BigInt(0);\nconst BN_36 = BigInt(36);\nfunction getChecksumAddress(address) {\n    //    if (!isHexString(address, 20)) {\n    //        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    //    }\n    address = address.toLowerCase();\n    const chars = address.substring(2).split(\"\");\n    const expanded = new Uint8Array(40);\n    for(let i = 0; i < 40; i++){\n        expanded[i] = chars[i].charCodeAt(0);\n    }\n    const hashed = (0, index_js_2.getBytes)((0, index_js_1.keccak256)(expanded));\n    for(let i = 0; i < 40; i += 2){\n        if (hashed[i >> 1] >> 4 >= 8) {\n            chars[i] = chars[i].toUpperCase();\n        }\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\n            chars[i + 1] = chars[i + 1].toUpperCase();\n        }\n    }\n    return \"0x\" + chars.join(\"\");\n}\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n// Create lookup table\nconst ibanLookup = {};\nfor(let i = 0; i < 10; i++){\n    ibanLookup[String(i)] = String(i);\n}\nfor(let i = 0; i < 26; i++){\n    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n}\n// How many decimal digits can we process? (for 64-bit float, this is 15)\n// i.e. Math.floor(Math.log10(Number.MAX_SAFE_INTEGER));\nconst safeDigits = 15;\nfunction ibanChecksum(address) {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\n    let expanded = address.split(\"\").map((c)=>{\n        return ibanLookup[c];\n    }).join(\"\");\n    // Javascript can handle integers safely up to 15 (decimal) digits\n    while(expanded.length >= safeDigits){\n        let block = expanded.substring(0, safeDigits);\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n    let checksum = String(98 - parseInt(expanded, 10) % 97);\n    while(checksum.length < 2){\n        checksum = \"0\" + checksum;\n    }\n    return checksum;\n}\n;\nconst Base36 = function() {\n    ;\n    const result = {};\n    for(let i = 0; i < 36; i++){\n        const key = \"0123456789abcdefghijklmnopqrstuvwxyz\"[i];\n        result[key] = BigInt(i);\n    }\n    return result;\n}();\nfunction fromBase36(value) {\n    value = value.toLowerCase();\n    let result = BN_0;\n    for(let i = 0; i < value.length; i++){\n        result = result * BN_36 + Base36[value[i]];\n    }\n    return result;\n}\n/**\n *  Returns a normalized and checksumed address for %%address%%.\n *  This accepts non-checksum addresses, checksum addresses and\n *  [[getIcapAddress]] formats.\n *\n *  The checksum in Ethereum uses the capitalization (upper-case\n *  vs lower-case) of the characters within an address to encode\n *  its checksum, which offers, on average, a checksum of 15-bits.\n *\n *  If %%address%% contains both upper-case and lower-case, it is\n *  assumed to already be a checksum address and its checksum is\n *  validated, and if the address fails its expected checksum an\n *  error is thrown.\n *\n *  If you wish the checksum of %%address%% to be ignore, it should\n *  be converted to lower-case (i.e. ``.toLowercase()``) before\n *  being passed in. This should be a very rare situation though,\n *  that you wish to bypass the safegaurds in place to protect\n *  against an address that has been incorrectly copied from another\n *  source.\n *\n *  @example:\n *    // Adds the checksum (via upper-casing specific letters)\n *    getAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\")\n *    //_result:\n *\n *    // Converts ICAP address and adds checksum\n *    getAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\n *    //_result:\n *\n *    // Throws an error if an address contains mixed case,\n *    // but the checksum fails\n *    getAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBA72\")\n *    //_error:\n */ function getAddress(address) {\n    (0, index_js_2.assertArgument)(typeof address === \"string\", \"invalid address\", \"address\", address);\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n        // Missing the 0x prefix\n        if (!address.startsWith(\"0x\")) {\n            address = \"0x\" + address;\n        }\n        const result = getChecksumAddress(address);\n        // It is a checksummed address with a bad checksum\n        (0, index_js_2.assertArgument)(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, \"bad address checksum\", \"address\", address);\n        return result;\n    }\n    // Maybe ICAP? (we only support direct mode)\n    if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n        // It is an ICAP address with a bad checksum\n        (0, index_js_2.assertArgument)(address.substring(2, 4) === ibanChecksum(address), \"bad icap checksum\", \"address\", address);\n        let result = fromBase36(address.substring(4)).toString(16);\n        while(result.length < 40){\n            result = \"0\" + result;\n        }\n        return getChecksumAddress(\"0x\" + result);\n    }\n    (0, index_js_2.assertArgument)(false, \"invalid address\", \"address\", address);\n}\nexports.getAddress = getAddress;\n/**\n *  The [ICAP Address format](link-icap) format is an early checksum\n *  format which attempts to be compatible with the banking\n *  industry [IBAN format](link-wiki-iban) for bank accounts.\n *\n *  It is no longer common or a recommended format.\n *\n *  @example:\n *    getIcapAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\");\n *    //_result:\n *\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\n *    //_result:\n *\n *    // Throws an error if the ICAP checksum is wrong\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK37\");\n *    //_error:\n */ function getIcapAddress(address) {\n    //let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();\n    let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();\n    while(base36.length < 30){\n        base36 = \"0\" + base36;\n    }\n    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n}\nexports.getIcapAddress = getIcapAddress; //# sourceMappingURL=address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/address/address.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/address/checks.js":
/*!************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/address/checks.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.resolveAddress = exports.isAddress = exports.isAddressable = void 0;\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst address_js_1 = __webpack_require__(/*! ./address.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/address.js\");\n/**\n *  Returns true if %%value%% is an object which implements the\n *  [[Addressable]] interface.\n *\n *  @example:\n *    // Wallets and AbstractSigner sub-classes\n *    isAddressable(Wallet.createRandom())\n *    //_result:\n *\n *    // Contracts\n *    contract = new Contract(\"dai.tokens.ethers.eth\", [ ], provider)\n *    isAddressable(contract)\n *    //_result:\n */ function isAddressable(value) {\n    return value && typeof value.getAddress === \"function\";\n}\nexports.isAddressable = isAddressable;\n/**\n *  Returns true if %%value%% is a valid address.\n *\n *  @example:\n *    // Valid address\n *    isAddress(\"0x8ba1f109551bD432803012645Ac136ddd64DBA72\")\n *    //_result:\n *\n *    // Valid ICAP address\n *    isAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\")\n *    //_result:\n *\n *    // Invalid checksum\n *    isAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBa72\")\n *    //_result:\n *\n *    // Invalid ICAP checksum\n *    isAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBA72\")\n *    //_result:\n *\n *    // Not an address (an ENS name requires a provided and an\n *    // asynchronous API to access)\n *    isAddress(\"ricmoo.eth\")\n *    //_result:\n */ function isAddress(value) {\n    try {\n        (0, address_js_1.getAddress)(value);\n        return true;\n    } catch (error) {}\n    return false;\n}\nexports.isAddress = isAddress;\nasync function checkAddress(target, promise) {\n    const result = await promise;\n    if (result == null || result === \"0x0000000000000000000000000000000000000000\") {\n        (0, index_js_1.assert)(typeof target !== \"string\", \"unconfigured name\", \"UNCONFIGURED_NAME\", {\n            value: target\n        });\n        (0, index_js_1.assertArgument)(false, \"invalid AddressLike value; did not resolve to a value address\", \"target\", target);\n    }\n    return (0, address_js_1.getAddress)(result);\n}\n/**\n *  Resolves to an address for the %%target%%, which may be any\n *  supported address type, an [[Addressable]] or a Promise which\n *  resolves to an address.\n *\n *  If an ENS name is provided, but that name has not been correctly\n *  configured a [[UnconfiguredNameError]] is thrown.\n *\n *  @example:\n *    addr = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\"\n *\n *    // Addresses are return synchronously\n *    resolveAddress(addr, provider)\n *    //_result:\n *\n *    // Address promises are resolved asynchronously\n *    resolveAddress(Promise.resolve(addr))\n *    //_result:\n *\n *    // ENS names are resolved asynchronously\n *    resolveAddress(\"dai.tokens.ethers.eth\", provider)\n *    //_result:\n *\n *    // Addressable objects are resolved asynchronously\n *    contract = new Contract(addr, [ ])\n *    resolveAddress(contract, provider)\n *    //_result:\n *\n *    // Unconfigured ENS names reject\n *    resolveAddress(\"nothing-here.ricmoo.eth\", provider)\n *    //_error:\n *\n *    // ENS names require a NameResolver object passed in\n *    // (notice the provider was omitted)\n *    resolveAddress(\"nothing-here.ricmoo.eth\")\n *    //_error:\n */ function resolveAddress(target, resolver) {\n    if (typeof target === \"string\") {\n        if (target.match(/^0x[0-9a-f]{40}$/i)) {\n            return (0, address_js_1.getAddress)(target);\n        }\n        (0, index_js_1.assert)(resolver != null, \"ENS resolution requires a provider\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"resolveName\"\n        });\n        return checkAddress(target, resolver.resolveName(target));\n    } else if (isAddressable(target)) {\n        return checkAddress(target, target.getAddress());\n    } else if (target && typeof target.then === \"function\") {\n        return checkAddress(target, target);\n    }\n    (0, index_js_1.assertArgument)(false, \"unsupported addressable value\", \"target\", target);\n}\nexports.resolveAddress = resolveAddress; //# sourceMappingURL=checks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9hZGRyZXNzL2NoZWNrcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsc0JBQXNCLEdBQUdBLGlCQUFpQixHQUFHQSxxQkFBcUIsR0FBRyxLQUFLO0FBQzFFLE1BQU1LLGFBQWFDLG1CQUFPQSxDQUFDLGtGQUFtQjtBQUM5QyxNQUFNQyxlQUFlRCxtQkFBT0EsQ0FBQyxpRkFBYztBQUMzQzs7Ozs7Ozs7Ozs7OztDQWFDLEdBQ0QsU0FBU0YsY0FBY0gsS0FBSztJQUN4QixPQUFRQSxTQUFTLE9BQVFBLE1BQU1PLFVBQVUsS0FBTTtBQUNuRDtBQUNBUixxQkFBcUIsR0FBR0k7QUFDeEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXdCQyxHQUNELFNBQVNELFVBQVVGLEtBQUs7SUFDcEIsSUFBSTtRQUNDLElBQUdNLGFBQWFDLFVBQVUsRUFBRVA7UUFDN0IsT0FBTztJQUNYLEVBQ0EsT0FBT1EsT0FBTyxDQUFFO0lBQ2hCLE9BQU87QUFDWDtBQUNBVCxpQkFBaUIsR0FBR0c7QUFDcEIsZUFBZU8sYUFBYUMsTUFBTSxFQUFFQyxPQUFPO0lBQ3ZDLE1BQU1DLFNBQVMsTUFBTUQ7SUFDckIsSUFBSUMsVUFBVSxRQUFRQSxXQUFXLDhDQUE4QztRQUMxRSxJQUFHUixXQUFXUyxNQUFNLEVBQUUsT0FBUUgsV0FBWSxVQUFVLHFCQUFxQixxQkFBcUI7WUFBRVYsT0FBT1U7UUFBTztRQUM5RyxJQUFHTixXQUFXVSxjQUFjLEVBQUUsT0FBTyxpRUFBaUUsVUFBVUo7SUFDckg7SUFDQSxPQUFPLENBQUMsR0FBR0osYUFBYUMsVUFBVSxFQUFFSztBQUN4QztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FvQ0MsR0FDRCxTQUFTWCxlQUFlUyxNQUFNLEVBQUVLLFFBQVE7SUFDcEMsSUFBSSxPQUFRTCxXQUFZLFVBQVU7UUFDOUIsSUFBSUEsT0FBT00sS0FBSyxDQUFDLHNCQUFzQjtZQUNuQyxPQUFPLENBQUMsR0FBR1YsYUFBYUMsVUFBVSxFQUFFRztRQUN4QztRQUNDLElBQUdOLFdBQVdTLE1BQU0sRUFBRUUsWUFBWSxNQUFNLHNDQUFzQyx5QkFBeUI7WUFBRUUsV0FBVztRQUFjO1FBQ25JLE9BQU9SLGFBQWFDLFFBQVFLLFNBQVNHLFdBQVcsQ0FBQ1I7SUFDckQsT0FDSyxJQUFJUCxjQUFjTyxTQUFTO1FBQzVCLE9BQU9ELGFBQWFDLFFBQVFBLE9BQU9ILFVBQVU7SUFDakQsT0FDSyxJQUFJRyxVQUFVLE9BQVFBLE9BQU9TLElBQUksS0FBTSxZQUFZO1FBQ3BELE9BQU9WLGFBQWFDLFFBQVFBO0lBQ2hDO0lBQ0MsSUFBR04sV0FBV1UsY0FBYyxFQUFFLE9BQU8saUNBQWlDLFVBQVVKO0FBQ3JGO0FBQ0FYLHNCQUFzQixHQUFHRSxnQkFDekIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvYWRkcmVzcy9jaGVja3MuanM/MjYxNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVzb2x2ZUFkZHJlc3MgPSBleHBvcnRzLmlzQWRkcmVzcyA9IGV4cG9ydHMuaXNBZGRyZXNzYWJsZSA9IHZvaWQgMDtcbmNvbnN0IGluZGV4X2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvaW5kZXguanNcIik7XG5jb25zdCBhZGRyZXNzX2pzXzEgPSByZXF1aXJlKFwiLi9hZGRyZXNzLmpzXCIpO1xuLyoqXG4gKiAgUmV0dXJucyB0cnVlIGlmICUldmFsdWUlJSBpcyBhbiBvYmplY3Qgd2hpY2ggaW1wbGVtZW50cyB0aGVcbiAqICBbW0FkZHJlc3NhYmxlXV0gaW50ZXJmYWNlLlxuICpcbiAqICBAZXhhbXBsZTpcbiAqICAgIC8vIFdhbGxldHMgYW5kIEFic3RyYWN0U2lnbmVyIHN1Yi1jbGFzc2VzXG4gKiAgICBpc0FkZHJlc3NhYmxlKFdhbGxldC5jcmVhdGVSYW5kb20oKSlcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBDb250cmFjdHNcbiAqICAgIGNvbnRyYWN0ID0gbmV3IENvbnRyYWN0KFwiZGFpLnRva2Vucy5ldGhlcnMuZXRoXCIsIFsgXSwgcHJvdmlkZXIpXG4gKiAgICBpc0FkZHJlc3NhYmxlKGNvbnRyYWN0KVxuICogICAgLy9fcmVzdWx0OlxuICovXG5mdW5jdGlvbiBpc0FkZHJlc3NhYmxlKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAmJiB0eXBlb2YgKHZhbHVlLmdldEFkZHJlc3MpID09PSBcImZ1bmN0aW9uXCIpO1xufVxuZXhwb3J0cy5pc0FkZHJlc3NhYmxlID0gaXNBZGRyZXNzYWJsZTtcbi8qKlxuICogIFJldHVybnMgdHJ1ZSBpZiAlJXZhbHVlJSUgaXMgYSB2YWxpZCBhZGRyZXNzLlxuICpcbiAqICBAZXhhbXBsZTpcbiAqICAgIC8vIFZhbGlkIGFkZHJlc3NcbiAqICAgIGlzQWRkcmVzcyhcIjB4OGJhMWYxMDk1NTFiRDQzMjgwMzAxMjY0NUFjMTM2ZGRkNjREQkE3MlwiKVxuICogICAgLy9fcmVzdWx0OlxuICpcbiAqICAgIC8vIFZhbGlkIElDQVAgYWRkcmVzc1xuICogICAgaXNBZGRyZXNzKFwiWEU2NUdCNkxETlhZT0ZUWDBOU1YzRlVXS09XSVhBTUpLMzZcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBJbnZhbGlkIGNoZWNrc3VtXG4gKiAgICBpc0FkZHJlc3MoXCIweDhCYTFmMTA5NTUxYkQ0MzI4MDMwMTI2NDVBYzEzNmRkZDY0REJhNzJcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBJbnZhbGlkIElDQVAgY2hlY2tzdW1cbiAqICAgIGlzQWRkcmVzcyhcIjB4OEJhMWYxMDk1NTFiRDQzMjgwMzAxMjY0NUFjMTM2ZGRkNjREQkE3MlwiKVxuICogICAgLy9fcmVzdWx0OlxuICpcbiAqICAgIC8vIE5vdCBhbiBhZGRyZXNzIChhbiBFTlMgbmFtZSByZXF1aXJlcyBhIHByb3ZpZGVkIGFuZCBhblxuICogICAgLy8gYXN5bmNocm9ub3VzIEFQSSB0byBhY2Nlc3MpXG4gKiAgICBpc0FkZHJlc3MoXCJyaWNtb28uZXRoXCIpXG4gKiAgICAvL19yZXN1bHQ6XG4gKi9cbmZ1bmN0aW9uIGlzQWRkcmVzcyh2YWx1ZSkge1xuICAgIHRyeSB7XG4gICAgICAgICgwLCBhZGRyZXNzX2pzXzEuZ2V0QWRkcmVzcykodmFsdWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmlzQWRkcmVzcyA9IGlzQWRkcmVzcztcbmFzeW5jIGZ1bmN0aW9uIGNoZWNrQWRkcmVzcyh0YXJnZXQsIHByb21pc2UpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm9taXNlO1xuICAgIGlmIChyZXN1bHQgPT0gbnVsbCB8fCByZXN1bHQgPT09IFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIpIHtcbiAgICAgICAgKDAsIGluZGV4X2pzXzEuYXNzZXJ0KSh0eXBlb2YgKHRhcmdldCkgIT09IFwic3RyaW5nXCIsIFwidW5jb25maWd1cmVkIG5hbWVcIiwgXCJVTkNPTkZJR1VSRURfTkFNRVwiLCB7IHZhbHVlOiB0YXJnZXQgfSk7XG4gICAgICAgICgwLCBpbmRleF9qc18xLmFzc2VydEFyZ3VtZW50KShmYWxzZSwgXCJpbnZhbGlkIEFkZHJlc3NMaWtlIHZhbHVlOyBkaWQgbm90IHJlc29sdmUgdG8gYSB2YWx1ZSBhZGRyZXNzXCIsIFwidGFyZ2V0XCIsIHRhcmdldCk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgYWRkcmVzc19qc18xLmdldEFkZHJlc3MpKHJlc3VsdCk7XG59XG4vKipcbiAqICBSZXNvbHZlcyB0byBhbiBhZGRyZXNzIGZvciB0aGUgJSV0YXJnZXQlJSwgd2hpY2ggbWF5IGJlIGFueVxuICogIHN1cHBvcnRlZCBhZGRyZXNzIHR5cGUsIGFuIFtbQWRkcmVzc2FibGVdXSBvciBhIFByb21pc2Ugd2hpY2hcbiAqICByZXNvbHZlcyB0byBhbiBhZGRyZXNzLlxuICpcbiAqICBJZiBhbiBFTlMgbmFtZSBpcyBwcm92aWRlZCwgYnV0IHRoYXQgbmFtZSBoYXMgbm90IGJlZW4gY29ycmVjdGx5XG4gKiAgY29uZmlndXJlZCBhIFtbVW5jb25maWd1cmVkTmFtZUVycm9yXV0gaXMgdGhyb3duLlxuICpcbiAqICBAZXhhbXBsZTpcbiAqICAgIGFkZHIgPSBcIjB4NkIxNzU0NzRFODkwOTRDNDREYTk4Yjk1NEVlZGVBQzQ5NTI3MWQwRlwiXG4gKlxuICogICAgLy8gQWRkcmVzc2VzIGFyZSByZXR1cm4gc3luY2hyb25vdXNseVxuICogICAgcmVzb2x2ZUFkZHJlc3MoYWRkciwgcHJvdmlkZXIpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAgLy8gQWRkcmVzcyBwcm9taXNlcyBhcmUgcmVzb2x2ZWQgYXN5bmNocm9ub3VzbHlcbiAqICAgIHJlc29sdmVBZGRyZXNzKFByb21pc2UucmVzb2x2ZShhZGRyKSlcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBFTlMgbmFtZXMgYXJlIHJlc29sdmVkIGFzeW5jaHJvbm91c2x5XG4gKiAgICByZXNvbHZlQWRkcmVzcyhcImRhaS50b2tlbnMuZXRoZXJzLmV0aFwiLCBwcm92aWRlcilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBBZGRyZXNzYWJsZSBvYmplY3RzIGFyZSByZXNvbHZlZCBhc3luY2hyb25vdXNseVxuICogICAgY29udHJhY3QgPSBuZXcgQ29udHJhY3QoYWRkciwgWyBdKVxuICogICAgcmVzb2x2ZUFkZHJlc3MoY29udHJhY3QsIHByb3ZpZGVyKVxuICogICAgLy9fcmVzdWx0OlxuICpcbiAqICAgIC8vIFVuY29uZmlndXJlZCBFTlMgbmFtZXMgcmVqZWN0XG4gKiAgICByZXNvbHZlQWRkcmVzcyhcIm5vdGhpbmctaGVyZS5yaWNtb28uZXRoXCIsIHByb3ZpZGVyKVxuICogICAgLy9fZXJyb3I6XG4gKlxuICogICAgLy8gRU5TIG5hbWVzIHJlcXVpcmUgYSBOYW1lUmVzb2x2ZXIgb2JqZWN0IHBhc3NlZCBpblxuICogICAgLy8gKG5vdGljZSB0aGUgcHJvdmlkZXIgd2FzIG9taXR0ZWQpXG4gKiAgICByZXNvbHZlQWRkcmVzcyhcIm5vdGhpbmctaGVyZS5yaWNtb28uZXRoXCIpXG4gKiAgICAvL19lcnJvcjpcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFkZHJlc3ModGFyZ2V0LCByZXNvbHZlcikge1xuICAgIGlmICh0eXBlb2YgKHRhcmdldCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKHRhcmdldC5tYXRjaCgvXjB4WzAtOWEtZl17NDB9JC9pKSkge1xuICAgICAgICAgICAgcmV0dXJuICgwLCBhZGRyZXNzX2pzXzEuZ2V0QWRkcmVzcykodGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICAoMCwgaW5kZXhfanNfMS5hc3NlcnQpKHJlc29sdmVyICE9IG51bGwsIFwiRU5TIHJlc29sdXRpb24gcmVxdWlyZXMgYSBwcm92aWRlclwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbjogXCJyZXNvbHZlTmFtZVwiIH0pO1xuICAgICAgICByZXR1cm4gY2hlY2tBZGRyZXNzKHRhcmdldCwgcmVzb2x2ZXIucmVzb2x2ZU5hbWUodGFyZ2V0KSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQWRkcmVzc2FibGUodGFyZ2V0KSkge1xuICAgICAgICByZXR1cm4gY2hlY2tBZGRyZXNzKHRhcmdldCwgdGFyZ2V0LmdldEFkZHJlc3MoKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRhcmdldCAmJiB0eXBlb2YgKHRhcmdldC50aGVuKSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBjaGVja0FkZHJlc3ModGFyZ2V0LCB0YXJnZXQpO1xuICAgIH1cbiAgICAoMCwgaW5kZXhfanNfMS5hc3NlcnRBcmd1bWVudCkoZmFsc2UsIFwidW5zdXBwb3J0ZWQgYWRkcmVzc2FibGUgdmFsdWVcIiwgXCJ0YXJnZXRcIiwgdGFyZ2V0KTtcbn1cbmV4cG9ydHMucmVzb2x2ZUFkZHJlc3MgPSByZXNvbHZlQWRkcmVzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoZWNrcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJyZXNvbHZlQWRkcmVzcyIsImlzQWRkcmVzcyIsImlzQWRkcmVzc2FibGUiLCJpbmRleF9qc18xIiwicmVxdWlyZSIsImFkZHJlc3NfanNfMSIsImdldEFkZHJlc3MiLCJlcnJvciIsImNoZWNrQWRkcmVzcyIsInRhcmdldCIsInByb21pc2UiLCJyZXN1bHQiLCJhc3NlcnQiLCJhc3NlcnRBcmd1bWVudCIsInJlc29sdmVyIiwibWF0Y2giLCJvcGVyYXRpb24iLCJyZXNvbHZlTmFtZSIsInRoZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/address/checks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/address/contract-address.js":
/*!**********************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/address/contract-address.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getCreate2Address = exports.getCreateAddress = void 0;\nconst index_js_1 = __webpack_require__(/*! ../crypto/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst address_js_1 = __webpack_require__(/*! ./address.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/address.js\");\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n/**\n *  Returns the address that would result from a ``CREATE`` for %%tx%%.\n *\n *  This can be used to compute the address a contract will be\n *  deployed to by an EOA when sending a deployment transaction (i.e.\n *  when the ``to`` address is ``null``).\n *\n *  This can also be used to compute the address a contract will be\n *  deployed to by a contract, by using the contract's address as the\n *  ``to`` and the contract's nonce.\n *\n *  @example\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\";\n *    nonce = 5;\n *\n *    getCreateAddress({ from, nonce });\n *    //_result:\n */ function getCreateAddress(tx) {\n    const from = (0, address_js_1.getAddress)(tx.from);\n    const nonce = (0, index_js_2.getBigInt)(tx.nonce, \"tx.nonce\");\n    let nonceHex = nonce.toString(16);\n    if (nonceHex === \"0\") {\n        nonceHex = \"0x\";\n    } else if (nonceHex.length % 2) {\n        nonceHex = \"0x0\" + nonceHex;\n    } else {\n        nonceHex = \"0x\" + nonceHex;\n    }\n    return (0, address_js_1.getAddress)((0, index_js_2.dataSlice)((0, index_js_1.keccak256)((0, index_js_2.encodeRlp)([\n        from,\n        nonceHex\n    ])), 12));\n}\nexports.getCreateAddress = getCreateAddress;\n/**\n *  Returns the address that would result from a ``CREATE2`` operation\n *  with the given %%from%%, %%salt%% and %%initCodeHash%%.\n *\n *  To compute the %%initCodeHash%% from a contract's init code, use\n *  the [[keccak256]] function.\n *\n *  For a quick overview and example of ``CREATE2``, see [[link-ricmoo-wisps]].\n *\n *  @example\n *    // The address of the contract\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\"\n *\n *    // The salt\n *    salt = id(\"HelloWorld\")\n *\n *    // The hash of the initCode\n *    initCode = \"0x6394198df16000526103ff60206004601c335afa6040516060f3\";\n *    initCodeHash = keccak256(initCode)\n *\n *    getCreate2Address(from, salt, initCodeHash)\n *    //_result:\n */ function getCreate2Address(_from, _salt, _initCodeHash) {\n    const from = (0, address_js_1.getAddress)(_from);\n    const salt = (0, index_js_2.getBytes)(_salt, \"salt\");\n    const initCodeHash = (0, index_js_2.getBytes)(_initCodeHash, \"initCodeHash\");\n    (0, index_js_2.assertArgument)(salt.length === 32, \"salt must be 32 bytes\", \"salt\", _salt);\n    (0, index_js_2.assertArgument)(initCodeHash.length === 32, \"initCodeHash must be 32 bytes\", \"initCodeHash\", _initCodeHash);\n    return (0, address_js_1.getAddress)((0, index_js_2.dataSlice)((0, index_js_1.keccak256)((0, index_js_2.concat)([\n        \"0xff\",\n        from,\n        salt,\n        initCodeHash\n    ])), 12));\n}\nexports.getCreate2Address = getCreate2Address; //# sourceMappingURL=contract-address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9hZGRyZXNzL2NvbnRyYWN0LWFkZHJlc3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHlCQUF5QixHQUFHQSx3QkFBd0IsR0FBRyxLQUFLO0FBQzVELE1BQU1JLGFBQWFDLG1CQUFPQSxDQUFDLG9GQUFvQjtBQUMvQyxNQUFNQyxhQUFhRCxtQkFBT0EsQ0FBQyxrRkFBbUI7QUFDOUMsTUFBTUUsZUFBZUYsbUJBQU9BLENBQUMsaUZBQWM7QUFDM0Msc0dBQXNHO0FBQ3RHOzs7Ozs7Ozs7Ozs7Ozs7OztDQWlCQyxHQUNELFNBQVNGLGlCQUFpQkssRUFBRTtJQUN4QixNQUFNQyxPQUFPLENBQUMsR0FBR0YsYUFBYUcsVUFBVSxFQUFFRixHQUFHQyxJQUFJO0lBQ2pELE1BQU1FLFFBQVEsQ0FBQyxHQUFHTCxXQUFXTSxTQUFTLEVBQUVKLEdBQUdHLEtBQUssRUFBRTtJQUNsRCxJQUFJRSxXQUFXRixNQUFNRyxRQUFRLENBQUM7SUFDOUIsSUFBSUQsYUFBYSxLQUFLO1FBQ2xCQSxXQUFXO0lBQ2YsT0FDSyxJQUFJQSxTQUFTRSxNQUFNLEdBQUcsR0FBRztRQUMxQkYsV0FBVyxRQUFRQTtJQUN2QixPQUNLO1FBQ0RBLFdBQVcsT0FBT0E7SUFDdEI7SUFDQSxPQUFPLENBQUMsR0FBR04sYUFBYUcsVUFBVSxFQUFFLENBQUMsR0FBR0osV0FBV1UsU0FBUyxFQUFFLENBQUMsR0FBR1osV0FBV2EsU0FBUyxFQUFFLENBQUMsR0FBR1gsV0FBV1ksU0FBUyxFQUFFO1FBQUNUO1FBQU1JO0tBQVMsSUFBSTtBQUMxSTtBQUNBYix3QkFBd0IsR0FBR0c7QUFDM0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FzQkMsR0FDRCxTQUFTRCxrQkFBa0JpQixLQUFLLEVBQUVDLEtBQUssRUFBRUMsYUFBYTtJQUNsRCxNQUFNWixPQUFPLENBQUMsR0FBR0YsYUFBYUcsVUFBVSxFQUFFUztJQUMxQyxNQUFNRyxPQUFPLENBQUMsR0FBR2hCLFdBQVdpQixRQUFRLEVBQUVILE9BQU87SUFDN0MsTUFBTUksZUFBZSxDQUFDLEdBQUdsQixXQUFXaUIsUUFBUSxFQUFFRixlQUFlO0lBQzVELElBQUdmLFdBQVdtQixjQUFjLEVBQUVILEtBQUtQLE1BQU0sS0FBSyxJQUFJLHlCQUF5QixRQUFRSztJQUNuRixJQUFHZCxXQUFXbUIsY0FBYyxFQUFFRCxhQUFhVCxNQUFNLEtBQUssSUFBSSxpQ0FBaUMsZ0JBQWdCTTtJQUM1RyxPQUFPLENBQUMsR0FBR2QsYUFBYUcsVUFBVSxFQUFFLENBQUMsR0FBR0osV0FBV1UsU0FBUyxFQUFFLENBQUMsR0FBR1osV0FBV2EsU0FBUyxFQUFFLENBQUMsR0FBR1gsV0FBV29CLE1BQU0sRUFBRTtRQUFDO1FBQVFqQjtRQUFNYTtRQUFNRTtLQUFhLElBQUk7QUFDeko7QUFDQXhCLHlCQUF5QixHQUFHRSxtQkFDNUIsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvYWRkcmVzcy9jb250cmFjdC1hZGRyZXNzLmpzP2IyYjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldENyZWF0ZTJBZGRyZXNzID0gZXhwb3J0cy5nZXRDcmVhdGVBZGRyZXNzID0gdm9pZCAwO1xuY29uc3QgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuLi9jcnlwdG8vaW5kZXguanNcIik7XG5jb25zdCBpbmRleF9qc18yID0gcmVxdWlyZShcIi4uL3V0aWxzL2luZGV4LmpzXCIpO1xuY29uc3QgYWRkcmVzc19qc18xID0gcmVxdWlyZShcIi4vYWRkcmVzcy5qc1wiKTtcbi8vIGh0dHA6Ly9ldGhlcmV1bS5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvNzYwL2hvdy1pcy10aGUtYWRkcmVzcy1vZi1hbi1ldGhlcmV1bS1jb250cmFjdC1jb21wdXRlZFxuLyoqXG4gKiAgUmV0dXJucyB0aGUgYWRkcmVzcyB0aGF0IHdvdWxkIHJlc3VsdCBmcm9tIGEgYGBDUkVBVEVgYCBmb3IgJSV0eCUlLlxuICpcbiAqICBUaGlzIGNhbiBiZSB1c2VkIHRvIGNvbXB1dGUgdGhlIGFkZHJlc3MgYSBjb250cmFjdCB3aWxsIGJlXG4gKiAgZGVwbG95ZWQgdG8gYnkgYW4gRU9BIHdoZW4gc2VuZGluZyBhIGRlcGxveW1lbnQgdHJhbnNhY3Rpb24gKGkuZS5cbiAqICB3aGVuIHRoZSBgYHRvYGAgYWRkcmVzcyBpcyBgYG51bGxgYCkuXG4gKlxuICogIFRoaXMgY2FuIGFsc28gYmUgdXNlZCB0byBjb21wdXRlIHRoZSBhZGRyZXNzIGEgY29udHJhY3Qgd2lsbCBiZVxuICogIGRlcGxveWVkIHRvIGJ5IGEgY29udHJhY3QsIGJ5IHVzaW5nIHRoZSBjb250cmFjdCdzIGFkZHJlc3MgYXMgdGhlXG4gKiAgYGB0b2BgIGFuZCB0aGUgY29udHJhY3QncyBub25jZS5cbiAqXG4gKiAgQGV4YW1wbGVcbiAqICAgIGZyb20gPSBcIjB4OGJhMWYxMDk1NTFiRDQzMjgwMzAxMjY0NUFjMTM2ZGRkNjREQkE3MlwiO1xuICogICAgbm9uY2UgPSA1O1xuICpcbiAqICAgIGdldENyZWF0ZUFkZHJlc3MoeyBmcm9tLCBub25jZSB9KTtcbiAqICAgIC8vX3Jlc3VsdDpcbiAqL1xuZnVuY3Rpb24gZ2V0Q3JlYXRlQWRkcmVzcyh0eCkge1xuICAgIGNvbnN0IGZyb20gPSAoMCwgYWRkcmVzc19qc18xLmdldEFkZHJlc3MpKHR4LmZyb20pO1xuICAgIGNvbnN0IG5vbmNlID0gKDAsIGluZGV4X2pzXzIuZ2V0QmlnSW50KSh0eC5ub25jZSwgXCJ0eC5ub25jZVwiKTtcbiAgICBsZXQgbm9uY2VIZXggPSBub25jZS50b1N0cmluZygxNik7XG4gICAgaWYgKG5vbmNlSGV4ID09PSBcIjBcIikge1xuICAgICAgICBub25jZUhleCA9IFwiMHhcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAobm9uY2VIZXgubGVuZ3RoICUgMikge1xuICAgICAgICBub25jZUhleCA9IFwiMHgwXCIgKyBub25jZUhleDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG5vbmNlSGV4ID0gXCIweFwiICsgbm9uY2VIZXg7XG4gICAgfVxuICAgIHJldHVybiAoMCwgYWRkcmVzc19qc18xLmdldEFkZHJlc3MpKCgwLCBpbmRleF9qc18yLmRhdGFTbGljZSkoKDAsIGluZGV4X2pzXzEua2VjY2FrMjU2KSgoMCwgaW5kZXhfanNfMi5lbmNvZGVSbHApKFtmcm9tLCBub25jZUhleF0pKSwgMTIpKTtcbn1cbmV4cG9ydHMuZ2V0Q3JlYXRlQWRkcmVzcyA9IGdldENyZWF0ZUFkZHJlc3M7XG4vKipcbiAqICBSZXR1cm5zIHRoZSBhZGRyZXNzIHRoYXQgd291bGQgcmVzdWx0IGZyb20gYSBgYENSRUFURTJgYCBvcGVyYXRpb25cbiAqICB3aXRoIHRoZSBnaXZlbiAlJWZyb20lJSwgJSVzYWx0JSUgYW5kICUlaW5pdENvZGVIYXNoJSUuXG4gKlxuICogIFRvIGNvbXB1dGUgdGhlICUlaW5pdENvZGVIYXNoJSUgZnJvbSBhIGNvbnRyYWN0J3MgaW5pdCBjb2RlLCB1c2VcbiAqICB0aGUgW1trZWNjYWsyNTZdXSBmdW5jdGlvbi5cbiAqXG4gKiAgRm9yIGEgcXVpY2sgb3ZlcnZpZXcgYW5kIGV4YW1wbGUgb2YgYGBDUkVBVEUyYGAsIHNlZSBbW2xpbmstcmljbW9vLXdpc3BzXV0uXG4gKlxuICogIEBleGFtcGxlXG4gKiAgICAvLyBUaGUgYWRkcmVzcyBvZiB0aGUgY29udHJhY3RcbiAqICAgIGZyb20gPSBcIjB4OGJhMWYxMDk1NTFiRDQzMjgwMzAxMjY0NUFjMTM2ZGRkNjREQkE3MlwiXG4gKlxuICogICAgLy8gVGhlIHNhbHRcbiAqICAgIHNhbHQgPSBpZChcIkhlbGxvV29ybGRcIilcbiAqXG4gKiAgICAvLyBUaGUgaGFzaCBvZiB0aGUgaW5pdENvZGVcbiAqICAgIGluaXRDb2RlID0gXCIweDYzOTQxOThkZjE2MDAwNTI2MTAzZmY2MDIwNjAwNDYwMWMzMzVhZmE2MDQwNTE2MDYwZjNcIjtcbiAqICAgIGluaXRDb2RlSGFzaCA9IGtlY2NhazI1Nihpbml0Q29kZSlcbiAqXG4gKiAgICBnZXRDcmVhdGUyQWRkcmVzcyhmcm9tLCBzYWx0LCBpbml0Q29kZUhhc2gpXG4gKiAgICAvL19yZXN1bHQ6XG4gKi9cbmZ1bmN0aW9uIGdldENyZWF0ZTJBZGRyZXNzKF9mcm9tLCBfc2FsdCwgX2luaXRDb2RlSGFzaCkge1xuICAgIGNvbnN0IGZyb20gPSAoMCwgYWRkcmVzc19qc18xLmdldEFkZHJlc3MpKF9mcm9tKTtcbiAgICBjb25zdCBzYWx0ID0gKDAsIGluZGV4X2pzXzIuZ2V0Qnl0ZXMpKF9zYWx0LCBcInNhbHRcIik7XG4gICAgY29uc3QgaW5pdENvZGVIYXNoID0gKDAsIGluZGV4X2pzXzIuZ2V0Qnl0ZXMpKF9pbml0Q29kZUhhc2gsIFwiaW5pdENvZGVIYXNoXCIpO1xuICAgICgwLCBpbmRleF9qc18yLmFzc2VydEFyZ3VtZW50KShzYWx0Lmxlbmd0aCA9PT0gMzIsIFwic2FsdCBtdXN0IGJlIDMyIGJ5dGVzXCIsIFwic2FsdFwiLCBfc2FsdCk7XG4gICAgKDAsIGluZGV4X2pzXzIuYXNzZXJ0QXJndW1lbnQpKGluaXRDb2RlSGFzaC5sZW5ndGggPT09IDMyLCBcImluaXRDb2RlSGFzaCBtdXN0IGJlIDMyIGJ5dGVzXCIsIFwiaW5pdENvZGVIYXNoXCIsIF9pbml0Q29kZUhhc2gpO1xuICAgIHJldHVybiAoMCwgYWRkcmVzc19qc18xLmdldEFkZHJlc3MpKCgwLCBpbmRleF9qc18yLmRhdGFTbGljZSkoKDAsIGluZGV4X2pzXzEua2VjY2FrMjU2KSgoMCwgaW5kZXhfanNfMi5jb25jYXQpKFtcIjB4ZmZcIiwgZnJvbSwgc2FsdCwgaW5pdENvZGVIYXNoXSkpLCAxMikpO1xufVxuZXhwb3J0cy5nZXRDcmVhdGUyQWRkcmVzcyA9IGdldENyZWF0ZTJBZGRyZXNzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udHJhY3QtYWRkcmVzcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRDcmVhdGUyQWRkcmVzcyIsImdldENyZWF0ZUFkZHJlc3MiLCJpbmRleF9qc18xIiwicmVxdWlyZSIsImluZGV4X2pzXzIiLCJhZGRyZXNzX2pzXzEiLCJ0eCIsImZyb20iLCJnZXRBZGRyZXNzIiwibm9uY2UiLCJnZXRCaWdJbnQiLCJub25jZUhleCIsInRvU3RyaW5nIiwibGVuZ3RoIiwiZGF0YVNsaWNlIiwia2VjY2FrMjU2IiwiZW5jb2RlUmxwIiwiX2Zyb20iLCJfc2FsdCIsIl9pbml0Q29kZUhhc2giLCJzYWx0IiwiZ2V0Qnl0ZXMiLCJpbml0Q29kZUhhc2giLCJhc3NlcnRBcmd1bWVudCIsImNvbmNhdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/address/contract-address.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/address/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/address/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  Addresses are a fundamental part of interacting with Ethereum. They\n *  represent the gloabal identity of Externally Owned Accounts (accounts\n *  backed by a private key) and contracts.\n *\n *  The Ethereum Naming Service (ENS) provides an interconnected ecosystem\n *  of contracts, standards and libraries which enable looking up an\n *  address for an ENS name.\n *\n *  These functions help convert between various formats, validate\n *  addresses and safely resolve ENS names.\n *\n *  @_section: api/address:Addresses  [about-addresses]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.resolveAddress = exports.isAddress = exports.isAddressable = exports.getCreate2Address = exports.getCreateAddress = exports.getIcapAddress = exports.getAddress = void 0;\nnull;\nvar address_js_1 = __webpack_require__(/*! ./address.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/address.js\");\nObject.defineProperty(exports, \"getAddress\", ({\n    enumerable: true,\n    get: function() {\n        return address_js_1.getAddress;\n    }\n}));\nObject.defineProperty(exports, \"getIcapAddress\", ({\n    enumerable: true,\n    get: function() {\n        return address_js_1.getIcapAddress;\n    }\n}));\nvar contract_address_js_1 = __webpack_require__(/*! ./contract-address.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/contract-address.js\");\nObject.defineProperty(exports, \"getCreateAddress\", ({\n    enumerable: true,\n    get: function() {\n        return contract_address_js_1.getCreateAddress;\n    }\n}));\nObject.defineProperty(exports, \"getCreate2Address\", ({\n    enumerable: true,\n    get: function() {\n        return contract_address_js_1.getCreate2Address;\n    }\n}));\nvar checks_js_1 = __webpack_require__(/*! ./checks.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/checks.js\");\nObject.defineProperty(exports, \"isAddressable\", ({\n    enumerable: true,\n    get: function() {\n        return checks_js_1.isAddressable;\n    }\n}));\nObject.defineProperty(exports, \"isAddress\", ({\n    enumerable: true,\n    get: function() {\n        return checks_js_1.isAddress;\n    }\n}));\nObject.defineProperty(exports, \"resolveAddress\", ({\n    enumerable: true,\n    get: function() {\n        return checks_js_1.resolveAddress;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9hZGRyZXNzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7Q0FhQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsc0JBQXNCLEdBQUdBLGlCQUFpQixHQUFHQSxxQkFBcUIsR0FBR0EseUJBQXlCLEdBQUdBLHdCQUF3QixHQUFHQSxzQkFBc0IsR0FBR0Esa0JBQWtCLEdBQUcsS0FBSztBQUMvSztBQUNBLElBQUlTLGVBQWVDLG1CQUFPQSxDQUFDLGlGQUFjO0FBQ3pDWiw4Q0FBNkM7SUFBRWEsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsYUFBYUQsVUFBVTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3hIVixrREFBaUQ7SUFBRWEsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsYUFBYUYsY0FBYztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2hJLElBQUlNLHdCQUF3QkgsbUJBQU9BLENBQUMsbUdBQXVCO0FBQzNEWixvREFBbUQ7SUFBRWEsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0Msc0JBQXNCUCxnQkFBZ0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUM3SVIscURBQW9EO0lBQUVhLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLHNCQUFzQlIsaUJBQWlCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDL0ksSUFBSVMsY0FBY0osbUJBQU9BLENBQUMsK0VBQWE7QUFDdkNaLGlEQUFnRDtJQUFFYSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxZQUFZVixhQUFhO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDN0hOLDZDQUE0QztJQUFFYSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxZQUFZWCxTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDckhMLGtEQUFpRDtJQUFFYSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxZQUFZWixjQUFjO0lBQUU7QUFBRSxDQUFDLEVBQUMsRUFDL0gsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvYWRkcmVzcy9pbmRleC5qcz82NTkwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiAgQWRkcmVzc2VzIGFyZSBhIGZ1bmRhbWVudGFsIHBhcnQgb2YgaW50ZXJhY3Rpbmcgd2l0aCBFdGhlcmV1bS4gVGhleVxuICogIHJlcHJlc2VudCB0aGUgZ2xvYWJhbCBpZGVudGl0eSBvZiBFeHRlcm5hbGx5IE93bmVkIEFjY291bnRzIChhY2NvdW50c1xuICogIGJhY2tlZCBieSBhIHByaXZhdGUga2V5KSBhbmQgY29udHJhY3RzLlxuICpcbiAqICBUaGUgRXRoZXJldW0gTmFtaW5nIFNlcnZpY2UgKEVOUykgcHJvdmlkZXMgYW4gaW50ZXJjb25uZWN0ZWQgZWNvc3lzdGVtXG4gKiAgb2YgY29udHJhY3RzLCBzdGFuZGFyZHMgYW5kIGxpYnJhcmllcyB3aGljaCBlbmFibGUgbG9va2luZyB1cCBhblxuICogIGFkZHJlc3MgZm9yIGFuIEVOUyBuYW1lLlxuICpcbiAqICBUaGVzZSBmdW5jdGlvbnMgaGVscCBjb252ZXJ0IGJldHdlZW4gdmFyaW91cyBmb3JtYXRzLCB2YWxpZGF0ZVxuICogIGFkZHJlc3NlcyBhbmQgc2FmZWx5IHJlc29sdmUgRU5TIG5hbWVzLlxuICpcbiAqICBAX3NlY3Rpb246IGFwaS9hZGRyZXNzOkFkZHJlc3NlcyAgW2Fib3V0LWFkZHJlc3Nlc11cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXNvbHZlQWRkcmVzcyA9IGV4cG9ydHMuaXNBZGRyZXNzID0gZXhwb3J0cy5pc0FkZHJlc3NhYmxlID0gZXhwb3J0cy5nZXRDcmVhdGUyQWRkcmVzcyA9IGV4cG9ydHMuZ2V0Q3JlYXRlQWRkcmVzcyA9IGV4cG9ydHMuZ2V0SWNhcEFkZHJlc3MgPSBleHBvcnRzLmdldEFkZHJlc3MgPSB2b2lkIDA7XG5udWxsO1xudmFyIGFkZHJlc3NfanNfMSA9IHJlcXVpcmUoXCIuL2FkZHJlc3MuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRBZGRyZXNzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhZGRyZXNzX2pzXzEuZ2V0QWRkcmVzczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldEljYXBBZGRyZXNzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhZGRyZXNzX2pzXzEuZ2V0SWNhcEFkZHJlc3M7IH0gfSk7XG52YXIgY29udHJhY3RfYWRkcmVzc19qc18xID0gcmVxdWlyZShcIi4vY29udHJhY3QtYWRkcmVzcy5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldENyZWF0ZUFkZHJlc3NcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbnRyYWN0X2FkZHJlc3NfanNfMS5nZXRDcmVhdGVBZGRyZXNzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0Q3JlYXRlMkFkZHJlc3NcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbnRyYWN0X2FkZHJlc3NfanNfMS5nZXRDcmVhdGUyQWRkcmVzczsgfSB9KTtcbnZhciBjaGVja3NfanNfMSA9IHJlcXVpcmUoXCIuL2NoZWNrcy5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzQWRkcmVzc2FibGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNoZWNrc19qc18xLmlzQWRkcmVzc2FibGU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0FkZHJlc3NcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNoZWNrc19qc18xLmlzQWRkcmVzczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlc29sdmVBZGRyZXNzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjaGVja3NfanNfMS5yZXNvbHZlQWRkcmVzczsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJlc29sdmVBZGRyZXNzIiwiaXNBZGRyZXNzIiwiaXNBZGRyZXNzYWJsZSIsImdldENyZWF0ZTJBZGRyZXNzIiwiZ2V0Q3JlYXRlQWRkcmVzcyIsImdldEljYXBBZGRyZXNzIiwiZ2V0QWRkcmVzcyIsImFkZHJlc3NfanNfMSIsInJlcXVpcmUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiY29udHJhY3RfYWRkcmVzc19qc18xIiwiY2hlY2tzX2pzXzEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/address/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/constants/addresses.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/constants/addresses.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ZeroAddress = void 0;\n/**\n *  A constant for the zero address.\n *\n *  (**i.e.** ``\"0x0000000000000000000000000000000000000000\"``)\n */ exports.ZeroAddress = \"0x0000000000000000000000000000000000000000\"; //# sourceMappingURL=addresses.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9jb25zdGFudHMvYWRkcmVzc2VzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBRyxLQUFLO0FBQzNCOzs7O0NBSUMsR0FDREEsbUJBQW1CLEdBQUcsOENBQ3RCLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL2NvbnN0YW50cy9hZGRyZXNzZXMuanM/N2ExOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuWmVyb0FkZHJlc3MgPSB2b2lkIDA7XG4vKipcbiAqICBBIGNvbnN0YW50IGZvciB0aGUgemVybyBhZGRyZXNzLlxuICpcbiAqICAoKippLmUuKiogYGBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiYGApXG4gKi9cbmV4cG9ydHMuWmVyb0FkZHJlc3MgPSBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkcmVzc2VzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlplcm9BZGRyZXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/constants/addresses.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/constants/hashes.js":
/*!**************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/constants/hashes.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ZeroHash = void 0;\n/**\n *  A constant for the zero hash.\n *\n *  (**i.e.** ``\"0x0000000000000000000000000000000000000000000000000000000000000000\"``)\n */ exports.ZeroHash = \"0x0000000000000000000000000000000000000000000000000000000000000000\"; //# sourceMappingURL=hashes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9jb25zdGFudHMvaGFzaGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQkFBZ0IsR0FBRyxLQUFLO0FBQ3hCOzs7O0NBSUMsR0FDREEsZ0JBQWdCLEdBQUcsc0VBQ25CLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL2NvbnN0YW50cy9oYXNoZXMuanM/ZDc0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuWmVyb0hhc2ggPSB2b2lkIDA7XG4vKipcbiAqICBBIGNvbnN0YW50IGZvciB0aGUgemVybyBoYXNoLlxuICpcbiAqICAoKippLmUuKiogYGBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiYGApXG4gKi9cbmV4cG9ydHMuWmVyb0hhc2ggPSBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFzaGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlplcm9IYXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/constants/hashes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/constants/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/constants/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  Some common constants useful for Ethereum.\n *\n *  @_section: api/constants: Constants  [about-constants]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MessagePrefix = exports.EtherSymbol = exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.N = exports.ZeroHash = exports.ZeroAddress = void 0;\nvar addresses_js_1 = __webpack_require__(/*! ./addresses.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/constants/addresses.js\");\nObject.defineProperty(exports, \"ZeroAddress\", ({\n    enumerable: true,\n    get: function() {\n        return addresses_js_1.ZeroAddress;\n    }\n}));\nvar hashes_js_1 = __webpack_require__(/*! ./hashes.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/constants/hashes.js\");\nObject.defineProperty(exports, \"ZeroHash\", ({\n    enumerable: true,\n    get: function() {\n        return hashes_js_1.ZeroHash;\n    }\n}));\nvar numbers_js_1 = __webpack_require__(/*! ./numbers.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/constants/numbers.js\");\nObject.defineProperty(exports, \"N\", ({\n    enumerable: true,\n    get: function() {\n        return numbers_js_1.N;\n    }\n}));\nObject.defineProperty(exports, \"WeiPerEther\", ({\n    enumerable: true,\n    get: function() {\n        return numbers_js_1.WeiPerEther;\n    }\n}));\nObject.defineProperty(exports, \"MaxUint256\", ({\n    enumerable: true,\n    get: function() {\n        return numbers_js_1.MaxUint256;\n    }\n}));\nObject.defineProperty(exports, \"MinInt256\", ({\n    enumerable: true,\n    get: function() {\n        return numbers_js_1.MinInt256;\n    }\n}));\nObject.defineProperty(exports, \"MaxInt256\", ({\n    enumerable: true,\n    get: function() {\n        return numbers_js_1.MaxInt256;\n    }\n}));\nvar strings_js_1 = __webpack_require__(/*! ./strings.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/constants/strings.js\");\nObject.defineProperty(exports, \"EtherSymbol\", ({\n    enumerable: true,\n    get: function() {\n        return strings_js_1.EtherSymbol;\n    }\n}));\nObject.defineProperty(exports, \"MessagePrefix\", ({\n    enumerable: true,\n    get: function() {\n        return strings_js_1.MessagePrefix;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9jb25zdGFudHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7OztDQUlDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBR0EsbUJBQW1CLEdBQUdBLGlCQUFpQixHQUFHQSxpQkFBaUIsR0FBR0Esa0JBQWtCLEdBQUdBLG1CQUFtQixHQUFHQSxTQUFTLEdBQUdBLGdCQUFnQixHQUFHQSxtQkFBbUIsR0FBRyxLQUFLO0FBQzNMLElBQUlXLGlCQUFpQkMsbUJBQU9BLENBQUMsdUZBQWdCO0FBQzdDZCwrQ0FBOEM7SUFBRWUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsZUFBZUQsV0FBVztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzVILElBQUlLLGNBQWNILG1CQUFPQSxDQUFDLGlGQUFhO0FBQ3ZDZCw0Q0FBMkM7SUFBRWUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsWUFBWU4sUUFBUTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ25ILElBQUlPLGVBQWVKLG1CQUFPQSxDQUFDLG1GQUFjO0FBQ3pDZCxxQ0FBb0M7SUFBRWUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsYUFBYVIsQ0FBQztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3RHViwrQ0FBOEM7SUFBRWUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsYUFBYVQsV0FBVztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzFIVCw4Q0FBNkM7SUFBRWUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsYUFBYVYsVUFBVTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3hIUiw2Q0FBNEM7SUFBRWUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsYUFBYVgsU0FBUztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3RIUCw2Q0FBNEM7SUFBRWUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsYUFBYVosU0FBUztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3RILElBQUlhLGVBQWVMLG1CQUFPQSxDQUFDLG1GQUFjO0FBQ3pDZCwrQ0FBOEM7SUFBRWUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0csYUFBYWQsV0FBVztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzFITCxpREFBZ0Q7SUFBRWUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0csYUFBYWYsYUFBYTtJQUFFO0FBQUUsQ0FBQyxFQUFDLEVBQzlILGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL2NvbnN0YW50cy9pbmRleC5qcz83OTBmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiAgU29tZSBjb21tb24gY29uc3RhbnRzIHVzZWZ1bCBmb3IgRXRoZXJldW0uXG4gKlxuICogIEBfc2VjdGlvbjogYXBpL2NvbnN0YW50czogQ29uc3RhbnRzICBbYWJvdXQtY29uc3RhbnRzXVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1lc3NhZ2VQcmVmaXggPSBleHBvcnRzLkV0aGVyU3ltYm9sID0gZXhwb3J0cy5NYXhJbnQyNTYgPSBleHBvcnRzLk1pbkludDI1NiA9IGV4cG9ydHMuTWF4VWludDI1NiA9IGV4cG9ydHMuV2VpUGVyRXRoZXIgPSBleHBvcnRzLk4gPSBleHBvcnRzLlplcm9IYXNoID0gZXhwb3J0cy5aZXJvQWRkcmVzcyA9IHZvaWQgMDtcbnZhciBhZGRyZXNzZXNfanNfMSA9IHJlcXVpcmUoXCIuL2FkZHJlc3Nlcy5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlplcm9BZGRyZXNzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhZGRyZXNzZXNfanNfMS5aZXJvQWRkcmVzczsgfSB9KTtcbnZhciBoYXNoZXNfanNfMSA9IHJlcXVpcmUoXCIuL2hhc2hlcy5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlplcm9IYXNoXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBoYXNoZXNfanNfMS5aZXJvSGFzaDsgfSB9KTtcbnZhciBudW1iZXJzX2pzXzEgPSByZXF1aXJlKFwiLi9udW1iZXJzLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbnVtYmVyc19qc18xLk47IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJXZWlQZXJFdGhlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbnVtYmVyc19qc18xLldlaVBlckV0aGVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTWF4VWludDI1NlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbnVtYmVyc19qc18xLk1heFVpbnQyNTY7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNaW5JbnQyNTZcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bWJlcnNfanNfMS5NaW5JbnQyNTY7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNYXhJbnQyNTZcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bWJlcnNfanNfMS5NYXhJbnQyNTY7IH0gfSk7XG52YXIgc3RyaW5nc19qc18xID0gcmVxdWlyZShcIi4vc3RyaW5ncy5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkV0aGVyU3ltYm9sXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdHJpbmdzX2pzXzEuRXRoZXJTeW1ib2w7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNZXNzYWdlUHJlZml4XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdHJpbmdzX2pzXzEuTWVzc2FnZVByZWZpeDsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIk1lc3NhZ2VQcmVmaXgiLCJFdGhlclN5bWJvbCIsIk1heEludDI1NiIsIk1pbkludDI1NiIsIk1heFVpbnQyNTYiLCJXZWlQZXJFdGhlciIsIk4iLCJaZXJvSGFzaCIsIlplcm9BZGRyZXNzIiwiYWRkcmVzc2VzX2pzXzEiLCJyZXF1aXJlIiwiZW51bWVyYWJsZSIsImdldCIsImhhc2hlc19qc18xIiwibnVtYmVyc19qc18xIiwic3RyaW5nc19qc18xIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/constants/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/constants/numbers.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/constants/numbers.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.N = void 0;\n/**\n *  A constant for the order N for the secp256k1 curve.\n *\n *  (**i.e.** ``0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141n``)\n */ exports.N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n/**\n *  A constant for the number of wei in a single ether.\n *\n *  (**i.e.** ``1000000000000000000n``)\n */ exports.WeiPerEther = BigInt(\"1000000000000000000\");\n/**\n *  A constant for the maximum value for a ``uint256``.\n *\n *  (**i.e.** ``0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn``)\n */ exports.MaxUint256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n/**\n *  A constant for the minimum value for an ``int256``.\n *\n *  (**i.e.** ``-8000000000000000000000000000000000000000000000000000000000000000n``)\n */ exports.MinInt256 = BigInt(\"0x8000000000000000000000000000000000000000000000000000000000000000\") * BigInt(-1);\n/**\n *  A constant for the maximum value for an ``int256``.\n *\n *  (**i.e.** ``0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn``)\n */ exports.MaxInt256 = BigInt(\"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"); //# sourceMappingURL=numbers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9jb25zdGFudHMvbnVtYmVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUdBLGlCQUFpQixHQUFHQSxrQkFBa0IsR0FBR0EsbUJBQW1CLEdBQUdBLFNBQVMsR0FBRyxLQUFLO0FBQ3BHOzs7O0NBSUMsR0FDREEsU0FBUyxHQUFHTyxPQUFPO0FBQ25COzs7O0NBSUMsR0FDRFAsbUJBQW1CLEdBQUdPLE9BQU87QUFDN0I7Ozs7Q0FJQyxHQUNEUCxrQkFBa0IsR0FBR08sT0FBTztBQUM1Qjs7OztDQUlDLEdBQ0RQLGlCQUFpQixHQUFHTyxPQUFPLHdFQUF3RUEsT0FBTyxDQUFDO0FBQzNHOzs7O0NBSUMsR0FDRFAsaUJBQWlCLEdBQUdPLE9BQU8sdUVBQzNCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL2NvbnN0YW50cy9udW1iZXJzLmpzPzI0YjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1heEludDI1NiA9IGV4cG9ydHMuTWluSW50MjU2ID0gZXhwb3J0cy5NYXhVaW50MjU2ID0gZXhwb3J0cy5XZWlQZXJFdGhlciA9IGV4cG9ydHMuTiA9IHZvaWQgMDtcbi8qKlxuICogIEEgY29uc3RhbnQgZm9yIHRoZSBvcmRlciBOIGZvciB0aGUgc2VjcDI1NmsxIGN1cnZlLlxuICpcbiAqICAoKippLmUuKiogYGAweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlYmFhZWRjZTZhZjQ4YTAzYmJmZDI1ZThjZDAzNjQxNDFuYGApXG4gKi9cbmV4cG9ydHMuTiA9IEJpZ0ludChcIjB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmViYWFlZGNlNmFmNDhhMDNiYmZkMjVlOGNkMDM2NDE0MVwiKTtcbi8qKlxuICogIEEgY29uc3RhbnQgZm9yIHRoZSBudW1iZXIgb2Ygd2VpIGluIGEgc2luZ2xlIGV0aGVyLlxuICpcbiAqICAoKippLmUuKiogYGAxMDAwMDAwMDAwMDAwMDAwMDAwbmBgKVxuICovXG5leHBvcnRzLldlaVBlckV0aGVyID0gQmlnSW50KFwiMTAwMDAwMDAwMDAwMDAwMDAwMFwiKTtcbi8qKlxuICogIEEgY29uc3RhbnQgZm9yIHRoZSBtYXhpbXVtIHZhbHVlIGZvciBhIGBgdWludDI1NmBgLlxuICpcbiAqICAoKippLmUuKiogYGAweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZuYGApXG4gKi9cbmV4cG9ydHMuTWF4VWludDI1NiA9IEJpZ0ludChcIjB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlwiKTtcbi8qKlxuICogIEEgY29uc3RhbnQgZm9yIHRoZSBtaW5pbXVtIHZhbHVlIGZvciBhbiBgYGludDI1NmBgLlxuICpcbiAqICAoKippLmUuKiogYGAtODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMG5gYClcbiAqL1xuZXhwb3J0cy5NaW5JbnQyNTYgPSBCaWdJbnQoXCIweDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIikgKiBCaWdJbnQoLTEpO1xuLyoqXG4gKiAgQSBjb25zdGFudCBmb3IgdGhlIG1heGltdW0gdmFsdWUgZm9yIGFuIGBgaW50MjU2YGAuXG4gKlxuICogICgqKmkuZS4qKiBgYDB4N2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZm5gYClcbiAqL1xuZXhwb3J0cy5NYXhJbnQyNTYgPSBCaWdJbnQoXCIweDdmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZcIik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1udW1iZXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIk1heEludDI1NiIsIk1pbkludDI1NiIsIk1heFVpbnQyNTYiLCJXZWlQZXJFdGhlciIsIk4iLCJCaWdJbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/constants/numbers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/constants/strings.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/constants/strings.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// NFKC (composed)             // (decomposed)\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MessagePrefix = exports.EtherSymbol = void 0;\n/**\n *  A constant for the ether symbol (normalized using NFKC).\n *\n *  (**i.e.** ``\"\\\\u039e\"``)\n */ exports.EtherSymbol = \"Ξ\"; // \"\\uD835\\uDF63\";\n/**\n *  A constant for the [[link-eip-191]] personal message prefix.\n *\n *  (**i.e.** ``\"\\\\x19Ethereum Signed Message:\\\\n\"``)\n */ exports.MessagePrefix = \"\\x19Ethereum Signed Message:\\n\"; //# sourceMappingURL=strings.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9jb25zdGFudHMvc3RyaW5ncy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QztBQUM5Q0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHQSxtQkFBbUIsR0FBRyxLQUFLO0FBQ25EOzs7O0NBSUMsR0FDREEsbUJBQW1CLEdBQUcsS0FBVSxrQkFBa0I7QUFDbEQ7Ozs7Q0FJQyxHQUNEQSxxQkFBcUIsR0FBRyxrQ0FDeEIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvY29uc3RhbnRzL3N0cmluZ3MuanM/MTgwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIE5GS0MgKGNvbXBvc2VkKSAgICAgICAgICAgICAvLyAoZGVjb21wb3NlZClcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTWVzc2FnZVByZWZpeCA9IGV4cG9ydHMuRXRoZXJTeW1ib2wgPSB2b2lkIDA7XG4vKipcbiAqICBBIGNvbnN0YW50IGZvciB0aGUgZXRoZXIgc3ltYm9sIChub3JtYWxpemVkIHVzaW5nIE5GS0MpLlxuICpcbiAqICAoKippLmUuKiogYGBcIlxcXFx1MDM5ZVwiYGApXG4gKi9cbmV4cG9ydHMuRXRoZXJTeW1ib2wgPSBcIlxcdTAzOWVcIjsgLy8gXCJcXHVEODM1XFx1REY2M1wiO1xuLyoqXG4gKiAgQSBjb25zdGFudCBmb3IgdGhlIFtbbGluay1laXAtMTkxXV0gcGVyc29uYWwgbWVzc2FnZSBwcmVmaXguXG4gKlxuICogICgqKmkuZS4qKiBgYFwiXFxcXHgxOUV0aGVyZXVtIFNpZ25lZCBNZXNzYWdlOlxcXFxuXCJgYClcbiAqL1xuZXhwb3J0cy5NZXNzYWdlUHJlZml4ID0gXCJcXHgxOUV0aGVyZXVtIFNpZ25lZCBNZXNzYWdlOlxcblwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaW5ncy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJNZXNzYWdlUHJlZml4IiwiRXRoZXJTeW1ib2wiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/constants/strings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/contract/contract.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/contract/contract.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Contract = exports.BaseContract = exports.resolveArgs = exports.copyOverrides = void 0;\nconst index_js_1 = __webpack_require__(/*! ../abi/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../address/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/index.js\");\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nconst provider_js_1 = __webpack_require__(/*! ../providers/provider.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider.js\");\nconst index_js_3 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst wrappers_js_1 = __webpack_require__(/*! ./wrappers.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/contract/wrappers.js\");\nconst BN_0 = BigInt(0);\nfunction canCall(value) {\n    return value && typeof value.call === \"function\";\n}\nfunction canEstimate(value) {\n    return value && typeof value.estimateGas === \"function\";\n}\nfunction canResolve(value) {\n    return value && typeof value.resolveName === \"function\";\n}\nfunction canSend(value) {\n    return value && typeof value.sendTransaction === \"function\";\n}\nfunction getResolver(value) {\n    if (value != null) {\n        if (canResolve(value)) {\n            return value;\n        }\n        if (value.provider) {\n            return value.provider;\n        }\n    }\n    return undefined;\n}\nclass PreparedTopicFilter {\n    #filter;\n    constructor(contract, fragment, args){\n        (0, index_js_3.defineProperties)(this, {\n            fragment\n        });\n        if (fragment.inputs.length < args.length) {\n            throw new Error(\"too many arguments\");\n        }\n        // Recursively descend into args and resolve any addresses\n        const runner = getRunner(contract.runner, \"resolveName\");\n        const resolver = canResolve(runner) ? runner : null;\n        this.#filter = async function() {\n            const resolvedArgs = await Promise.all(fragment.inputs.map((param, index)=>{\n                const arg = args[index];\n                if (arg == null) {\n                    return null;\n                }\n                return param.walkAsync(args[index], (type, value)=>{\n                    if (type === \"address\") {\n                        if (Array.isArray(value)) {\n                            return Promise.all(value.map((v)=>(0, index_js_2.resolveAddress)(v, resolver)));\n                        }\n                        return (0, index_js_2.resolveAddress)(value, resolver);\n                    }\n                    return value;\n                });\n            }));\n            return contract.interface.encodeFilterTopics(fragment, resolvedArgs);\n        }();\n    }\n    getTopicFilter() {\n        return this.#filter;\n    }\n}\n// A = Arguments passed in as a tuple\n// R = The result type of the call (i.e. if only one return type,\n//     the qualified type, otherwise Result)\n// D = The type the default call will return (i.e. R for view/pure,\n//     TransactionResponse otherwise)\n//export interface ContractMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse> {\nfunction getRunner(value, feature) {\n    if (value == null) {\n        return null;\n    }\n    if (typeof value[feature] === \"function\") {\n        return value;\n    }\n    if (value.provider && typeof value.provider[feature] === \"function\") {\n        return value.provider;\n    }\n    return null;\n}\nfunction getProvider(value) {\n    if (value == null) {\n        return null;\n    }\n    return value.provider || null;\n}\n/**\n *  @_ignore:\n */ async function copyOverrides(arg, allowed) {\n    // Make sure the overrides passed in are a valid overrides object\n    const _overrides = index_js_1.Typed.dereference(arg, \"overrides\");\n    (0, index_js_3.assertArgument)(typeof _overrides === \"object\", \"invalid overrides parameter\", \"overrides\", arg);\n    // Create a shallow copy (we'll deep-ify anything needed during normalizing)\n    const overrides = (0, provider_js_1.copyRequest)(_overrides);\n    (0, index_js_3.assertArgument)(overrides.to == null || (allowed || []).indexOf(\"to\") >= 0, \"cannot override to\", \"overrides.to\", overrides.to);\n    (0, index_js_3.assertArgument)(overrides.data == null || (allowed || []).indexOf(\"data\") >= 0, \"cannot override data\", \"overrides.data\", overrides.data);\n    // Resolve any from\n    if (overrides.from) {\n        overrides.from = overrides.from;\n    }\n    return overrides;\n}\nexports.copyOverrides = copyOverrides;\n/**\n *  @_ignore:\n */ async function resolveArgs(_runner, inputs, args) {\n    // Recursively descend into args and resolve any addresses\n    const runner = getRunner(_runner, \"resolveName\");\n    const resolver = canResolve(runner) ? runner : null;\n    return await Promise.all(inputs.map((param, index)=>{\n        return param.walkAsync(args[index], (type, value)=>{\n            value = index_js_1.Typed.dereference(value, type);\n            if (type === \"address\") {\n                return (0, index_js_2.resolveAddress)(value, resolver);\n            }\n            return value;\n        });\n    }));\n}\nexports.resolveArgs = resolveArgs;\nfunction buildWrappedFallback(contract) {\n    const populateTransaction = async function(overrides) {\n        // If an overrides was passed in, copy it and normalize the values\n        const tx = await copyOverrides(overrides, [\n            \"data\"\n        ]);\n        tx.to = await contract.getAddress();\n        if (tx.from) {\n            tx.from = await (0, index_js_2.resolveAddress)(tx.from, getResolver(contract.runner));\n        }\n        const iface = contract.interface;\n        const noValue = (0, index_js_3.getBigInt)(tx.value || BN_0, \"overrides.value\") === BN_0;\n        const noData = (tx.data || \"0x\") === \"0x\";\n        if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {\n            (0, index_js_3.assertArgument)(false, \"cannot send data to receive or send value to non-payable fallback\", \"overrides\", overrides);\n        }\n        (0, index_js_3.assertArgument)(iface.fallback || noData, \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n        // Only allow payable contracts to set non-zero value\n        const payable = iface.receive || iface.fallback && iface.fallback.payable;\n        (0, index_js_3.assertArgument)(payable || noValue, \"cannot send value to non-payable fallback\", \"overrides.value\", tx.value);\n        // Only allow fallback contracts to set non-empty data\n        (0, index_js_3.assertArgument)(iface.fallback || noData, \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n        return tx;\n    };\n    const staticCall = async function(overrides) {\n        const runner = getRunner(contract.runner, \"call\");\n        (0, index_js_3.assert)(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"call\"\n        });\n        const tx = await populateTransaction(overrides);\n        try {\n            return await runner.call(tx);\n        } catch (error) {\n            if ((0, index_js_3.isCallException)(error) && error.data) {\n                throw contract.interface.makeError(error.data, tx);\n            }\n            throw error;\n        }\n    };\n    const send = async function(overrides) {\n        const runner = contract.runner;\n        (0, index_js_3.assert)(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"sendTransaction\"\n        });\n        const tx = await runner.sendTransaction(await populateTransaction(overrides));\n        const provider = getProvider(contract.runner);\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\n        // meaningful error\n        return new wrappers_js_1.ContractTransactionResponse(contract.interface, provider, tx);\n    };\n    const estimateGas = async function(overrides) {\n        const runner = getRunner(contract.runner, \"estimateGas\");\n        (0, index_js_3.assert)(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"estimateGas\"\n        });\n        return await runner.estimateGas(await populateTransaction(overrides));\n    };\n    const method = async (overrides)=>{\n        return await send(overrides);\n    };\n    (0, index_js_3.defineProperties)(method, {\n        _contract: contract,\n        estimateGas,\n        populateTransaction,\n        send,\n        staticCall\n    });\n    return method;\n}\nfunction buildWrappedMethod(contract, key) {\n    const getFragment = function(...args) {\n        const fragment = contract.interface.getFunction(key, args);\n        (0, index_js_3.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\",\n            info: {\n                key,\n                args\n            }\n        });\n        return fragment;\n    };\n    const populateTransaction = async function(...args) {\n        const fragment = getFragment(...args);\n        // If an overrides was passed in, copy it and normalize the values\n        let overrides = {};\n        if (fragment.inputs.length + 1 === args.length) {\n            overrides = await copyOverrides(args.pop());\n            if (overrides.from) {\n                overrides.from = await (0, index_js_2.resolveAddress)(overrides.from, getResolver(contract.runner));\n            }\n        }\n        if (fragment.inputs.length !== args.length) {\n            throw new Error(\"internal error: fragment inputs doesn't match arguments; should not happen\");\n        }\n        const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);\n        return Object.assign({}, overrides, await (0, index_js_3.resolveProperties)({\n            to: contract.getAddress(),\n            data: contract.interface.encodeFunctionData(fragment, resolvedArgs)\n        }));\n    };\n    const staticCall = async function(...args) {\n        const result = await staticCallResult(...args);\n        if (result.length === 1) {\n            return result[0];\n        }\n        return result;\n    };\n    const send = async function(...args) {\n        const runner = contract.runner;\n        (0, index_js_3.assert)(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"sendTransaction\"\n        });\n        const tx = await runner.sendTransaction(await populateTransaction(...args));\n        const provider = getProvider(contract.runner);\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\n        // meaningful error\n        return new wrappers_js_1.ContractTransactionResponse(contract.interface, provider, tx);\n    };\n    const estimateGas = async function(...args) {\n        const runner = getRunner(contract.runner, \"estimateGas\");\n        (0, index_js_3.assert)(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"estimateGas\"\n        });\n        return await runner.estimateGas(await populateTransaction(...args));\n    };\n    const staticCallResult = async function(...args) {\n        const runner = getRunner(contract.runner, \"call\");\n        (0, index_js_3.assert)(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"call\"\n        });\n        const tx = await populateTransaction(...args);\n        let result = \"0x\";\n        try {\n            result = await runner.call(tx);\n        } catch (error) {\n            if ((0, index_js_3.isCallException)(error) && error.data) {\n                throw contract.interface.makeError(error.data, tx);\n            }\n            throw error;\n        }\n        const fragment = getFragment(...args);\n        return contract.interface.decodeFunctionResult(fragment, result);\n    };\n    const method = async (...args)=>{\n        const fragment = getFragment(...args);\n        if (fragment.constant) {\n            return await staticCall(...args);\n        }\n        return await send(...args);\n    };\n    (0, index_js_3.defineProperties)(method, {\n        name: contract.interface.getFunctionName(key),\n        _contract: contract,\n        _key: key,\n        getFragment,\n        estimateGas,\n        populateTransaction,\n        send,\n        staticCall,\n        staticCallResult\n    });\n    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n    Object.defineProperty(method, \"fragment\", {\n        configurable: false,\n        enumerable: true,\n        get: ()=>{\n            const fragment = contract.interface.getFunction(key);\n            (0, index_js_3.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"fragment\",\n                info: {\n                    key\n                }\n            });\n            return fragment;\n        }\n    });\n    return method;\n}\nfunction buildWrappedEvent(contract, key) {\n    const getFragment = function(...args) {\n        const fragment = contract.interface.getEvent(key, args);\n        (0, index_js_3.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\",\n            info: {\n                key,\n                args\n            }\n        });\n        return fragment;\n    };\n    const method = function(...args) {\n        return new PreparedTopicFilter(contract, getFragment(...args), args);\n    };\n    (0, index_js_3.defineProperties)(method, {\n        name: contract.interface.getEventName(key),\n        _contract: contract,\n        _key: key,\n        getFragment\n    });\n    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n    Object.defineProperty(method, \"fragment\", {\n        configurable: false,\n        enumerable: true,\n        get: ()=>{\n            const fragment = contract.interface.getEvent(key);\n            (0, index_js_3.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"fragment\",\n                info: {\n                    key\n                }\n            });\n            return fragment;\n        }\n    });\n    return method;\n}\n// The combination of TypeScrype, Private Fields and Proxies makes\n// the world go boom; so we hide variables with some trickery keeping\n// a symbol attached to each BaseContract which its sub-class (even\n// via a Proxy) can reach and use to look up its internal values.\nconst internal = Symbol.for(\"_ethersInternal_contract\");\nconst internalValues = new WeakMap();\nfunction setInternal(contract, values) {\n    internalValues.set(contract[internal], values);\n}\nfunction getInternal(contract) {\n    return internalValues.get(contract[internal]);\n}\nfunction isDeferred(value) {\n    return value && typeof value === \"object\" && \"getTopicFilter\" in value && typeof value.getTopicFilter === \"function\" && value.fragment;\n}\nasync function getSubInfo(contract, event) {\n    let topics;\n    let fragment = null;\n    // Convert named events to topicHash and get the fragment for\n    // events which need deconstructing.\n    if (Array.isArray(event)) {\n        const topicHashify = function(name) {\n            if ((0, index_js_3.isHexString)(name, 32)) {\n                return name;\n            }\n            const fragment = contract.interface.getEvent(name);\n            (0, index_js_3.assertArgument)(fragment, \"unknown fragment\", \"name\", name);\n            return fragment.topicHash;\n        };\n        // Array of Topics and Names; e.g. `[ \"0x1234...89ab\", \"Transfer(address)\" ]`\n        topics = event.map((e)=>{\n            if (e == null) {\n                return null;\n            }\n            if (Array.isArray(e)) {\n                return e.map(topicHashify);\n            }\n            return topicHashify(e);\n        });\n    } else if (event === \"*\") {\n        topics = [\n            null\n        ];\n    } else if (typeof event === \"string\") {\n        if ((0, index_js_3.isHexString)(event, 32)) {\n            // Topic Hash\n            topics = [\n                event\n            ];\n        } else {\n            // Name or Signature; e.g. `\"Transfer\", `\"Transfer(address)\"`\n            fragment = contract.interface.getEvent(event);\n            (0, index_js_3.assertArgument)(fragment, \"unknown fragment\", \"event\", event);\n            topics = [\n                fragment.topicHash\n            ];\n        }\n    } else if (isDeferred(event)) {\n        // Deferred Topic Filter; e.g. `contract.filter.Transfer(from)`\n        topics = await event.getTopicFilter();\n    } else if (\"fragment\" in event) {\n        // ContractEvent; e.g. `contract.filter.Transfer`\n        fragment = event.fragment;\n        topics = [\n            fragment.topicHash\n        ];\n    } else {\n        (0, index_js_3.assertArgument)(false, \"unknown event name\", \"event\", event);\n    }\n    // Normalize topics and sort TopicSets\n    topics = topics.map((t)=>{\n        if (t == null) {\n            return null;\n        }\n        if (Array.isArray(t)) {\n            const items = Array.from(new Set(t.map((t)=>t.toLowerCase())).values());\n            if (items.length === 1) {\n                return items[0];\n            }\n            items.sort();\n            return items;\n        }\n        return t.toLowerCase();\n    });\n    const tag = topics.map((t)=>{\n        if (t == null) {\n            return \"null\";\n        }\n        if (Array.isArray(t)) {\n            return t.join(\"|\");\n        }\n        return t;\n    }).join(\"&\");\n    return {\n        fragment,\n        tag,\n        topics\n    };\n}\nasync function hasSub(contract, event) {\n    const { subs } = getInternal(contract);\n    return subs.get((await getSubInfo(contract, event)).tag) || null;\n}\nasync function getSub(contract, operation, event) {\n    // Make sure our runner can actually subscribe to events\n    const provider = getProvider(contract.runner);\n    (0, index_js_3.assert)(provider, \"contract runner does not support subscribing\", \"UNSUPPORTED_OPERATION\", {\n        operation\n    });\n    const { fragment, tag, topics } = await getSubInfo(contract, event);\n    const { addr, subs } = getInternal(contract);\n    let sub = subs.get(tag);\n    if (!sub) {\n        const address = addr ? addr : contract;\n        const filter = {\n            address,\n            topics\n        };\n        const listener = (log)=>{\n            let foundFragment = fragment;\n            if (foundFragment == null) {\n                try {\n                    foundFragment = contract.interface.getEvent(log.topics[0]);\n                } catch (error) {}\n            }\n            // If fragment is null, we do not deconstruct the args to emit\n            if (foundFragment) {\n                const _foundFragment = foundFragment;\n                const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];\n                emit(contract, event, args, (listener)=>{\n                    return new wrappers_js_1.ContractEventPayload(contract, listener, event, _foundFragment, log);\n                });\n            } else {\n                emit(contract, event, [], (listener)=>{\n                    return new wrappers_js_1.ContractUnknownEventPayload(contract, listener, event, log);\n                });\n            }\n        };\n        let starting = [];\n        const start = ()=>{\n            if (starting.length) {\n                return;\n            }\n            starting.push(provider.on(filter, listener));\n        };\n        const stop = async ()=>{\n            if (starting.length == 0) {\n                return;\n            }\n            let started = starting;\n            starting = [];\n            await Promise.all(started);\n            provider.off(filter, listener);\n        };\n        sub = {\n            tag,\n            listeners: [],\n            start,\n            stop\n        };\n        subs.set(tag, sub);\n    }\n    return sub;\n}\n// We use this to ensure one emit resolves before firing the next to\n// ensure correct ordering (note this cannot throw and just adds the\n// notice to the event queu using setTimeout).\nlet lastEmit = Promise.resolve();\nasync function _emit(contract, event, args, payloadFunc) {\n    await lastEmit;\n    const sub = await hasSub(contract, event);\n    if (!sub) {\n        return false;\n    }\n    const count = sub.listeners.length;\n    sub.listeners = sub.listeners.filter(({ listener, once })=>{\n        const passArgs = Array.from(args);\n        if (payloadFunc) {\n            passArgs.push(payloadFunc(once ? null : listener));\n        }\n        try {\n            listener.call(contract, ...passArgs);\n        } catch (error) {}\n        return !once;\n    });\n    if (sub.listeners.length === 0) {\n        sub.stop();\n        getInternal(contract).subs.delete(sub.tag);\n    }\n    return count > 0;\n}\nasync function emit(contract, event, args, payloadFunc) {\n    try {\n        await lastEmit;\n    } catch (error) {}\n    const resultPromise = _emit(contract, event, args, payloadFunc);\n    lastEmit = resultPromise;\n    return await resultPromise;\n}\nconst passProperties = [\n    \"then\"\n];\nclass BaseContract {\n    /**\n     *  Creates a new contract connected to %%target%% with the %%abi%% and\n     *  optionally connected to a %%runner%% to perform operations on behalf\n     *  of.\n     */ constructor(target, abi, runner, _deployTx){\n        (0, index_js_3.assertArgument)(typeof target === \"string\" || (0, index_js_2.isAddressable)(target), \"invalid value for Contract target\", \"target\", target);\n        if (runner == null) {\n            runner = null;\n        }\n        const iface = index_js_1.Interface.from(abi);\n        (0, index_js_3.defineProperties)(this, {\n            target,\n            runner,\n            interface: iface\n        });\n        Object.defineProperty(this, internal, {\n            value: {}\n        });\n        let addrPromise;\n        let addr = null;\n        let deployTx = null;\n        if (_deployTx) {\n            const provider = getProvider(runner);\n            // @TODO: the provider can be null; make a custom dummy provider that will throw a\n            // meaningful error\n            deployTx = new wrappers_js_1.ContractTransactionResponse(this.interface, provider, _deployTx);\n        }\n        let subs = new Map();\n        // Resolve the target as the address\n        if (typeof target === \"string\") {\n            if ((0, index_js_3.isHexString)(target)) {\n                addr = target;\n                addrPromise = Promise.resolve(target);\n            } else {\n                const resolver = getRunner(runner, \"resolveName\");\n                if (!canResolve(resolver)) {\n                    throw (0, index_js_3.makeError)(\"contract runner does not support name resolution\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"resolveName\"\n                    });\n                }\n                addrPromise = resolver.resolveName(target).then((addr)=>{\n                    if (addr == null) {\n                        throw (0, index_js_3.makeError)(\"an ENS name used for a contract target must be correctly configured\", \"UNCONFIGURED_NAME\", {\n                            value: target\n                        });\n                    }\n                    getInternal(this).addr = addr;\n                    return addr;\n                });\n            }\n        } else {\n            addrPromise = target.getAddress().then((addr)=>{\n                if (addr == null) {\n                    throw new Error(\"TODO\");\n                }\n                getInternal(this).addr = addr;\n                return addr;\n            });\n        }\n        // Set our private values\n        setInternal(this, {\n            addrPromise,\n            addr,\n            deployTx,\n            subs\n        });\n        // Add the event filters\n        const filters = new Proxy({}, {\n            get: (target, prop, receiver)=>{\n                // Pass important checks (like `then` for Promise) through\n                if (typeof prop === \"symbol\" || passProperties.indexOf(prop) >= 0) {\n                    return Reflect.get(target, prop, receiver);\n                }\n                try {\n                    return this.getEvent(prop);\n                } catch (error) {\n                    if (!(0, index_js_3.isError)(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\n                        throw error;\n                    }\n                }\n                return undefined;\n            },\n            has: (target, prop)=>{\n                // Pass important checks (like `then` for Promise) through\n                if (passProperties.indexOf(prop) >= 0) {\n                    return Reflect.has(target, prop);\n                }\n                return Reflect.has(target, prop) || this.interface.hasEvent(String(prop));\n            }\n        });\n        (0, index_js_3.defineProperties)(this, {\n            filters\n        });\n        (0, index_js_3.defineProperties)(this, {\n            fallback: iface.receive || iface.fallback ? buildWrappedFallback(this) : null\n        });\n        // Return a Proxy that will respond to functions\n        return new Proxy(this, {\n            get: (target, prop, receiver)=>{\n                if (typeof prop === \"symbol\" || prop in target || passProperties.indexOf(prop) >= 0) {\n                    return Reflect.get(target, prop, receiver);\n                }\n                // Undefined properties should return undefined\n                try {\n                    return target.getFunction(prop);\n                } catch (error) {\n                    if (!(0, index_js_3.isError)(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\n                        throw error;\n                    }\n                }\n                return undefined;\n            },\n            has: (target, prop)=>{\n                if (typeof prop === \"symbol\" || prop in target || passProperties.indexOf(prop) >= 0) {\n                    return Reflect.has(target, prop);\n                }\n                return target.interface.hasFunction(prop);\n            }\n        });\n    }\n    /**\n     *  Return a new Contract instance with the same target and ABI, but\n     *  a different %%runner%%.\n     */ connect(runner) {\n        return new BaseContract(this.target, this.interface, runner);\n    }\n    /**\n     *  Return a new Contract instance with the same ABI and runner, but\n     *  a different %%target%%.\n     */ attach(target) {\n        return new BaseContract(target, this.interface, this.runner);\n    }\n    /**\n     *  Return the resolved address of this Contract.\n     */ async getAddress() {\n        return await getInternal(this).addrPromise;\n    }\n    /**\n     *  Return the deployed bytecode or null if no bytecode is found.\n     */ async getDeployedCode() {\n        const provider = getProvider(this.runner);\n        (0, index_js_3.assert)(provider, \"runner does not support .provider\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"getDeployedCode\"\n        });\n        const code = await provider.getCode(await this.getAddress());\n        if (code === \"0x\") {\n            return null;\n        }\n        return code;\n    }\n    /**\n     *  Resolve to this Contract once the bytecode has been deployed, or\n     *  resolve immediately if already deployed.\n     */ async waitForDeployment() {\n        // We have the deployement transaction; just use that (throws if deployement fails)\n        const deployTx = this.deploymentTransaction();\n        if (deployTx) {\n            await deployTx.wait();\n            return this;\n        }\n        // Check for code\n        const code = await this.getDeployedCode();\n        if (code != null) {\n            return this;\n        }\n        // Make sure we can subscribe to a provider event\n        const provider = getProvider(this.runner);\n        (0, index_js_3.assert)(provider != null, \"contract runner does not support .provider\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"waitForDeployment\"\n        });\n        return new Promise((resolve, reject)=>{\n            const checkCode = async ()=>{\n                try {\n                    const code = await this.getDeployedCode();\n                    if (code != null) {\n                        return resolve(this);\n                    }\n                    provider.once(\"block\", checkCode);\n                } catch (error) {\n                    reject(error);\n                }\n            };\n            checkCode();\n        });\n    }\n    /**\n     *  Return the transaction used to deploy this contract.\n     *\n     *  This is only available if this instance was returned from a\n     *  [[ContractFactory]].\n     */ deploymentTransaction() {\n        return getInternal(this).deployTx;\n    }\n    /**\n     *  Return the function for a given name. This is useful when a contract\n     *  method name conflicts with a JavaScript name such as ``prototype`` or\n     *  when using a Contract programatically.\n     */ getFunction(key) {\n        if (typeof key !== \"string\") {\n            key = key.format();\n        }\n        const func = buildWrappedMethod(this, key);\n        return func;\n    }\n    /**\n     *  Return the event for a given name. This is useful when a contract\n     *  event name conflicts with a JavaScript name such as ``prototype`` or\n     *  when using a Contract programatically.\n     */ getEvent(key) {\n        if (typeof key !== \"string\") {\n            key = key.format();\n        }\n        return buildWrappedEvent(this, key);\n    }\n    /**\n     *  @_ignore:\n     */ async queryTransaction(hash) {\n        throw new Error(\"@TODO\");\n    }\n    /*\n    // @TODO: this is a non-backwards compatible change, but will be added\n    //        in v7 and in a potential SmartContract class in an upcoming\n    //        v6 release\n    async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {\n        const provider = getProvider(this.runner);\n        assert(provider, \"contract runner does not have a provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"queryTransaction\" });\n\n        const receipt = await provider.getTransactionReceipt(hash);\n        if (receipt == null) { return null; }\n\n        return new ContractTransactionReceipt(this.interface, provider, receipt);\n    }\n    */ /**\n     *  Provide historic access to event data for %%event%% in the range\n     *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``\"latest\"``)\n     *  inclusive.\n     */ async queryFilter(event, fromBlock, toBlock) {\n        if (fromBlock == null) {\n            fromBlock = 0;\n        }\n        if (toBlock == null) {\n            toBlock = \"latest\";\n        }\n        const { addr, addrPromise } = getInternal(this);\n        const address = addr ? addr : await addrPromise;\n        const { fragment, topics } = await getSubInfo(this, event);\n        const filter = {\n            address,\n            topics,\n            fromBlock,\n            toBlock\n        };\n        const provider = getProvider(this.runner);\n        (0, index_js_3.assert)(provider, \"contract runner does not have a provider\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"queryFilter\"\n        });\n        return (await provider.getLogs(filter)).map((log)=>{\n            let foundFragment = fragment;\n            if (foundFragment == null) {\n                try {\n                    foundFragment = this.interface.getEvent(log.topics[0]);\n                } catch (error) {}\n            }\n            if (foundFragment) {\n                try {\n                    return new wrappers_js_1.EventLog(log, this.interface, foundFragment);\n                } catch (error) {\n                    return new wrappers_js_1.UndecodedEventLog(log, error);\n                }\n            }\n            return new provider_js_1.Log(log, provider);\n        });\n    }\n    /**\n     *  Add an event %%listener%% for the %%event%%.\n     */ async on(event, listener) {\n        const sub = await getSub(this, \"on\", event);\n        sub.listeners.push({\n            listener,\n            once: false\n        });\n        sub.start();\n        return this;\n    }\n    /**\n     *  Add an event %%listener%% for the %%event%%, but remove the listener\n     *  after it is fired once.\n     */ async once(event, listener) {\n        const sub = await getSub(this, \"once\", event);\n        sub.listeners.push({\n            listener,\n            once: true\n        });\n        sub.start();\n        return this;\n    }\n    /**\n     *  Emit an %%event%% calling all listeners with %%args%%.\n     *\n     *  Resolves to ``true`` if any listeners were called.\n     */ async emit(event, ...args) {\n        return await emit(this, event, args, null);\n    }\n    /**\n     *  Resolves to the number of listeners of %%event%% or the total number\n     *  of listeners if unspecified.\n     */ async listenerCount(event) {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) {\n                return 0;\n            }\n            return sub.listeners.length;\n        }\n        const { subs } = getInternal(this);\n        let total = 0;\n        for (const { listeners } of subs.values()){\n            total += listeners.length;\n        }\n        return total;\n    }\n    /**\n     *  Resolves to the listeners subscribed to %%event%% or all listeners\n     *  if unspecified.\n     */ async listeners(event) {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) {\n                return [];\n            }\n            return sub.listeners.map(({ listener })=>listener);\n        }\n        const { subs } = getInternal(this);\n        let result = [];\n        for (const { listeners } of subs.values()){\n            result = result.concat(listeners.map(({ listener })=>listener));\n        }\n        return result;\n    }\n    /**\n     *  Remove the %%listener%% from the listeners for %%event%% or remove\n     *  all listeners if unspecified.\n     */ async off(event, listener) {\n        const sub = await hasSub(this, event);\n        if (!sub) {\n            return this;\n        }\n        if (listener) {\n            const index = sub.listeners.map(({ listener })=>listener).indexOf(listener);\n            if (index >= 0) {\n                sub.listeners.splice(index, 1);\n            }\n        }\n        if (listener == null || sub.listeners.length === 0) {\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n        }\n        return this;\n    }\n    /**\n     *  Remove all the listeners for %%event%% or remove all listeners if\n     *  unspecified.\n     */ async removeAllListeners(event) {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) {\n                return this;\n            }\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n        } else {\n            const { subs } = getInternal(this);\n            for (const { tag, stop } of subs.values()){\n                stop();\n                subs.delete(tag);\n            }\n        }\n        return this;\n    }\n    /**\n     *  Alias for [on].\n     */ async addListener(event, listener) {\n        return await this.on(event, listener);\n    }\n    /**\n     *  Alias for [off].\n     */ async removeListener(event, listener) {\n        return await this.off(event, listener);\n    }\n    /**\n     *  Create a new Class for the %%abi%%.\n     */ static buildClass(abi) {\n        class CustomContract extends BaseContract {\n            constructor(address, runner = null){\n                super(address, abi, runner);\n            }\n        }\n        return CustomContract;\n    }\n    /**\n     *  Create a new BaseContract with a specified Interface.\n     */ static from(target, abi, runner) {\n        if (runner == null) {\n            runner = null;\n        }\n        const contract = new this(target, abi, runner);\n        return contract;\n    }\n}\nexports.BaseContract = BaseContract;\nfunction _ContractBase() {\n    return BaseContract;\n}\n/**\n *  A [[BaseContract]] with no type guards on its methods or events.\n */ class Contract extends _ContractBase() {\n}\nexports.Contract = Contract; //# sourceMappingURL=contract.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/contract/contract.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/contract/factory.js":
/*!**************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/contract/factory.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ContractFactory = void 0;\nconst index_js_1 = __webpack_require__(/*! ../abi/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../address/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/index.js\");\nconst index_js_3 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst contract_js_1 = __webpack_require__(/*! ./contract.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/contract/contract.js\");\n// A = Arguments to the constructor\n// I = Interface of deployed contracts\n/**\n *  A **ContractFactory** is used to deploy a Contract to the blockchain.\n */ class ContractFactory {\n    /**\n     *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,\n     *  optionally connected to %%runner%%.\n     *\n     *  The %%bytecode%% may be the ``bytecode`` property within the\n     *  standard Solidity JSON output.\n     */ constructor(abi, bytecode, runner){\n        const iface = index_js_1.Interface.from(abi);\n        // Dereference Solidity bytecode objects and allow a missing `0x`-prefix\n        if (bytecode instanceof Uint8Array) {\n            bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));\n        } else {\n            if (typeof bytecode === \"object\") {\n                bytecode = bytecode.object;\n            }\n            if (!bytecode.startsWith(\"0x\")) {\n                bytecode = \"0x\" + bytecode;\n            }\n            bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));\n        }\n        (0, index_js_3.defineProperties)(this, {\n            bytecode,\n            interface: iface,\n            runner: runner || null\n        });\n    }\n    attach(target) {\n        return new contract_js_1.BaseContract(target, this.interface, this.runner);\n    }\n    /**\n     *  Resolves to the transaction to deploy the contract, passing %%args%%\n     *  into the constructor.\n     */ async getDeployTransaction(...args) {\n        let overrides = {};\n        const fragment = this.interface.deploy;\n        if (fragment.inputs.length + 1 === args.length) {\n            overrides = await (0, contract_js_1.copyOverrides)(args.pop());\n        }\n        if (fragment.inputs.length !== args.length) {\n            throw new Error(\"incorrect number of arguments to constructor\");\n        }\n        const resolvedArgs = await (0, contract_js_1.resolveArgs)(this.runner, fragment.inputs, args);\n        const data = (0, index_js_3.concat)([\n            this.bytecode,\n            this.interface.encodeDeploy(resolvedArgs)\n        ]);\n        return Object.assign({}, overrides, {\n            data\n        });\n    }\n    /**\n     *  Resolves to the Contract deployed by passing %%args%% into the\n     *  constructor.\n     *\n     *  This will resovle to the Contract before it has been deployed to the\n     *  network, so the [[BaseContract-waitForDeployment]] should be used before\n     *  sending any transactions to it.\n     */ async deploy(...args) {\n        const tx = await this.getDeployTransaction(...args);\n        (0, index_js_3.assert)(this.runner && typeof this.runner.sendTransaction === \"function\", \"factory runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"sendTransaction\"\n        });\n        const sentTx = await this.runner.sendTransaction(tx);\n        const address = (0, index_js_2.getCreateAddress)(sentTx);\n        return new contract_js_1.BaseContract(address, this.interface, this.runner, sentTx);\n    }\n    /**\n     *  Return a new **ContractFactory** with the same ABI and bytecode,\n     *  but connected to %%runner%%.\n     */ connect(runner) {\n        return new ContractFactory(this.interface, this.bytecode, runner);\n    }\n    /**\n     *  Create a new **ContractFactory** from the standard Solidity JSON output.\n     */ static fromSolidity(output, runner) {\n        (0, index_js_3.assertArgument)(output != null, \"bad compiler output\", \"output\", output);\n        if (typeof output === \"string\") {\n            output = JSON.parse(output);\n        }\n        const abi = output.abi;\n        let bytecode = \"\";\n        if (output.bytecode) {\n            bytecode = output.bytecode;\n        } else if (output.evm && output.evm.bytecode) {\n            bytecode = output.evm.bytecode;\n        }\n        return new this(abi, bytecode, runner);\n    }\n}\nexports.ContractFactory = ContractFactory; //# sourceMappingURL=factory.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/contract/factory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/contract/index.js":
/*!************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/contract/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UndecodedEventLog = exports.EventLog = exports.ContractTransactionResponse = exports.ContractTransactionReceipt = exports.ContractUnknownEventPayload = exports.ContractEventPayload = exports.ContractFactory = exports.Contract = exports.BaseContract = void 0;\n/**\n *  A **Contract** object is a meta-class (a class whose definition is\n *  defined at runtime), which communicates with a deployed smart contract\n *  on the blockchain and provides a simple JavaScript interface to call\n *  methods, send transaction, query historic logs and listen for its events.\n *\n *  @_section: api/contract:Contracts  [about-contracts]\n */ var contract_js_1 = __webpack_require__(/*! ./contract.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/contract/contract.js\");\nObject.defineProperty(exports, \"BaseContract\", ({\n    enumerable: true,\n    get: function() {\n        return contract_js_1.BaseContract;\n    }\n}));\nObject.defineProperty(exports, \"Contract\", ({\n    enumerable: true,\n    get: function() {\n        return contract_js_1.Contract;\n    }\n}));\nvar factory_js_1 = __webpack_require__(/*! ./factory.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/contract/factory.js\");\nObject.defineProperty(exports, \"ContractFactory\", ({\n    enumerable: true,\n    get: function() {\n        return factory_js_1.ContractFactory;\n    }\n}));\nvar wrappers_js_1 = __webpack_require__(/*! ./wrappers.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/contract/wrappers.js\");\nObject.defineProperty(exports, \"ContractEventPayload\", ({\n    enumerable: true,\n    get: function() {\n        return wrappers_js_1.ContractEventPayload;\n    }\n}));\nObject.defineProperty(exports, \"ContractUnknownEventPayload\", ({\n    enumerable: true,\n    get: function() {\n        return wrappers_js_1.ContractUnknownEventPayload;\n    }\n}));\nObject.defineProperty(exports, \"ContractTransactionReceipt\", ({\n    enumerable: true,\n    get: function() {\n        return wrappers_js_1.ContractTransactionReceipt;\n    }\n}));\nObject.defineProperty(exports, \"ContractTransactionResponse\", ({\n    enumerable: true,\n    get: function() {\n        return wrappers_js_1.ContractTransactionResponse;\n    }\n}));\nObject.defineProperty(exports, \"EventLog\", ({\n    enumerable: true,\n    get: function() {\n        return wrappers_js_1.EventLog;\n    }\n}));\nObject.defineProperty(exports, \"UndecodedEventLog\", ({\n    enumerable: true,\n    get: function() {\n        return wrappers_js_1.UndecodedEventLog;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9jb250cmFjdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQseUJBQXlCLEdBQUdBLGdCQUFnQixHQUFHQSxtQ0FBbUMsR0FBR0Esa0NBQWtDLEdBQUdBLG1DQUFtQyxHQUFHQSw0QkFBNEIsR0FBR0EsdUJBQXVCLEdBQUdBLGdCQUFnQixHQUFHQSxvQkFBb0IsR0FBRyxLQUFLO0FBQ3hROzs7Ozs7O0NBT0MsR0FDRCxJQUFJVyxnQkFBZ0JDLG1CQUFPQSxDQUFDLG9GQUFlO0FBQzNDZCxnREFBK0M7SUFBRWUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsY0FBY0QsWUFBWTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzdIWiw0Q0FBMkM7SUFBRWUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsY0FBY0YsUUFBUTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3JILElBQUlNLGVBQWVILG1CQUFPQSxDQUFDLGtGQUFjO0FBQ3pDZCxtREFBa0Q7SUFBRWUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsYUFBYVAsZUFBZTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2xJLElBQUlRLGdCQUFnQkosbUJBQU9BLENBQUMsb0ZBQWU7QUFDM0NkLHdEQUF1RDtJQUFFZSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxjQUFjVCxvQkFBb0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUM3SVQsK0RBQThEO0lBQUVlLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLGNBQWNWLDJCQUEyQjtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzNKUiw4REFBNkQ7SUFBRWUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsY0FBY1gsMEJBQTBCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDekpQLCtEQUE4RDtJQUFFZSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxjQUFjWiwyQkFBMkI7SUFBRTtBQUFFLENBQUMsRUFBQztBQUMzSk4sNENBQTJDO0lBQUVlLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLGNBQWNiLFFBQVE7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNySEwscURBQW9EO0lBQUVlLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLGNBQWNkLGlCQUFpQjtJQUFFO0FBQUUsQ0FBQyxFQUFDLEVBQ3ZJLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL2NvbnRyYWN0L2luZGV4LmpzP2NiNzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVuZGVjb2RlZEV2ZW50TG9nID0gZXhwb3J0cy5FdmVudExvZyA9IGV4cG9ydHMuQ29udHJhY3RUcmFuc2FjdGlvblJlc3BvbnNlID0gZXhwb3J0cy5Db250cmFjdFRyYW5zYWN0aW9uUmVjZWlwdCA9IGV4cG9ydHMuQ29udHJhY3RVbmtub3duRXZlbnRQYXlsb2FkID0gZXhwb3J0cy5Db250cmFjdEV2ZW50UGF5bG9hZCA9IGV4cG9ydHMuQ29udHJhY3RGYWN0b3J5ID0gZXhwb3J0cy5Db250cmFjdCA9IGV4cG9ydHMuQmFzZUNvbnRyYWN0ID0gdm9pZCAwO1xuLyoqXG4gKiAgQSAqKkNvbnRyYWN0Kiogb2JqZWN0IGlzIGEgbWV0YS1jbGFzcyAoYSBjbGFzcyB3aG9zZSBkZWZpbml0aW9uIGlzXG4gKiAgZGVmaW5lZCBhdCBydW50aW1lKSwgd2hpY2ggY29tbXVuaWNhdGVzIHdpdGggYSBkZXBsb3llZCBzbWFydCBjb250cmFjdFxuICogIG9uIHRoZSBibG9ja2NoYWluIGFuZCBwcm92aWRlcyBhIHNpbXBsZSBKYXZhU2NyaXB0IGludGVyZmFjZSB0byBjYWxsXG4gKiAgbWV0aG9kcywgc2VuZCB0cmFuc2FjdGlvbiwgcXVlcnkgaGlzdG9yaWMgbG9ncyBhbmQgbGlzdGVuIGZvciBpdHMgZXZlbnRzLlxuICpcbiAqICBAX3NlY3Rpb246IGFwaS9jb250cmFjdDpDb250cmFjdHMgIFthYm91dC1jb250cmFjdHNdXG4gKi9cbnZhciBjb250cmFjdF9qc18xID0gcmVxdWlyZShcIi4vY29udHJhY3QuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCYXNlQ29udHJhY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbnRyYWN0X2pzXzEuQmFzZUNvbnRyYWN0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29udHJhY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbnRyYWN0X2pzXzEuQ29udHJhY3Q7IH0gfSk7XG52YXIgZmFjdG9yeV9qc18xID0gcmVxdWlyZShcIi4vZmFjdG9yeS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbnRyYWN0RmFjdG9yeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFjdG9yeV9qc18xLkNvbnRyYWN0RmFjdG9yeTsgfSB9KTtcbnZhciB3cmFwcGVyc19qc18xID0gcmVxdWlyZShcIi4vd3JhcHBlcnMuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb250cmFjdEV2ZW50UGF5bG9hZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd3JhcHBlcnNfanNfMS5Db250cmFjdEV2ZW50UGF5bG9hZDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbnRyYWN0VW5rbm93bkV2ZW50UGF5bG9hZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd3JhcHBlcnNfanNfMS5Db250cmFjdFVua25vd25FdmVudFBheWxvYWQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb250cmFjdFRyYW5zYWN0aW9uUmVjZWlwdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd3JhcHBlcnNfanNfMS5Db250cmFjdFRyYW5zYWN0aW9uUmVjZWlwdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbnRyYWN0VHJhbnNhY3Rpb25SZXNwb25zZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd3JhcHBlcnNfanNfMS5Db250cmFjdFRyYW5zYWN0aW9uUmVzcG9uc2U7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFdmVudExvZ1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd3JhcHBlcnNfanNfMS5FdmVudExvZzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlVuZGVjb2RlZEV2ZW50TG9nXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3cmFwcGVyc19qc18xLlVuZGVjb2RlZEV2ZW50TG9nOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVW5kZWNvZGVkRXZlbnRMb2ciLCJFdmVudExvZyIsIkNvbnRyYWN0VHJhbnNhY3Rpb25SZXNwb25zZSIsIkNvbnRyYWN0VHJhbnNhY3Rpb25SZWNlaXB0IiwiQ29udHJhY3RVbmtub3duRXZlbnRQYXlsb2FkIiwiQ29udHJhY3RFdmVudFBheWxvYWQiLCJDb250cmFjdEZhY3RvcnkiLCJDb250cmFjdCIsIkJhc2VDb250cmFjdCIsImNvbnRyYWN0X2pzXzEiLCJyZXF1aXJlIiwiZW51bWVyYWJsZSIsImdldCIsImZhY3RvcnlfanNfMSIsIndyYXBwZXJzX2pzXzEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/contract/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/contract/wrappers.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/contract/wrappers.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ContractEventPayload = exports.ContractUnknownEventPayload = exports.ContractTransactionResponse = exports.ContractTransactionReceipt = exports.UndecodedEventLog = exports.EventLog = void 0;\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nconst provider_js_1 = __webpack_require__(/*! ../providers/provider.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider.js\");\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */ class EventLog extends provider_js_1.Log {\n    /**\n     * @_ignore:\n     */ constructor(log, iface, fragment){\n        super(log, log.provider);\n        const args = iface.decodeEventLog(fragment, log.data, log.topics);\n        (0, index_js_1.defineProperties)(this, {\n            args,\n            fragment,\n            interface: iface\n        });\n    }\n    /**\n     *  The name of the event.\n     */ get eventName() {\n        return this.fragment.name;\n    }\n    /**\n     *  The signature of the event.\n     */ get eventSignature() {\n        return this.fragment.format();\n    }\n}\nexports.EventLog = EventLog;\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */ class UndecodedEventLog extends provider_js_1.Log {\n    /**\n     * @_ignore:\n     */ constructor(log, error){\n        super(log, log.provider);\n        (0, index_js_1.defineProperties)(this, {\n            error\n        });\n    }\n}\nexports.UndecodedEventLog = UndecodedEventLog;\n/**\n *  A **ContractTransactionReceipt** includes the parsed logs from a\n *  [[TransactionReceipt]].\n */ class ContractTransactionReceipt extends provider_js_1.TransactionReceipt {\n    #iface;\n    /**\n     *  @_ignore:\n     */ constructor(iface, provider, tx){\n        super(tx, provider);\n        this.#iface = iface;\n    }\n    /**\n     *  The parsed logs for any [[Log]] which has a matching event in the\n     *  Contract ABI.\n     */ get logs() {\n        return super.logs.map((log)=>{\n            const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]) : null;\n            if (fragment) {\n                try {\n                    return new EventLog(log, this.#iface, fragment);\n                } catch (error) {\n                    return new UndecodedEventLog(log, error);\n                }\n            }\n            return log;\n        });\n    }\n}\nexports.ContractTransactionReceipt = ContractTransactionReceipt;\n/**\n *  A **ContractTransactionResponse** will return a\n *  [[ContractTransactionReceipt]] when waited on.\n */ class ContractTransactionResponse extends provider_js_1.TransactionResponse {\n    #iface;\n    /**\n     *  @_ignore:\n     */ constructor(iface, provider, tx){\n        super(tx, provider);\n        this.#iface = iface;\n    }\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */ async wait(confirms) {\n        const receipt = await super.wait(confirms);\n        if (receipt == null) {\n            return null;\n        }\n        return new ContractTransactionReceipt(this.#iface, this.provider, receipt);\n    }\n}\nexports.ContractTransactionResponse = ContractTransactionResponse;\n/**\n *  A **ContractUnknownEventPayload** is included as the last parameter to\n *  Contract Events when the event does not match any events in the ABI.\n */ class ContractUnknownEventPayload extends index_js_1.EventPayload {\n    /**\n     *  @_event:\n     */ constructor(contract, listener, filter, log){\n        super(contract, listener, filter);\n        (0, index_js_1.defineProperties)(this, {\n            log\n        });\n    }\n    /**\n     *  Resolves to the block the event occured in.\n     */ async getBlock() {\n        return await this.log.getBlock();\n    }\n    /**\n     *  Resolves to the transaction the event occured in.\n     */ async getTransaction() {\n        return await this.log.getTransaction();\n    }\n    /**\n     *  Resolves to the transaction receipt the event occured in.\n     */ async getTransactionReceipt() {\n        return await this.log.getTransactionReceipt();\n    }\n}\nexports.ContractUnknownEventPayload = ContractUnknownEventPayload;\n/**\n *  A **ContractEventPayload** is included as the last parameter to\n *  Contract Events when the event is known.\n */ class ContractEventPayload extends ContractUnknownEventPayload {\n    /**\n     *  @_ignore:\n     */ constructor(contract, listener, filter, fragment, _log){\n        super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));\n        const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);\n        (0, index_js_1.defineProperties)(this, {\n            args,\n            fragment\n        });\n    }\n    /**\n     *  The event name.\n     */ get eventName() {\n        return this.fragment.name;\n    }\n    /**\n     *  The event signature.\n     */ get eventSignature() {\n        return this.fragment.format();\n    }\n}\nexports.ContractEventPayload = ContractEventPayload; //# sourceMappingURL=wrappers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/contract/wrappers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/crypto/crypto.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/crypto/crypto.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.randomBytes = exports.pbkdf2Sync = exports.createHmac = exports.createHash = void 0;\nvar crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nObject.defineProperty(exports, \"createHash\", ({\n    enumerable: true,\n    get: function() {\n        return crypto_1.createHash;\n    }\n}));\nObject.defineProperty(exports, \"createHmac\", ({\n    enumerable: true,\n    get: function() {\n        return crypto_1.createHmac;\n    }\n}));\nObject.defineProperty(exports, \"pbkdf2Sync\", ({\n    enumerable: true,\n    get: function() {\n        return crypto_1.pbkdf2Sync;\n    }\n}));\nObject.defineProperty(exports, \"randomBytes\", ({\n    enumerable: true,\n    get: function() {\n        return crypto_1.randomBytes;\n    }\n})); //# sourceMappingURL=crypto.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9jcnlwdG8vY3J5cHRvLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBR0Esa0JBQWtCLEdBQUdBLGtCQUFrQixHQUFHQSxrQkFBa0IsR0FBRyxLQUFLO0FBQzFGLElBQUlNLFdBQVdDLG1CQUFPQSxDQUFDLHNCQUFRO0FBQy9CVCw4Q0FBNkM7SUFBRVUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsU0FBU0QsVUFBVTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3BIUCw4Q0FBNkM7SUFBRVUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsU0FBU0YsVUFBVTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3BITiw4Q0FBNkM7SUFBRVUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsU0FBU0gsVUFBVTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3BITCwrQ0FBOEM7SUFBRVUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsU0FBU0osV0FBVztJQUFFO0FBQUUsQ0FBQyxFQUFDLEVBQ3RILGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL2NyeXB0by9jcnlwdG8uanM/YTZlOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmFuZG9tQnl0ZXMgPSBleHBvcnRzLnBia2RmMlN5bmMgPSBleHBvcnRzLmNyZWF0ZUhtYWMgPSBleHBvcnRzLmNyZWF0ZUhhc2ggPSB2b2lkIDA7XG52YXIgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlSGFzaFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY3J5cHRvXzEuY3JlYXRlSGFzaDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZUhtYWNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyeXB0b18xLmNyZWF0ZUhtYWM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwYmtkZjJTeW5jXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjcnlwdG9fMS5wYmtkZjJTeW5jOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmFuZG9tQnl0ZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyeXB0b18xLnJhbmRvbUJ5dGVzOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3J5cHRvLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJhbmRvbUJ5dGVzIiwicGJrZGYyU3luYyIsImNyZWF0ZUhtYWMiLCJjcmVhdGVIYXNoIiwiY3J5cHRvXzEiLCJyZXF1aXJlIiwiZW51bWVyYWJsZSIsImdldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/crypto/crypto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/crypto/hmac.js":
/*!*********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/crypto/hmac.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.computeHmac = void 0;\n/**\n *  An **HMAC** enables verification that a given key was used\n *  to authenticate a payload.\n *\n *  See: [[link-wiki-hmac]]\n *\n *  @_subsection: api/crypto:HMAC  [about-hmac]\n */ const crypto_js_1 = __webpack_require__(/*! ./crypto.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/crypto.js\");\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nlet locked = false;\nconst _computeHmac = function(algorithm, key, data) {\n    return (0, crypto_js_1.createHmac)(algorithm, key).update(data).digest();\n};\nlet __computeHmac = _computeHmac;\n/**\n *  Return the HMAC for %%data%% using the %%key%% key with the underlying\n *  %%algo%% used for compression.\n *\n *  @example:\n *    key = id(\"some-secret\")\n *\n *    // Compute the HMAC\n *    computeHmac(\"sha256\", key, \"0x1337\")\n *    //_result:\n *\n *    // To compute the HMAC of UTF-8 data, the data must be\n *    // converted to UTF-8 bytes\n *    computeHmac(\"sha256\", key, toUtf8Bytes(\"Hello World\"))\n *    //_result:\n *\n */ function computeHmac(algorithm, _key, _data) {\n    const key = (0, index_js_1.getBytes)(_key, \"key\");\n    const data = (0, index_js_1.getBytes)(_data, \"data\");\n    return (0, index_js_1.hexlify)(__computeHmac(algorithm, key, data));\n}\nexports.computeHmac = computeHmac;\ncomputeHmac._ = _computeHmac;\ncomputeHmac.lock = function() {\n    locked = true;\n};\ncomputeHmac.register = function(func) {\n    if (locked) {\n        throw new Error(\"computeHmac is locked\");\n    }\n    __computeHmac = func;\n};\nObject.freeze(computeHmac); //# sourceMappingURL=hmac.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9jcnlwdG8vaG1hYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUJBQW1CLEdBQUcsS0FBSztBQUMzQjs7Ozs7OztDQU9DLEdBQ0QsTUFBTUcsY0FBY0MsbUJBQU9BLENBQUMsOEVBQWE7QUFDekMsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUMsa0ZBQW1CO0FBQzlDLElBQUlFLFNBQVM7QUFDYixNQUFNQyxlQUFlLFNBQVVDLFNBQVMsRUFBRUMsR0FBRyxFQUFFQyxJQUFJO0lBQy9DLE9BQU8sQ0FBQyxHQUFHUCxZQUFZUSxVQUFVLEVBQUVILFdBQVdDLEtBQUtHLE1BQU0sQ0FBQ0YsTUFBTUcsTUFBTTtBQUMxRTtBQUNBLElBQUlDLGdCQUFnQlA7QUFDcEI7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FnQkMsR0FDRCxTQUFTTCxZQUFZTSxTQUFTLEVBQUVPLElBQUksRUFBRUMsS0FBSztJQUN2QyxNQUFNUCxNQUFNLENBQUMsR0FBR0osV0FBV1ksUUFBUSxFQUFFRixNQUFNO0lBQzNDLE1BQU1MLE9BQU8sQ0FBQyxHQUFHTCxXQUFXWSxRQUFRLEVBQUVELE9BQU87SUFDN0MsT0FBTyxDQUFDLEdBQUdYLFdBQVdhLE9BQU8sRUFBRUosY0FBY04sV0FBV0MsS0FBS0M7QUFDakU7QUFDQVYsbUJBQW1CLEdBQUdFO0FBQ3RCQSxZQUFZaUIsQ0FBQyxHQUFHWjtBQUNoQkwsWUFBWWtCLElBQUksR0FBRztJQUFjZCxTQUFTO0FBQU07QUFDaERKLFlBQVltQixRQUFRLEdBQUcsU0FBVUMsSUFBSTtJQUNqQyxJQUFJaEIsUUFBUTtRQUNSLE1BQU0sSUFBSWlCLE1BQU07SUFDcEI7SUFDQVQsZ0JBQWdCUTtBQUNwQjtBQUNBeEIsT0FBTzBCLE1BQU0sQ0FBQ3RCLGNBQ2QsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvY3J5cHRvL2htYWMuanM/NzllZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29tcHV0ZUhtYWMgPSB2b2lkIDA7XG4vKipcbiAqICBBbiAqKkhNQUMqKiBlbmFibGVzIHZlcmlmaWNhdGlvbiB0aGF0IGEgZ2l2ZW4ga2V5IHdhcyB1c2VkXG4gKiAgdG8gYXV0aGVudGljYXRlIGEgcGF5bG9hZC5cbiAqXG4gKiAgU2VlOiBbW2xpbmstd2lraS1obWFjXV1cbiAqXG4gKiAgQF9zdWJzZWN0aW9uOiBhcGkvY3J5cHRvOkhNQUMgIFthYm91dC1obWFjXVxuICovXG5jb25zdCBjcnlwdG9fanNfMSA9IHJlcXVpcmUoXCIuL2NyeXB0by5qc1wiKTtcbmNvbnN0IGluZGV4X2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvaW5kZXguanNcIik7XG5sZXQgbG9ja2VkID0gZmFsc2U7XG5jb25zdCBfY29tcHV0ZUhtYWMgPSBmdW5jdGlvbiAoYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcbiAgICByZXR1cm4gKDAsIGNyeXB0b19qc18xLmNyZWF0ZUhtYWMpKGFsZ29yaXRobSwga2V5KS51cGRhdGUoZGF0YSkuZGlnZXN0KCk7XG59O1xubGV0IF9fY29tcHV0ZUhtYWMgPSBfY29tcHV0ZUhtYWM7XG4vKipcbiAqICBSZXR1cm4gdGhlIEhNQUMgZm9yICUlZGF0YSUlIHVzaW5nIHRoZSAlJWtleSUlIGtleSB3aXRoIHRoZSB1bmRlcmx5aW5nXG4gKiAgJSVhbGdvJSUgdXNlZCBmb3IgY29tcHJlc3Npb24uXG4gKlxuICogIEBleGFtcGxlOlxuICogICAga2V5ID0gaWQoXCJzb21lLXNlY3JldFwiKVxuICpcbiAqICAgIC8vIENvbXB1dGUgdGhlIEhNQUNcbiAqICAgIGNvbXB1dGVIbWFjKFwic2hhMjU2XCIsIGtleSwgXCIweDEzMzdcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBUbyBjb21wdXRlIHRoZSBITUFDIG9mIFVURi04IGRhdGEsIHRoZSBkYXRhIG11c3QgYmVcbiAqICAgIC8vIGNvbnZlcnRlZCB0byBVVEYtOCBieXRlc1xuICogICAgY29tcHV0ZUhtYWMoXCJzaGEyNTZcIiwga2V5LCB0b1V0ZjhCeXRlcyhcIkhlbGxvIFdvcmxkXCIpKVxuICogICAgLy9fcmVzdWx0OlxuICpcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUhtYWMoYWxnb3JpdGhtLCBfa2V5LCBfZGF0YSkge1xuICAgIGNvbnN0IGtleSA9ICgwLCBpbmRleF9qc18xLmdldEJ5dGVzKShfa2V5LCBcImtleVwiKTtcbiAgICBjb25zdCBkYXRhID0gKDAsIGluZGV4X2pzXzEuZ2V0Qnl0ZXMpKF9kYXRhLCBcImRhdGFcIik7XG4gICAgcmV0dXJuICgwLCBpbmRleF9qc18xLmhleGxpZnkpKF9fY29tcHV0ZUhtYWMoYWxnb3JpdGhtLCBrZXksIGRhdGEpKTtcbn1cbmV4cG9ydHMuY29tcHV0ZUhtYWMgPSBjb21wdXRlSG1hYztcbmNvbXB1dGVIbWFjLl8gPSBfY29tcHV0ZUhtYWM7XG5jb21wdXRlSG1hYy5sb2NrID0gZnVuY3Rpb24gKCkgeyBsb2NrZWQgPSB0cnVlOyB9O1xuY29tcHV0ZUhtYWMucmVnaXN0ZXIgPSBmdW5jdGlvbiAoZnVuYykge1xuICAgIGlmIChsb2NrZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY29tcHV0ZUhtYWMgaXMgbG9ja2VkXCIpO1xuICAgIH1cbiAgICBfX2NvbXB1dGVIbWFjID0gZnVuYztcbn07XG5PYmplY3QuZnJlZXplKGNvbXB1dGVIbWFjKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhtYWMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29tcHV0ZUhtYWMiLCJjcnlwdG9fanNfMSIsInJlcXVpcmUiLCJpbmRleF9qc18xIiwibG9ja2VkIiwiX2NvbXB1dGVIbWFjIiwiYWxnb3JpdGhtIiwia2V5IiwiZGF0YSIsImNyZWF0ZUhtYWMiLCJ1cGRhdGUiLCJkaWdlc3QiLCJfX2NvbXB1dGVIbWFjIiwiX2tleSIsIl9kYXRhIiwiZ2V0Qnl0ZXMiLCJoZXhsaWZ5IiwiXyIsImxvY2siLCJyZWdpc3RlciIsImZ1bmMiLCJFcnJvciIsImZyZWV6ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/crypto/hmac.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/crypto/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/crypto/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  A fundamental building block of Ethereum is the underlying\n *  cryptographic primitives.\n *\n *  @_section: api/crypto:Cryptographic Functions   [about-crypto]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.lock = exports.Signature = exports.SigningKey = exports.scryptSync = exports.scrypt = exports.pbkdf2 = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.keccak256 = exports.randomBytes = exports.computeHmac = void 0;\nnull;\n// We import all these so we can export lock()\nconst hmac_js_1 = __webpack_require__(/*! ./hmac.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/hmac.js\");\nObject.defineProperty(exports, \"computeHmac\", ({\n    enumerable: true,\n    get: function() {\n        return hmac_js_1.computeHmac;\n    }\n}));\nconst keccak_js_1 = __webpack_require__(/*! ./keccak.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/keccak.js\");\nObject.defineProperty(exports, \"keccak256\", ({\n    enumerable: true,\n    get: function() {\n        return keccak_js_1.keccak256;\n    }\n}));\nconst ripemd160_js_1 = __webpack_require__(/*! ./ripemd160.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/ripemd160.js\");\nObject.defineProperty(exports, \"ripemd160\", ({\n    enumerable: true,\n    get: function() {\n        return ripemd160_js_1.ripemd160;\n    }\n}));\nconst pbkdf2_js_1 = __webpack_require__(/*! ./pbkdf2.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/pbkdf2.js\");\nObject.defineProperty(exports, \"pbkdf2\", ({\n    enumerable: true,\n    get: function() {\n        return pbkdf2_js_1.pbkdf2;\n    }\n}));\nconst random_js_1 = __webpack_require__(/*! ./random.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/random.js\");\nObject.defineProperty(exports, \"randomBytes\", ({\n    enumerable: true,\n    get: function() {\n        return random_js_1.randomBytes;\n    }\n}));\nconst scrypt_js_1 = __webpack_require__(/*! ./scrypt.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/scrypt.js\");\nObject.defineProperty(exports, \"scrypt\", ({\n    enumerable: true,\n    get: function() {\n        return scrypt_js_1.scrypt;\n    }\n}));\nObject.defineProperty(exports, \"scryptSync\", ({\n    enumerable: true,\n    get: function() {\n        return scrypt_js_1.scryptSync;\n    }\n}));\nconst sha2_js_1 = __webpack_require__(/*! ./sha2.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/sha2.js\");\nObject.defineProperty(exports, \"sha256\", ({\n    enumerable: true,\n    get: function() {\n        return sha2_js_1.sha256;\n    }\n}));\nObject.defineProperty(exports, \"sha512\", ({\n    enumerable: true,\n    get: function() {\n        return sha2_js_1.sha512;\n    }\n}));\nvar signing_key_js_1 = __webpack_require__(/*! ./signing-key.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/signing-key.js\");\nObject.defineProperty(exports, \"SigningKey\", ({\n    enumerable: true,\n    get: function() {\n        return signing_key_js_1.SigningKey;\n    }\n}));\nvar signature_js_1 = __webpack_require__(/*! ./signature.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/signature.js\");\nObject.defineProperty(exports, \"Signature\", ({\n    enumerable: true,\n    get: function() {\n        return signature_js_1.Signature;\n    }\n}));\n/**\n *  Once called, prevents any future change to the underlying cryptographic\n *  primitives using the ``.register`` feature for hooks.\n */ function lock() {\n    hmac_js_1.computeHmac.lock();\n    keccak_js_1.keccak256.lock();\n    pbkdf2_js_1.pbkdf2.lock();\n    random_js_1.randomBytes.lock();\n    ripemd160_js_1.ripemd160.lock();\n    scrypt_js_1.scrypt.lock();\n    scrypt_js_1.scryptSync.lock();\n    sha2_js_1.sha256.lock();\n    sha2_js_1.sha512.lock();\n    random_js_1.randomBytes.lock();\n}\nexports.lock = lock; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9jcnlwdG8vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Q0FLQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsWUFBWSxHQUFHQSxpQkFBaUIsR0FBR0Esa0JBQWtCLEdBQUdBLGtCQUFrQixHQUFHQSxjQUFjLEdBQUdBLGNBQWMsR0FBR0EsY0FBYyxHQUFHQSxjQUFjLEdBQUdBLGlCQUFpQixHQUFHQSxpQkFBaUIsR0FBR0EsbUJBQW1CLEdBQUdBLG1CQUFtQixHQUFHLEtBQUs7QUFDMU87QUFDQSw4Q0FBOEM7QUFDOUMsTUFBTWMsWUFBWUMsbUJBQU9BLENBQUMsMEVBQVc7QUFDckNqQiwrQ0FBOEM7SUFBRWtCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILFVBQVVELFdBQVc7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN2SCxNQUFNSyxjQUFjSCxtQkFBT0EsQ0FBQyw4RUFBYTtBQUN6Q2pCLDZDQUE0QztJQUFFa0IsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsWUFBWVAsU0FBUztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3JILE1BQU1RLGlCQUFpQkosbUJBQU9BLENBQUMsb0ZBQWdCO0FBQy9DakIsNkNBQTRDO0lBQUVrQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxlQUFlVCxTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDeEgsTUFBTVUsY0FBY0wsbUJBQU9BLENBQUMsOEVBQWE7QUFDekNqQiwwQ0FBeUM7SUFBRWtCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9HLFlBQVliLE1BQU07SUFBRTtBQUFFLENBQUMsRUFBQztBQUMvRyxNQUFNYyxjQUFjTixtQkFBT0EsQ0FBQyw4RUFBYTtBQUN6Q2pCLCtDQUE4QztJQUFFa0IsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0ksWUFBWVQsV0FBVztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3pILE1BQU1VLGNBQWNQLG1CQUFPQSxDQUFDLDhFQUFhO0FBQ3pDakIsMENBQXlDO0lBQUVrQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSyxZQUFZaEIsTUFBTTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQy9HUiw4Q0FBNkM7SUFBRWtCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9LLFlBQVlqQixVQUFVO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdkgsTUFBTWtCLFlBQVlSLG1CQUFPQSxDQUFDLDBFQUFXO0FBQ3JDakIsMENBQXlDO0lBQUVrQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPTSxVQUFVZCxNQUFNO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDN0dYLDBDQUF5QztJQUFFa0IsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT00sVUFBVWYsTUFBTTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzdHLElBQUlnQixtQkFBbUJULG1CQUFPQSxDQUFDLHdGQUFrQjtBQUNqRGpCLDhDQUE2QztJQUFFa0IsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT08saUJBQWlCcEIsVUFBVTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzVILElBQUlxQixpQkFBaUJWLG1CQUFPQSxDQUFDLG9GQUFnQjtBQUM3Q2pCLDZDQUE0QztJQUFFa0IsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT1EsZUFBZXRCLFNBQVM7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN4SDs7O0NBR0MsR0FDRCxTQUFTRDtJQUNMWSxVQUFVRCxXQUFXLENBQUNYLElBQUk7SUFDMUJnQixZQUFZUCxTQUFTLENBQUNULElBQUk7SUFDMUJrQixZQUFZYixNQUFNLENBQUNMLElBQUk7SUFDdkJtQixZQUFZVCxXQUFXLENBQUNWLElBQUk7SUFDNUJpQixlQUFlVCxTQUFTLENBQUNSLElBQUk7SUFDN0JvQixZQUFZaEIsTUFBTSxDQUFDSixJQUFJO0lBQ3ZCb0IsWUFBWWpCLFVBQVUsQ0FBQ0gsSUFBSTtJQUMzQnFCLFVBQVVkLE1BQU0sQ0FBQ1AsSUFBSTtJQUNyQnFCLFVBQVVmLE1BQU0sQ0FBQ04sSUFBSTtJQUNyQm1CLFlBQVlULFdBQVcsQ0FBQ1YsSUFBSTtBQUNoQztBQUNBRixZQUFZLEdBQUdFLE1BQ2YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvY3J5cHRvL2luZGV4LmpzPzRhYWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqICBBIGZ1bmRhbWVudGFsIGJ1aWxkaW5nIGJsb2NrIG9mIEV0aGVyZXVtIGlzIHRoZSB1bmRlcmx5aW5nXG4gKiAgY3J5cHRvZ3JhcGhpYyBwcmltaXRpdmVzLlxuICpcbiAqICBAX3NlY3Rpb246IGFwaS9jcnlwdG86Q3J5cHRvZ3JhcGhpYyBGdW5jdGlvbnMgICBbYWJvdXQtY3J5cHRvXVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvY2sgPSBleHBvcnRzLlNpZ25hdHVyZSA9IGV4cG9ydHMuU2lnbmluZ0tleSA9IGV4cG9ydHMuc2NyeXB0U3luYyA9IGV4cG9ydHMuc2NyeXB0ID0gZXhwb3J0cy5wYmtkZjIgPSBleHBvcnRzLnNoYTUxMiA9IGV4cG9ydHMuc2hhMjU2ID0gZXhwb3J0cy5yaXBlbWQxNjAgPSBleHBvcnRzLmtlY2NhazI1NiA9IGV4cG9ydHMucmFuZG9tQnl0ZXMgPSBleHBvcnRzLmNvbXB1dGVIbWFjID0gdm9pZCAwO1xubnVsbDtcbi8vIFdlIGltcG9ydCBhbGwgdGhlc2Ugc28gd2UgY2FuIGV4cG9ydCBsb2NrKClcbmNvbnN0IGhtYWNfanNfMSA9IHJlcXVpcmUoXCIuL2htYWMuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb21wdXRlSG1hY1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaG1hY19qc18xLmNvbXB1dGVIbWFjOyB9IH0pO1xuY29uc3Qga2VjY2FrX2pzXzEgPSByZXF1aXJlKFwiLi9rZWNjYWsuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJrZWNjYWsyNTZcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGtlY2Nha19qc18xLmtlY2NhazI1NjsgfSB9KTtcbmNvbnN0IHJpcGVtZDE2MF9qc18xID0gcmVxdWlyZShcIi4vcmlwZW1kMTYwLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmlwZW1kMTYwXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByaXBlbWQxNjBfanNfMS5yaXBlbWQxNjA7IH0gfSk7XG5jb25zdCBwYmtkZjJfanNfMSA9IHJlcXVpcmUoXCIuL3Bia2RmMi5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBia2RmMlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGJrZGYyX2pzXzEucGJrZGYyOyB9IH0pO1xuY29uc3QgcmFuZG9tX2pzXzEgPSByZXF1aXJlKFwiLi9yYW5kb20uanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyYW5kb21CeXRlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmFuZG9tX2pzXzEucmFuZG9tQnl0ZXM7IH0gfSk7XG5jb25zdCBzY3J5cHRfanNfMSA9IHJlcXVpcmUoXCIuL3NjcnlwdC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNjcnlwdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2NyeXB0X2pzXzEuc2NyeXB0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2NyeXB0U3luY1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2NyeXB0X2pzXzEuc2NyeXB0U3luYzsgfSB9KTtcbmNvbnN0IHNoYTJfanNfMSA9IHJlcXVpcmUoXCIuL3NoYTIuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzaGEyNTZcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNoYTJfanNfMS5zaGEyNTY7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzaGE1MTJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNoYTJfanNfMS5zaGE1MTI7IH0gfSk7XG52YXIgc2lnbmluZ19rZXlfanNfMSA9IHJlcXVpcmUoXCIuL3NpZ25pbmcta2V5LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2lnbmluZ0tleVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2lnbmluZ19rZXlfanNfMS5TaWduaW5nS2V5OyB9IH0pO1xudmFyIHNpZ25hdHVyZV9qc18xID0gcmVxdWlyZShcIi4vc2lnbmF0dXJlLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2lnbmF0dXJlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzaWduYXR1cmVfanNfMS5TaWduYXR1cmU7IH0gfSk7XG4vKipcbiAqICBPbmNlIGNhbGxlZCwgcHJldmVudHMgYW55IGZ1dHVyZSBjaGFuZ2UgdG8gdGhlIHVuZGVybHlpbmcgY3J5cHRvZ3JhcGhpY1xuICogIHByaW1pdGl2ZXMgdXNpbmcgdGhlIGBgLnJlZ2lzdGVyYGAgZmVhdHVyZSBmb3IgaG9va3MuXG4gKi9cbmZ1bmN0aW9uIGxvY2soKSB7XG4gICAgaG1hY19qc18xLmNvbXB1dGVIbWFjLmxvY2soKTtcbiAgICBrZWNjYWtfanNfMS5rZWNjYWsyNTYubG9jaygpO1xuICAgIHBia2RmMl9qc18xLnBia2RmMi5sb2NrKCk7XG4gICAgcmFuZG9tX2pzXzEucmFuZG9tQnl0ZXMubG9jaygpO1xuICAgIHJpcGVtZDE2MF9qc18xLnJpcGVtZDE2MC5sb2NrKCk7XG4gICAgc2NyeXB0X2pzXzEuc2NyeXB0LmxvY2soKTtcbiAgICBzY3J5cHRfanNfMS5zY3J5cHRTeW5jLmxvY2soKTtcbiAgICBzaGEyX2pzXzEuc2hhMjU2LmxvY2soKTtcbiAgICBzaGEyX2pzXzEuc2hhNTEyLmxvY2soKTtcbiAgICByYW5kb21fanNfMS5yYW5kb21CeXRlcy5sb2NrKCk7XG59XG5leHBvcnRzLmxvY2sgPSBsb2NrO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibG9jayIsIlNpZ25hdHVyZSIsIlNpZ25pbmdLZXkiLCJzY3J5cHRTeW5jIiwic2NyeXB0IiwicGJrZGYyIiwic2hhNTEyIiwic2hhMjU2IiwicmlwZW1kMTYwIiwia2VjY2FrMjU2IiwicmFuZG9tQnl0ZXMiLCJjb21wdXRlSG1hYyIsImhtYWNfanNfMSIsInJlcXVpcmUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwia2VjY2FrX2pzXzEiLCJyaXBlbWQxNjBfanNfMSIsInBia2RmMl9qc18xIiwicmFuZG9tX2pzXzEiLCJzY3J5cHRfanNfMSIsInNoYTJfanNfMSIsInNpZ25pbmdfa2V5X2pzXzEiLCJzaWduYXR1cmVfanNfMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/crypto/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/crypto/keccak.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/crypto/keccak.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  Cryptographic hashing functions\n *\n *  @_subsection: api/crypto:Hash Functions [about-crypto-hashing]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.keccak256 = void 0;\nconst sha3_1 = __webpack_require__(/*! @noble/hashes/sha3 */ \"(rsc)/./node_modules/@noble/hashes/sha3.js\");\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nlet locked = false;\nconst _keccak256 = function(data) {\n    return (0, sha3_1.keccak_256)(data);\n};\nlet __keccak256 = _keccak256;\n/**\n *  Compute the cryptographic KECCAK256 hash of %%data%%.\n *\n *  The %%data%% **must** be a data representation, to compute the\n *  hash of UTF-8 data use the [[id]] function.\n *\n *  @returns DataHexstring\n *  @example:\n *    keccak256(\"0x\")\n *    //_result:\n *\n *    keccak256(\"0x1337\")\n *    //_result:\n *\n *    keccak256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n *    // Strings are assumed to be DataHexString, otherwise it will\n *    // throw. To hash UTF-8 data, see the note above.\n *    keccak256(\"Hello World\")\n *    //_error:\n */ function keccak256(_data) {\n    const data = (0, index_js_1.getBytes)(_data, \"data\");\n    return (0, index_js_1.hexlify)(__keccak256(data));\n}\nexports.keccak256 = keccak256;\nkeccak256._ = _keccak256;\nkeccak256.lock = function() {\n    locked = true;\n};\nkeccak256.register = function(func) {\n    if (locked) {\n        throw new TypeError(\"keccak256 is locked\");\n    }\n    __keccak256 = func;\n};\nObject.freeze(keccak256); //# sourceMappingURL=keccak.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9jcnlwdG8va2VjY2FrLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Q0FJQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUcsS0FBSztBQUN6QixNQUFNRyxTQUFTQyxtQkFBT0EsQ0FBQyxzRUFBb0I7QUFDM0MsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUMsa0ZBQW1CO0FBQzlDLElBQUlFLFNBQVM7QUFDYixNQUFNQyxhQUFhLFNBQVVDLElBQUk7SUFDN0IsT0FBTyxDQUFDLEdBQUdMLE9BQU9NLFVBQVUsRUFBRUQ7QUFDbEM7QUFDQSxJQUFJRSxjQUFjSDtBQUNsQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBcUJDLEdBQ0QsU0FBU0wsVUFBVVMsS0FBSztJQUNwQixNQUFNSCxPQUFPLENBQUMsR0FBR0gsV0FBV08sUUFBUSxFQUFFRCxPQUFPO0lBQzdDLE9BQU8sQ0FBQyxHQUFHTixXQUFXUSxPQUFPLEVBQUVILFlBQVlGO0FBQy9DO0FBQ0FSLGlCQUFpQixHQUFHRTtBQUNwQkEsVUFBVVksQ0FBQyxHQUFHUDtBQUNkTCxVQUFVYSxJQUFJLEdBQUc7SUFBY1QsU0FBUztBQUFNO0FBQzlDSixVQUFVYyxRQUFRLEdBQUcsU0FBVUMsSUFBSTtJQUMvQixJQUFJWCxRQUFRO1FBQ1IsTUFBTSxJQUFJWSxVQUFVO0lBQ3hCO0lBQ0FSLGNBQWNPO0FBQ2xCO0FBQ0FuQixPQUFPcUIsTUFBTSxDQUFDakIsWUFDZCxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9jcnlwdG8va2VjY2FrLmpzP2U1MGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqICBDcnlwdG9ncmFwaGljIGhhc2hpbmcgZnVuY3Rpb25zXG4gKlxuICogIEBfc3Vic2VjdGlvbjogYXBpL2NyeXB0bzpIYXNoIEZ1bmN0aW9ucyBbYWJvdXQtY3J5cHRvLWhhc2hpbmddXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMua2VjY2FrMjU2ID0gdm9pZCAwO1xuY29uc3Qgc2hhM18xID0gcmVxdWlyZShcIkBub2JsZS9oYXNoZXMvc2hhM1wiKTtcbmNvbnN0IGluZGV4X2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvaW5kZXguanNcIik7XG5sZXQgbG9ja2VkID0gZmFsc2U7XG5jb25zdCBfa2VjY2FrMjU2ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gKDAsIHNoYTNfMS5rZWNjYWtfMjU2KShkYXRhKTtcbn07XG5sZXQgX19rZWNjYWsyNTYgPSBfa2VjY2FrMjU2O1xuLyoqXG4gKiAgQ29tcHV0ZSB0aGUgY3J5cHRvZ3JhcGhpYyBLRUNDQUsyNTYgaGFzaCBvZiAlJWRhdGElJS5cbiAqXG4gKiAgVGhlICUlZGF0YSUlICoqbXVzdCoqIGJlIGEgZGF0YSByZXByZXNlbnRhdGlvbiwgdG8gY29tcHV0ZSB0aGVcbiAqICBoYXNoIG9mIFVURi04IGRhdGEgdXNlIHRoZSBbW2lkXV0gZnVuY3Rpb24uXG4gKlxuICogIEByZXR1cm5zIERhdGFIZXhzdHJpbmdcbiAqICBAZXhhbXBsZTpcbiAqICAgIGtlY2NhazI1NihcIjB4XCIpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAga2VjY2FrMjU2KFwiMHgxMzM3XCIpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAga2VjY2FrMjU2KG5ldyBVaW50OEFycmF5KFsgMHgxMywgMHgzNyBdKSlcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBTdHJpbmdzIGFyZSBhc3N1bWVkIHRvIGJlIERhdGFIZXhTdHJpbmcsIG90aGVyd2lzZSBpdCB3aWxsXG4gKiAgICAvLyB0aHJvdy4gVG8gaGFzaCBVVEYtOCBkYXRhLCBzZWUgdGhlIG5vdGUgYWJvdmUuXG4gKiAgICBrZWNjYWsyNTYoXCJIZWxsbyBXb3JsZFwiKVxuICogICAgLy9fZXJyb3I6XG4gKi9cbmZ1bmN0aW9uIGtlY2NhazI1NihfZGF0YSkge1xuICAgIGNvbnN0IGRhdGEgPSAoMCwgaW5kZXhfanNfMS5nZXRCeXRlcykoX2RhdGEsIFwiZGF0YVwiKTtcbiAgICByZXR1cm4gKDAsIGluZGV4X2pzXzEuaGV4bGlmeSkoX19rZWNjYWsyNTYoZGF0YSkpO1xufVxuZXhwb3J0cy5rZWNjYWsyNTYgPSBrZWNjYWsyNTY7XG5rZWNjYWsyNTYuXyA9IF9rZWNjYWsyNTY7XG5rZWNjYWsyNTYubG9jayA9IGZ1bmN0aW9uICgpIHsgbG9ja2VkID0gdHJ1ZTsgfTtcbmtlY2NhazI1Ni5yZWdpc3RlciA9IGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgaWYgKGxvY2tlZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwia2VjY2FrMjU2IGlzIGxvY2tlZFwiKTtcbiAgICB9XG4gICAgX19rZWNjYWsyNTYgPSBmdW5jO1xufTtcbk9iamVjdC5mcmVlemUoa2VjY2FrMjU2KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtlY2Nhay5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJrZWNjYWsyNTYiLCJzaGEzXzEiLCJyZXF1aXJlIiwiaW5kZXhfanNfMSIsImxvY2tlZCIsIl9rZWNjYWsyNTYiLCJkYXRhIiwia2VjY2FrXzI1NiIsIl9fa2VjY2FrMjU2IiwiX2RhdGEiLCJnZXRCeXRlcyIsImhleGxpZnkiLCJfIiwibG9jayIsInJlZ2lzdGVyIiwiZnVuYyIsIlR5cGVFcnJvciIsImZyZWV6ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/crypto/keccak.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/crypto/pbkdf2.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/crypto/pbkdf2.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  A **Password-Based Key-Derivation Function** is designed to create\n *  a sequence of bytes suitible as a **key** from a human-rememberable\n *  password.\n *\n *  @_subsection: api/crypto:Passwords  [about-pbkdf]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.pbkdf2 = void 0;\nconst crypto_js_1 = __webpack_require__(/*! ./crypto.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/crypto.js\");\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nlet locked = false;\nconst _pbkdf2 = function(password, salt, iterations, keylen, algo) {\n    return (0, crypto_js_1.pbkdf2Sync)(password, salt, iterations, keylen, algo);\n};\nlet __pbkdf2 = _pbkdf2;\n/**\n *  Return the [[link-pbkdf2]] for %%keylen%% bytes for %%password%% using\n *  the %%salt%% and using %%iterations%% of %%algo%%.\n *\n *  This PBKDF is outdated and should not be used in new projects, but is\n *  required to decrypt older files.\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the PBKDF2\n *    pbkdf2(passwordBytes, salt, 1024, 16, \"sha256\")\n *    //_result:\n */ function pbkdf2(_password, _salt, iterations, keylen, algo) {\n    const password = (0, index_js_1.getBytes)(_password, \"password\");\n    const salt = (0, index_js_1.getBytes)(_salt, \"salt\");\n    return (0, index_js_1.hexlify)(__pbkdf2(password, salt, iterations, keylen, algo));\n}\nexports.pbkdf2 = pbkdf2;\npbkdf2._ = _pbkdf2;\npbkdf2.lock = function() {\n    locked = true;\n};\npbkdf2.register = function(func) {\n    if (locked) {\n        throw new Error(\"pbkdf2 is locked\");\n    }\n    __pbkdf2 = func;\n};\nObject.freeze(pbkdf2); //# sourceMappingURL=pbkdf2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9jcnlwdG8vcGJrZGYyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUcsS0FBSztBQUN0QixNQUFNRyxjQUFjQyxtQkFBT0EsQ0FBQyw4RUFBYTtBQUN6QyxNQUFNQyxhQUFhRCxtQkFBT0EsQ0FBQyxrRkFBbUI7QUFDOUMsSUFBSUUsU0FBUztBQUNiLE1BQU1DLFVBQVUsU0FBVUMsUUFBUSxFQUFFQyxJQUFJLEVBQUVDLFVBQVUsRUFBRUMsTUFBTSxFQUFFQyxJQUFJO0lBQzlELE9BQU8sQ0FBQyxHQUFHVCxZQUFZVSxVQUFVLEVBQUVMLFVBQVVDLE1BQU1DLFlBQVlDLFFBQVFDO0FBQzNFO0FBQ0EsSUFBSUUsV0FBV1A7QUFDZjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQW1CQyxHQUNELFNBQVNMLE9BQU9hLFNBQVMsRUFBRUMsS0FBSyxFQUFFTixVQUFVLEVBQUVDLE1BQU0sRUFBRUMsSUFBSTtJQUN0RCxNQUFNSixXQUFXLENBQUMsR0FBR0gsV0FBV1ksUUFBUSxFQUFFRixXQUFXO0lBQ3JELE1BQU1OLE9BQU8sQ0FBQyxHQUFHSixXQUFXWSxRQUFRLEVBQUVELE9BQU87SUFDN0MsT0FBTyxDQUFDLEdBQUdYLFdBQVdhLE9BQU8sRUFBRUosU0FBU04sVUFBVUMsTUFBTUMsWUFBWUMsUUFBUUM7QUFDaEY7QUFDQVosY0FBYyxHQUFHRTtBQUNqQkEsT0FBT2lCLENBQUMsR0FBR1o7QUFDWEwsT0FBT2tCLElBQUksR0FBRztJQUFjZCxTQUFTO0FBQU07QUFDM0NKLE9BQU9tQixRQUFRLEdBQUcsU0FBVUMsSUFBSTtJQUM1QixJQUFJaEIsUUFBUTtRQUNSLE1BQU0sSUFBSWlCLE1BQU07SUFDcEI7SUFDQVQsV0FBV1E7QUFDZjtBQUNBeEIsT0FBTzBCLE1BQU0sQ0FBQ3RCLFNBQ2Qsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvY3J5cHRvL3Bia2RmMi5qcz80MDIzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiAgQSAqKlBhc3N3b3JkLUJhc2VkIEtleS1EZXJpdmF0aW9uIEZ1bmN0aW9uKiogaXMgZGVzaWduZWQgdG8gY3JlYXRlXG4gKiAgYSBzZXF1ZW5jZSBvZiBieXRlcyBzdWl0aWJsZSBhcyBhICoqa2V5KiogZnJvbSBhIGh1bWFuLXJlbWVtYmVyYWJsZVxuICogIHBhc3N3b3JkLlxuICpcbiAqICBAX3N1YnNlY3Rpb246IGFwaS9jcnlwdG86UGFzc3dvcmRzICBbYWJvdXQtcGJrZGZdXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGJrZGYyID0gdm9pZCAwO1xuY29uc3QgY3J5cHRvX2pzXzEgPSByZXF1aXJlKFwiLi9jcnlwdG8uanNcIik7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4uL3V0aWxzL2luZGV4LmpzXCIpO1xubGV0IGxvY2tlZCA9IGZhbHNlO1xuY29uc3QgX3Bia2RmMiA9IGZ1bmN0aW9uIChwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBhbGdvKSB7XG4gICAgcmV0dXJuICgwLCBjcnlwdG9fanNfMS5wYmtkZjJTeW5jKShwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBhbGdvKTtcbn07XG5sZXQgX19wYmtkZjIgPSBfcGJrZGYyO1xuLyoqXG4gKiAgUmV0dXJuIHRoZSBbW2xpbmstcGJrZGYyXV0gZm9yICUla2V5bGVuJSUgYnl0ZXMgZm9yICUlcGFzc3dvcmQlJSB1c2luZ1xuICogIHRoZSAlJXNhbHQlJSBhbmQgdXNpbmcgJSVpdGVyYXRpb25zJSUgb2YgJSVhbGdvJSUuXG4gKlxuICogIFRoaXMgUEJLREYgaXMgb3V0ZGF0ZWQgYW5kIHNob3VsZCBub3QgYmUgdXNlZCBpbiBuZXcgcHJvamVjdHMsIGJ1dCBpc1xuICogIHJlcXVpcmVkIHRvIGRlY3J5cHQgb2xkZXIgZmlsZXMuXG4gKlxuICogIEBleGFtcGxlOlxuICogICAgLy8gVGhlIHBhc3N3b3JkIG11c3QgYmUgY29udmVydGVkIHRvIGJ5dGVzLCBhbmQgaXQgaXMgZ2VuZXJhbGx5XG4gKiAgICAvLyBiZXN0IHByYWN0aWNlcyB0byBlbnN1cmUgdGhlIHN0cmluZyBoYXMgYmVlbiBub3JtYWxpemVkLiBNYW55XG4gKiAgICAvLyBmb3JtYXRzIGV4cGxpY2l0bHkgaW5kaWNhdGUgdGhlIG5vcm1hbGl6YXRpb24gZm9ybSB0byB1c2UuXG4gKiAgICBwYXNzd29yZCA9IFwiaGVsbG9cIlxuICogICAgcGFzc3dvcmRCeXRlcyA9IHRvVXRmOEJ5dGVzKHBhc3N3b3JkLCBcIk5GS0NcIilcbiAqXG4gKiAgICBzYWx0ID0gaWQoXCJzb21lLXNhbHRcIilcbiAqXG4gKiAgICAvLyBDb21wdXRlIHRoZSBQQktERjJcbiAqICAgIHBia2RmMihwYXNzd29yZEJ5dGVzLCBzYWx0LCAxMDI0LCAxNiwgXCJzaGEyNTZcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqL1xuZnVuY3Rpb24gcGJrZGYyKF9wYXNzd29yZCwgX3NhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgYWxnbykge1xuICAgIGNvbnN0IHBhc3N3b3JkID0gKDAsIGluZGV4X2pzXzEuZ2V0Qnl0ZXMpKF9wYXNzd29yZCwgXCJwYXNzd29yZFwiKTtcbiAgICBjb25zdCBzYWx0ID0gKDAsIGluZGV4X2pzXzEuZ2V0Qnl0ZXMpKF9zYWx0LCBcInNhbHRcIik7XG4gICAgcmV0dXJuICgwLCBpbmRleF9qc18xLmhleGxpZnkpKF9fcGJrZGYyKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGFsZ28pKTtcbn1cbmV4cG9ydHMucGJrZGYyID0gcGJrZGYyO1xucGJrZGYyLl8gPSBfcGJrZGYyO1xucGJrZGYyLmxvY2sgPSBmdW5jdGlvbiAoKSB7IGxvY2tlZCA9IHRydWU7IH07XG5wYmtkZjIucmVnaXN0ZXIgPSBmdW5jdGlvbiAoZnVuYykge1xuICAgIGlmIChsb2NrZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicGJrZGYyIGlzIGxvY2tlZFwiKTtcbiAgICB9XG4gICAgX19wYmtkZjIgPSBmdW5jO1xufTtcbk9iamVjdC5mcmVlemUocGJrZGYyKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBia2RmMi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwYmtkZjIiLCJjcnlwdG9fanNfMSIsInJlcXVpcmUiLCJpbmRleF9qc18xIiwibG9ja2VkIiwiX3Bia2RmMiIsInBhc3N3b3JkIiwic2FsdCIsIml0ZXJhdGlvbnMiLCJrZXlsZW4iLCJhbGdvIiwicGJrZGYyU3luYyIsIl9fcGJrZGYyIiwiX3Bhc3N3b3JkIiwiX3NhbHQiLCJnZXRCeXRlcyIsImhleGxpZnkiLCJfIiwibG9jayIsInJlZ2lzdGVyIiwiZnVuYyIsIkVycm9yIiwiZnJlZXplIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/crypto/pbkdf2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/crypto/random.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/crypto/random.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.randomBytes = void 0;\n/**\n *  A **Cryptographically Secure Random Value** is one that has been\n *  generated with additional care take to prevent side-channels\n *  from allowing others to detect it and prevent others from through\n *  coincidence generate the same values.\n *\n *  @_subsection: api/crypto:Random Values  [about-crypto-random]\n */ const crypto_js_1 = __webpack_require__(/*! ./crypto.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/crypto.js\");\nlet locked = false;\nconst _randomBytes = function(length) {\n    return new Uint8Array((0, crypto_js_1.randomBytes)(length));\n};\nlet __randomBytes = _randomBytes;\n/**\n *  Return %%length%% bytes of cryptographically secure random data.\n *\n *  @example:\n *    randomBytes(8)\n *    //_result:\n */ function randomBytes(length) {\n    return __randomBytes(length);\n}\nexports.randomBytes = randomBytes;\nrandomBytes._ = _randomBytes;\nrandomBytes.lock = function() {\n    locked = true;\n};\nrandomBytes.register = function(func) {\n    if (locked) {\n        throw new Error(\"randomBytes is locked\");\n    }\n    __randomBytes = func;\n};\nObject.freeze(randomBytes); //# sourceMappingURL=random.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9jcnlwdG8vcmFuZG9tLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBRyxLQUFLO0FBQzNCOzs7Ozs7O0NBT0MsR0FDRCxNQUFNRyxjQUFjQyxtQkFBT0EsQ0FBQyw4RUFBYTtBQUN6QyxJQUFJQyxTQUFTO0FBQ2IsTUFBTUMsZUFBZSxTQUFVQyxNQUFNO0lBQ2pDLE9BQU8sSUFBSUMsV0FBVyxDQUFDLEdBQUdMLFlBQVlELFdBQVcsRUFBRUs7QUFDdkQ7QUFDQSxJQUFJRSxnQkFBZ0JIO0FBQ3BCOzs7Ozs7Q0FNQyxHQUNELFNBQVNKLFlBQVlLLE1BQU07SUFDdkIsT0FBT0UsY0FBY0Y7QUFDekI7QUFDQVAsbUJBQW1CLEdBQUdFO0FBQ3RCQSxZQUFZUSxDQUFDLEdBQUdKO0FBQ2hCSixZQUFZUyxJQUFJLEdBQUc7SUFBY04sU0FBUztBQUFNO0FBQ2hESCxZQUFZVSxRQUFRLEdBQUcsU0FBVUMsSUFBSTtJQUNqQyxJQUFJUixRQUFRO1FBQ1IsTUFBTSxJQUFJUyxNQUFNO0lBQ3BCO0lBQ0FMLGdCQUFnQkk7QUFDcEI7QUFDQWYsT0FBT2lCLE1BQU0sQ0FBQ2IsY0FDZCxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9jcnlwdG8vcmFuZG9tLmpzP2I4NTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJhbmRvbUJ5dGVzID0gdm9pZCAwO1xuLyoqXG4gKiAgQSAqKkNyeXB0b2dyYXBoaWNhbGx5IFNlY3VyZSBSYW5kb20gVmFsdWUqKiBpcyBvbmUgdGhhdCBoYXMgYmVlblxuICogIGdlbmVyYXRlZCB3aXRoIGFkZGl0aW9uYWwgY2FyZSB0YWtlIHRvIHByZXZlbnQgc2lkZS1jaGFubmVsc1xuICogIGZyb20gYWxsb3dpbmcgb3RoZXJzIHRvIGRldGVjdCBpdCBhbmQgcHJldmVudCBvdGhlcnMgZnJvbSB0aHJvdWdoXG4gKiAgY29pbmNpZGVuY2UgZ2VuZXJhdGUgdGhlIHNhbWUgdmFsdWVzLlxuICpcbiAqICBAX3N1YnNlY3Rpb246IGFwaS9jcnlwdG86UmFuZG9tIFZhbHVlcyAgW2Fib3V0LWNyeXB0by1yYW5kb21dXG4gKi9cbmNvbnN0IGNyeXB0b19qc18xID0gcmVxdWlyZShcIi4vY3J5cHRvLmpzXCIpO1xubGV0IGxvY2tlZCA9IGZhbHNlO1xuY29uc3QgX3JhbmRvbUJ5dGVzID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheSgoMCwgY3J5cHRvX2pzXzEucmFuZG9tQnl0ZXMpKGxlbmd0aCkpO1xufTtcbmxldCBfX3JhbmRvbUJ5dGVzID0gX3JhbmRvbUJ5dGVzO1xuLyoqXG4gKiAgUmV0dXJuICUlbGVuZ3RoJSUgYnl0ZXMgb2YgY3J5cHRvZ3JhcGhpY2FsbHkgc2VjdXJlIHJhbmRvbSBkYXRhLlxuICpcbiAqICBAZXhhbXBsZTpcbiAqICAgIHJhbmRvbUJ5dGVzKDgpXG4gKiAgICAvL19yZXN1bHQ6XG4gKi9cbmZ1bmN0aW9uIHJhbmRvbUJ5dGVzKGxlbmd0aCkge1xuICAgIHJldHVybiBfX3JhbmRvbUJ5dGVzKGxlbmd0aCk7XG59XG5leHBvcnRzLnJhbmRvbUJ5dGVzID0gcmFuZG9tQnl0ZXM7XG5yYW5kb21CeXRlcy5fID0gX3JhbmRvbUJ5dGVzO1xucmFuZG9tQnl0ZXMubG9jayA9IGZ1bmN0aW9uICgpIHsgbG9ja2VkID0gdHJ1ZTsgfTtcbnJhbmRvbUJ5dGVzLnJlZ2lzdGVyID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICBpZiAobG9ja2VkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInJhbmRvbUJ5dGVzIGlzIGxvY2tlZFwiKTtcbiAgICB9XG4gICAgX19yYW5kb21CeXRlcyA9IGZ1bmM7XG59O1xuT2JqZWN0LmZyZWV6ZShyYW5kb21CeXRlcyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYW5kb20uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmFuZG9tQnl0ZXMiLCJjcnlwdG9fanNfMSIsInJlcXVpcmUiLCJsb2NrZWQiLCJfcmFuZG9tQnl0ZXMiLCJsZW5ndGgiLCJVaW50OEFycmF5IiwiX19yYW5kb21CeXRlcyIsIl8iLCJsb2NrIiwicmVnaXN0ZXIiLCJmdW5jIiwiRXJyb3IiLCJmcmVlemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/crypto/random.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/crypto/ripemd160.js":
/*!**************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/crypto/ripemd160.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ripemd160 = void 0;\nconst ripemd160_1 = __webpack_require__(/*! @noble/hashes/ripemd160 */ \"(rsc)/./node_modules/@noble/hashes/ripemd160.js\");\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nlet locked = false;\nconst _ripemd160 = function(data) {\n    return (0, ripemd160_1.ripemd160)(data);\n};\nlet __ripemd160 = _ripemd160;\n/**\n *  Compute the cryptographic RIPEMD-160 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    ripemd160(\"0x\")\n *    //_result:\n *\n *    ripemd160(\"0x1337\")\n *    //_result:\n *\n *    ripemd160(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */ function ripemd160(_data) {\n    const data = (0, index_js_1.getBytes)(_data, \"data\");\n    return (0, index_js_1.hexlify)(__ripemd160(data));\n}\nexports.ripemd160 = ripemd160;\nripemd160._ = _ripemd160;\nripemd160.lock = function() {\n    locked = true;\n};\nripemd160.register = function(func) {\n    if (locked) {\n        throw new TypeError(\"ripemd160 is locked\");\n    }\n    __ripemd160 = func;\n};\nObject.freeze(ripemd160); //# sourceMappingURL=ripemd160.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9jcnlwdG8vcmlwZW1kMTYwLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBRyxLQUFLO0FBQ3pCLE1BQU1HLGNBQWNDLG1CQUFPQSxDQUFDLGdGQUF5QjtBQUNyRCxNQUFNQyxhQUFhRCxtQkFBT0EsQ0FBQyxrRkFBbUI7QUFDOUMsSUFBSUUsU0FBUztBQUNiLE1BQU1DLGFBQWEsU0FBVUMsSUFBSTtJQUM3QixPQUFPLENBQUMsR0FBR0wsWUFBWUQsU0FBUyxFQUFFTTtBQUN0QztBQUNBLElBQUlDLGNBQWNGO0FBQ2xCOzs7Ozs7Ozs7Ozs7Ozs7O0NBZ0JDLEdBQ0QsU0FBU0wsVUFBVVEsS0FBSztJQUNwQixNQUFNRixPQUFPLENBQUMsR0FBR0gsV0FBV00sUUFBUSxFQUFFRCxPQUFPO0lBQzdDLE9BQU8sQ0FBQyxHQUFHTCxXQUFXTyxPQUFPLEVBQUVILFlBQVlEO0FBQy9DO0FBQ0FSLGlCQUFpQixHQUFHRTtBQUNwQkEsVUFBVVcsQ0FBQyxHQUFHTjtBQUNkTCxVQUFVWSxJQUFJLEdBQUc7SUFBY1IsU0FBUztBQUFNO0FBQzlDSixVQUFVYSxRQUFRLEdBQUcsU0FBVUMsSUFBSTtJQUMvQixJQUFJVixRQUFRO1FBQ1IsTUFBTSxJQUFJVyxVQUFVO0lBQ3hCO0lBQ0FSLGNBQWNPO0FBQ2xCO0FBQ0FsQixPQUFPb0IsTUFBTSxDQUFDaEIsWUFDZCxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9jcnlwdG8vcmlwZW1kMTYwLmpzPzY4YTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJpcGVtZDE2MCA9IHZvaWQgMDtcbmNvbnN0IHJpcGVtZDE2MF8xID0gcmVxdWlyZShcIkBub2JsZS9oYXNoZXMvcmlwZW1kMTYwXCIpO1xuY29uc3QgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9pbmRleC5qc1wiKTtcbmxldCBsb2NrZWQgPSBmYWxzZTtcbmNvbnN0IF9yaXBlbWQxNjAgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiAoMCwgcmlwZW1kMTYwXzEucmlwZW1kMTYwKShkYXRhKTtcbn07XG5sZXQgX19yaXBlbWQxNjAgPSBfcmlwZW1kMTYwO1xuLyoqXG4gKiAgQ29tcHV0ZSB0aGUgY3J5cHRvZ3JhcGhpYyBSSVBFTUQtMTYwIGhhc2ggb2YgJSVkYXRhJSUuXG4gKlxuICogIEBfZG9jbG9jOiBhcGkvY3J5cHRvOkhhc2ggRnVuY3Rpb25zXG4gKiAgQHJldHVybnMgRGF0YUhleHN0cmluZ1xuICpcbiAqICBAZXhhbXBsZTpcbiAqICAgIHJpcGVtZDE2MChcIjB4XCIpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAgcmlwZW1kMTYwKFwiMHgxMzM3XCIpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAgcmlwZW1kMTYwKG5ldyBVaW50OEFycmF5KFsgMHgxMywgMHgzNyBdKSlcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKi9cbmZ1bmN0aW9uIHJpcGVtZDE2MChfZGF0YSkge1xuICAgIGNvbnN0IGRhdGEgPSAoMCwgaW5kZXhfanNfMS5nZXRCeXRlcykoX2RhdGEsIFwiZGF0YVwiKTtcbiAgICByZXR1cm4gKDAsIGluZGV4X2pzXzEuaGV4bGlmeSkoX19yaXBlbWQxNjAoZGF0YSkpO1xufVxuZXhwb3J0cy5yaXBlbWQxNjAgPSByaXBlbWQxNjA7XG5yaXBlbWQxNjAuXyA9IF9yaXBlbWQxNjA7XG5yaXBlbWQxNjAubG9jayA9IGZ1bmN0aW9uICgpIHsgbG9ja2VkID0gdHJ1ZTsgfTtcbnJpcGVtZDE2MC5yZWdpc3RlciA9IGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgaWYgKGxvY2tlZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwicmlwZW1kMTYwIGlzIGxvY2tlZFwiKTtcbiAgICB9XG4gICAgX19yaXBlbWQxNjAgPSBmdW5jO1xufTtcbk9iamVjdC5mcmVlemUocmlwZW1kMTYwKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJpcGVtZDE2MC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJyaXBlbWQxNjAiLCJyaXBlbWQxNjBfMSIsInJlcXVpcmUiLCJpbmRleF9qc18xIiwibG9ja2VkIiwiX3JpcGVtZDE2MCIsImRhdGEiLCJfX3JpcGVtZDE2MCIsIl9kYXRhIiwiZ2V0Qnl0ZXMiLCJoZXhsaWZ5IiwiXyIsImxvY2siLCJyZWdpc3RlciIsImZ1bmMiLCJUeXBlRXJyb3IiLCJmcmVlemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/crypto/ripemd160.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/crypto/scrypt.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/crypto/scrypt.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.scryptSync = exports.scrypt = void 0;\nconst scrypt_1 = __webpack_require__(/*! @noble/hashes/scrypt */ \"(rsc)/./node_modules/@noble/hashes/scrypt.js\");\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nlet lockedSync = false, lockedAsync = false;\nconst _scryptAsync = async function(passwd, salt, N, r, p, dkLen, onProgress) {\n    return await (0, scrypt_1.scryptAsync)(passwd, salt, {\n        N,\n        r,\n        p,\n        dkLen,\n        onProgress\n    });\n};\nconst _scryptSync = function(passwd, salt, N, r, p, dkLen) {\n    return (0, scrypt_1.scrypt)(passwd, salt, {\n        N,\n        r,\n        p,\n        dkLen\n    });\n};\nlet __scryptAsync = _scryptAsync;\nlet __scryptSync = _scryptSync;\n/**\n *  The [[link-wiki-scrypt]] uses a memory and cpu hard method of\n *  derivation to increase the resource cost to brute-force a password\n *  for a given key.\n *\n *  This means this algorithm is intentionally slow, and can be tuned to\n *  become slower. As computation and memory speed improve over time,\n *  increasing the difficulty maintains the cost of an attacker.\n *\n *  For example, if a target time of 5 seconds is used, a legitimate user\n *  which knows their password requires only 5 seconds to unlock their\n *  account. A 6 character password has 68 billion possibilities, which\n *  would require an attacker to invest over 10,000 years of CPU time. This\n *  is of course a crude example (as password generally aren't random),\n *  but demonstrates to value of imposing large costs to decryption.\n *\n *  For this reason, if building a UI which involved decrypting or\n *  encrypting datsa using scrypt, it is recommended to use a\n *  [[ProgressCallback]] (as event short periods can seem lik an eternity\n *  if the UI freezes). Including the phrase //\"decrypting\"// in the UI\n *  can also help, assuring the user their waiting is for a good reason.\n *\n *  @_docloc: api/crypto:Passwords\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the scrypt\n *    scrypt(passwordBytes, salt, 1024, 8, 1, 16)\n *    //_result:\n */ async function scrypt(_passwd, _salt, N, r, p, dkLen, progress) {\n    const passwd = (0, index_js_1.getBytes)(_passwd, \"passwd\");\n    const salt = (0, index_js_1.getBytes)(_salt, \"salt\");\n    return (0, index_js_1.hexlify)(await __scryptAsync(passwd, salt, N, r, p, dkLen, progress));\n}\nexports.scrypt = scrypt;\nscrypt._ = _scryptAsync;\nscrypt.lock = function() {\n    lockedAsync = true;\n};\nscrypt.register = function(func) {\n    if (lockedAsync) {\n        throw new Error(\"scrypt is locked\");\n    }\n    __scryptAsync = func;\n};\nObject.freeze(scrypt);\n/**\n *  Provides a synchronous variant of [[scrypt]].\n *\n *  This will completely lock up and freeze the UI in a browser and will\n *  prevent any event loop from progressing. For this reason, it is\n *  preferred to use the [async variant](scrypt).\n *\n *  @_docloc: api/crypto:Passwords\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the scrypt\n *    scryptSync(passwordBytes, salt, 1024, 8, 1, 16)\n *    //_result:\n */ function scryptSync(_passwd, _salt, N, r, p, dkLen) {\n    const passwd = (0, index_js_1.getBytes)(_passwd, \"passwd\");\n    const salt = (0, index_js_1.getBytes)(_salt, \"salt\");\n    return (0, index_js_1.hexlify)(__scryptSync(passwd, salt, N, r, p, dkLen));\n}\nexports.scryptSync = scryptSync;\nscryptSync._ = _scryptSync;\nscryptSync.lock = function() {\n    lockedSync = true;\n};\nscryptSync.register = function(func) {\n    if (lockedSync) {\n        throw new Error(\"scryptSync is locked\");\n    }\n    __scryptSync = func;\n};\nObject.freeze(scryptSync); //# sourceMappingURL=scrypt.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/crypto/scrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/crypto/sha2.js":
/*!*********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/crypto/sha2.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.sha512 = exports.sha256 = void 0;\nconst crypto_js_1 = __webpack_require__(/*! ./crypto.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/crypto.js\");\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst _sha256 = function(data) {\n    return (0, crypto_js_1.createHash)(\"sha256\").update(data).digest();\n};\nconst _sha512 = function(data) {\n    return (0, crypto_js_1.createHash)(\"sha512\").update(data).digest();\n};\nlet __sha256 = _sha256;\nlet __sha512 = _sha512;\nlet locked256 = false, locked512 = false;\n/**\n *  Compute the cryptographic SHA2-256 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha256(\"0x\")\n *    //_result:\n *\n *    sha256(\"0x1337\")\n *    //_result:\n *\n *    sha256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */ function sha256(_data) {\n    const data = (0, index_js_1.getBytes)(_data, \"data\");\n    return (0, index_js_1.hexlify)(__sha256(data));\n}\nexports.sha256 = sha256;\nsha256._ = _sha256;\nsha256.lock = function() {\n    locked256 = true;\n};\nsha256.register = function(func) {\n    if (locked256) {\n        throw new Error(\"sha256 is locked\");\n    }\n    __sha256 = func;\n};\nObject.freeze(sha256);\n/**\n *  Compute the cryptographic SHA2-512 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha512(\"0x\")\n *    //_result:\n *\n *    sha512(\"0x1337\")\n *    //_result:\n *\n *    sha512(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n */ function sha512(_data) {\n    const data = (0, index_js_1.getBytes)(_data, \"data\");\n    return (0, index_js_1.hexlify)(__sha512(data));\n}\nexports.sha512 = sha512;\nsha512._ = _sha512;\nsha512.lock = function() {\n    locked512 = true;\n};\nsha512.register = function(func) {\n    if (locked512) {\n        throw new Error(\"sha512 is locked\");\n    }\n    __sha512 = func;\n};\nObject.freeze(sha256); //# sourceMappingURL=sha2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9jcnlwdG8vc2hhMi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHQSxjQUFjLEdBQUcsS0FBSztBQUN2QyxNQUFNSSxjQUFjQyxtQkFBT0EsQ0FBQyw4RUFBYTtBQUN6QyxNQUFNQyxhQUFhRCxtQkFBT0EsQ0FBQyxrRkFBbUI7QUFDOUMsTUFBTUUsVUFBVSxTQUFVQyxJQUFJO0lBQzFCLE9BQU8sQ0FBQyxHQUFHSixZQUFZSyxVQUFVLEVBQUUsVUFBVUMsTUFBTSxDQUFDRixNQUFNRyxNQUFNO0FBQ3BFO0FBQ0EsTUFBTUMsVUFBVSxTQUFVSixJQUFJO0lBQzFCLE9BQU8sQ0FBQyxHQUFHSixZQUFZSyxVQUFVLEVBQUUsVUFBVUMsTUFBTSxDQUFDRixNQUFNRyxNQUFNO0FBQ3BFO0FBQ0EsSUFBSUUsV0FBV047QUFDZixJQUFJTyxXQUFXRjtBQUNmLElBQUlHLFlBQVksT0FBT0MsWUFBWTtBQUNuQzs7Ozs7Ozs7Ozs7Ozs7OztDQWdCQyxHQUNELFNBQVNiLE9BQU9jLEtBQUs7SUFDakIsTUFBTVQsT0FBTyxDQUFDLEdBQUdGLFdBQVdZLFFBQVEsRUFBRUQsT0FBTztJQUM3QyxPQUFPLENBQUMsR0FBR1gsV0FBV2EsT0FBTyxFQUFFTixTQUFTTDtBQUM1QztBQUNBUixjQUFjLEdBQUdHO0FBQ2pCQSxPQUFPaUIsQ0FBQyxHQUFHYjtBQUNYSixPQUFPa0IsSUFBSSxHQUFHO0lBQWNOLFlBQVk7QUFBTTtBQUM5Q1osT0FBT21CLFFBQVEsR0FBRyxTQUFVQyxJQUFJO0lBQzVCLElBQUlSLFdBQVc7UUFDWCxNQUFNLElBQUlTLE1BQU07SUFDcEI7SUFDQVgsV0FBV1U7QUFDZjtBQUNBekIsT0FBTzJCLE1BQU0sQ0FBQ3RCO0FBQ2Q7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0QsU0FBU0QsT0FBT2UsS0FBSztJQUNqQixNQUFNVCxPQUFPLENBQUMsR0FBR0YsV0FBV1ksUUFBUSxFQUFFRCxPQUFPO0lBQzdDLE9BQU8sQ0FBQyxHQUFHWCxXQUFXYSxPQUFPLEVBQUVMLFNBQVNOO0FBQzVDO0FBQ0FSLGNBQWMsR0FBR0U7QUFDakJBLE9BQU9rQixDQUFDLEdBQUdSO0FBQ1hWLE9BQU9tQixJQUFJLEdBQUc7SUFBY0wsWUFBWTtBQUFNO0FBQzlDZCxPQUFPb0IsUUFBUSxHQUFHLFNBQVVDLElBQUk7SUFDNUIsSUFBSVAsV0FBVztRQUNYLE1BQU0sSUFBSVEsTUFBTTtJQUNwQjtJQUNBVixXQUFXUztBQUNmO0FBQ0F6QixPQUFPMkIsTUFBTSxDQUFDdEIsU0FDZCxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9jcnlwdG8vc2hhMi5qcz8wMjY0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zaGE1MTIgPSBleHBvcnRzLnNoYTI1NiA9IHZvaWQgMDtcbmNvbnN0IGNyeXB0b19qc18xID0gcmVxdWlyZShcIi4vY3J5cHRvLmpzXCIpO1xuY29uc3QgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9pbmRleC5qc1wiKTtcbmNvbnN0IF9zaGEyNTYgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiAoMCwgY3J5cHRvX2pzXzEuY3JlYXRlSGFzaCkoXCJzaGEyNTZcIikudXBkYXRlKGRhdGEpLmRpZ2VzdCgpO1xufTtcbmNvbnN0IF9zaGE1MTIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiAoMCwgY3J5cHRvX2pzXzEuY3JlYXRlSGFzaCkoXCJzaGE1MTJcIikudXBkYXRlKGRhdGEpLmRpZ2VzdCgpO1xufTtcbmxldCBfX3NoYTI1NiA9IF9zaGEyNTY7XG5sZXQgX19zaGE1MTIgPSBfc2hhNTEyO1xubGV0IGxvY2tlZDI1NiA9IGZhbHNlLCBsb2NrZWQ1MTIgPSBmYWxzZTtcbi8qKlxuICogIENvbXB1dGUgdGhlIGNyeXB0b2dyYXBoaWMgU0hBMi0yNTYgaGFzaCBvZiAlJWRhdGElJS5cbiAqXG4gKiAgQF9kb2Nsb2M6IGFwaS9jcnlwdG86SGFzaCBGdW5jdGlvbnNcbiAqICBAcmV0dXJucyBEYXRhSGV4c3RyaW5nXG4gKlxuICogIEBleGFtcGxlOlxuICogICAgc2hhMjU2KFwiMHhcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICBzaGEyNTYoXCIweDEzMzdcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICBzaGEyNTYobmV3IFVpbnQ4QXJyYXkoWyAweDEzLCAweDM3IF0pKVxuICogICAgLy9fcmVzdWx0OlxuICpcbiAqL1xuZnVuY3Rpb24gc2hhMjU2KF9kYXRhKSB7XG4gICAgY29uc3QgZGF0YSA9ICgwLCBpbmRleF9qc18xLmdldEJ5dGVzKShfZGF0YSwgXCJkYXRhXCIpO1xuICAgIHJldHVybiAoMCwgaW5kZXhfanNfMS5oZXhsaWZ5KShfX3NoYTI1NihkYXRhKSk7XG59XG5leHBvcnRzLnNoYTI1NiA9IHNoYTI1NjtcbnNoYTI1Ni5fID0gX3NoYTI1NjtcbnNoYTI1Ni5sb2NrID0gZnVuY3Rpb24gKCkgeyBsb2NrZWQyNTYgPSB0cnVlOyB9O1xuc2hhMjU2LnJlZ2lzdGVyID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICBpZiAobG9ja2VkMjU2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInNoYTI1NiBpcyBsb2NrZWRcIik7XG4gICAgfVxuICAgIF9fc2hhMjU2ID0gZnVuYztcbn07XG5PYmplY3QuZnJlZXplKHNoYTI1Nik7XG4vKipcbiAqICBDb21wdXRlIHRoZSBjcnlwdG9ncmFwaGljIFNIQTItNTEyIGhhc2ggb2YgJSVkYXRhJSUuXG4gKlxuICogIEBfZG9jbG9jOiBhcGkvY3J5cHRvOkhhc2ggRnVuY3Rpb25zXG4gKiAgQHJldHVybnMgRGF0YUhleHN0cmluZ1xuICpcbiAqICBAZXhhbXBsZTpcbiAqICAgIHNoYTUxMihcIjB4XCIpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAgc2hhNTEyKFwiMHgxMzM3XCIpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAgc2hhNTEyKG5ldyBVaW50OEFycmF5KFsgMHgxMywgMHgzNyBdKSlcbiAqICAgIC8vX3Jlc3VsdDpcbiAqL1xuZnVuY3Rpb24gc2hhNTEyKF9kYXRhKSB7XG4gICAgY29uc3QgZGF0YSA9ICgwLCBpbmRleF9qc18xLmdldEJ5dGVzKShfZGF0YSwgXCJkYXRhXCIpO1xuICAgIHJldHVybiAoMCwgaW5kZXhfanNfMS5oZXhsaWZ5KShfX3NoYTUxMihkYXRhKSk7XG59XG5leHBvcnRzLnNoYTUxMiA9IHNoYTUxMjtcbnNoYTUxMi5fID0gX3NoYTUxMjtcbnNoYTUxMi5sb2NrID0gZnVuY3Rpb24gKCkgeyBsb2NrZWQ1MTIgPSB0cnVlOyB9O1xuc2hhNTEyLnJlZ2lzdGVyID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICBpZiAobG9ja2VkNTEyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInNoYTUxMiBpcyBsb2NrZWRcIik7XG4gICAgfVxuICAgIF9fc2hhNTEyID0gZnVuYztcbn07XG5PYmplY3QuZnJlZXplKHNoYTI1Nik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGEyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInNoYTUxMiIsInNoYTI1NiIsImNyeXB0b19qc18xIiwicmVxdWlyZSIsImluZGV4X2pzXzEiLCJfc2hhMjU2IiwiZGF0YSIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiLCJfc2hhNTEyIiwiX19zaGEyNTYiLCJfX3NoYTUxMiIsImxvY2tlZDI1NiIsImxvY2tlZDUxMiIsIl9kYXRhIiwiZ2V0Qnl0ZXMiLCJoZXhsaWZ5IiwiXyIsImxvY2siLCJyZWdpc3RlciIsImZ1bmMiLCJFcnJvciIsImZyZWV6ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/crypto/sha2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/crypto/signature.js":
/*!**************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/crypto/signature.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Signature = void 0;\nconst index_js_1 = __webpack_require__(/*! ../constants/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/constants/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\n// Constants\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst _guard = {};\nfunction toUint256(value) {\n    return (0, index_js_2.zeroPadValue)((0, index_js_2.toBeArray)(value), 32);\n}\n/**\n *  A Signature  @TODO\n *\n *\n *  @_docloc: api/crypto:Signing\n */ class Signature {\n    #r;\n    #s;\n    #v;\n    #networkV;\n    /**\n     *  The ``r`` value for a signautre.\n     *\n     *  This represents the ``x`` coordinate of a \"reference\" or\n     *  challenge point, from which the ``y`` can be computed.\n     */ get r() {\n        return this.#r;\n    }\n    set r(value) {\n        (0, index_js_2.assertArgument)((0, index_js_2.dataLength)(value) === 32, \"invalid r\", \"value\", value);\n        this.#r = (0, index_js_2.hexlify)(value);\n    }\n    /**\n     *  The ``s`` value for a signature.\n     */ get s() {\n        return this.#s;\n    }\n    set s(_value) {\n        (0, index_js_2.assertArgument)((0, index_js_2.dataLength)(_value) === 32, \"invalid s\", \"value\", _value);\n        const value = (0, index_js_2.hexlify)(_value);\n        (0, index_js_2.assertArgument)(parseInt(value.substring(0, 3)) < 8, \"non-canonical s\", \"value\", value);\n        this.#s = value;\n    }\n    /**\n     *  The ``v`` value for a signature.\n     *\n     *  Since a given ``x`` value for ``r`` has two possible values for\n     *  its correspondin ``y``, the ``v`` indicates which of the two ``y``\n     *  values to use.\n     *\n     *  It is normalized to the values ``27`` or ``28`` for legacy\n     *  purposes.\n     */ get v() {\n        return this.#v;\n    }\n    set v(value) {\n        const v = (0, index_js_2.getNumber)(value, \"value\");\n        (0, index_js_2.assertArgument)(v === 27 || v === 28, \"invalid v\", \"v\", value);\n        this.#v = v;\n    }\n    /**\n     *  The EIP-155 ``v`` for legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */ get networkV() {\n        return this.#networkV;\n    }\n    /**\n     *  The chain ID for EIP-155 legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */ get legacyChainId() {\n        const v = this.networkV;\n        if (v == null) {\n            return null;\n        }\n        return Signature.getChainId(v);\n    }\n    /**\n     *  The ``yParity`` for the signature.\n     *\n     *  See ``v`` for more details on how this value is used.\n     */ get yParity() {\n        return this.v === 27 ? 0 : 1;\n    }\n    /**\n     *  The [[link-eip-2098]] compact representation of the ``yParity``\n     *  and ``s`` compacted into a single ``bytes32``.\n     */ get yParityAndS() {\n        // The EIP-2098 compact representation\n        const yParityAndS = (0, index_js_2.getBytes)(this.s);\n        if (this.yParity) {\n            yParityAndS[0] |= 0x80;\n        }\n        return (0, index_js_2.hexlify)(yParityAndS);\n    }\n    /**\n     *  The [[link-eip-2098]] compact representation.\n     */ get compactSerialized() {\n        return (0, index_js_2.concat)([\n            this.r,\n            this.yParityAndS\n        ]);\n    }\n    /**\n     *  The serialized representation.\n     */ get serialized() {\n        return (0, index_js_2.concat)([\n            this.r,\n            this.s,\n            this.yParity ? \"0x1c\" : \"0x1b\"\n        ]);\n    }\n    /**\n     *  @private\n     */ constructor(guard, r, s, v){\n        (0, index_js_2.assertPrivate)(guard, _guard, \"Signature\");\n        this.#r = r;\n        this.#s = s;\n        this.#v = v;\n        this.#networkV = null;\n    }\n    [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n        return `Signature { r: \"${this.r}\", s: \"${this.s}\", yParity: ${this.yParity}, networkV: ${this.networkV} }`;\n    }\n    /**\n     *  Returns a new identical [[Signature]].\n     */ clone() {\n        const clone = new Signature(_guard, this.r, this.s, this.v);\n        if (this.networkV) {\n            clone.#networkV = this.networkV;\n        }\n        return clone;\n    }\n    /**\n     *  Returns a representation that is compatible with ``JSON.stringify``.\n     */ toJSON() {\n        const networkV = this.networkV;\n        return {\n            _type: \"signature\",\n            networkV: networkV != null ? networkV.toString() : null,\n            r: this.r,\n            s: this.s,\n            v: this.v\n        };\n    }\n    /**\n     *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.\n     *\n     *  @example:\n     *    Signature.getChainId(45)\n     *    //_result:\n     *\n     *    Signature.getChainId(46)\n     *    //_result:\n     */ static getChainId(v) {\n        const bv = (0, index_js_2.getBigInt)(v, \"v\");\n        // The v is not an EIP-155 v, so it is the unspecified chain ID\n        if (bv == BN_27 || bv == BN_28) {\n            return BN_0;\n        }\n        // Bad value for an EIP-155 v\n        (0, index_js_2.assertArgument)(bv >= BN_35, \"invalid EIP-155 v\", \"v\", v);\n        return (bv - BN_35) / BN_2;\n    }\n    /**\n     *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.\n     *\n     *  Legacy transactions which use [[link-eip-155]] hijack the ``v``\n     *  property to include the chain ID.\n     *\n     *  @example:\n     *    Signature.getChainIdV(5, 27)\n     *    //_result:\n     *\n     *    Signature.getChainIdV(5, 28)\n     *    //_result:\n     *\n     */ static getChainIdV(chainId, v) {\n        return (0, index_js_2.getBigInt)(chainId) * BN_2 + BigInt(35 + v - 27);\n    }\n    /**\n     *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,\n     *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.\n     *\n     *  @example:\n     *    // The values 0 and 1 imply v is actually yParity\n     *    Signature.getNormalizedV(0)\n     *    //_result:\n     *\n     *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)\n     *    Signature.getNormalizedV(27)\n     *    //_result:\n     *\n     *    // Legacy EIP-155 transaction (i.e. >= 35)\n     *    Signature.getNormalizedV(46)\n     *    //_result:\n     *\n     *    // Invalid values throw\n     *    Signature.getNormalizedV(5)\n     *    //_error:\n     */ static getNormalizedV(v) {\n        const bv = (0, index_js_2.getBigInt)(v);\n        if (bv === BN_0 || bv === BN_27) {\n            return 27;\n        }\n        if (bv === BN_1 || bv === BN_28) {\n            return 28;\n        }\n        (0, index_js_2.assertArgument)(bv >= BN_35, \"invalid v\", \"v\", v);\n        // Otherwise, EIP-155 v means odd is 27 and even is 28\n        return bv & BN_1 ? 27 : 28;\n    }\n    /**\n     *  Creates a new [[Signature]].\n     *\n     *  If no %%sig%% is provided, a new [[Signature]] is created\n     *  with default values.\n     *\n     *  If %%sig%% is a string, it is parsed.\n     */ static from(sig) {\n        function assertError(check, message) {\n            (0, index_js_2.assertArgument)(check, message, \"signature\", sig);\n        }\n        ;\n        if (sig == null) {\n            return new Signature(_guard, index_js_1.ZeroHash, index_js_1.ZeroHash, 27);\n        }\n        if (typeof sig === \"string\") {\n            const bytes = (0, index_js_2.getBytes)(sig, \"signature\");\n            if (bytes.length === 64) {\n                const r = (0, index_js_2.hexlify)(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                const v = s[0] & 0x80 ? 28 : 27;\n                s[0] &= 0x7f;\n                return new Signature(_guard, r, (0, index_js_2.hexlify)(s), v);\n            }\n            if (bytes.length === 65) {\n                const r = (0, index_js_2.hexlify)(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                assertError((s[0] & 0x80) === 0, \"non-canonical s\");\n                const v = Signature.getNormalizedV(bytes[64]);\n                return new Signature(_guard, r, (0, index_js_2.hexlify)(s), v);\n            }\n            assertError(false, \"invalid raw signature length\");\n        }\n        if (sig instanceof Signature) {\n            return sig.clone();\n        }\n        // Get r\n        const _r = sig.r;\n        assertError(_r != null, \"missing r\");\n        const r = toUint256(_r);\n        // Get s; by any means necessary (we check consistency below)\n        const s = function(s, yParityAndS) {\n            if (s != null) {\n                return toUint256(s);\n            }\n            if (yParityAndS != null) {\n                assertError((0, index_js_2.isHexString)(yParityAndS, 32), \"invalid yParityAndS\");\n                const bytes = (0, index_js_2.getBytes)(yParityAndS);\n                bytes[0] &= 0x7f;\n                return (0, index_js_2.hexlify)(bytes);\n            }\n            assertError(false, \"missing s\");\n        }(sig.s, sig.yParityAndS);\n        assertError(((0, index_js_2.getBytes)(s)[0] & 0x80) == 0, \"non-canonical s\");\n        // Get v; by any means necessary (we check consistency below)\n        const { networkV, v } = function(_v, yParityAndS, yParity) {\n            if (_v != null) {\n                const v = (0, index_js_2.getBigInt)(_v);\n                return {\n                    networkV: v >= BN_35 ? v : undefined,\n                    v: Signature.getNormalizedV(v)\n                };\n            }\n            if (yParityAndS != null) {\n                assertError((0, index_js_2.isHexString)(yParityAndS, 32), \"invalid yParityAndS\");\n                return {\n                    v: (0, index_js_2.getBytes)(yParityAndS)[0] & 0x80 ? 28 : 27\n                };\n            }\n            if (yParity != null) {\n                switch((0, index_js_2.getNumber)(yParity, \"sig.yParity\")){\n                    case 0:\n                        return {\n                            v: 27\n                        };\n                    case 1:\n                        return {\n                            v: 28\n                        };\n                }\n                assertError(false, \"invalid yParity\");\n            }\n            assertError(false, \"missing v\");\n        }(sig.v, sig.yParityAndS, sig.yParity);\n        const result = new Signature(_guard, r, s, v);\n        if (networkV) {\n            result.#networkV = networkV;\n        }\n        // If multiple of v, yParity, yParityAndS we given, check they match\n        assertError(sig.yParity == null || (0, index_js_2.getNumber)(sig.yParity, \"sig.yParity\") === result.yParity, \"yParity mismatch\");\n        assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, \"yParityAndS mismatch\");\n        return result;\n    }\n}\nexports.Signature = Signature; //# sourceMappingURL=signature.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/crypto/signature.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/crypto/signing-key.js":
/*!****************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/crypto/signing-key.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  Add details about signing here.\n *\n *  @_subsection: api/crypto:Signing  [about-signing]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SigningKey = void 0;\nconst secp256k1_1 = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(rsc)/./node_modules/@noble/curves/secp256k1.js\");\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst signature_js_1 = __webpack_require__(/*! ./signature.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/signature.js\");\n/**\n *  A **SigningKey** provides high-level access to the elliptic curve\n *  cryptography (ECC) operations and key management.\n */ class SigningKey {\n    #privateKey;\n    /**\n     *  Creates a new **SigningKey** for %%privateKey%%.\n     */ constructor(privateKey){\n        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(privateKey) === 32, \"invalid private key\", \"privateKey\", \"[REDACTED]\");\n        this.#privateKey = (0, index_js_1.hexlify)(privateKey);\n    }\n    /**\n     *  The private key.\n     */ get privateKey() {\n        return this.#privateKey;\n    }\n    /**\n     *  The uncompressed public key.\n     *\n     * This will always begin with the prefix ``0x04`` and be 132\n     * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).\n     */ get publicKey() {\n        return SigningKey.computePublicKey(this.#privateKey);\n    }\n    /**\n     *  The compressed public key.\n     *\n     *  This will always begin with either the prefix ``0x02`` or ``0x03``\n     *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal\n     *  nibbles)\n     */ get compressedPublicKey() {\n        return SigningKey.computePublicKey(this.#privateKey, true);\n    }\n    /**\n     *  Return the signature of the signed %%digest%%.\n     */ sign(digest) {\n        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, \"invalid digest length\", \"digest\", digest);\n        const sig = secp256k1_1.secp256k1.sign((0, index_js_1.getBytesCopy)(digest), (0, index_js_1.getBytesCopy)(this.#privateKey), {\n            lowS: true\n        });\n        return signature_js_1.Signature.from({\n            r: (0, index_js_1.toBeHex)(sig.r, 32),\n            s: (0, index_js_1.toBeHex)(sig.s, 32),\n            v: sig.recovery ? 0x1c : 0x1b\n        });\n    }\n    /**\n     *  Returns the [[link-wiki-ecdh]] shared secret between this\n     *  private key and the %%other%% key.\n     *\n     *  The %%other%% key may be any type of key, a raw public key,\n     *  a compressed/uncompressed pubic key or aprivate key.\n     *\n     *  Best practice is usually to use a cryptographic hash on the\n     *  returned value before using it as a symetric secret.\n     *\n     *  @example:\n     *    sign1 = new SigningKey(id(\"some-secret-1\"))\n     *    sign2 = new SigningKey(id(\"some-secret-2\"))\n     *\n     *    // Notice that privA.computeSharedSecret(pubB)...\n     *    sign1.computeSharedSecret(sign2.publicKey)\n     *    //_result:\n     *\n     *    // ...is equal to privB.computeSharedSecret(pubA).\n     *    sign2.computeSharedSecret(sign1.publicKey)\n     *    //_result:\n     */ computeSharedSecret(other) {\n        const pubKey = SigningKey.computePublicKey(other);\n        return (0, index_js_1.hexlify)(secp256k1_1.secp256k1.getSharedSecret((0, index_js_1.getBytesCopy)(this.#privateKey), (0, index_js_1.getBytes)(pubKey), false));\n    }\n    /**\n     *  Compute the public key for %%key%%, optionally %%compressed%%.\n     *\n     *  The %%key%% may be any type of key, a raw public key, a\n     *  compressed/uncompressed public key or private key.\n     *\n     *  @example:\n     *    sign = new SigningKey(id(\"some-secret\"));\n     *\n     *    // Compute the uncompressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey)\n     *    //_result:\n     *\n     *    // Compute the compressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey, true)\n     *    //_result:\n     *\n     *    // Compute the uncompressed public key\n     *    SigningKey.computePublicKey(sign.publicKey, false);\n     *    //_result:\n     *\n     *    // Compute the Compressed a public key\n     *    SigningKey.computePublicKey(sign.publicKey, true);\n     *    //_result:\n     */ static computePublicKey(key, compressed) {\n        let bytes = (0, index_js_1.getBytes)(key, \"key\");\n        // private key\n        if (bytes.length === 32) {\n            const pubKey = secp256k1_1.secp256k1.getPublicKey(bytes, !!compressed);\n            return (0, index_js_1.hexlify)(pubKey);\n        }\n        // raw public key; use uncompressed key with 0x04 prefix\n        if (bytes.length === 64) {\n            const pub = new Uint8Array(65);\n            pub[0] = 0x04;\n            pub.set(bytes, 1);\n            bytes = pub;\n        }\n        const point = secp256k1_1.secp256k1.ProjectivePoint.fromHex(bytes);\n        return (0, index_js_1.hexlify)(point.toRawBytes(compressed));\n    }\n    /**\n     *  Returns the public key for the private key which produced the\n     *  %%signature%% for the given %%digest%%.\n     *\n     *  @example:\n     *    key = new SigningKey(id(\"some-secret\"))\n     *    digest = id(\"hello world\")\n     *    sig = key.sign(digest)\n     *\n     *    // Notice the signer public key...\n     *    key.publicKey\n     *    //_result:\n     *\n     *    // ...is equal to the recovered public key\n     *    SigningKey.recoverPublicKey(digest, sig)\n     *    //_result:\n     *\n     */ static recoverPublicKey(digest, signature) {\n        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, \"invalid digest length\", \"digest\", digest);\n        const sig = signature_js_1.Signature.from(signature);\n        let secpSig = secp256k1_1.secp256k1.Signature.fromCompact((0, index_js_1.getBytesCopy)((0, index_js_1.concat)([\n            sig.r,\n            sig.s\n        ])));\n        secpSig = secpSig.addRecoveryBit(sig.yParity);\n        const pubKey = secpSig.recoverPublicKey((0, index_js_1.getBytesCopy)(digest));\n        (0, index_js_1.assertArgument)(pubKey != null, \"invalid signautre for digest\", \"signature\", signature);\n        return \"0x\" + pubKey.toHex(false);\n    }\n    /**\n     *  Returns the point resulting from adding the ellipic curve points\n     *  %%p0%% and %%p1%%.\n     *\n     *  This is not a common function most developers should require, but\n     *  can be useful for certain privacy-specific techniques.\n     *\n     *  For example, it is used by [[HDNodeWallet]] to compute child\n     *  addresses from parent public keys and chain codes.\n     */ static addPoints(p0, p1, compressed) {\n        const pub0 = secp256k1_1.secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p0).substring(2));\n        const pub1 = secp256k1_1.secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p1).substring(2));\n        return \"0x\" + pub0.add(pub1).toHex(!!compressed);\n    }\n}\nexports.SigningKey = SigningKey; //# sourceMappingURL=signing-key.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/crypto/signing-key.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/ethers.js":
/*!****************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/ethers.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/////////////////////////////\n//\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ripemd160 = exports.keccak256 = exports.randomBytes = exports.computeHmac = exports.UndecodedEventLog = exports.EventLog = exports.ContractUnknownEventPayload = exports.ContractTransactionResponse = exports.ContractTransactionReceipt = exports.ContractEventPayload = exports.ContractFactory = exports.Contract = exports.BaseContract = exports.MessagePrefix = exports.EtherSymbol = exports.ZeroHash = exports.N = exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.ZeroAddress = exports.resolveAddress = exports.isAddress = exports.isAddressable = exports.getCreate2Address = exports.getCreateAddress = exports.getIcapAddress = exports.getAddress = exports.Typed = exports.TransactionDescription = exports.Result = exports.LogDescription = exports.Interface = exports.Indexed = exports.ErrorDescription = exports.checkResultErrors = exports.StructFragment = exports.ParamType = exports.NamedFragment = exports.FunctionFragment = exports.FallbackFragment = exports.Fragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.AbiCoder = exports.encodeBytes32String = exports.decodeBytes32String = exports.version = void 0;\nexports.EtherscanPlugin = exports.EnsPlugin = exports.Network = exports.EnsResolver = exports.WebSocketProvider = exports.SocketProvider = exports.IpcSocketProvider = exports.QuickNodeProvider = exports.PocketProvider = exports.InfuraWebSocketProvider = exports.InfuraProvider = exports.EtherscanProvider = exports.CloudflareProvider = exports.AnkrProvider = exports.AlchemyProvider = exports.BrowserProvider = exports.JsonRpcSigner = exports.JsonRpcProvider = exports.JsonRpcApiProvider = exports.FallbackProvider = exports.AbstractProvider = exports.VoidSigner = exports.NonceManager = exports.AbstractSigner = exports.TransactionResponse = exports.TransactionReceipt = exports.Log = exports.FeeData = exports.Block = exports.getDefaultProvider = exports.verifyTypedData = exports.TypedDataEncoder = exports.solidityPackedSha256 = exports.solidityPackedKeccak256 = exports.solidityPacked = exports.verifyMessage = exports.hashMessage = exports.dnsEncode = exports.namehash = exports.isValidName = exports.ensNormalize = exports.id = exports.SigningKey = exports.Signature = exports.lock = exports.scryptSync = exports.scrypt = exports.pbkdf2 = exports.sha512 = exports.sha256 = void 0;\nexports.toBeArray = exports.getUint = exports.getNumber = exports.getBigInt = exports.FixedNumber = exports.FetchCancelSignal = exports.FetchResponse = exports.FetchRequest = exports.EventPayload = exports.isError = exports.isCallException = exports.makeError = exports.assertPrivate = exports.assertNormalize = exports.assertArgumentCount = exports.assertArgument = exports.assert = exports.resolveProperties = exports.defineProperties = exports.zeroPadValue = exports.zeroPadBytes = exports.stripZerosLeft = exports.isBytesLike = exports.isHexString = exports.hexlify = exports.getBytesCopy = exports.getBytes = exports.dataSlice = exports.dataLength = exports.concat = exports.encodeBase64 = exports.decodeBase64 = exports.encodeBase58 = exports.decodeBase58 = exports.Transaction = exports.recoverAddress = exports.computeAddress = exports.accessListify = exports.showThrottleMessage = exports.copyRequest = exports.UnmanagedSubscriber = exports.SocketSubscriber = exports.SocketPendingSubscriber = exports.SocketEventSubscriber = exports.SocketBlockSubscriber = exports.MulticoinProviderPlugin = exports.NetworkPlugin = exports.GasCostPlugin = exports.FetchUrlFeeDataNetworkPlugin = exports.FeeDataNetworkPlugin = void 0;\nexports.wordlists = exports.WordlistOwlA = exports.WordlistOwl = exports.LangEn = exports.Wordlist = exports.encryptKeystoreJsonSync = exports.encryptKeystoreJson = exports.decryptKeystoreJson = exports.decryptKeystoreJsonSync = exports.decryptCrowdsaleJson = exports.isKeystoreJson = exports.isCrowdsaleJson = exports.getIndexedAccountPath = exports.getAccountPath = exports.defaultPath = exports.Wallet = exports.HDNodeVoidWallet = exports.HDNodeWallet = exports.BaseWallet = exports.Mnemonic = exports.uuidV4 = exports.encodeRlp = exports.decodeRlp = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.mask = exports.toTwos = exports.fromTwos = exports.toQuantity = exports.toNumber = exports.toBeHex = exports.toBigInt = void 0;\nvar _version_js_1 = __webpack_require__(/*! ./_version.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/_version.js\");\nObject.defineProperty(exports, \"version\", ({\n    enumerable: true,\n    get: function() {\n        return _version_js_1.version;\n    }\n}));\nvar index_js_1 = __webpack_require__(/*! ./abi/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/index.js\");\nObject.defineProperty(exports, \"decodeBytes32String\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.decodeBytes32String;\n    }\n}));\nObject.defineProperty(exports, \"encodeBytes32String\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.encodeBytes32String;\n    }\n}));\nObject.defineProperty(exports, \"AbiCoder\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.AbiCoder;\n    }\n}));\nObject.defineProperty(exports, \"ConstructorFragment\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.ConstructorFragment;\n    }\n}));\nObject.defineProperty(exports, \"ErrorFragment\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.ErrorFragment;\n    }\n}));\nObject.defineProperty(exports, \"EventFragment\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.EventFragment;\n    }\n}));\nObject.defineProperty(exports, \"Fragment\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.Fragment;\n    }\n}));\nObject.defineProperty(exports, \"FallbackFragment\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.FallbackFragment;\n    }\n}));\nObject.defineProperty(exports, \"FunctionFragment\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.FunctionFragment;\n    }\n}));\nObject.defineProperty(exports, \"NamedFragment\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.NamedFragment;\n    }\n}));\nObject.defineProperty(exports, \"ParamType\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.ParamType;\n    }\n}));\nObject.defineProperty(exports, \"StructFragment\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.StructFragment;\n    }\n}));\nObject.defineProperty(exports, \"checkResultErrors\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.checkResultErrors;\n    }\n}));\nObject.defineProperty(exports, \"ErrorDescription\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.ErrorDescription;\n    }\n}));\nObject.defineProperty(exports, \"Indexed\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.Indexed;\n    }\n}));\nObject.defineProperty(exports, \"Interface\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.Interface;\n    }\n}));\nObject.defineProperty(exports, \"LogDescription\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.LogDescription;\n    }\n}));\nObject.defineProperty(exports, \"Result\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.Result;\n    }\n}));\nObject.defineProperty(exports, \"TransactionDescription\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.TransactionDescription;\n    }\n}));\nObject.defineProperty(exports, \"Typed\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.Typed;\n    }\n}));\nvar index_js_2 = __webpack_require__(/*! ./address/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/index.js\");\nObject.defineProperty(exports, \"getAddress\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_2.getAddress;\n    }\n}));\nObject.defineProperty(exports, \"getIcapAddress\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_2.getIcapAddress;\n    }\n}));\nObject.defineProperty(exports, \"getCreateAddress\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_2.getCreateAddress;\n    }\n}));\nObject.defineProperty(exports, \"getCreate2Address\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_2.getCreate2Address;\n    }\n}));\nObject.defineProperty(exports, \"isAddressable\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_2.isAddressable;\n    }\n}));\nObject.defineProperty(exports, \"isAddress\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_2.isAddress;\n    }\n}));\nObject.defineProperty(exports, \"resolveAddress\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_2.resolveAddress;\n    }\n}));\nvar index_js_3 = __webpack_require__(/*! ./constants/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/constants/index.js\");\nObject.defineProperty(exports, \"ZeroAddress\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_3.ZeroAddress;\n    }\n}));\nObject.defineProperty(exports, \"WeiPerEther\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_3.WeiPerEther;\n    }\n}));\nObject.defineProperty(exports, \"MaxUint256\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_3.MaxUint256;\n    }\n}));\nObject.defineProperty(exports, \"MinInt256\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_3.MinInt256;\n    }\n}));\nObject.defineProperty(exports, \"MaxInt256\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_3.MaxInt256;\n    }\n}));\nObject.defineProperty(exports, \"N\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_3.N;\n    }\n}));\nObject.defineProperty(exports, \"ZeroHash\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_3.ZeroHash;\n    }\n}));\nObject.defineProperty(exports, \"EtherSymbol\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_3.EtherSymbol;\n    }\n}));\nObject.defineProperty(exports, \"MessagePrefix\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_3.MessagePrefix;\n    }\n}));\nvar index_js_4 = __webpack_require__(/*! ./contract/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/contract/index.js\");\nObject.defineProperty(exports, \"BaseContract\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_4.BaseContract;\n    }\n}));\nObject.defineProperty(exports, \"Contract\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_4.Contract;\n    }\n}));\nObject.defineProperty(exports, \"ContractFactory\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_4.ContractFactory;\n    }\n}));\nObject.defineProperty(exports, \"ContractEventPayload\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_4.ContractEventPayload;\n    }\n}));\nObject.defineProperty(exports, \"ContractTransactionReceipt\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_4.ContractTransactionReceipt;\n    }\n}));\nObject.defineProperty(exports, \"ContractTransactionResponse\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_4.ContractTransactionResponse;\n    }\n}));\nObject.defineProperty(exports, \"ContractUnknownEventPayload\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_4.ContractUnknownEventPayload;\n    }\n}));\nObject.defineProperty(exports, \"EventLog\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_4.EventLog;\n    }\n}));\nObject.defineProperty(exports, \"UndecodedEventLog\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_4.UndecodedEventLog;\n    }\n}));\nvar index_js_5 = __webpack_require__(/*! ./crypto/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/index.js\");\nObject.defineProperty(exports, \"computeHmac\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_5.computeHmac;\n    }\n}));\nObject.defineProperty(exports, \"randomBytes\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_5.randomBytes;\n    }\n}));\nObject.defineProperty(exports, \"keccak256\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_5.keccak256;\n    }\n}));\nObject.defineProperty(exports, \"ripemd160\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_5.ripemd160;\n    }\n}));\nObject.defineProperty(exports, \"sha256\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_5.sha256;\n    }\n}));\nObject.defineProperty(exports, \"sha512\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_5.sha512;\n    }\n}));\nObject.defineProperty(exports, \"pbkdf2\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_5.pbkdf2;\n    }\n}));\nObject.defineProperty(exports, \"scrypt\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_5.scrypt;\n    }\n}));\nObject.defineProperty(exports, \"scryptSync\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_5.scryptSync;\n    }\n}));\nObject.defineProperty(exports, \"lock\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_5.lock;\n    }\n}));\nObject.defineProperty(exports, \"Signature\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_5.Signature;\n    }\n}));\nObject.defineProperty(exports, \"SigningKey\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_5.SigningKey;\n    }\n}));\nvar index_js_6 = __webpack_require__(/*! ./hash/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/hash/index.js\");\nObject.defineProperty(exports, \"id\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_6.id;\n    }\n}));\nObject.defineProperty(exports, \"ensNormalize\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_6.ensNormalize;\n    }\n}));\nObject.defineProperty(exports, \"isValidName\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_6.isValidName;\n    }\n}));\nObject.defineProperty(exports, \"namehash\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_6.namehash;\n    }\n}));\nObject.defineProperty(exports, \"dnsEncode\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_6.dnsEncode;\n    }\n}));\nObject.defineProperty(exports, \"hashMessage\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_6.hashMessage;\n    }\n}));\nObject.defineProperty(exports, \"verifyMessage\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_6.verifyMessage;\n    }\n}));\nObject.defineProperty(exports, \"solidityPacked\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_6.solidityPacked;\n    }\n}));\nObject.defineProperty(exports, \"solidityPackedKeccak256\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_6.solidityPackedKeccak256;\n    }\n}));\nObject.defineProperty(exports, \"solidityPackedSha256\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_6.solidityPackedSha256;\n    }\n}));\nObject.defineProperty(exports, \"TypedDataEncoder\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_6.TypedDataEncoder;\n    }\n}));\nObject.defineProperty(exports, \"verifyTypedData\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_6.verifyTypedData;\n    }\n}));\nvar index_js_7 = __webpack_require__(/*! ./providers/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/index.js\");\nObject.defineProperty(exports, \"getDefaultProvider\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.getDefaultProvider;\n    }\n}));\nObject.defineProperty(exports, \"Block\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.Block;\n    }\n}));\nObject.defineProperty(exports, \"FeeData\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.FeeData;\n    }\n}));\nObject.defineProperty(exports, \"Log\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.Log;\n    }\n}));\nObject.defineProperty(exports, \"TransactionReceipt\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.TransactionReceipt;\n    }\n}));\nObject.defineProperty(exports, \"TransactionResponse\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.TransactionResponse;\n    }\n}));\nObject.defineProperty(exports, \"AbstractSigner\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.AbstractSigner;\n    }\n}));\nObject.defineProperty(exports, \"NonceManager\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.NonceManager;\n    }\n}));\nObject.defineProperty(exports, \"VoidSigner\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.VoidSigner;\n    }\n}));\nObject.defineProperty(exports, \"AbstractProvider\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.AbstractProvider;\n    }\n}));\nObject.defineProperty(exports, \"FallbackProvider\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.FallbackProvider;\n    }\n}));\nObject.defineProperty(exports, \"JsonRpcApiProvider\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.JsonRpcApiProvider;\n    }\n}));\nObject.defineProperty(exports, \"JsonRpcProvider\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.JsonRpcProvider;\n    }\n}));\nObject.defineProperty(exports, \"JsonRpcSigner\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.JsonRpcSigner;\n    }\n}));\nObject.defineProperty(exports, \"BrowserProvider\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.BrowserProvider;\n    }\n}));\nObject.defineProperty(exports, \"AlchemyProvider\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.AlchemyProvider;\n    }\n}));\nObject.defineProperty(exports, \"AnkrProvider\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.AnkrProvider;\n    }\n}));\nObject.defineProperty(exports, \"CloudflareProvider\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.CloudflareProvider;\n    }\n}));\nObject.defineProperty(exports, \"EtherscanProvider\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.EtherscanProvider;\n    }\n}));\nObject.defineProperty(exports, \"InfuraProvider\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.InfuraProvider;\n    }\n}));\nObject.defineProperty(exports, \"InfuraWebSocketProvider\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.InfuraWebSocketProvider;\n    }\n}));\nObject.defineProperty(exports, \"PocketProvider\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.PocketProvider;\n    }\n}));\nObject.defineProperty(exports, \"QuickNodeProvider\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.QuickNodeProvider;\n    }\n}));\nObject.defineProperty(exports, \"IpcSocketProvider\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.IpcSocketProvider;\n    }\n}));\nObject.defineProperty(exports, \"SocketProvider\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.SocketProvider;\n    }\n}));\nObject.defineProperty(exports, \"WebSocketProvider\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.WebSocketProvider;\n    }\n}));\nObject.defineProperty(exports, \"EnsResolver\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.EnsResolver;\n    }\n}));\nObject.defineProperty(exports, \"Network\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.Network;\n    }\n}));\nObject.defineProperty(exports, \"EnsPlugin\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.EnsPlugin;\n    }\n}));\nObject.defineProperty(exports, \"EtherscanPlugin\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.EtherscanPlugin;\n    }\n}));\nObject.defineProperty(exports, \"FeeDataNetworkPlugin\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.FeeDataNetworkPlugin;\n    }\n}));\nObject.defineProperty(exports, \"FetchUrlFeeDataNetworkPlugin\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.FetchUrlFeeDataNetworkPlugin;\n    }\n}));\nObject.defineProperty(exports, \"GasCostPlugin\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.GasCostPlugin;\n    }\n}));\nObject.defineProperty(exports, \"NetworkPlugin\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.NetworkPlugin;\n    }\n}));\nObject.defineProperty(exports, \"MulticoinProviderPlugin\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.MulticoinProviderPlugin;\n    }\n}));\nObject.defineProperty(exports, \"SocketBlockSubscriber\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.SocketBlockSubscriber;\n    }\n}));\nObject.defineProperty(exports, \"SocketEventSubscriber\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.SocketEventSubscriber;\n    }\n}));\nObject.defineProperty(exports, \"SocketPendingSubscriber\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.SocketPendingSubscriber;\n    }\n}));\nObject.defineProperty(exports, \"SocketSubscriber\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.SocketSubscriber;\n    }\n}));\nObject.defineProperty(exports, \"UnmanagedSubscriber\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.UnmanagedSubscriber;\n    }\n}));\nObject.defineProperty(exports, \"copyRequest\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.copyRequest;\n    }\n}));\nObject.defineProperty(exports, \"showThrottleMessage\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_7.showThrottleMessage;\n    }\n}));\nvar index_js_8 = __webpack_require__(/*! ./transaction/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/transaction/index.js\");\nObject.defineProperty(exports, \"accessListify\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_8.accessListify;\n    }\n}));\nObject.defineProperty(exports, \"computeAddress\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_8.computeAddress;\n    }\n}));\nObject.defineProperty(exports, \"recoverAddress\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_8.recoverAddress;\n    }\n}));\nObject.defineProperty(exports, \"Transaction\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_8.Transaction;\n    }\n}));\nvar index_js_9 = __webpack_require__(/*! ./utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nObject.defineProperty(exports, \"decodeBase58\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.decodeBase58;\n    }\n}));\nObject.defineProperty(exports, \"encodeBase58\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.encodeBase58;\n    }\n}));\nObject.defineProperty(exports, \"decodeBase64\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.decodeBase64;\n    }\n}));\nObject.defineProperty(exports, \"encodeBase64\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.encodeBase64;\n    }\n}));\nObject.defineProperty(exports, \"concat\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.concat;\n    }\n}));\nObject.defineProperty(exports, \"dataLength\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.dataLength;\n    }\n}));\nObject.defineProperty(exports, \"dataSlice\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.dataSlice;\n    }\n}));\nObject.defineProperty(exports, \"getBytes\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.getBytes;\n    }\n}));\nObject.defineProperty(exports, \"getBytesCopy\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.getBytesCopy;\n    }\n}));\nObject.defineProperty(exports, \"hexlify\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.hexlify;\n    }\n}));\nObject.defineProperty(exports, \"isHexString\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.isHexString;\n    }\n}));\nObject.defineProperty(exports, \"isBytesLike\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.isBytesLike;\n    }\n}));\nObject.defineProperty(exports, \"stripZerosLeft\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.stripZerosLeft;\n    }\n}));\nObject.defineProperty(exports, \"zeroPadBytes\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.zeroPadBytes;\n    }\n}));\nObject.defineProperty(exports, \"zeroPadValue\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.zeroPadValue;\n    }\n}));\nObject.defineProperty(exports, \"defineProperties\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.defineProperties;\n    }\n}));\nObject.defineProperty(exports, \"resolveProperties\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.resolveProperties;\n    }\n}));\nObject.defineProperty(exports, \"assert\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.assert;\n    }\n}));\nObject.defineProperty(exports, \"assertArgument\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.assertArgument;\n    }\n}));\nObject.defineProperty(exports, \"assertArgumentCount\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.assertArgumentCount;\n    }\n}));\nObject.defineProperty(exports, \"assertNormalize\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.assertNormalize;\n    }\n}));\nObject.defineProperty(exports, \"assertPrivate\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.assertPrivate;\n    }\n}));\nObject.defineProperty(exports, \"makeError\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.makeError;\n    }\n}));\nObject.defineProperty(exports, \"isCallException\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.isCallException;\n    }\n}));\nObject.defineProperty(exports, \"isError\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.isError;\n    }\n}));\nObject.defineProperty(exports, \"EventPayload\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.EventPayload;\n    }\n}));\nObject.defineProperty(exports, \"FetchRequest\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.FetchRequest;\n    }\n}));\nObject.defineProperty(exports, \"FetchResponse\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.FetchResponse;\n    }\n}));\nObject.defineProperty(exports, \"FetchCancelSignal\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.FetchCancelSignal;\n    }\n}));\nObject.defineProperty(exports, \"FixedNumber\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.FixedNumber;\n    }\n}));\nObject.defineProperty(exports, \"getBigInt\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.getBigInt;\n    }\n}));\nObject.defineProperty(exports, \"getNumber\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.getNumber;\n    }\n}));\nObject.defineProperty(exports, \"getUint\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.getUint;\n    }\n}));\nObject.defineProperty(exports, \"toBeArray\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.toBeArray;\n    }\n}));\nObject.defineProperty(exports, \"toBigInt\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.toBigInt;\n    }\n}));\nObject.defineProperty(exports, \"toBeHex\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.toBeHex;\n    }\n}));\nObject.defineProperty(exports, \"toNumber\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.toNumber;\n    }\n}));\nObject.defineProperty(exports, \"toQuantity\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.toQuantity;\n    }\n}));\nObject.defineProperty(exports, \"fromTwos\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.fromTwos;\n    }\n}));\nObject.defineProperty(exports, \"toTwos\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.toTwos;\n    }\n}));\nObject.defineProperty(exports, \"mask\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.mask;\n    }\n}));\nObject.defineProperty(exports, \"formatEther\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.formatEther;\n    }\n}));\nObject.defineProperty(exports, \"parseEther\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.parseEther;\n    }\n}));\nObject.defineProperty(exports, \"formatUnits\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.formatUnits;\n    }\n}));\nObject.defineProperty(exports, \"parseUnits\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.parseUnits;\n    }\n}));\nObject.defineProperty(exports, \"toUtf8Bytes\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.toUtf8Bytes;\n    }\n}));\nObject.defineProperty(exports, \"toUtf8CodePoints\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.toUtf8CodePoints;\n    }\n}));\nObject.defineProperty(exports, \"toUtf8String\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.toUtf8String;\n    }\n}));\nObject.defineProperty(exports, \"Utf8ErrorFuncs\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.Utf8ErrorFuncs;\n    }\n}));\nObject.defineProperty(exports, \"decodeRlp\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.decodeRlp;\n    }\n}));\nObject.defineProperty(exports, \"encodeRlp\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.encodeRlp;\n    }\n}));\nObject.defineProperty(exports, \"uuidV4\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_9.uuidV4;\n    }\n}));\nvar index_js_10 = __webpack_require__(/*! ./wallet/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wallet/index.js\");\nObject.defineProperty(exports, \"Mnemonic\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_10.Mnemonic;\n    }\n}));\nObject.defineProperty(exports, \"BaseWallet\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_10.BaseWallet;\n    }\n}));\nObject.defineProperty(exports, \"HDNodeWallet\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_10.HDNodeWallet;\n    }\n}));\nObject.defineProperty(exports, \"HDNodeVoidWallet\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_10.HDNodeVoidWallet;\n    }\n}));\nObject.defineProperty(exports, \"Wallet\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_10.Wallet;\n    }\n}));\nObject.defineProperty(exports, \"defaultPath\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_10.defaultPath;\n    }\n}));\nObject.defineProperty(exports, \"getAccountPath\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_10.getAccountPath;\n    }\n}));\nObject.defineProperty(exports, \"getIndexedAccountPath\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_10.getIndexedAccountPath;\n    }\n}));\nObject.defineProperty(exports, \"isCrowdsaleJson\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_10.isCrowdsaleJson;\n    }\n}));\nObject.defineProperty(exports, \"isKeystoreJson\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_10.isKeystoreJson;\n    }\n}));\nObject.defineProperty(exports, \"decryptCrowdsaleJson\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_10.decryptCrowdsaleJson;\n    }\n}));\nObject.defineProperty(exports, \"decryptKeystoreJsonSync\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_10.decryptKeystoreJsonSync;\n    }\n}));\nObject.defineProperty(exports, \"decryptKeystoreJson\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_10.decryptKeystoreJson;\n    }\n}));\nObject.defineProperty(exports, \"encryptKeystoreJson\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_10.encryptKeystoreJson;\n    }\n}));\nObject.defineProperty(exports, \"encryptKeystoreJsonSync\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_10.encryptKeystoreJsonSync;\n    }\n}));\nvar index_js_11 = __webpack_require__(/*! ./wordlists/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/index.js\");\nObject.defineProperty(exports, \"Wordlist\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_11.Wordlist;\n    }\n}));\nObject.defineProperty(exports, \"LangEn\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_11.LangEn;\n    }\n}));\nObject.defineProperty(exports, \"WordlistOwl\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_11.WordlistOwl;\n    }\n}));\nObject.defineProperty(exports, \"WordlistOwlA\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_11.WordlistOwlA;\n    }\n}));\nObject.defineProperty(exports, \"wordlists\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_11.wordlists;\n    }\n})); //# sourceMappingURL=ethers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/ethers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/hash/id.js":
/*!*****************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/hash/id.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.id = void 0;\nconst index_js_1 = __webpack_require__(/*! ../crypto/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\n/**\n *  A simple hashing function which operates on UTF-8 strings to\n *  compute an 32-byte identifier.\n *\n *  This simply computes the [UTF-8 bytes](toUtf8Bytes) and computes\n *  the [[keccak256]].\n *\n *  @example:\n *    id(\"hello world\")\n *    //_result:\n */ function id(value) {\n    return (0, index_js_1.keccak256)((0, index_js_2.toUtf8Bytes)(value));\n}\nexports.id = id; //# sourceMappingURL=id.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9oYXNoL2lkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxVQUFVLEdBQUcsS0FBSztBQUNsQixNQUFNRyxhQUFhQyxtQkFBT0EsQ0FBQyxvRkFBb0I7QUFDL0MsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUMsa0ZBQW1CO0FBQzlDOzs7Ozs7Ozs7O0NBVUMsR0FDRCxTQUFTRixHQUFHRCxLQUFLO0lBQ2IsT0FBTyxDQUFDLEdBQUdFLFdBQVdHLFNBQVMsRUFBRSxDQUFDLEdBQUdELFdBQVdFLFdBQVcsRUFBRU47QUFDakU7QUFDQUQsVUFBVSxHQUFHRSxJQUNiLDhCQUE4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL2hhc2gvaWQuanM/N2VjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaWQgPSB2b2lkIDA7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4uL2NyeXB0by9pbmRleC5qc1wiKTtcbmNvbnN0IGluZGV4X2pzXzIgPSByZXF1aXJlKFwiLi4vdXRpbHMvaW5kZXguanNcIik7XG4vKipcbiAqICBBIHNpbXBsZSBoYXNoaW5nIGZ1bmN0aW9uIHdoaWNoIG9wZXJhdGVzIG9uIFVURi04IHN0cmluZ3MgdG9cbiAqICBjb21wdXRlIGFuIDMyLWJ5dGUgaWRlbnRpZmllci5cbiAqXG4gKiAgVGhpcyBzaW1wbHkgY29tcHV0ZXMgdGhlIFtVVEYtOCBieXRlc10odG9VdGY4Qnl0ZXMpIGFuZCBjb21wdXRlc1xuICogIHRoZSBbW2tlY2NhazI1Nl1dLlxuICpcbiAqICBAZXhhbXBsZTpcbiAqICAgIGlkKFwiaGVsbG8gd29ybGRcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqL1xuZnVuY3Rpb24gaWQodmFsdWUpIHtcbiAgICByZXR1cm4gKDAsIGluZGV4X2pzXzEua2VjY2FrMjU2KSgoMCwgaW5kZXhfanNfMi50b1V0ZjhCeXRlcykodmFsdWUpKTtcbn1cbmV4cG9ydHMuaWQgPSBpZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlkLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlkIiwiaW5kZXhfanNfMSIsInJlcXVpcmUiLCJpbmRleF9qc18yIiwia2VjY2FrMjU2IiwidG9VdGY4Qnl0ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/hash/id.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/hash/index.js":
/*!********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/hash/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  Utilities for common tasks involving hashing. Also see\n *  [cryptographic hashing](about-crypto-hashing).\n *\n *  @_section: api/hashing:Hashing Utilities  [about-hashing]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.verifyTypedData = exports.TypedDataEncoder = exports.solidityPackedSha256 = exports.solidityPackedKeccak256 = exports.solidityPacked = exports.verifyMessage = exports.hashMessage = exports.dnsEncode = exports.namehash = exports.isValidName = exports.ensNormalize = exports.id = void 0;\nvar id_js_1 = __webpack_require__(/*! ./id.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/hash/id.js\");\nObject.defineProperty(exports, \"id\", ({\n    enumerable: true,\n    get: function() {\n        return id_js_1.id;\n    }\n}));\nvar namehash_js_1 = __webpack_require__(/*! ./namehash.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/hash/namehash.js\");\nObject.defineProperty(exports, \"ensNormalize\", ({\n    enumerable: true,\n    get: function() {\n        return namehash_js_1.ensNormalize;\n    }\n}));\nObject.defineProperty(exports, \"isValidName\", ({\n    enumerable: true,\n    get: function() {\n        return namehash_js_1.isValidName;\n    }\n}));\nObject.defineProperty(exports, \"namehash\", ({\n    enumerable: true,\n    get: function() {\n        return namehash_js_1.namehash;\n    }\n}));\nObject.defineProperty(exports, \"dnsEncode\", ({\n    enumerable: true,\n    get: function() {\n        return namehash_js_1.dnsEncode;\n    }\n}));\nvar message_js_1 = __webpack_require__(/*! ./message.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/hash/message.js\");\nObject.defineProperty(exports, \"hashMessage\", ({\n    enumerable: true,\n    get: function() {\n        return message_js_1.hashMessage;\n    }\n}));\nObject.defineProperty(exports, \"verifyMessage\", ({\n    enumerable: true,\n    get: function() {\n        return message_js_1.verifyMessage;\n    }\n}));\nvar solidity_js_1 = __webpack_require__(/*! ./solidity.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/hash/solidity.js\");\nObject.defineProperty(exports, \"solidityPacked\", ({\n    enumerable: true,\n    get: function() {\n        return solidity_js_1.solidityPacked;\n    }\n}));\nObject.defineProperty(exports, \"solidityPackedKeccak256\", ({\n    enumerable: true,\n    get: function() {\n        return solidity_js_1.solidityPackedKeccak256;\n    }\n}));\nObject.defineProperty(exports, \"solidityPackedSha256\", ({\n    enumerable: true,\n    get: function() {\n        return solidity_js_1.solidityPackedSha256;\n    }\n}));\nvar typed_data_js_1 = __webpack_require__(/*! ./typed-data.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/hash/typed-data.js\");\nObject.defineProperty(exports, \"TypedDataEncoder\", ({\n    enumerable: true,\n    get: function() {\n        return typed_data_js_1.TypedDataEncoder;\n    }\n}));\nObject.defineProperty(exports, \"verifyTypedData\", ({\n    enumerable: true,\n    get: function() {\n        return typed_data_js_1.verifyTypedData;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9oYXNoL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7O0NBS0MsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHQSx3QkFBd0IsR0FBR0EsNEJBQTRCLEdBQUdBLCtCQUErQixHQUFHQSxzQkFBc0IsR0FBR0EscUJBQXFCLEdBQUdBLG1CQUFtQixHQUFHQSxpQkFBaUIsR0FBR0EsZ0JBQWdCLEdBQUdBLG1CQUFtQixHQUFHQSxvQkFBb0IsR0FBR0EsVUFBVSxHQUFHLEtBQUs7QUFDblMsSUFBSWMsVUFBVUMsbUJBQU9BLENBQUMsb0VBQVM7QUFDL0JqQixzQ0FBcUM7SUFBRWtCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILFFBQVFELEVBQUU7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNuRyxJQUFJSyxnQkFBZ0JILG1CQUFPQSxDQUFDLGdGQUFlO0FBQzNDakIsZ0RBQStDO0lBQUVrQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxjQUFjTixZQUFZO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDN0hkLCtDQUE4QztJQUFFa0IsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsY0FBY1AsV0FBVztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzNIYiw0Q0FBMkM7SUFBRWtCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLGNBQWNSLFFBQVE7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNySFosNkNBQTRDO0lBQUVrQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxjQUFjVCxTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdkgsSUFBSVUsZUFBZUosbUJBQU9BLENBQUMsOEVBQWM7QUFDekNqQiwrQ0FBOEM7SUFBRWtCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLGFBQWFYLFdBQVc7SUFBRTtBQUFFLENBQUMsRUFBQztBQUMxSFYsaURBQWdEO0lBQUVrQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxhQUFhWixhQUFhO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDOUgsSUFBSWEsZ0JBQWdCTCxtQkFBT0EsQ0FBQyxnRkFBZTtBQUMzQ2pCLGtEQUFpRDtJQUFFa0IsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0csY0FBY2QsY0FBYztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2pJUiwyREFBMEQ7SUFBRWtCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9HLGNBQWNmLHVCQUF1QjtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ25KUCx3REFBdUQ7SUFBRWtCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9HLGNBQWNoQixvQkFBb0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUM3SSxJQUFJaUIsa0JBQWtCTixtQkFBT0EsQ0FBQyxvRkFBaUI7QUFDL0NqQixvREFBbUQ7SUFBRWtCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9JLGdCQUFnQmxCLGdCQUFnQjtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3ZJTCxtREFBa0Q7SUFBRWtCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9JLGdCQUFnQm5CLGVBQWU7SUFBRTtBQUFFLENBQUMsRUFBQyxFQUNySSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9oYXNoL2luZGV4LmpzP2UzMGIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqICBVdGlsaXRpZXMgZm9yIGNvbW1vbiB0YXNrcyBpbnZvbHZpbmcgaGFzaGluZy4gQWxzbyBzZWVcbiAqICBbY3J5cHRvZ3JhcGhpYyBoYXNoaW5nXShhYm91dC1jcnlwdG8taGFzaGluZykuXG4gKlxuICogIEBfc2VjdGlvbjogYXBpL2hhc2hpbmc6SGFzaGluZyBVdGlsaXRpZXMgIFthYm91dC1oYXNoaW5nXVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZlcmlmeVR5cGVkRGF0YSA9IGV4cG9ydHMuVHlwZWREYXRhRW5jb2RlciA9IGV4cG9ydHMuc29saWRpdHlQYWNrZWRTaGEyNTYgPSBleHBvcnRzLnNvbGlkaXR5UGFja2VkS2VjY2FrMjU2ID0gZXhwb3J0cy5zb2xpZGl0eVBhY2tlZCA9IGV4cG9ydHMudmVyaWZ5TWVzc2FnZSA9IGV4cG9ydHMuaGFzaE1lc3NhZ2UgPSBleHBvcnRzLmRuc0VuY29kZSA9IGV4cG9ydHMubmFtZWhhc2ggPSBleHBvcnRzLmlzVmFsaWROYW1lID0gZXhwb3J0cy5lbnNOb3JtYWxpemUgPSBleHBvcnRzLmlkID0gdm9pZCAwO1xudmFyIGlkX2pzXzEgPSByZXF1aXJlKFwiLi9pZC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlkXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpZF9qc18xLmlkOyB9IH0pO1xudmFyIG5hbWVoYXNoX2pzXzEgPSByZXF1aXJlKFwiLi9uYW1laGFzaC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVuc05vcm1hbGl6ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmFtZWhhc2hfanNfMS5lbnNOb3JtYWxpemU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1ZhbGlkTmFtZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmFtZWhhc2hfanNfMS5pc1ZhbGlkTmFtZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm5hbWVoYXNoXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuYW1laGFzaF9qc18xLm5hbWVoYXNoOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZG5zRW5jb2RlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuYW1laGFzaF9qc18xLmRuc0VuY29kZTsgfSB9KTtcbnZhciBtZXNzYWdlX2pzXzEgPSByZXF1aXJlKFwiLi9tZXNzYWdlLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaGFzaE1lc3NhZ2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VfanNfMS5oYXNoTWVzc2FnZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInZlcmlmeU1lc3NhZ2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VfanNfMS52ZXJpZnlNZXNzYWdlOyB9IH0pO1xudmFyIHNvbGlkaXR5X2pzXzEgPSByZXF1aXJlKFwiLi9zb2xpZGl0eS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNvbGlkaXR5UGFja2VkXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzb2xpZGl0eV9qc18xLnNvbGlkaXR5UGFja2VkOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic29saWRpdHlQYWNrZWRLZWNjYWsyNTZcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvbGlkaXR5X2pzXzEuc29saWRpdHlQYWNrZWRLZWNjYWsyNTY7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzb2xpZGl0eVBhY2tlZFNoYTI1NlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc29saWRpdHlfanNfMS5zb2xpZGl0eVBhY2tlZFNoYTI1NjsgfSB9KTtcbnZhciB0eXBlZF9kYXRhX2pzXzEgPSByZXF1aXJlKFwiLi90eXBlZC1kYXRhLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVHlwZWREYXRhRW5jb2RlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHlwZWRfZGF0YV9qc18xLlR5cGVkRGF0YUVuY29kZXI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2ZXJpZnlUeXBlZERhdGFcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR5cGVkX2RhdGFfanNfMS52ZXJpZnlUeXBlZERhdGE7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ2ZXJpZnlUeXBlZERhdGEiLCJUeXBlZERhdGFFbmNvZGVyIiwic29saWRpdHlQYWNrZWRTaGEyNTYiLCJzb2xpZGl0eVBhY2tlZEtlY2NhazI1NiIsInNvbGlkaXR5UGFja2VkIiwidmVyaWZ5TWVzc2FnZSIsImhhc2hNZXNzYWdlIiwiZG5zRW5jb2RlIiwibmFtZWhhc2giLCJpc1ZhbGlkTmFtZSIsImVuc05vcm1hbGl6ZSIsImlkIiwiaWRfanNfMSIsInJlcXVpcmUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwibmFtZWhhc2hfanNfMSIsIm1lc3NhZ2VfanNfMSIsInNvbGlkaXR5X2pzXzEiLCJ0eXBlZF9kYXRhX2pzXzEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/hash/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/hash/message.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/hash/message.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.verifyMessage = exports.hashMessage = void 0;\nconst index_js_1 = __webpack_require__(/*! ../crypto/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../constants/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/constants/index.js\");\nconst index_js_3 = __webpack_require__(/*! ../transaction/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/transaction/index.js\");\nconst index_js_4 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\n/**\n *  Computes the [[link-eip-191]] personal-sign message digest to sign.\n *\n *  This prefixes the message with [[MessagePrefix]] and the decimal length\n *  of %%message%% and computes the [[keccak256]] digest.\n *\n *  If %%message%% is a string, it is converted to its UTF-8 bytes\n *  first. To compute the digest of a [[DataHexString]], it must be converted\n *  to [bytes](getBytes).\n *\n *  @example:\n *    hashMessage(\"Hello World\")\n *    //_result:\n *\n *    // Hashes the SIX (6) string characters, i.e.\n *    // [ \"0\", \"x\", \"4\", \"2\", \"4\", \"3\" ]\n *    hashMessage(\"0x4243\")\n *    //_result:\n *\n *    // Hashes the TWO (2) bytes [ 0x42, 0x43 ]...\n *    hashMessage(getBytes(\"0x4243\"))\n *    //_result:\n *\n *    // ...which is equal to using data\n *    hashMessage(new Uint8Array([ 0x42, 0x43 ]))\n *    //_result:\n *\n */ function hashMessage(message) {\n    if (typeof message === \"string\") {\n        message = (0, index_js_4.toUtf8Bytes)(message);\n    }\n    return (0, index_js_1.keccak256)((0, index_js_4.concat)([\n        (0, index_js_4.toUtf8Bytes)(index_js_2.MessagePrefix),\n        (0, index_js_4.toUtf8Bytes)(String(message.length)),\n        message\n    ]));\n}\nexports.hashMessage = hashMessage;\n/**\n *  Return the address of the private key that produced\n *  the signature %%sig%% during signing for %%message%%.\n */ function verifyMessage(message, sig) {\n    const digest = hashMessage(message);\n    return (0, index_js_3.recoverAddress)(digest, sig);\n}\nexports.verifyMessage = verifyMessage; //# sourceMappingURL=message.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9oYXNoL21lc3NhZ2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHQSxtQkFBbUIsR0FBRyxLQUFLO0FBQ25ELE1BQU1JLGFBQWFDLG1CQUFPQSxDQUFDLG9GQUFvQjtBQUMvQyxNQUFNQyxhQUFhRCxtQkFBT0EsQ0FBQywwRkFBdUI7QUFDbEQsTUFBTUUsYUFBYUYsbUJBQU9BLENBQUMsOEZBQXlCO0FBQ3BELE1BQU1HLGFBQWFILG1CQUFPQSxDQUFDLGtGQUFtQjtBQUM5Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBMkJDLEdBQ0QsU0FBU0YsWUFBWU0sT0FBTztJQUN4QixJQUFJLE9BQVFBLFlBQWEsVUFBVTtRQUMvQkEsVUFBVSxDQUFDLEdBQUdELFdBQVdFLFdBQVcsRUFBRUQ7SUFDMUM7SUFDQSxPQUFPLENBQUMsR0FBR0wsV0FBV08sU0FBUyxFQUFFLENBQUMsR0FBR0gsV0FBV0ksTUFBTSxFQUFFO1FBQ25ELElBQUdKLFdBQVdFLFdBQVcsRUFBRUosV0FBV08sYUFBYTtRQUNuRCxJQUFHTCxXQUFXRSxXQUFXLEVBQUVJLE9BQU9MLFFBQVFNLE1BQU07UUFDakROO0tBQ0g7QUFDTDtBQUNBVCxtQkFBbUIsR0FBR0c7QUFDdEI7OztDQUdDLEdBQ0QsU0FBU0QsY0FBY08sT0FBTyxFQUFFTyxHQUFHO0lBQy9CLE1BQU1DLFNBQVNkLFlBQVlNO0lBQzNCLE9BQU8sQ0FBQyxHQUFHRixXQUFXVyxjQUFjLEVBQUVELFFBQVFEO0FBQ2xEO0FBQ0FoQixxQkFBcUIsR0FBR0UsZUFDeEIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvaGFzaC9tZXNzYWdlLmpzPzE0ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZlcmlmeU1lc3NhZ2UgPSBleHBvcnRzLmhhc2hNZXNzYWdlID0gdm9pZCAwO1xuY29uc3QgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuLi9jcnlwdG8vaW5kZXguanNcIik7XG5jb25zdCBpbmRleF9qc18yID0gcmVxdWlyZShcIi4uL2NvbnN0YW50cy9pbmRleC5qc1wiKTtcbmNvbnN0IGluZGV4X2pzXzMgPSByZXF1aXJlKFwiLi4vdHJhbnNhY3Rpb24vaW5kZXguanNcIik7XG5jb25zdCBpbmRleF9qc180ID0gcmVxdWlyZShcIi4uL3V0aWxzL2luZGV4LmpzXCIpO1xuLyoqXG4gKiAgQ29tcHV0ZXMgdGhlIFtbbGluay1laXAtMTkxXV0gcGVyc29uYWwtc2lnbiBtZXNzYWdlIGRpZ2VzdCB0byBzaWduLlxuICpcbiAqICBUaGlzIHByZWZpeGVzIHRoZSBtZXNzYWdlIHdpdGggW1tNZXNzYWdlUHJlZml4XV0gYW5kIHRoZSBkZWNpbWFsIGxlbmd0aFxuICogIG9mICUlbWVzc2FnZSUlIGFuZCBjb21wdXRlcyB0aGUgW1trZWNjYWsyNTZdXSBkaWdlc3QuXG4gKlxuICogIElmICUlbWVzc2FnZSUlIGlzIGEgc3RyaW5nLCBpdCBpcyBjb252ZXJ0ZWQgdG8gaXRzIFVURi04IGJ5dGVzXG4gKiAgZmlyc3QuIFRvIGNvbXB1dGUgdGhlIGRpZ2VzdCBvZiBhIFtbRGF0YUhleFN0cmluZ11dLCBpdCBtdXN0IGJlIGNvbnZlcnRlZFxuICogIHRvIFtieXRlc10oZ2V0Qnl0ZXMpLlxuICpcbiAqICBAZXhhbXBsZTpcbiAqICAgIGhhc2hNZXNzYWdlKFwiSGVsbG8gV29ybGRcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBIYXNoZXMgdGhlIFNJWCAoNikgc3RyaW5nIGNoYXJhY3RlcnMsIGkuZS5cbiAqICAgIC8vIFsgXCIwXCIsIFwieFwiLCBcIjRcIiwgXCIyXCIsIFwiNFwiLCBcIjNcIiBdXG4gKiAgICBoYXNoTWVzc2FnZShcIjB4NDI0M1wiKVxuICogICAgLy9fcmVzdWx0OlxuICpcbiAqICAgIC8vIEhhc2hlcyB0aGUgVFdPICgyKSBieXRlcyBbIDB4NDIsIDB4NDMgXS4uLlxuICogICAgaGFzaE1lc3NhZ2UoZ2V0Qnl0ZXMoXCIweDQyNDNcIikpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAgLy8gLi4ud2hpY2ggaXMgZXF1YWwgdG8gdXNpbmcgZGF0YVxuICogICAgaGFzaE1lc3NhZ2UobmV3IFVpbnQ4QXJyYXkoWyAweDQyLCAweDQzIF0pKVxuICogICAgLy9fcmVzdWx0OlxuICpcbiAqL1xuZnVuY3Rpb24gaGFzaE1lc3NhZ2UobWVzc2FnZSkge1xuICAgIGlmICh0eXBlb2YgKG1lc3NhZ2UpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIG1lc3NhZ2UgPSAoMCwgaW5kZXhfanNfNC50b1V0ZjhCeXRlcykobWVzc2FnZSk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgaW5kZXhfanNfMS5rZWNjYWsyNTYpKCgwLCBpbmRleF9qc180LmNvbmNhdCkoW1xuICAgICAgICAoMCwgaW5kZXhfanNfNC50b1V0ZjhCeXRlcykoaW5kZXhfanNfMi5NZXNzYWdlUHJlZml4KSxcbiAgICAgICAgKDAsIGluZGV4X2pzXzQudG9VdGY4Qnl0ZXMpKFN0cmluZyhtZXNzYWdlLmxlbmd0aCkpLFxuICAgICAgICBtZXNzYWdlXG4gICAgXSkpO1xufVxuZXhwb3J0cy5oYXNoTWVzc2FnZSA9IGhhc2hNZXNzYWdlO1xuLyoqXG4gKiAgUmV0dXJuIHRoZSBhZGRyZXNzIG9mIHRoZSBwcml2YXRlIGtleSB0aGF0IHByb2R1Y2VkXG4gKiAgdGhlIHNpZ25hdHVyZSAlJXNpZyUlIGR1cmluZyBzaWduaW5nIGZvciAlJW1lc3NhZ2UlJS5cbiAqL1xuZnVuY3Rpb24gdmVyaWZ5TWVzc2FnZShtZXNzYWdlLCBzaWcpIHtcbiAgICBjb25zdCBkaWdlc3QgPSBoYXNoTWVzc2FnZShtZXNzYWdlKTtcbiAgICByZXR1cm4gKDAsIGluZGV4X2pzXzMucmVjb3ZlckFkZHJlc3MpKGRpZ2VzdCwgc2lnKTtcbn1cbmV4cG9ydHMudmVyaWZ5TWVzc2FnZSA9IHZlcmlmeU1lc3NhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXNzYWdlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInZlcmlmeU1lc3NhZ2UiLCJoYXNoTWVzc2FnZSIsImluZGV4X2pzXzEiLCJyZXF1aXJlIiwiaW5kZXhfanNfMiIsImluZGV4X2pzXzMiLCJpbmRleF9qc180IiwibWVzc2FnZSIsInRvVXRmOEJ5dGVzIiwia2VjY2FrMjU2IiwiY29uY2F0IiwiTWVzc2FnZVByZWZpeCIsIlN0cmluZyIsImxlbmd0aCIsInNpZyIsImRpZ2VzdCIsInJlY292ZXJBZGRyZXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/hash/message.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/hash/namehash.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/hash/namehash.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.dnsEncode = exports.namehash = exports.isValidName = exports.ensNormalize = void 0;\nconst index_js_1 = __webpack_require__(/*! ../crypto/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst ens_normalize_1 = __webpack_require__(/*! @adraffy/ens-normalize */ \"(rsc)/./node_modules/ethers/node_modules/@adraffy/ens-normalize/dist/index.cjs\");\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\nfunction checkComponent(comp) {\n    (0, index_js_2.assertArgument)(comp.length !== 0, \"invalid ENS name; empty component\", \"comp\", comp);\n    return comp;\n}\nfunction ensNameSplit(name) {\n    const bytes = (0, index_js_2.toUtf8Bytes)(ensNormalize(name));\n    const comps = [];\n    if (name.length === 0) {\n        return comps;\n    }\n    let last = 0;\n    for(let i = 0; i < bytes.length; i++){\n        const d = bytes[i];\n        // A separator (i.e. \".\"); copy this component\n        if (d === 0x2e) {\n            comps.push(checkComponent(bytes.slice(last, i)));\n            last = i + 1;\n        }\n    }\n    // There was a stray separator at the end of the name\n    (0, index_js_2.assertArgument)(last < bytes.length, \"invalid ENS name; empty component\", \"name\", name);\n    comps.push(checkComponent(bytes.slice(last)));\n    return comps;\n}\n/**\n *  Returns the ENS %%name%% normalized.\n */ function ensNormalize(name) {\n    try {\n        if (name.length === 0) {\n            throw new Error(\"empty label\");\n        }\n        return (0, ens_normalize_1.ens_normalize)(name);\n    } catch (error) {\n        (0, index_js_2.assertArgument)(false, `invalid ENS name (${error.message})`, \"name\", name);\n    }\n}\nexports.ensNormalize = ensNormalize;\n/**\n *  Returns ``true`` if %%name%% is a valid ENS name.\n */ function isValidName(name) {\n    try {\n        return ensNameSplit(name).length !== 0;\n    } catch (error) {}\n    return false;\n}\nexports.isValidName = isValidName;\n/**\n *  Returns the [[link-namehash]] for %%name%%.\n */ function namehash(name) {\n    (0, index_js_2.assertArgument)(typeof name === \"string\", \"invalid ENS name; not a string\", \"name\", name);\n    (0, index_js_2.assertArgument)(name.length, `invalid ENS name (empty label)`, \"name\", name);\n    let result = Zeros;\n    const comps = ensNameSplit(name);\n    while(comps.length){\n        result = (0, index_js_1.keccak256)((0, index_js_2.concat)([\n            result,\n            (0, index_js_1.keccak256)(comps.pop())\n        ]));\n    }\n    return (0, index_js_2.hexlify)(result);\n}\nexports.namehash = namehash;\n/**\n *  Returns the DNS encoded %%name%%.\n *\n *  This is used for various parts of ENS name resolution, such\n *  as the wildcard resolution.\n */ function dnsEncode(name) {\n    return (0, index_js_2.hexlify)((0, index_js_2.concat)(ensNameSplit(name).map((comp)=>{\n        // DNS does not allow components over 63 bytes in length\n        if (comp.length > 63) {\n            throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n        }\n        const bytes = new Uint8Array(comp.length + 1);\n        bytes.set(comp, 1);\n        bytes[0] = bytes.length - 1;\n        return bytes;\n    }))) + \"00\";\n}\nexports.dnsEncode = dnsEncode; //# sourceMappingURL=namehash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/hash/namehash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/hash/solidity.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/hash/solidity.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.solidityPackedSha256 = exports.solidityPackedKeccak256 = exports.solidityPacked = void 0;\nconst index_js_1 = __webpack_require__(/*! ../address/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../crypto/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/index.js\");\nconst index_js_3 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nfunction _pack(type, value, isArray) {\n    switch(type){\n        case \"address\":\n            if (isArray) {\n                return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)(value, 32));\n            }\n            return (0, index_js_3.getBytes)((0, index_js_1.getAddress)(value));\n        case \"string\":\n            return (0, index_js_3.toUtf8Bytes)(value);\n        case \"bytes\":\n            return (0, index_js_3.getBytes)(value);\n        case \"bool\":\n            value = !!value ? \"0x01\" : \"0x00\";\n            if (isArray) {\n                return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)(value, 32));\n            }\n            return (0, index_js_3.getBytes)(value);\n    }\n    let match = type.match(regexNumber);\n    if (match) {\n        let signed = match[1] === \"int\";\n        let size = parseInt(match[2] || \"256\");\n        (0, index_js_3.assertArgument)((!match[2] || match[2] === String(size)) && size % 8 === 0 && size !== 0 && size <= 256, \"invalid number type\", \"type\", type);\n        if (isArray) {\n            size = 256;\n        }\n        if (signed) {\n            value = (0, index_js_3.toTwos)(value, size);\n        }\n        return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)((0, index_js_3.toBeArray)(value), size / 8));\n    }\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n        (0, index_js_3.assertArgument)(String(size) === match[1] && size !== 0 && size <= 32, \"invalid bytes type\", \"type\", type);\n        (0, index_js_3.assertArgument)((0, index_js_3.dataLength)(value) === size, `invalid value for ${type}`, \"value\", value);\n        if (isArray) {\n            return (0, index_js_3.getBytes)((0, index_js_3.zeroPadBytes)(value, 32));\n        }\n        return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        (0, index_js_3.assertArgument)(count === value.length, `invalid array length for ${type}`, \"value\", value);\n        const result = [];\n        value.forEach(function(value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return (0, index_js_3.getBytes)((0, index_js_3.concat)(result));\n    }\n    (0, index_js_3.assertArgument)(false, \"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\n/**\n *   Computes the [[link-solc-packed]] representation of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPacked([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */ function solidityPacked(types, values) {\n    (0, index_js_3.assertArgument)(types.length === values.length, \"wrong number of values; expected ${ types.length }\", \"values\", values);\n    const tight = [];\n    types.forEach(function(type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return (0, index_js_3.hexlify)((0, index_js_3.concat)(tight));\n}\nexports.solidityPacked = solidityPacked;\n/**\n *   Computes the [[link-solc-packed]] [[keccak256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedKeccak256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */ function solidityPackedKeccak256(types, values) {\n    return (0, index_js_2.keccak256)(solidityPacked(types, values));\n}\nexports.solidityPackedKeccak256 = solidityPackedKeccak256;\n/**\n *   Computes the [[link-solc-packed]] [[sha256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedSha256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */ function solidityPackedSha256(types, values) {\n    return (0, index_js_2.sha256)(solidityPacked(types, values));\n}\nexports.solidityPackedSha256 = solidityPackedSha256; //# sourceMappingURL=solidity.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9oYXNoL3NvbGlkaXR5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw0QkFBNEIsR0FBR0EsK0JBQStCLEdBQUdBLHNCQUFzQixHQUFHLEtBQUs7QUFDL0YsTUFBTUssYUFBYUMsbUJBQU9BLENBQUMsc0ZBQXFCO0FBQ2hELE1BQU1DLGFBQWFELG1CQUFPQSxDQUFDLG9GQUFvQjtBQUMvQyxNQUFNRSxhQUFhRixtQkFBT0EsQ0FBQyxrRkFBbUI7QUFDOUMsTUFBTUcsYUFBYSxJQUFJQyxPQUFPO0FBQzlCLE1BQU1DLGNBQWMsSUFBSUQsT0FBTztBQUMvQixNQUFNRSxhQUFhLElBQUlGLE9BQU87QUFDOUIsU0FBU0csTUFBTUMsSUFBSSxFQUFFYixLQUFLLEVBQUVjLE9BQU87SUFDL0IsT0FBUUQ7UUFDSixLQUFLO1lBQ0QsSUFBSUMsU0FBUztnQkFDVCxPQUFPLENBQUMsR0FBR1AsV0FBV1EsUUFBUSxFQUFFLENBQUMsR0FBR1IsV0FBV1MsWUFBWSxFQUFFaEIsT0FBTztZQUN4RTtZQUNBLE9BQU8sQ0FBQyxHQUFHTyxXQUFXUSxRQUFRLEVBQUUsQ0FBQyxHQUFHWCxXQUFXYSxVQUFVLEVBQUVqQjtRQUMvRCxLQUFLO1lBQ0QsT0FBTyxDQUFDLEdBQUdPLFdBQVdXLFdBQVcsRUFBRWxCO1FBQ3ZDLEtBQUs7WUFDRCxPQUFPLENBQUMsR0FBR08sV0FBV1EsUUFBUSxFQUFFZjtRQUNwQyxLQUFLO1lBQ0RBLFFBQVMsQ0FBQyxDQUFDQSxRQUFRLFNBQVM7WUFDNUIsSUFBSWMsU0FBUztnQkFDVCxPQUFPLENBQUMsR0FBR1AsV0FBV1EsUUFBUSxFQUFFLENBQUMsR0FBR1IsV0FBV1MsWUFBWSxFQUFFaEIsT0FBTztZQUN4RTtZQUNBLE9BQU8sQ0FBQyxHQUFHTyxXQUFXUSxRQUFRLEVBQUVmO0lBQ3hDO0lBQ0EsSUFBSW1C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RUMsTUFBTTtJQUMxQyxPQUFPLENBQUMsR0FBR2hDLFdBQVdvQyxTQUFTLEVBQUV2QyxlQUFla0MsT0FBT0M7QUFDM0Q7QUFDQXZDLCtCQUErQixHQUFHRztBQUNsQzs7Ozs7Ozs7Q0FRQyxHQUNELFNBQVNELHFCQUFxQm9DLEtBQUssRUFBRUMsTUFBTTtJQUN2QyxPQUFPLENBQUMsR0FBR2hDLFdBQVdxQyxNQUFNLEVBQUV4QyxlQUFla0MsT0FBT0M7QUFDeEQ7QUFDQXZDLDRCQUE0QixHQUFHRSxzQkFDL0Isb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvaGFzaC9zb2xpZGl0eS5qcz82ZDdkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zb2xpZGl0eVBhY2tlZFNoYTI1NiA9IGV4cG9ydHMuc29saWRpdHlQYWNrZWRLZWNjYWsyNTYgPSBleHBvcnRzLnNvbGlkaXR5UGFja2VkID0gdm9pZCAwO1xuY29uc3QgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuLi9hZGRyZXNzL2luZGV4LmpzXCIpO1xuY29uc3QgaW5kZXhfanNfMiA9IHJlcXVpcmUoXCIuLi9jcnlwdG8vaW5kZXguanNcIik7XG5jb25zdCBpbmRleF9qc18zID0gcmVxdWlyZShcIi4uL3V0aWxzL2luZGV4LmpzXCIpO1xuY29uc3QgcmVnZXhCeXRlcyA9IG5ldyBSZWdFeHAoXCJeYnl0ZXMoWzAtOV0rKSRcIik7XG5jb25zdCByZWdleE51bWJlciA9IG5ldyBSZWdFeHAoXCJeKHU/aW50KShbMC05XSopJFwiKTtcbmNvbnN0IHJlZ2V4QXJyYXkgPSBuZXcgUmVnRXhwKFwiXiguKilcXFxcWyhbMC05XSopXFxcXF0kXCIpO1xuZnVuY3Rpb24gX3BhY2sodHlwZSwgdmFsdWUsIGlzQXJyYXkpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcImFkZHJlc3NcIjpcbiAgICAgICAgICAgIGlmIChpc0FycmF5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBpbmRleF9qc18zLmdldEJ5dGVzKSgoMCwgaW5kZXhfanNfMy56ZXJvUGFkVmFsdWUpKHZhbHVlLCAzMikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICgwLCBpbmRleF9qc18zLmdldEJ5dGVzKSgoMCwgaW5kZXhfanNfMS5nZXRBZGRyZXNzKSh2YWx1ZSkpO1xuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICByZXR1cm4gKDAsIGluZGV4X2pzXzMudG9VdGY4Qnl0ZXMpKHZhbHVlKTtcbiAgICAgICAgY2FzZSBcImJ5dGVzXCI6XG4gICAgICAgICAgICByZXR1cm4gKDAsIGluZGV4X2pzXzMuZ2V0Qnl0ZXMpKHZhbHVlKTtcbiAgICAgICAgY2FzZSBcImJvb2xcIjpcbiAgICAgICAgICAgIHZhbHVlID0gKCEhdmFsdWUgPyBcIjB4MDFcIiA6IFwiMHgwMFwiKTtcbiAgICAgICAgICAgIGlmIChpc0FycmF5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBpbmRleF9qc18zLmdldEJ5dGVzKSgoMCwgaW5kZXhfanNfMy56ZXJvUGFkVmFsdWUpKHZhbHVlLCAzMikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICgwLCBpbmRleF9qc18zLmdldEJ5dGVzKSh2YWx1ZSk7XG4gICAgfVxuICAgIGxldCBtYXRjaCA9IHR5cGUubWF0Y2gocmVnZXhOdW1iZXIpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICBsZXQgc2lnbmVkID0gKG1hdGNoWzFdID09PSBcImludFwiKTtcbiAgICAgICAgbGV0IHNpemUgPSBwYXJzZUludChtYXRjaFsyXSB8fCBcIjI1NlwiKTtcbiAgICAgICAgKDAsIGluZGV4X2pzXzMuYXNzZXJ0QXJndW1lbnQpKCghbWF0Y2hbMl0gfHwgbWF0Y2hbMl0gPT09IFN0cmluZyhzaXplKSkgJiYgKHNpemUgJSA4ID09PSAwKSAmJiBzaXplICE9PSAwICYmIHNpemUgPD0gMjU2LCBcImludmFsaWQgbnVtYmVyIHR5cGVcIiwgXCJ0eXBlXCIsIHR5cGUpO1xuICAgICAgICBpZiAoaXNBcnJheSkge1xuICAgICAgICAgICAgc2l6ZSA9IDI1NjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2lnbmVkKSB7XG4gICAgICAgICAgICB2YWx1ZSA9ICgwLCBpbmRleF9qc18zLnRvVHdvcykodmFsdWUsIHNpemUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoMCwgaW5kZXhfanNfMy5nZXRCeXRlcykoKDAsIGluZGV4X2pzXzMuemVyb1BhZFZhbHVlKSgoMCwgaW5kZXhfanNfMy50b0JlQXJyYXkpKHZhbHVlKSwgc2l6ZSAvIDgpKTtcbiAgICB9XG4gICAgbWF0Y2ggPSB0eXBlLm1hdGNoKHJlZ2V4Qnl0ZXMpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICBjb25zdCBzaXplID0gcGFyc2VJbnQobWF0Y2hbMV0pO1xuICAgICAgICAoMCwgaW5kZXhfanNfMy5hc3NlcnRBcmd1bWVudCkoU3RyaW5nKHNpemUpID09PSBtYXRjaFsxXSAmJiBzaXplICE9PSAwICYmIHNpemUgPD0gMzIsIFwiaW52YWxpZCBieXRlcyB0eXBlXCIsIFwidHlwZVwiLCB0eXBlKTtcbiAgICAgICAgKDAsIGluZGV4X2pzXzMuYXNzZXJ0QXJndW1lbnQpKCgwLCBpbmRleF9qc18zLmRhdGFMZW5ndGgpKHZhbHVlKSA9PT0gc2l6ZSwgYGludmFsaWQgdmFsdWUgZm9yICR7dHlwZX1gLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgaW5kZXhfanNfMy5nZXRCeXRlcykoKDAsIGluZGV4X2pzXzMuemVyb1BhZEJ5dGVzKSh2YWx1ZSwgMzIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIG1hdGNoID0gdHlwZS5tYXRjaChyZWdleEFycmF5KTtcbiAgICBpZiAobWF0Y2ggJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgYmFzZVR5cGUgPSBtYXRjaFsxXTtcbiAgICAgICAgY29uc3QgY291bnQgPSBwYXJzZUludChtYXRjaFsyXSB8fCBTdHJpbmcodmFsdWUubGVuZ3RoKSk7XG4gICAgICAgICgwLCBpbmRleF9qc18zLmFzc2VydEFyZ3VtZW50KShjb3VudCA9PT0gdmFsdWUubGVuZ3RoLCBgaW52YWxpZCBhcnJheSBsZW5ndGggZm9yICR7dHlwZX1gLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChfcGFjayhiYXNlVHlwZSwgdmFsdWUsIHRydWUpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAoMCwgaW5kZXhfanNfMy5nZXRCeXRlcykoKDAsIGluZGV4X2pzXzMuY29uY2F0KShyZXN1bHQpKTtcbiAgICB9XG4gICAgKDAsIGluZGV4X2pzXzMuYXNzZXJ0QXJndW1lbnQpKGZhbHNlLCBcImludmFsaWQgdHlwZVwiLCBcInR5cGVcIiwgdHlwZSk7XG59XG4vLyBAVE9ETzogQXJyYXkgRW51bVxuLyoqXG4gKiAgIENvbXB1dGVzIHRoZSBbW2xpbmstc29sYy1wYWNrZWRdXSByZXByZXNlbnRhdGlvbiBvZiAlJXZhbHVlcyUlXG4gKiAgIHJlc3BlY3RpdmVseSB0byB0aGVpciAlJXR5cGVzJSUuXG4gKlxuICogICBAZXhhbXBsZTpcbiAqICAgICAgIGFkZHIgPSBcIjB4OGJhMWYxMDk1NTFiZDQzMjgwMzAxMjY0NWFjMTM2ZGRkNjRkYmE3MlwiXG4gKiAgICAgICBzb2xpZGl0eVBhY2tlZChbIFwiYWRkcmVzc1wiLCBcInVpbnRcIiBdLCBbIGFkZHIsIDQ1IF0pO1xuICogICAgICAgLy9fcmVzdWx0OlxuICovXG5mdW5jdGlvbiBzb2xpZGl0eVBhY2tlZCh0eXBlcywgdmFsdWVzKSB7XG4gICAgKDAsIGluZGV4X2pzXzMuYXNzZXJ0QXJndW1lbnQpKHR5cGVzLmxlbmd0aCA9PT0gdmFsdWVzLmxlbmd0aCwgXCJ3cm9uZyBudW1iZXIgb2YgdmFsdWVzOyBleHBlY3RlZCAkeyB0eXBlcy5sZW5ndGggfVwiLCBcInZhbHVlc1wiLCB2YWx1ZXMpO1xuICAgIGNvbnN0IHRpZ2h0ID0gW107XG4gICAgdHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSwgaW5kZXgpIHtcbiAgICAgICAgdGlnaHQucHVzaChfcGFjayh0eXBlLCB2YWx1ZXNbaW5kZXhdKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuICgwLCBpbmRleF9qc18zLmhleGxpZnkpKCgwLCBpbmRleF9qc18zLmNvbmNhdCkodGlnaHQpKTtcbn1cbmV4cG9ydHMuc29saWRpdHlQYWNrZWQgPSBzb2xpZGl0eVBhY2tlZDtcbi8qKlxuICogICBDb21wdXRlcyB0aGUgW1tsaW5rLXNvbGMtcGFja2VkXV0gW1trZWNjYWsyNTZdXSBoYXNoIG9mICUldmFsdWVzJSVcbiAqICAgcmVzcGVjdGl2ZWx5IHRvIHRoZWlyICUldHlwZXMlJS5cbiAqXG4gKiAgIEBleGFtcGxlOlxuICogICAgICAgYWRkciA9IFwiMHg4YmExZjEwOTU1MWJkNDMyODAzMDEyNjQ1YWMxMzZkZGQ2NGRiYTcyXCJcbiAqICAgICAgIHNvbGlkaXR5UGFja2VkS2VjY2FrMjU2KFsgXCJhZGRyZXNzXCIsIFwidWludFwiIF0sIFsgYWRkciwgNDUgXSk7XG4gKiAgICAgICAvL19yZXN1bHQ6XG4gKi9cbmZ1bmN0aW9uIHNvbGlkaXR5UGFja2VkS2VjY2FrMjU2KHR5cGVzLCB2YWx1ZXMpIHtcbiAgICByZXR1cm4gKDAsIGluZGV4X2pzXzIua2VjY2FrMjU2KShzb2xpZGl0eVBhY2tlZCh0eXBlcywgdmFsdWVzKSk7XG59XG5leHBvcnRzLnNvbGlkaXR5UGFja2VkS2VjY2FrMjU2ID0gc29saWRpdHlQYWNrZWRLZWNjYWsyNTY7XG4vKipcbiAqICAgQ29tcHV0ZXMgdGhlIFtbbGluay1zb2xjLXBhY2tlZF1dIFtbc2hhMjU2XV0gaGFzaCBvZiAlJXZhbHVlcyUlXG4gKiAgIHJlc3BlY3RpdmVseSB0byB0aGVpciAlJXR5cGVzJSUuXG4gKlxuICogICBAZXhhbXBsZTpcbiAqICAgICAgIGFkZHIgPSBcIjB4OGJhMWYxMDk1NTFiZDQzMjgwMzAxMjY0NWFjMTM2ZGRkNjRkYmE3MlwiXG4gKiAgICAgICBzb2xpZGl0eVBhY2tlZFNoYTI1NihbIFwiYWRkcmVzc1wiLCBcInVpbnRcIiBdLCBbIGFkZHIsIDQ1IF0pO1xuICogICAgICAgLy9fcmVzdWx0OlxuICovXG5mdW5jdGlvbiBzb2xpZGl0eVBhY2tlZFNoYTI1Nih0eXBlcywgdmFsdWVzKSB7XG4gICAgcmV0dXJuICgwLCBpbmRleF9qc18yLnNoYTI1Nikoc29saWRpdHlQYWNrZWQodHlwZXMsIHZhbHVlcykpO1xufVxuZXhwb3J0cy5zb2xpZGl0eVBhY2tlZFNoYTI1NiA9IHNvbGlkaXR5UGFja2VkU2hhMjU2O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c29saWRpdHkuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic29saWRpdHlQYWNrZWRTaGEyNTYiLCJzb2xpZGl0eVBhY2tlZEtlY2NhazI1NiIsInNvbGlkaXR5UGFja2VkIiwiaW5kZXhfanNfMSIsInJlcXVpcmUiLCJpbmRleF9qc18yIiwiaW5kZXhfanNfMyIsInJlZ2V4Qnl0ZXMiLCJSZWdFeHAiLCJyZWdleE51bWJlciIsInJlZ2V4QXJyYXkiLCJfcGFjayIsInR5cGUiLCJpc0FycmF5IiwiZ2V0Qnl0ZXMiLCJ6ZXJvUGFkVmFsdWUiLCJnZXRBZGRyZXNzIiwidG9VdGY4Qnl0ZXMiLCJtYXRjaCIsInNpZ25lZCIsInNpemUiLCJwYXJzZUludCIsImFzc2VydEFyZ3VtZW50IiwiU3RyaW5nIiwidG9Ud29zIiwidG9CZUFycmF5IiwiZGF0YUxlbmd0aCIsInplcm9QYWRCeXRlcyIsIkFycmF5IiwiYmFzZVR5cGUiLCJjb3VudCIsImxlbmd0aCIsInJlc3VsdCIsImZvckVhY2giLCJwdXNoIiwiY29uY2F0IiwidHlwZXMiLCJ2YWx1ZXMiLCJ0aWdodCIsImluZGV4IiwiaGV4bGlmeSIsImtlY2NhazI1NiIsInNoYTI1NiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/hash/solidity.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/hash/typed-data.js":
/*!*************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/hash/typed-data.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.verifyTypedData = exports.TypedDataEncoder = void 0;\n//import { TypedDataDomain, TypedDataField } from \"@ethersproject/providerabstract-signer\";\nconst index_js_1 = __webpack_require__(/*! ../address/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../crypto/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/index.js\");\nconst index_js_3 = __webpack_require__(/*! ../transaction/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/transaction/index.js\");\nconst index_js_4 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst id_js_1 = __webpack_require__(/*! ./id.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/hash/id.js\");\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst BN__1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n;\n;\nfunction hexPadRight(value) {\n    const bytes = (0, index_js_4.getBytes)(value);\n    const padOffset = bytes.length % 32;\n    if (padOffset) {\n        return (0, index_js_4.concat)([\n            bytes,\n            padding.slice(padOffset)\n        ]);\n    }\n    return (0, index_js_4.hexlify)(bytes);\n}\nconst hexTrue = (0, index_js_4.toBeHex)(BN_1, 32);\nconst hexFalse = (0, index_js_4.toBeHex)(BN_0, 32);\nconst domainFieldTypes = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\nconst domainFieldNames = [\n    \"name\",\n    \"version\",\n    \"chainId\",\n    \"verifyingContract\",\n    \"salt\"\n];\nfunction checkString(key) {\n    return function(value) {\n        (0, index_js_4.assertArgument)(typeof value === \"string\", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n        return value;\n    };\n}\nconst domainChecks = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function(_value) {\n        const value = (0, index_js_4.getBigInt)(_value, \"domain.chainId\");\n        (0, index_js_4.assertArgument)(value >= 0, \"invalid chain ID\", \"domain.chainId\", _value);\n        if (Number.isSafeInteger(value)) {\n            return Number(value);\n        }\n        return (0, index_js_4.toQuantity)(value);\n    },\n    verifyingContract: function(value) {\n        try {\n            return (0, index_js_1.getAddress)(value).toLowerCase();\n        } catch (error) {}\n        (0, index_js_4.assertArgument)(false, `invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function(value) {\n        const bytes = (0, index_js_4.getBytes)(value, \"domain.salt\");\n        (0, index_js_4.assertArgument)(bytes.length === 32, `invalid domain value \"salt\"`, \"domain.salt\", value);\n        return (0, index_js_4.hexlify)(bytes);\n    }\n};\nfunction getBaseEncoder(type) {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d*)$/);\n        if (match) {\n            const signed = match[1] === \"\";\n            const width = parseInt(match[2] || \"256\");\n            (0, index_js_4.assertArgument)(width % 8 === 0 && width !== 0 && width <= 256 && (match[2] == null || match[2] === String(width)), \"invalid numeric width\", \"type\", type);\n            const boundsUpper = (0, index_js_4.mask)(BN_MAX_UINT256, signed ? width - 1 : width);\n            const boundsLower = signed ? (boundsUpper + BN_1) * BN__1 : BN_0;\n            return function(_value) {\n                const value = (0, index_js_4.getBigInt)(_value, \"value\");\n                (0, index_js_4.assertArgument)(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, \"value\", value);\n                return (0, index_js_4.toBeHex)(signed ? (0, index_js_4.toTwos)(value, 256) : value, 32);\n            };\n        }\n    }\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            (0, index_js_4.assertArgument)(width !== 0 && width <= 32 && match[1] === String(width), \"invalid bytes width\", \"type\", type);\n            return function(value) {\n                const bytes = (0, index_js_4.getBytes)(value);\n                (0, index_js_4.assertArgument)(bytes.length === width, `invalid length for ${type}`, \"value\", value);\n                return hexPadRight(value);\n            };\n        }\n    }\n    switch(type){\n        case \"address\":\n            return function(value) {\n                return (0, index_js_4.zeroPadValue)((0, index_js_1.getAddress)(value), 32);\n            };\n        case \"bool\":\n            return function(value) {\n                return !value ? hexFalse : hexTrue;\n            };\n        case \"bytes\":\n            return function(value) {\n                return (0, index_js_2.keccak256)(value);\n            };\n        case \"string\":\n            return function(value) {\n                return (0, id_js_1.id)(value);\n            };\n    }\n    return null;\n}\nfunction encodeType(name, fields) {\n    return `${name}(${fields.map(({ name, type })=>type + \" \" + name).join(\",\")})`;\n}\n/**\n *  A **TypedDataEncode** prepares and encodes [[link-eip-712]] payloads\n *  for signed typed data.\n *\n *  This is useful for those that wish to compute various components of a\n *  typed data hash, primary types, or sub-components, but generally the\n *  higher level [[Signer-signTypedData]] is more useful.\n */ class TypedDataEncoder {\n    #types;\n    /**\n     *  The types.\n     */ get types() {\n        return JSON.parse(this.#types);\n    }\n    #fullTypes;\n    #encoderCache;\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     *\n     *  This performs all necessary checking that types are valid and\n     *  do not violate the [[link-eip-712]] structural constraints as\n     *  well as computes the [[primaryType]].\n     */ constructor(types){\n        this.#types = JSON.stringify(types);\n        this.#fullTypes = new Map();\n        this.#encoderCache = new Map();\n        // Link struct types to their direct child structs\n        const links = new Map();\n        // Link structs to structs which contain them as a child\n        const parents = new Map();\n        // Link all subtypes within a given struct\n        const subtypes = new Map();\n        Object.keys(types).forEach((type)=>{\n            links.set(type, new Set());\n            parents.set(type, []);\n            subtypes.set(type, new Set());\n        });\n        for(const name in types){\n            const uniqueNames = new Set();\n            for (const field of types[name]){\n                // Check each field has a unique name\n                (0, index_js_4.assertArgument)(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", types);\n                uniqueNames.add(field.name);\n                // Get the base type (drop any array specifiers)\n                const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1] || null;\n                (0, index_js_4.assertArgument)(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, \"types\", types);\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) {\n                    continue;\n                }\n                (0, index_js_4.assertArgument)(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, \"types\", types);\n                // Add linkage\n                parents.get(baseType).push(name);\n                links.get(name).add(baseType);\n            }\n        }\n        // Deduce the primary type\n        const primaryTypes = Array.from(parents.keys()).filter((n)=>parents.get(n).length === 0);\n        (0, index_js_4.assertArgument)(primaryTypes.length !== 0, \"missing primary type\", \"types\", types);\n        (0, index_js_4.assertArgument)(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t)=>JSON.stringify(t)).join(\", \")}`, \"types\", types);\n        (0, index_js_4.defineProperties)(this, {\n            primaryType: primaryTypes[0]\n        });\n        // Check for circular type references\n        function checkCircular(type, found) {\n            (0, index_js_4.assertArgument)(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, \"types\", types);\n            found.add(type);\n            for (const child of links.get(type)){\n                if (!parents.has(child)) {\n                    continue;\n                }\n                // Recursively check children\n                checkCircular(child, found);\n                // Mark all ancestors as having this decendant\n                for (const subtype of found){\n                    subtypes.get(subtype).add(child);\n                }\n            }\n            found.delete(type);\n        }\n        checkCircular(this.primaryType, new Set());\n        // Compute each fully describe type\n        for (const [name, set] of subtypes){\n            const st = Array.from(set);\n            st.sort();\n            this.#fullTypes.set(name, encodeType(name, types[name]) + st.map((t)=>encodeType(t, types[t])).join(\"\"));\n        }\n    }\n    /**\n     *  Returnthe encoder for the specific %%type%%.\n     */ getEncoder(type) {\n        let encoder = this.#encoderCache.get(type);\n        if (!encoder) {\n            encoder = this.#getEncoder(type);\n            this.#encoderCache.set(type, encoder);\n        }\n        return encoder;\n    }\n    #getEncoder(type) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return encoder;\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            return (value)=>{\n                (0, index_js_4.assertArgument)(!match[3] || parseInt(match[3]) === value.length, `array length mismatch; expected length ${parseInt(match[3])}`, \"value\", value);\n                let result = value.map(subEncoder);\n                if (this.#fullTypes.has(subtype)) {\n                    result = result.map(index_js_2.keccak256);\n                }\n                return (0, index_js_2.keccak256)((0, index_js_4.concat)(result));\n            };\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = (0, id_js_1.id)(this.#fullTypes.get(type));\n            return (value)=>{\n                const values = fields.map(({ name, type })=>{\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this.#fullTypes.has(type)) {\n                        return (0, index_js_2.keccak256)(result);\n                    }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return (0, index_js_4.concat)(values);\n            };\n        }\n        (0, index_js_4.assertArgument)(false, `unknown type: ${type}`, \"type\", type);\n    }\n    /**\n     *  Return the full type for %%name%%.\n     */ encodeType(name) {\n        const result = this.#fullTypes.get(name);\n        (0, index_js_4.assertArgument)(result, `unknown type: ${JSON.stringify(name)}`, \"name\", name);\n        return result;\n    }\n    /**\n     *  Return the encoded %%value%% for the %%type%%.\n     */ encodeData(type, value) {\n        return this.getEncoder(type)(value);\n    }\n    /**\n     *  Returns the hash of %%value%% for the type of %%name%%.\n     */ hashStruct(name, value) {\n        return (0, index_js_2.keccak256)(this.encodeData(name, value));\n    }\n    /**\n     *  Return the fulled encoded %%value%% for the [[types]].\n     */ encode(value) {\n        return this.encodeData(this.primaryType, value);\n    }\n    /**\n     *  Return the hash of the fully encoded %%value%% for the [[types]].\n     */ hash(value) {\n        return this.hashStruct(this.primaryType, value);\n    }\n    /**\n     *  @_ignore:\n     */ _visit(type, value, callback) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return callback(type, value);\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            (0, index_js_4.assertArgument)(!match[3] || parseInt(match[3]) === value.length, `array length mismatch; expected length ${parseInt(match[3])}`, \"value\", value);\n            return value.map((v)=>this._visit(match[1], v, callback));\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type })=>{\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, {});\n        }\n        (0, index_js_4.assertArgument)(false, `unknown type: ${type}`, \"type\", type);\n    }\n    /**\n     *  Call %%calback%% for each value in %%value%%, passing the type and\n     *  component within %%value%%.\n     *\n     *  This is useful for replacing addresses or other transformation that\n     *  may be desired on each component, based on its type.\n     */ visit(value, callback) {\n        return this._visit(this.primaryType, value, callback);\n    }\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     */ static from(types) {\n        return new TypedDataEncoder(types);\n    }\n    /**\n     *  Return the primary type for %%types%%.\n     */ static getPrimaryType(types) {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n    /**\n     *  Return the hashed struct for %%value%% using %%types%% and %%name%%.\n     */ static hashStruct(name, types, value) {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n    /**\n     *  Return the domain hash for %%domain%%.\n     */ static hashDomain(domain) {\n        const domainFields = [];\n        for(const name in domain){\n            if (domain[name] == null) {\n                continue;\n            }\n            const type = domainFieldTypes[name];\n            (0, index_js_4.assertArgument)(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\n            domainFields.push({\n                name,\n                type\n            });\n        }\n        domainFields.sort((a, b)=>{\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", {\n            EIP712Domain: domainFields\n        }, domain);\n    }\n    /**\n     *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */ static encode(domain, types, value) {\n        return (0, index_js_4.concat)([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n    /**\n     *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */ static hash(domain, types, value) {\n        return (0, index_js_2.keccak256)(TypedDataEncoder.encode(domain, types, value));\n    }\n    // Replaces all address types with ENS names with their looked up address\n    /**\n     * Resolves to the value from resolving all addresses in %%value%% for\n     * %%types%% and the %%domain%%.\n     */ static async resolveNames(domain, types, value, resolveName) {\n        // Make a copy to isolate it from the object passed in\n        domain = Object.assign({}, domain);\n        // Allow passing null to ignore value\n        for(const key in domain){\n            if (domain[key] == null) {\n                delete domain[key];\n            }\n        }\n        // Look up all ENS names\n        const ensCache = {};\n        // Do we need to look up the domain's verifyingContract?\n        if (domain.verifyingContract && !(0, index_js_4.isHexString)(domain.verifyingContract, 20)) {\n            ensCache[domain.verifyingContract] = \"0x\";\n        }\n        // We are going to use the encoder to visit all the base values\n        const encoder = TypedDataEncoder.from(types);\n        // Get a list of all the addresses\n        encoder.visit(value, (type, value)=>{\n            if (type === \"address\" && !(0, index_js_4.isHexString)(value, 20)) {\n                ensCache[value] = \"0x\";\n            }\n            return value;\n        });\n        // Lookup each name\n        for(const name in ensCache){\n            ensCache[name] = await resolveName(name);\n        }\n        // Replace the domain verifyingContract if needed\n        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n            domain.verifyingContract = ensCache[domain.verifyingContract];\n        }\n        // Replace all ENS names with their address\n        value = encoder.visit(value, (type, value)=>{\n            if (type === \"address\" && ensCache[value]) {\n                return ensCache[value];\n            }\n            return value;\n        });\n        return {\n            domain,\n            value\n        };\n    }\n    /**\n     *  Returns the JSON-encoded payload expected by nodes which implement\n     *  the JSON-RPC [[link-eip-712]] method.\n     */ static getPayload(domain, types, value) {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n        // Derive the EIP712Domain Struct reference type\n        const domainValues = {};\n        const domainTypes = [];\n        domainFieldNames.forEach((name)=>{\n            const value = domain[name];\n            if (value == null) {\n                return;\n            }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({\n                name,\n                type: domainFieldTypes[name]\n            });\n        });\n        const encoder = TypedDataEncoder.from(types);\n        const typesWithDomain = Object.assign({}, types);\n        (0, index_js_4.assertArgument)(typesWithDomain.EIP712Domain == null, \"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n        typesWithDomain.EIP712Domain = domainTypes;\n        // Validate the data structures and types\n        encoder.encode(value);\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type, value)=>{\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return (0, index_js_4.hexlify)((0, index_js_4.getBytes)(value));\n                }\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return (0, index_js_4.getBigInt)(value).toString();\n                }\n                switch(type){\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        (0, index_js_4.assertArgument)(typeof value === \"string\", \"invalid string\", \"value\", value);\n                        return value;\n                }\n                (0, index_js_4.assertArgument)(false, \"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}\nexports.TypedDataEncoder = TypedDataEncoder;\n/**\n *  Compute the address used to sign the typed data for the %%signature%%.\n */ function verifyTypedData(domain, types, value, signature) {\n    return (0, index_js_3.recoverAddress)(TypedDataEncoder.hash(domain, types, value), signature);\n}\nexports.verifyTypedData = verifyTypedData; //# sourceMappingURL=typed-data.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/hash/typed-data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/index.js":
/*!***************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ethers = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/ethers/node_modules/tslib/tslib.es6.js\");\n/**\n *  The Application Programming Interface (API) is the collection of\n *  functions, classes and types offered by the Ethers library.\n *\n *  @_section: api:Application Programming Interface  [about-api]\n *  @_navTitle: API\n */ const ethers = tslib_1.__importStar(__webpack_require__(/*! ./ethers.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/ethers.js\"));\nexports.ethers = ethers;\ntslib_1.__exportStar(__webpack_require__(/*! ./ethers.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/ethers.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHLEtBQUs7QUFDdEIsTUFBTUcsVUFBVUMsbUJBQU9BLENBQUMsMEVBQU87QUFDL0I7Ozs7OztDQU1DLEdBQ0QsTUFBTUYsU0FBU0MsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyx1RUFBYTtBQUN6REosY0FBYyxHQUFHRTtBQUNqQkMsUUFBUUcsWUFBWSxDQUFDRixtQkFBT0EsQ0FBQyx1RUFBYSxHQUFHSixVQUM3QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9pbmRleC5qcz8yNTNjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ldGhlcnMgPSB2b2lkIDA7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xuLyoqXG4gKiAgVGhlIEFwcGxpY2F0aW9uIFByb2dyYW1taW5nIEludGVyZmFjZSAoQVBJKSBpcyB0aGUgY29sbGVjdGlvbiBvZlxuICogIGZ1bmN0aW9ucywgY2xhc3NlcyBhbmQgdHlwZXMgb2ZmZXJlZCBieSB0aGUgRXRoZXJzIGxpYnJhcnkuXG4gKlxuICogIEBfc2VjdGlvbjogYXBpOkFwcGxpY2F0aW9uIFByb2dyYW1taW5nIEludGVyZmFjZSAgW2Fib3V0LWFwaV1cbiAqICBAX25hdlRpdGxlOiBBUElcbiAqL1xuY29uc3QgZXRoZXJzID0gdHNsaWJfMS5fX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vZXRoZXJzLmpzXCIpKTtcbmV4cG9ydHMuZXRoZXJzID0gZXRoZXJzO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZXRoZXJzLmpzXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImV0aGVycyIsInRzbGliXzEiLCJyZXF1aXJlIiwiX19pbXBvcnRTdGFyIiwiX19leHBvcnRTdGFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/abstract-provider.js":
/*!*************************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/abstract-provider.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  The available providers should suffice for most developers purposes,\n *  but the [[AbstractProvider]] class has many features which enable\n *  sub-classing it for specific purposes.\n *\n *  @_section: api/providers/abstract-provider: Subclassing Provider  [abstract-provider]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AbstractProvider = exports.UnmanagedSubscriber = void 0;\n// @TODO\n// Event coalescence\n//   When we register an event with an async value (e.g. address is a Signer\n//   or ENS name), we need to add it immeidately for the Event API, but also\n//   need time to resolve the address. Upon resolving the address, we need to\n//   migrate the listener to the static event. We also need to maintain a map\n//   of Signer/ENS name to address so we can sync respond to listenerCount.\nconst index_js_1 = __webpack_require__(/*! ../address/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../constants/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/constants/index.js\");\nconst index_js_3 = __webpack_require__(/*! ../contract/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/contract/index.js\");\nconst index_js_4 = __webpack_require__(/*! ../hash/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/hash/index.js\");\nconst index_js_5 = __webpack_require__(/*! ../transaction/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/transaction/index.js\");\nconst index_js_6 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst ens_resolver_js_1 = __webpack_require__(/*! ./ens-resolver.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/ens-resolver.js\");\nconst format_js_1 = __webpack_require__(/*! ./format.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/format.js\");\nconst network_js_1 = __webpack_require__(/*! ./network.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/network.js\");\nconst provider_js_1 = __webpack_require__(/*! ./provider.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider.js\");\nconst subscriber_polling_js_1 = __webpack_require__(/*! ./subscriber-polling.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/subscriber-polling.js\");\n// Constants\nconst BN_2 = BigInt(2);\nconst MAX_CCIP_REDIRECTS = 10;\nfunction isPromise(value) {\n    return value && typeof value.then === \"function\";\n}\nfunction getTag(prefix, value) {\n    return prefix + \":\" + JSON.stringify(value, (k, v)=>{\n        if (v == null) {\n            return \"null\";\n        }\n        if (typeof v === \"bigint\") {\n            return `bigint:${v.toString()}`;\n        }\n        if (typeof v === \"string\") {\n            return v.toLowerCase();\n        }\n        // Sort object keys\n        if (typeof v === \"object\" && !Array.isArray(v)) {\n            const keys = Object.keys(v);\n            keys.sort();\n            return keys.reduce((accum, key)=>{\n                accum[key] = v[key];\n                return accum;\n            }, {});\n        }\n        return v;\n    });\n}\n/**\n *  An **UnmanagedSubscriber** is useful for events which do not require\n *  any additional management, such as ``\"debug\"`` which only requires\n *  emit in synchronous event loop triggered calls.\n */ class UnmanagedSubscriber {\n    /**\n     *  Create a new UnmanagedSubscriber with %%name%%.\n     */ constructor(name){\n        (0, index_js_6.defineProperties)(this, {\n            name\n        });\n    }\n    start() {}\n    stop() {}\n    pause(dropWhilePaused) {}\n    resume() {}\n}\nexports.UnmanagedSubscriber = UnmanagedSubscriber;\nfunction copy(value) {\n    return JSON.parse(JSON.stringify(value));\n}\nfunction concisify(items) {\n    items = Array.from(new Set(items).values());\n    items.sort();\n    return items;\n}\nasync function getSubscription(_event, provider) {\n    if (_event == null) {\n        throw new Error(\"invalid event\");\n    }\n    // Normalize topic array info an EventFilter\n    if (Array.isArray(_event)) {\n        _event = {\n            topics: _event\n        };\n    }\n    if (typeof _event === \"string\") {\n        switch(_event){\n            case \"block\":\n            case \"pending\":\n            case \"debug\":\n            case \"error\":\n            case \"network\":\n                {\n                    return {\n                        type: _event,\n                        tag: _event\n                    };\n                }\n        }\n    }\n    if ((0, index_js_6.isHexString)(_event, 32)) {\n        const hash = _event.toLowerCase();\n        return {\n            type: \"transaction\",\n            tag: getTag(\"tx\", {\n                hash\n            }),\n            hash\n        };\n    }\n    if (_event.orphan) {\n        const event = _event;\n        // @TODO: Should lowercase and whatnot things here instead of copy...\n        return {\n            type: \"orphan\",\n            tag: getTag(\"orphan\", event),\n            filter: copy(event)\n        };\n    }\n    if (_event.address || _event.topics) {\n        const event = _event;\n        const filter = {\n            topics: (event.topics || []).map((t)=>{\n                if (t == null) {\n                    return null;\n                }\n                if (Array.isArray(t)) {\n                    return concisify(t.map((t)=>t.toLowerCase()));\n                }\n                return t.toLowerCase();\n            })\n        };\n        if (event.address) {\n            const addresses = [];\n            const promises = [];\n            const addAddress = (addr)=>{\n                if ((0, index_js_6.isHexString)(addr)) {\n                    addresses.push(addr);\n                } else {\n                    promises.push((async ()=>{\n                        addresses.push(await (0, index_js_1.resolveAddress)(addr, provider));\n                    })());\n                }\n            };\n            if (Array.isArray(event.address)) {\n                event.address.forEach(addAddress);\n            } else {\n                addAddress(event.address);\n            }\n            if (promises.length) {\n                await Promise.all(promises);\n            }\n            filter.address = concisify(addresses.map((a)=>a.toLowerCase()));\n        }\n        return {\n            filter,\n            tag: getTag(\"event\", filter),\n            type: \"event\"\n        };\n    }\n    (0, index_js_6.assertArgument)(false, \"unknown ProviderEvent\", \"event\", _event);\n}\nfunction getTime() {\n    return new Date().getTime();\n}\nconst defaultOptions = {\n    cacheTimeout: 250,\n    pollingInterval: 4000\n};\n/**\n *  An **AbstractProvider** provides a base class for other sub-classes to\n *  implement the [[Provider]] API by normalizing input arguments and\n *  formatting output results as well as tracking events for consistent\n *  behaviour on an eventually-consistent network.\n */ class AbstractProvider {\n    #subs;\n    #plugins;\n    // null=unpaused, true=paused+dropWhilePaused, false=paused\n    #pausedState;\n    #destroyed;\n    #networkPromise;\n    #anyNetwork;\n    #performCache;\n    // The most recent block number if running an event or -1 if no \"block\" event\n    #lastBlockNumber;\n    #nextTimer;\n    #timers;\n    #disableCcipRead;\n    #options;\n    /**\n     *  Create a new **AbstractProvider** connected to %%network%%, or\n     *  use the various network detection capabilities to discover the\n     *  [[Network]] if necessary.\n     */ constructor(_network, options){\n        this.#options = Object.assign({}, defaultOptions, options || {});\n        if (_network === \"any\") {\n            this.#anyNetwork = true;\n            this.#networkPromise = null;\n        } else if (_network) {\n            const network = network_js_1.Network.from(_network);\n            this.#anyNetwork = false;\n            this.#networkPromise = Promise.resolve(network);\n            setTimeout(()=>{\n                this.emit(\"network\", network, null);\n            }, 0);\n        } else {\n            this.#anyNetwork = false;\n            this.#networkPromise = null;\n        }\n        this.#lastBlockNumber = -1;\n        this.#performCache = new Map();\n        this.#subs = new Map();\n        this.#plugins = new Map();\n        this.#pausedState = null;\n        this.#destroyed = false;\n        this.#nextTimer = 1;\n        this.#timers = new Map();\n        this.#disableCcipRead = false;\n    }\n    get pollingInterval() {\n        return this.#options.pollingInterval;\n    }\n    /**\n     *  Returns ``this``, to allow an **AbstractProvider** to implement\n     *  the [[ContractRunner]] interface.\n     */ get provider() {\n        return this;\n    }\n    /**\n     *  Returns all the registered plug-ins.\n     */ get plugins() {\n        return Array.from(this.#plugins.values());\n    }\n    /**\n     *  Attach a new plug-in.\n     */ attachPlugin(plugin) {\n        if (this.#plugins.get(plugin.name)) {\n            throw new Error(`cannot replace existing plugin: ${plugin.name} `);\n        }\n        this.#plugins.set(plugin.name, plugin.connect(this));\n        return this;\n    }\n    /**\n     *  Get a plugin by name.\n     */ getPlugin(name) {\n        return this.#plugins.get(name) || null;\n    }\n    /**\n     *  Prevent any CCIP-read operation, regardless of whether requested\n     *  in a [[call]] using ``enableCcipRead``.\n     */ get disableCcipRead() {\n        return this.#disableCcipRead;\n    }\n    set disableCcipRead(value) {\n        this.#disableCcipRead = !!value;\n    }\n    // Shares multiple identical requests made during the same 250ms\n    async #perform(req) {\n        const timeout = this.#options.cacheTimeout;\n        // Caching disabled\n        if (timeout < 0) {\n            return await this._perform(req);\n        }\n        // Create a tag\n        const tag = getTag(req.method, req);\n        let perform = this.#performCache.get(tag);\n        if (!perform) {\n            perform = this._perform(req);\n            this.#performCache.set(tag, perform);\n            setTimeout(()=>{\n                if (this.#performCache.get(tag) === perform) {\n                    this.#performCache.delete(tag);\n                }\n            }, timeout);\n        }\n        return await perform;\n    }\n    /**\n     *  Resolves to the data for executing the CCIP-read operations.\n     */ async ccipReadFetch(tx, calldata, urls) {\n        if (this.disableCcipRead || urls.length === 0 || tx.to == null) {\n            return null;\n        }\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n        const errorMessages = [];\n        for(let i = 0; i < urls.length; i++){\n            const url = urls[i];\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n            // If no {data} is present, use POST; otherwise GET\n            //const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n            //const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n            //    value.status = response.statusCode;\n            //    return value;\n            //});\n            const request = new index_js_6.FetchRequest(href);\n            if (url.indexOf(\"{data}\") === -1) {\n                request.body = {\n                    data,\n                    sender\n                };\n            }\n            this.emit(\"debug\", {\n                action: \"sendCcipReadFetchRequest\",\n                request,\n                index: i,\n                urls\n            });\n            let errorMessage = \"unknown error\";\n            const resp = await request.send();\n            try {\n                const result = resp.bodyJson;\n                if (result.data) {\n                    this.emit(\"debug\", {\n                        action: \"receiveCcipReadFetchResult\",\n                        request,\n                        result\n                    });\n                    return result.data;\n                }\n                if (result.message) {\n                    errorMessage = result.message;\n                }\n                this.emit(\"debug\", {\n                    action: \"receiveCcipReadFetchError\",\n                    request,\n                    result\n                });\n            } catch (error) {}\n            // 4xx indicates the result is not present; stop\n            (0, index_js_6.assert)(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, \"OFFCHAIN_FAULT\", {\n                reason: \"404_MISSING_RESOURCE\",\n                transaction: tx,\n                info: {\n                    url,\n                    errorMessage\n                }\n            });\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n        (0, index_js_6.assert)(false, `error encountered during CCIP fetch: ${errorMessages.map((m)=>JSON.stringify(m)).join(\", \")}`, \"OFFCHAIN_FAULT\", {\n            reason: \"500_SERVER_ERROR\",\n            transaction: tx,\n            info: {\n                urls,\n                errorMessages\n            }\n        });\n    }\n    /**\n     *  Provides the opportunity for a sub-class to wrap a block before\n     *  returning it, to add additional properties or an alternate\n     *  sub-class of [[Block]].\n     */ _wrapBlock(value, network) {\n        return new provider_js_1.Block((0, format_js_1.formatBlock)(value), this);\n    }\n    /**\n     *  Provides the opportunity for a sub-class to wrap a log before\n     *  returning it, to add additional properties or an alternate\n     *  sub-class of [[Log]].\n     */ _wrapLog(value, network) {\n        return new provider_js_1.Log((0, format_js_1.formatLog)(value), this);\n    }\n    /**\n     *  Provides the opportunity for a sub-class to wrap a transaction\n     *  receipt before returning it, to add additional properties or an\n     *  alternate sub-class of [[TransactionReceipt]].\n     */ _wrapTransactionReceipt(value, network) {\n        return new provider_js_1.TransactionReceipt((0, format_js_1.formatTransactionReceipt)(value), this);\n    }\n    /**\n     *  Provides the opportunity for a sub-class to wrap a transaction\n     *  response before returning it, to add additional properties or an\n     *  alternate sub-class of [[TransactionResponse]].\n     */ _wrapTransactionResponse(tx, network) {\n        return new provider_js_1.TransactionResponse((0, format_js_1.formatTransactionResponse)(tx), this);\n    }\n    /**\n     *  Resolves to the Network, forcing a network detection using whatever\n     *  technique the sub-class requires.\n     *\n     *  Sub-classes **must** override this.\n     */ _detectNetwork() {\n        (0, index_js_6.assert)(false, \"sub-classes must implement this\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_detectNetwork\"\n        });\n    }\n    /**\n     *  Sub-classes should use this to perform all built-in operations. All\n     *  methods sanitizes and normalizes the values passed into this.\n     *\n     *  Sub-classes **must** override this.\n     */ async _perform(req) {\n        (0, index_js_6.assert)(false, `unsupported method: ${req.method}`, \"UNSUPPORTED_OPERATION\", {\n            operation: req.method,\n            info: req\n        });\n    }\n    // State\n    async getBlockNumber() {\n        const blockNumber = (0, index_js_6.getNumber)(await this.#perform({\n            method: \"getBlockNumber\"\n        }), \"%response\");\n        if (this.#lastBlockNumber >= 0) {\n            this.#lastBlockNumber = blockNumber;\n        }\n        return blockNumber;\n    }\n    /**\n     *  Returns or resolves to the address for %%address%%, resolving ENS\n     *  names and [[Addressable]] objects and returning if already an\n     *  address.\n     */ _getAddress(address) {\n        return (0, index_js_1.resolveAddress)(address, this);\n    }\n    /**\n     *  Returns or resolves to a valid block tag for %%blockTag%%, resolving\n     *  negative values and returning if already a valid block tag.\n     */ _getBlockTag(blockTag) {\n        if (blockTag == null) {\n            return \"latest\";\n        }\n        switch(blockTag){\n            case \"earliest\":\n                return \"0x0\";\n            case \"latest\":\n            case \"pending\":\n            case \"safe\":\n            case \"finalized\":\n                return blockTag;\n        }\n        if ((0, index_js_6.isHexString)(blockTag)) {\n            if ((0, index_js_6.isHexString)(blockTag, 32)) {\n                return blockTag;\n            }\n            return (0, index_js_6.toQuantity)(blockTag);\n        }\n        if (typeof blockTag === \"bigint\") {\n            blockTag = (0, index_js_6.getNumber)(blockTag, \"blockTag\");\n        }\n        if (typeof blockTag === \"number\") {\n            if (blockTag >= 0) {\n                return (0, index_js_6.toQuantity)(blockTag);\n            }\n            if (this.#lastBlockNumber >= 0) {\n                return (0, index_js_6.toQuantity)(this.#lastBlockNumber + blockTag);\n            }\n            return this.getBlockNumber().then((b)=>(0, index_js_6.toQuantity)(b + blockTag));\n        }\n        (0, index_js_6.assertArgument)(false, \"invalid blockTag\", \"blockTag\", blockTag);\n    }\n    /**\n     *  Returns or resolves to a filter for %%filter%%, resolving any ENS\n     *  names or [[Addressable]] object and returning if already a valid\n     *  filter.\n     */ _getFilter(filter) {\n        // Create a canonical representation of the topics\n        const topics = (filter.topics || []).map((t)=>{\n            if (t == null) {\n                return null;\n            }\n            if (Array.isArray(t)) {\n                return concisify(t.map((t)=>t.toLowerCase()));\n            }\n            return t.toLowerCase();\n        });\n        const blockHash = \"blockHash\" in filter ? filter.blockHash : undefined;\n        const resolve = (_address, fromBlock, toBlock)=>{\n            let address = undefined;\n            switch(_address.length){\n                case 0:\n                    break;\n                case 1:\n                    address = _address[0];\n                    break;\n                default:\n                    _address.sort();\n                    address = _address;\n            }\n            if (blockHash) {\n                if (fromBlock != null || toBlock != null) {\n                    throw new Error(\"invalid filter\");\n                }\n            }\n            const filter = {};\n            if (address) {\n                filter.address = address;\n            }\n            if (topics.length) {\n                filter.topics = topics;\n            }\n            if (fromBlock) {\n                filter.fromBlock = fromBlock;\n            }\n            if (toBlock) {\n                filter.toBlock = toBlock;\n            }\n            if (blockHash) {\n                filter.blockHash = blockHash;\n            }\n            return filter;\n        };\n        // Addresses could be async (ENS names or Addressables)\n        let address = [];\n        if (filter.address) {\n            if (Array.isArray(filter.address)) {\n                for (const addr of filter.address){\n                    address.push(this._getAddress(addr));\n                }\n            } else {\n                address.push(this._getAddress(filter.address));\n            }\n        }\n        let fromBlock = undefined;\n        if (\"fromBlock\" in filter) {\n            fromBlock = this._getBlockTag(filter.fromBlock);\n        }\n        let toBlock = undefined;\n        if (\"toBlock\" in filter) {\n            toBlock = this._getBlockTag(filter.toBlock);\n        }\n        if (address.filter((a)=>typeof a !== \"string\").length || fromBlock != null && typeof fromBlock !== \"string\" || toBlock != null && typeof toBlock !== \"string\") {\n            return Promise.all([\n                Promise.all(address),\n                fromBlock,\n                toBlock\n            ]).then((result)=>{\n                return resolve(result[0], result[1], result[2]);\n            });\n        }\n        return resolve(address, fromBlock, toBlock);\n    }\n    /**\n     *  Returns or resovles to a transaction for %%request%%, resolving\n     *  any ENS names or [[Addressable]] and returning if already a valid\n     *  transaction.\n     */ _getTransactionRequest(_request) {\n        const request = (0, provider_js_1.copyRequest)(_request);\n        const promises = [];\n        [\n            \"to\",\n            \"from\"\n        ].forEach((key)=>{\n            if (request[key] == null) {\n                return;\n            }\n            const addr = (0, index_js_1.resolveAddress)(request[key], this);\n            if (isPromise(addr)) {\n                promises.push(async function() {\n                    request[key] = await addr;\n                }());\n            } else {\n                request[key] = addr;\n            }\n        });\n        if (request.blockTag != null) {\n            const blockTag = this._getBlockTag(request.blockTag);\n            if (isPromise(blockTag)) {\n                promises.push(async function() {\n                    request.blockTag = await blockTag;\n                }());\n            } else {\n                request.blockTag = blockTag;\n            }\n        }\n        if (promises.length) {\n            return async function() {\n                await Promise.all(promises);\n                return request;\n            }();\n        }\n        return request;\n    }\n    async getNetwork() {\n        // No explicit network was set and this is our first time\n        if (this.#networkPromise == null) {\n            // Detect the current network (shared with all calls)\n            const detectNetwork = this._detectNetwork().then((network)=>{\n                this.emit(\"network\", network, null);\n                return network;\n            }, (error)=>{\n                // Reset the networkPromise on failure, so we will try again\n                if (this.#networkPromise === detectNetwork) {\n                    this.#networkPromise = null;\n                }\n                throw error;\n            });\n            this.#networkPromise = detectNetwork;\n            return (await detectNetwork).clone();\n        }\n        const networkPromise = this.#networkPromise;\n        const [expected, actual] = await Promise.all([\n            networkPromise,\n            this._detectNetwork() // The actual connected network\n        ]);\n        if (expected.chainId !== actual.chainId) {\n            if (this.#anyNetwork) {\n                // The \"any\" network can change, so notify listeners\n                this.emit(\"network\", actual, expected);\n                // Update the network if something else hasn't already changed it\n                if (this.#networkPromise === networkPromise) {\n                    this.#networkPromise = Promise.resolve(actual);\n                }\n            } else {\n                // Otherwise, we do not allow changes to the underlying network\n                (0, index_js_6.assert)(false, `network changed: ${expected.chainId} => ${actual.chainId} `, \"NETWORK_ERROR\", {\n                    event: \"changed\"\n                });\n            }\n        }\n        return expected.clone();\n    }\n    async getFeeData() {\n        const network = await this.getNetwork();\n        const getFeeDataFunc = async ()=>{\n            const { _block, gasPrice } = await (0, index_js_6.resolveProperties)({\n                _block: this.#getBlock(\"latest\", false),\n                gasPrice: (async ()=>{\n                    try {\n                        const gasPrice = await this.#perform({\n                            method: \"getGasPrice\"\n                        });\n                        return (0, index_js_6.getBigInt)(gasPrice, \"%response\");\n                    } catch (error) {}\n                    return null;\n                })()\n            });\n            let maxFeePerGas = null;\n            let maxPriorityFeePerGas = null;\n            // These are the recommended EIP-1559 heuristics for fee data\n            const block = this._wrapBlock(_block, network);\n            if (block && block.baseFeePerGas) {\n                maxPriorityFeePerGas = BigInt(\"1000000000\");\n                maxFeePerGas = block.baseFeePerGas * BN_2 + maxPriorityFeePerGas;\n            }\n            return new provider_js_1.FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);\n        };\n        // Check for a FeeDataNetWorkPlugin\n        const plugin = network.getPlugin(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\n        if (plugin) {\n            const req = new index_js_6.FetchRequest(plugin.url);\n            const feeData = await plugin.processFunc(getFeeDataFunc, this, req);\n            return new provider_js_1.FeeData(feeData.gasPrice, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas);\n        }\n        return await getFeeDataFunc();\n    }\n    async estimateGas(_tx) {\n        let tx = this._getTransactionRequest(_tx);\n        if (isPromise(tx)) {\n            tx = await tx;\n        }\n        return (0, index_js_6.getBigInt)(await this.#perform({\n            method: \"estimateGas\",\n            transaction: tx\n        }), \"%response\");\n    }\n    async #call(tx, blockTag, attempt) {\n        (0, index_js_6.assert)(attempt < MAX_CCIP_REDIRECTS, \"CCIP read exceeded maximum redirections\", \"OFFCHAIN_FAULT\", {\n            reason: \"TOO_MANY_REDIRECTS\",\n            transaction: Object.assign({}, tx, {\n                blockTag,\n                enableCcipRead: true\n            })\n        });\n        // This came in as a PerformActionTransaction, so to/from are safe; we can cast\n        const transaction = (0, provider_js_1.copyRequest)(tx);\n        try {\n            return (0, index_js_6.hexlify)(await this._perform({\n                method: \"call\",\n                transaction,\n                blockTag\n            }));\n        } catch (error) {\n            // CCIP Read OffchainLookup\n            if (!this.disableCcipRead && (0, index_js_6.isCallException)(error) && error.data && attempt >= 0 && blockTag === \"latest\" && transaction.to != null && (0, index_js_6.dataSlice)(error.data, 0, 4) === \"0x556f1830\") {\n                const data = error.data;\n                const txSender = await (0, index_js_1.resolveAddress)(transaction.to, this);\n                // Parse the CCIP Read Arguments\n                let ccipArgs;\n                try {\n                    ccipArgs = parseOffchainLookup((0, index_js_6.dataSlice)(error.data, 4));\n                } catch (error) {\n                    (0, index_js_6.assert)(false, error.message, \"OFFCHAIN_FAULT\", {\n                        reason: \"BAD_DATA\",\n                        transaction,\n                        info: {\n                            data\n                        }\n                    });\n                }\n                // Check the sender of the OffchainLookup matches the transaction\n                (0, index_js_6.assert)(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), \"CCIP Read sender mismatch\", \"CALL_EXCEPTION\", {\n                    action: \"call\",\n                    data,\n                    reason: \"OffchainLookup\",\n                    transaction: transaction,\n                    invocation: null,\n                    revert: {\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        name: \"OffchainLookup\",\n                        args: ccipArgs.errorArgs\n                    }\n                });\n                const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);\n                (0, index_js_6.assert)(ccipResult != null, \"CCIP Read failed to fetch data\", \"OFFCHAIN_FAULT\", {\n                    reason: \"FETCH_FAILED\",\n                    transaction,\n                    info: {\n                        data: error.data,\n                        errorArgs: ccipArgs.errorArgs\n                    }\n                });\n                const tx = {\n                    to: txSender,\n                    data: (0, index_js_6.concat)([\n                        ccipArgs.selector,\n                        encodeBytes([\n                            ccipResult,\n                            ccipArgs.extraData\n                        ])\n                    ])\n                };\n                this.emit(\"debug\", {\n                    action: \"sendCcipReadCall\",\n                    transaction: tx\n                });\n                try {\n                    const result = await this.#call(tx, blockTag, attempt + 1);\n                    this.emit(\"debug\", {\n                        action: \"receiveCcipReadCallResult\",\n                        transaction: Object.assign({}, tx),\n                        result\n                    });\n                    return result;\n                } catch (error) {\n                    this.emit(\"debug\", {\n                        action: \"receiveCcipReadCallError\",\n                        transaction: Object.assign({}, tx),\n                        error\n                    });\n                    throw error;\n                }\n            }\n            throw error;\n        }\n    }\n    async #checkNetwork(promise) {\n        const { value } = await (0, index_js_6.resolveProperties)({\n            network: this.getNetwork(),\n            value: promise\n        });\n        return value;\n    }\n    async call(_tx) {\n        const { tx, blockTag } = await (0, index_js_6.resolveProperties)({\n            tx: this._getTransactionRequest(_tx),\n            blockTag: this._getBlockTag(_tx.blockTag)\n        });\n        return await this.#checkNetwork(this.#call(tx, blockTag, _tx.enableCcipRead ? 0 : -1));\n    }\n    // Account\n    async #getAccountValue(request, _address, _blockTag) {\n        let address = this._getAddress(_address);\n        let blockTag = this._getBlockTag(_blockTag);\n        if (typeof address !== \"string\" || typeof blockTag !== \"string\") {\n            [address, blockTag] = await Promise.all([\n                address,\n                blockTag\n            ]);\n        }\n        return await this.#checkNetwork(this.#perform(Object.assign(request, {\n            address,\n            blockTag\n        })));\n    }\n    async getBalance(address, blockTag) {\n        return (0, index_js_6.getBigInt)(await this.#getAccountValue({\n            method: \"getBalance\"\n        }, address, blockTag), \"%response\");\n    }\n    async getTransactionCount(address, blockTag) {\n        return (0, index_js_6.getNumber)(await this.#getAccountValue({\n            method: \"getTransactionCount\"\n        }, address, blockTag), \"%response\");\n    }\n    async getCode(address, blockTag) {\n        return (0, index_js_6.hexlify)(await this.#getAccountValue({\n            method: \"getCode\"\n        }, address, blockTag));\n    }\n    async getStorage(address, _position, blockTag) {\n        const position = (0, index_js_6.getBigInt)(_position, \"position\");\n        return (0, index_js_6.hexlify)(await this.#getAccountValue({\n            method: \"getStorage\",\n            position\n        }, address, blockTag));\n    }\n    // Write\n    async broadcastTransaction(signedTx) {\n        const { blockNumber, hash, network } = await (0, index_js_6.resolveProperties)({\n            blockNumber: this.getBlockNumber(),\n            hash: this._perform({\n                method: \"broadcastTransaction\",\n                signedTransaction: signedTx\n            }),\n            network: this.getNetwork()\n        });\n        const tx = index_js_5.Transaction.from(signedTx);\n        if (tx.hash !== hash) {\n            throw new Error(\"@TODO: the returned hash did not match\");\n        }\n        return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);\n    }\n    async #getBlock(block, includeTransactions) {\n        // @TODO: Add CustomBlockPlugin check\n        if ((0, index_js_6.isHexString)(block, 32)) {\n            return await this.#perform({\n                method: \"getBlock\",\n                blockHash: block,\n                includeTransactions\n            });\n        }\n        let blockTag = this._getBlockTag(block);\n        if (typeof blockTag !== \"string\") {\n            blockTag = await blockTag;\n        }\n        return await this.#perform({\n            method: \"getBlock\",\n            blockTag,\n            includeTransactions\n        });\n    }\n    // Queries\n    async getBlock(block, prefetchTxs) {\n        const { network, params } = await (0, index_js_6.resolveProperties)({\n            network: this.getNetwork(),\n            params: this.#getBlock(block, !!prefetchTxs)\n        });\n        if (params == null) {\n            return null;\n        }\n        return this._wrapBlock(params, network);\n    }\n    async getTransaction(hash) {\n        const { network, params } = await (0, index_js_6.resolveProperties)({\n            network: this.getNetwork(),\n            params: this.#perform({\n                method: \"getTransaction\",\n                hash\n            })\n        });\n        if (params == null) {\n            return null;\n        }\n        return this._wrapTransactionResponse(params, network);\n    }\n    async getTransactionReceipt(hash) {\n        const { network, params } = await (0, index_js_6.resolveProperties)({\n            network: this.getNetwork(),\n            params: this.#perform({\n                method: \"getTransactionReceipt\",\n                hash\n            })\n        });\n        if (params == null) {\n            return null;\n        }\n        // Some backends did not backfill the effectiveGasPrice into old transactions\n        // in the receipt, so we look it up manually and inject it.\n        if (params.gasPrice == null && params.effectiveGasPrice == null) {\n            const tx = await this.#perform({\n                method: \"getTransaction\",\n                hash\n            });\n            if (tx == null) {\n                throw new Error(\"report this; could not find tx or effectiveGasPrice\");\n            }\n            params.effectiveGasPrice = tx.gasPrice;\n        }\n        return this._wrapTransactionReceipt(params, network);\n    }\n    async getTransactionResult(hash) {\n        const { result } = await (0, index_js_6.resolveProperties)({\n            network: this.getNetwork(),\n            result: this.#perform({\n                method: \"getTransactionResult\",\n                hash\n            })\n        });\n        if (result == null) {\n            return null;\n        }\n        return (0, index_js_6.hexlify)(result);\n    }\n    // Bloom-filter Queries\n    async getLogs(_filter) {\n        let filter = this._getFilter(_filter);\n        if (isPromise(filter)) {\n            filter = await filter;\n        }\n        const { network, params } = await (0, index_js_6.resolveProperties)({\n            network: this.getNetwork(),\n            params: this.#perform({\n                method: \"getLogs\",\n                filter\n            })\n        });\n        return params.map((p)=>this._wrapLog(p, network));\n    }\n    // ENS\n    _getProvider(chainId) {\n        (0, index_js_6.assert)(false, \"provider cannot connect to target network\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_getProvider()\"\n        });\n    }\n    async getResolver(name) {\n        return await ens_resolver_js_1.EnsResolver.fromName(this, name);\n    }\n    async getAvatar(name) {\n        const resolver = await this.getResolver(name);\n        if (resolver) {\n            return await resolver.getAvatar();\n        }\n        return null;\n    }\n    async resolveName(name) {\n        const resolver = await this.getResolver(name);\n        if (resolver) {\n            return await resolver.getAddress();\n        }\n        return null;\n    }\n    async lookupAddress(address) {\n        address = (0, index_js_1.getAddress)(address);\n        const node = (0, index_js_4.namehash)(address.substring(2).toLowerCase() + \".addr.reverse\");\n        try {\n            const ensAddr = await ens_resolver_js_1.EnsResolver.getEnsAddress(this);\n            const ensContract = new index_js_3.Contract(ensAddr, [\n                \"function resolver(bytes32) view returns (address)\"\n            ], this);\n            const resolver = await ensContract.resolver(node);\n            if (resolver == null || resolver === index_js_2.ZeroAddress) {\n                return null;\n            }\n            const resolverContract = new index_js_3.Contract(resolver, [\n                \"function name(bytes32) view returns (string)\"\n            ], this);\n            const name = await resolverContract.name(node);\n            // Failed forward resolution\n            const check = await this.resolveName(name);\n            if (check !== address) {\n                return null;\n            }\n            return name;\n        } catch (error) {\n            // No data was returned from the resolver\n            if ((0, index_js_6.isError)(error, \"BAD_DATA\") && error.value === \"0x\") {\n                return null;\n            }\n            // Something reerted\n            if ((0, index_js_6.isError)(error, \"CALL_EXCEPTION\")) {\n                return null;\n            }\n            throw error;\n        }\n        return null;\n    }\n    async waitForTransaction(hash, _confirms, timeout) {\n        const confirms = _confirms != null ? _confirms : 1;\n        if (confirms === 0) {\n            return this.getTransactionReceipt(hash);\n        }\n        return new Promise(async (resolve, reject)=>{\n            let timer = null;\n            const listener = async (blockNumber)=>{\n                try {\n                    const receipt = await this.getTransactionReceipt(hash);\n                    if (receipt != null) {\n                        if (blockNumber - receipt.blockNumber + 1 >= confirms) {\n                            resolve(receipt);\n                            //this.off(\"block\", listener);\n                            if (timer) {\n                                clearTimeout(timer);\n                                timer = null;\n                            }\n                            return;\n                        }\n                    }\n                } catch (error) {\n                    console.log(\"EEE\", error);\n                }\n                this.once(\"block\", listener);\n            };\n            if (timeout != null) {\n                timer = setTimeout(()=>{\n                    if (timer == null) {\n                        return;\n                    }\n                    timer = null;\n                    this.off(\"block\", listener);\n                    reject((0, index_js_6.makeError)(\"timeout\", \"TIMEOUT\", {\n                        reason: \"timeout\"\n                    }));\n                }, timeout);\n            }\n            listener(await this.getBlockNumber());\n        });\n    }\n    async waitForBlock(blockTag) {\n        (0, index_js_6.assert)(false, \"not implemented yet\", \"NOT_IMPLEMENTED\", {\n            operation: \"waitForBlock\"\n        });\n    }\n    /**\n     *  Clear a timer created using the [[_setTimeout]] method.\n     */ _clearTimeout(timerId) {\n        const timer = this.#timers.get(timerId);\n        if (!timer) {\n            return;\n        }\n        if (timer.timer) {\n            clearTimeout(timer.timer);\n        }\n        this.#timers.delete(timerId);\n    }\n    /**\n     *  Create a timer that will execute %%func%% after at least %%timeout%%\n     *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute\n     *  in the next event loop.\n     *\n     *  [Pausing](AbstractProvider-paused) the provider will pause any\n     *  associated timers.\n     */ _setTimeout(_func, timeout) {\n        if (timeout == null) {\n            timeout = 0;\n        }\n        const timerId = this.#nextTimer++;\n        const func = ()=>{\n            this.#timers.delete(timerId);\n            _func();\n        };\n        if (this.paused) {\n            this.#timers.set(timerId, {\n                timer: null,\n                func,\n                time: timeout\n            });\n        } else {\n            const timer = setTimeout(func, timeout);\n            this.#timers.set(timerId, {\n                timer,\n                func,\n                time: getTime()\n            });\n        }\n        return timerId;\n    }\n    /**\n     *  Perform %%func%% on each subscriber.\n     */ _forEachSubscriber(func) {\n        for (const sub of this.#subs.values()){\n            func(sub.subscriber);\n        }\n    }\n    /**\n     *  Sub-classes may override this to customize subscription\n     *  implementations.\n     */ _getSubscriber(sub) {\n        switch(sub.type){\n            case \"debug\":\n            case \"error\":\n            case \"network\":\n                return new UnmanagedSubscriber(sub.type);\n            case \"block\":\n                {\n                    const subscriber = new subscriber_polling_js_1.PollingBlockSubscriber(this);\n                    subscriber.pollingInterval = this.pollingInterval;\n                    return subscriber;\n                }\n            case \"event\":\n                return new subscriber_polling_js_1.PollingEventSubscriber(this, sub.filter);\n            case \"transaction\":\n                return new subscriber_polling_js_1.PollingTransactionSubscriber(this, sub.hash);\n            case \"orphan\":\n                return new subscriber_polling_js_1.PollingOrphanSubscriber(this, sub.filter);\n        }\n        throw new Error(`unsupported event: ${sub.type}`);\n    }\n    /**\n     *  If a [[Subscriber]] fails and needs to replace itself, this\n     *  method may be used.\n     *\n     *  For example, this is used for providers when using the\n     *  ``eth_getFilterChanges`` method, which can return null if state\n     *  filters are not supported by the backend, allowing the Subscriber\n     *  to swap in a [[PollingEventSubscriber]].\n     */ _recoverSubscriber(oldSub, newSub) {\n        for (const sub of this.#subs.values()){\n            if (sub.subscriber === oldSub) {\n                if (sub.started) {\n                    sub.subscriber.stop();\n                }\n                sub.subscriber = newSub;\n                if (sub.started) {\n                    newSub.start();\n                }\n                if (this.#pausedState != null) {\n                    newSub.pause(this.#pausedState);\n                }\n                break;\n            }\n        }\n    }\n    async #hasSub(event, emitArgs) {\n        let sub = await getSubscription(event, this);\n        // This is a log that is removing an existing log; we actually want\n        // to emit an orphan event for the removed log\n        if (sub.type === \"event\" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {\n            sub = await getSubscription({\n                orphan: \"drop-log\",\n                log: emitArgs[0]\n            }, this);\n        }\n        return this.#subs.get(sub.tag) || null;\n    }\n    async #getSub(event) {\n        const subscription = await getSubscription(event, this);\n        // Prevent tampering with our tag in any subclass' _getSubscriber\n        const tag = subscription.tag;\n        let sub = this.#subs.get(tag);\n        if (!sub) {\n            const subscriber = this._getSubscriber(subscription);\n            const addressableMap = new WeakMap();\n            const nameMap = new Map();\n            sub = {\n                subscriber,\n                tag,\n                addressableMap,\n                nameMap,\n                started: false,\n                listeners: []\n            };\n            this.#subs.set(tag, sub);\n        }\n        return sub;\n    }\n    async on(event, listener) {\n        const sub = await this.#getSub(event);\n        sub.listeners.push({\n            listener,\n            once: false\n        });\n        if (!sub.started) {\n            sub.subscriber.start();\n            sub.started = true;\n            if (this.#pausedState != null) {\n                sub.subscriber.pause(this.#pausedState);\n            }\n        }\n        return this;\n    }\n    async once(event, listener) {\n        const sub = await this.#getSub(event);\n        sub.listeners.push({\n            listener,\n            once: true\n        });\n        if (!sub.started) {\n            sub.subscriber.start();\n            sub.started = true;\n            if (this.#pausedState != null) {\n                sub.subscriber.pause(this.#pausedState);\n            }\n        }\n        return this;\n    }\n    async emit(event, ...args) {\n        const sub = await this.#hasSub(event, args);\n        // If there is not subscription or if a recent emit removed\n        // the last of them (which also deleted the sub) do nothing\n        if (!sub || sub.listeners.length === 0) {\n            return false;\n        }\n        ;\n        const count = sub.listeners.length;\n        sub.listeners = sub.listeners.filter(({ listener, once })=>{\n            const payload = new index_js_6.EventPayload(this, once ? null : listener, event);\n            try {\n                listener.call(this, ...args, payload);\n            } catch (error) {}\n            return !once;\n        });\n        if (sub.listeners.length === 0) {\n            if (sub.started) {\n                sub.subscriber.stop();\n            }\n            this.#subs.delete(sub.tag);\n        }\n        return count > 0;\n    }\n    async listenerCount(event) {\n        if (event) {\n            const sub = await this.#hasSub(event);\n            if (!sub) {\n                return 0;\n            }\n            return sub.listeners.length;\n        }\n        let total = 0;\n        for (const { listeners } of this.#subs.values()){\n            total += listeners.length;\n        }\n        return total;\n    }\n    async listeners(event) {\n        if (event) {\n            const sub = await this.#hasSub(event);\n            if (!sub) {\n                return [];\n            }\n            return sub.listeners.map(({ listener })=>listener);\n        }\n        let result = [];\n        for (const { listeners } of this.#subs.values()){\n            result = result.concat(listeners.map(({ listener })=>listener));\n        }\n        return result;\n    }\n    async off(event, listener) {\n        const sub = await this.#hasSub(event);\n        if (!sub) {\n            return this;\n        }\n        if (listener) {\n            const index = sub.listeners.map(({ listener })=>listener).indexOf(listener);\n            if (index >= 0) {\n                sub.listeners.splice(index, 1);\n            }\n        }\n        if (!listener || sub.listeners.length === 0) {\n            if (sub.started) {\n                sub.subscriber.stop();\n            }\n            this.#subs.delete(sub.tag);\n        }\n        return this;\n    }\n    async removeAllListeners(event) {\n        if (event) {\n            const { tag, started, subscriber } = await this.#getSub(event);\n            if (started) {\n                subscriber.stop();\n            }\n            this.#subs.delete(tag);\n        } else {\n            for (const [tag, { started, subscriber }] of this.#subs){\n                if (started) {\n                    subscriber.stop();\n                }\n                this.#subs.delete(tag);\n            }\n        }\n        return this;\n    }\n    // Alias for \"on\"\n    async addListener(event, listener) {\n        return await this.on(event, listener);\n    }\n    // Alias for \"off\"\n    async removeListener(event, listener) {\n        return this.off(event, listener);\n    }\n    /**\n     *  If this provider has been destroyed using the [[destroy]] method.\n     *\n     *  Once destroyed, all resources are reclaimed, internal event loops\n     *  and timers are cleaned up and no further requests may be sent to\n     *  the provider.\n     */ get destroyed() {\n        return this.#destroyed;\n    }\n    /**\n     *  Sub-classes may use this to shutdown any sockets or release their\n     *  resources and reject any pending requests.\n     *\n     *  Sub-classes **must** call ``super.destroy()``.\n     */ destroy() {\n        // Stop all listeners\n        this.removeAllListeners();\n        // Shut down all tiemrs\n        for (const timerId of this.#timers.keys()){\n            this._clearTimeout(timerId);\n        }\n        this.#destroyed = true;\n    }\n    /**\n     *  Whether the provider is currently paused.\n     *\n     *  A paused provider will not emit any events, and generally should\n     *  not make any requests to the network, but that is up to sub-classes\n     *  to manage.\n     *\n     *  Setting ``paused = true`` is identical to calling ``.pause(false)``,\n     *  which will buffer any events that occur while paused until the\n     *  provider is unpaused.\n     */ get paused() {\n        return this.#pausedState != null;\n    }\n    set paused(pause) {\n        if (!!pause === this.paused) {\n            return;\n        }\n        if (this.paused) {\n            this.resume();\n        } else {\n            this.pause(false);\n        }\n    }\n    /**\n     *  Pause the provider. If %%dropWhilePaused%%, any events that occur\n     *  while paused are dropped, otherwise all events will be emitted once\n     *  the provider is unpaused.\n     */ pause(dropWhilePaused) {\n        this.#lastBlockNumber = -1;\n        if (this.#pausedState != null) {\n            if (this.#pausedState == !!dropWhilePaused) {\n                return;\n            }\n            (0, index_js_6.assert)(false, \"cannot change pause type; resume first\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"pause\"\n            });\n        }\n        this._forEachSubscriber((s)=>s.pause(dropWhilePaused));\n        this.#pausedState = !!dropWhilePaused;\n        for (const timer of this.#timers.values()){\n            // Clear the timer\n            if (timer.timer) {\n                clearTimeout(timer.timer);\n            }\n            // Remaining time needed for when we become unpaused\n            timer.time = getTime() - timer.time;\n        }\n    }\n    /**\n     *  Resume the provider.\n     */ resume() {\n        if (this.#pausedState == null) {\n            return;\n        }\n        this._forEachSubscriber((s)=>s.resume());\n        this.#pausedState = null;\n        for (const timer of this.#timers.values()){\n            // Remaining time when we were paused\n            let timeout = timer.time;\n            if (timeout < 0) {\n                timeout = 0;\n            }\n            // Start time (in cause paused, so we con compute remaininf time)\n            timer.time = getTime();\n            // Start the timer\n            setTimeout(timer.func, timeout);\n        }\n    }\n}\nexports.AbstractProvider = AbstractProvider;\nfunction _parseString(result, start) {\n    try {\n        const bytes = _parseBytes(result, start);\n        if (bytes) {\n            return (0, index_js_6.toUtf8String)(bytes);\n        }\n    } catch (error) {}\n    return null;\n}\nfunction _parseBytes(result, start) {\n    if (result === \"0x\") {\n        return null;\n    }\n    try {\n        const offset = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(result, start, start + 32));\n        const length = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(result, offset, offset + 32));\n        return (0, index_js_6.dataSlice)(result, offset + 32, offset + 32 + length);\n    } catch (error) {}\n    return null;\n}\nfunction numPad(value) {\n    const result = (0, index_js_6.toBeArray)(value);\n    if (result.length > 32) {\n        throw new Error(\"internal; should not happen\");\n    }\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\nfunction bytesPad(value) {\n    if (value.length % 32 === 0) {\n        return value;\n    }\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\nconst empty = new Uint8Array([]);\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n    const result = [];\n    let byteCount = 0;\n    // Add place-holders for pointers as we add items\n    for(let i = 0; i < datas.length; i++){\n        result.push(empty);\n        byteCount += 32;\n    }\n    for(let i = 0; i < datas.length; i++){\n        const data = (0, index_js_6.getBytes)(datas[i]);\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n    return (0, index_js_6.concat)(result);\n}\nconst zeros = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\nfunction parseOffchainLookup(data) {\n    const result = {\n        sender: \"\",\n        urls: [],\n        calldata: \"\",\n        selector: \"\",\n        extraData: \"\",\n        errorArgs: []\n    };\n    (0, index_js_6.assert)((0, index_js_6.dataLength)(data) >= 5 * 32, \"insufficient OffchainLookup data\", \"OFFCHAIN_FAULT\", {\n        reason: \"insufficient OffchainLookup data\"\n    });\n    const sender = (0, index_js_6.dataSlice)(data, 0, 32);\n    (0, index_js_6.assert)((0, index_js_6.dataSlice)(sender, 0, 12) === (0, index_js_6.dataSlice)(zeros, 0, 12), \"corrupt OffchainLookup sender\", \"OFFCHAIN_FAULT\", {\n        reason: \"corrupt OffchainLookup sender\"\n    });\n    result.sender = (0, index_js_6.dataSlice)(sender, 12);\n    // Read the URLs from the response\n    try {\n        const urls = [];\n        const urlsOffset = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(data, 32, 64));\n        const urlsLength = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(data, urlsOffset, urlsOffset + 32));\n        const urlsData = (0, index_js_6.dataSlice)(data, urlsOffset + 32);\n        for(let u = 0; u < urlsLength; u++){\n            const url = _parseString(urlsData, u * 32);\n            if (url == null) {\n                throw new Error(\"abort\");\n            }\n            urls.push(url);\n        }\n        result.urls = urls;\n    } catch (error) {\n        (0, index_js_6.assert)(false, \"corrupt OffchainLookup urls\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup urls\"\n        });\n    }\n    // Get the CCIP calldata to forward\n    try {\n        const calldata = _parseBytes(data, 64);\n        if (calldata == null) {\n            throw new Error(\"abort\");\n        }\n        result.calldata = calldata;\n    } catch (error) {\n        (0, index_js_6.assert)(false, \"corrupt OffchainLookup calldata\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup calldata\"\n        });\n    }\n    // Get the callbackSelector (bytes4)\n    (0, index_js_6.assert)((0, index_js_6.dataSlice)(data, 100, 128) === (0, index_js_6.dataSlice)(zeros, 0, 28), \"corrupt OffchainLookup callbaackSelector\", \"OFFCHAIN_FAULT\", {\n        reason: \"corrupt OffchainLookup callbaackSelector\"\n    });\n    result.selector = (0, index_js_6.dataSlice)(data, 96, 100);\n    // Get the extra data to send back to the contract as context\n    try {\n        const extraData = _parseBytes(data, 128);\n        if (extraData == null) {\n            throw new Error(\"abort\");\n        }\n        result.extraData = extraData;\n    } catch (error) {\n        (0, index_js_6.assert)(false, \"corrupt OffchainLookup extraData\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup extraData\"\n        });\n    }\n    result.errorArgs = \"sender,urls,calldata,selector,extraData\".split(/,/).map((k)=>result[k]);\n    return result;\n} //# sourceMappingURL=abstract-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/abstract-provider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/abstract-signer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/abstract-signer.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.VoidSigner = exports.AbstractSigner = void 0;\n/**\n *  Generally the [[Wallet]] and [[JsonRpcSigner]] and their sub-classes\n *  are sufficent for most developers, but this is provided to\n *  fascilitate more complex Signers.\n *\n *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]\n */ const index_js_1 = __webpack_require__(/*! ../address/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../transaction/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/transaction/index.js\");\nconst index_js_3 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst provider_js_1 = __webpack_require__(/*! ./provider.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider.js\");\nfunction checkProvider(signer, operation) {\n    if (signer.provider) {\n        return signer.provider;\n    }\n    (0, index_js_3.assert)(false, \"missing provider\", \"UNSUPPORTED_OPERATION\", {\n        operation\n    });\n}\nasync function populate(signer, tx) {\n    let pop = (0, provider_js_1.copyRequest)(tx);\n    if (pop.to != null) {\n        pop.to = (0, index_js_1.resolveAddress)(pop.to, signer);\n    }\n    if (pop.from != null) {\n        const from = pop.from;\n        pop.from = Promise.all([\n            signer.getAddress(),\n            (0, index_js_1.resolveAddress)(from, signer)\n        ]).then(([address, from])=>{\n            (0, index_js_3.assertArgument)(address.toLowerCase() === from.toLowerCase(), \"transaction from mismatch\", \"tx.from\", from);\n            return address;\n        });\n    } else {\n        pop.from = signer.getAddress();\n    }\n    return await (0, index_js_3.resolveProperties)(pop);\n}\n/**\n *  An **AbstractSigner** includes most of teh functionality required\n *  to get a [[Signer]] working as expected, but requires a few\n *  Signer-specific methods be overridden.\n *\n */ class AbstractSigner {\n    /**\n     *  Creates a new Signer connected to %%provider%%.\n     */ constructor(provider){\n        (0, index_js_3.defineProperties)(this, {\n            provider: provider || null\n        });\n    }\n    async getNonce(blockTag) {\n        return checkProvider(this, \"getTransactionCount\").getTransactionCount(await this.getAddress(), blockTag);\n    }\n    async populateCall(tx) {\n        const pop = await populate(this, tx);\n        return pop;\n    }\n    async populateTransaction(tx) {\n        const provider = checkProvider(this, \"populateTransaction\");\n        const pop = await populate(this, tx);\n        if (pop.nonce == null) {\n            pop.nonce = await this.getNonce(\"pending\");\n        }\n        if (pop.gasLimit == null) {\n            pop.gasLimit = await this.estimateGas(pop);\n        }\n        // Populate the chain ID\n        const network = await this.provider.getNetwork();\n        if (pop.chainId != null) {\n            const chainId = (0, index_js_3.getBigInt)(pop.chainId);\n            (0, index_js_3.assertArgument)(chainId === network.chainId, \"transaction chainId mismatch\", \"tx.chainId\", tx.chainId);\n        } else {\n            pop.chainId = network.chainId;\n        }\n        // Do not allow mixing pre-eip-1559 and eip-1559 properties\n        const hasEip1559 = pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null;\n        if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {\n            (0, index_js_3.assertArgument)(false, \"eip-1559 transaction do not support gasPrice\", \"tx\", tx);\n        } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {\n            (0, index_js_3.assertArgument)(false, \"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"tx\", tx);\n        }\n        if ((pop.type === 2 || pop.type == null) && pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null) {\n            // Fully-formed EIP-1559 transaction (skip getFeeData)\n            pop.type = 2;\n        } else if (pop.type === 0 || pop.type === 1) {\n            // Explicit Legacy or EIP-2930 transaction\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n            (0, index_js_3.assert)(feeData.gasPrice != null, \"network does not support gasPrice\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"getGasPrice\"\n            });\n            // Populate missing gasPrice\n            if (pop.gasPrice == null) {\n                pop.gasPrice = feeData.gasPrice;\n            }\n        } else {\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n            if (pop.type == null) {\n                // We need to auto-detect the intended type of this transaction...\n                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                    // The network supports EIP-1559!\n                    // Upgrade transaction from null to eip-1559\n                    pop.type = 2;\n                    if (pop.gasPrice != null) {\n                        // Using legacy gasPrice property on an eip-1559 network,\n                        // so use gasPrice as both fee properties\n                        const gasPrice = pop.gasPrice;\n                        delete pop.gasPrice;\n                        pop.maxFeePerGas = gasPrice;\n                        pop.maxPriorityFeePerGas = gasPrice;\n                    } else {\n                        // Populate missing fee data\n                        if (pop.maxFeePerGas == null) {\n                            pop.maxFeePerGas = feeData.maxFeePerGas;\n                        }\n                        if (pop.maxPriorityFeePerGas == null) {\n                            pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                        }\n                    }\n                } else if (feeData.gasPrice != null) {\n                    // Network doesn't support EIP-1559...\n                    // ...but they are trying to use EIP-1559 properties\n                    (0, index_js_3.assert)(!hasEip1559, \"network does not support EIP-1559\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"populateTransaction\"\n                    });\n                    // Populate missing fee data\n                    if (pop.gasPrice == null) {\n                        pop.gasPrice = feeData.gasPrice;\n                    }\n                    // Explicitly set untyped transaction to legacy\n                    // @TODO: Maybe this shold allow type 1?\n                    pop.type = 0;\n                } else {\n                    // getFeeData has failed us.\n                    (0, index_js_3.assert)(false, \"failed to get consistent fee data\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"signer.getFeeData\"\n                    });\n                }\n            } else if (pop.type === 2) {\n                // Explicitly using EIP-1559\n                // Populate missing fee data\n                if (pop.maxFeePerGas == null) {\n                    pop.maxFeePerGas = feeData.maxFeePerGas;\n                }\n                if (pop.maxPriorityFeePerGas == null) {\n                    pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                }\n            }\n        }\n        //@TOOD: Don't await all over the place; save them up for\n        // the end for better batching\n        return await (0, index_js_3.resolveProperties)(pop);\n    }\n    async estimateGas(tx) {\n        return checkProvider(this, \"estimateGas\").estimateGas(await this.populateCall(tx));\n    }\n    async call(tx) {\n        return checkProvider(this, \"call\").call(await this.populateCall(tx));\n    }\n    async resolveName(name) {\n        const provider = checkProvider(this, \"resolveName\");\n        return await provider.resolveName(name);\n    }\n    async sendTransaction(tx) {\n        const provider = checkProvider(this, \"sendTransaction\");\n        const pop = await this.populateTransaction(tx);\n        delete pop.from;\n        const txObj = index_js_2.Transaction.from(pop);\n        return await provider.broadcastTransaction(await this.signTransaction(txObj));\n    }\n}\nexports.AbstractSigner = AbstractSigner;\n/**\n *  A **VoidSigner** is a class deisgned to allow an address to be used\n *  in any API which accepts a Signer, but for which there are no\n *  credentials available to perform any actual signing.\n *\n *  This for example allow impersonating an account for the purpose of\n *  static calls or estimating gas, but does not allow sending transactions.\n */ class VoidSigner extends AbstractSigner {\n    /**\n     *  Creates a new **VoidSigner** with %%address%% attached to\n     *  %%provider%%.\n     */ constructor(address, provider){\n        super(provider);\n        (0, index_js_3.defineProperties)(this, {\n            address\n        });\n    }\n    async getAddress() {\n        return this.address;\n    }\n    connect(provider) {\n        return new VoidSigner(this.address, provider);\n    }\n    #throwUnsupported(suffix, operation) {\n        (0, index_js_3.assert)(false, `VoidSigner cannot sign ${suffix}`, \"UNSUPPORTED_OPERATION\", {\n            operation\n        });\n    }\n    async signTransaction(tx) {\n        this.#throwUnsupported(\"transactions\", \"signTransaction\");\n    }\n    async signMessage(message) {\n        this.#throwUnsupported(\"messages\", \"signMessage\");\n    }\n    async signTypedData(domain, types, value) {\n        this.#throwUnsupported(\"typed-data\", \"signTypedData\");\n    }\n}\nexports.VoidSigner = VoidSigner; //# sourceMappingURL=abstract-signer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/abstract-signer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/community.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/community.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n *  There are many awesome community services that provide Ethereum\n *  nodes both for developers just starting out and for large-scale\n *  communities.\n *\n *  @_section: api/providers/thirdparty: Community Providers  [thirdparty]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.showThrottleMessage = void 0;\n// Show the throttle message only once per service\nconst shown = new Set();\n/**\n *  Displays a warning in tht console when the community resource is\n *  being used too heavily by the app, recommending the developer\n *  acquire their own credentials instead of using the community\n *  credentials.\n *\n *  The notification will only occur once per service.\n */ function showThrottleMessage(service) {\n    if (shown.has(service)) {\n        return;\n    }\n    shown.add(service);\n    console.log(\"========= NOTICE =========\");\n    console.log(`Request-Rate Exceeded for ${service} (this message will not be repeated)`);\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https://docs.ethers.org/api-keys/\");\n    console.log(\"==========================\");\n}\nexports.showThrottleMessage = showThrottleMessage; //# sourceMappingURL=community.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9wcm92aWRlcnMvY29tbXVuaXR5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7OztDQU1DLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwyQkFBMkIsR0FBRyxLQUFLO0FBQ25DLGtEQUFrRDtBQUNsRCxNQUFNRyxRQUFRLElBQUlDO0FBQ2xCOzs7Ozs7O0NBT0MsR0FDRCxTQUFTRixvQkFBb0JHLE9BQU87SUFDaEMsSUFBSUYsTUFBTUcsR0FBRyxDQUFDRCxVQUFVO1FBQ3BCO0lBQ0o7SUFDQUYsTUFBTUksR0FBRyxDQUFDRjtJQUNWRyxRQUFRQyxHQUFHLENBQUM7SUFDWkQsUUFBUUMsR0FBRyxDQUFDLENBQUMsMEJBQTBCLEVBQUVKLFFBQVEsb0NBQW9DLENBQUM7SUFDdEZHLFFBQVFDLEdBQUcsQ0FBQztJQUNaRCxRQUFRQyxHQUFHLENBQUM7SUFDWkQsUUFBUUMsR0FBRyxDQUFDO0lBQ1pELFFBQVFDLEdBQUcsQ0FBQztJQUNaRCxRQUFRQyxHQUFHLENBQUM7SUFDWkQsUUFBUUMsR0FBRyxDQUFDO0lBQ1pELFFBQVFDLEdBQUcsQ0FBQztJQUNaRCxRQUFRQyxHQUFHLENBQUM7SUFDWkQsUUFBUUMsR0FBRyxDQUFDO0lBQ1pELFFBQVFDLEdBQUcsQ0FBQztBQUNoQjtBQUNBVCwyQkFBMkIsR0FBR0UscUJBQzlCLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL3Byb3ZpZGVycy9jb21tdW5pdHkuanM/M2IzOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogIFRoZXJlIGFyZSBtYW55IGF3ZXNvbWUgY29tbXVuaXR5IHNlcnZpY2VzIHRoYXQgcHJvdmlkZSBFdGhlcmV1bVxuICogIG5vZGVzIGJvdGggZm9yIGRldmVsb3BlcnMganVzdCBzdGFydGluZyBvdXQgYW5kIGZvciBsYXJnZS1zY2FsZVxuICogIGNvbW11bml0aWVzLlxuICpcbiAqICBAX3NlY3Rpb246IGFwaS9wcm92aWRlcnMvdGhpcmRwYXJ0eTogQ29tbXVuaXR5IFByb3ZpZGVycyAgW3RoaXJkcGFydHldXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2hvd1Rocm90dGxlTWVzc2FnZSA9IHZvaWQgMDtcbi8vIFNob3cgdGhlIHRocm90dGxlIG1lc3NhZ2Ugb25seSBvbmNlIHBlciBzZXJ2aWNlXG5jb25zdCBzaG93biA9IG5ldyBTZXQoKTtcbi8qKlxuICogIERpc3BsYXlzIGEgd2FybmluZyBpbiB0aHQgY29uc29sZSB3aGVuIHRoZSBjb21tdW5pdHkgcmVzb3VyY2UgaXNcbiAqICBiZWluZyB1c2VkIHRvbyBoZWF2aWx5IGJ5IHRoZSBhcHAsIHJlY29tbWVuZGluZyB0aGUgZGV2ZWxvcGVyXG4gKiAgYWNxdWlyZSB0aGVpciBvd24gY3JlZGVudGlhbHMgaW5zdGVhZCBvZiB1c2luZyB0aGUgY29tbXVuaXR5XG4gKiAgY3JlZGVudGlhbHMuXG4gKlxuICogIFRoZSBub3RpZmljYXRpb24gd2lsbCBvbmx5IG9jY3VyIG9uY2UgcGVyIHNlcnZpY2UuXG4gKi9cbmZ1bmN0aW9uIHNob3dUaHJvdHRsZU1lc3NhZ2Uoc2VydmljZSkge1xuICAgIGlmIChzaG93bi5oYXMoc2VydmljZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzaG93bi5hZGQoc2VydmljZSk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT0gTk9USUNFID09PT09PT09PVwiKTtcbiAgICBjb25zb2xlLmxvZyhgUmVxdWVzdC1SYXRlIEV4Y2VlZGVkIGZvciAke3NlcnZpY2V9ICh0aGlzIG1lc3NhZ2Ugd2lsbCBub3QgYmUgcmVwZWF0ZWQpYCk7XG4gICAgY29uc29sZS5sb2coXCJcIik7XG4gICAgY29uc29sZS5sb2coXCJUaGUgZGVmYXVsdCBBUEkga2V5cyBmb3IgZWFjaCBzZXJ2aWNlIGFyZSBwcm92aWRlZCBhcyBhIGhpZ2hseS10aHJvdHRsZWQsXCIpO1xuICAgIGNvbnNvbGUubG9nKFwiY29tbXVuaXR5IHJlc291cmNlIGZvciBsb3ctdHJhZmZpYyBwcm9qZWN0cyBhbmQgZWFybHkgcHJvdG90eXBpbmcuXCIpO1xuICAgIGNvbnNvbGUubG9nKFwiXCIpO1xuICAgIGNvbnNvbGUubG9nKFwiV2hpbGUgeW91ciBhcHBsaWNhdGlvbiB3aWxsIGNvbnRpbnVlIHRvIGZ1bmN0aW9uLCB3ZSBoaWdobHkgcmVjb21tZW5kZWRcIik7XG4gICAgY29uc29sZS5sb2coXCJzaWduaW5nIHVwIGZvciB5b3VyIG93biBBUEkga2V5cyB0byBpbXByb3ZlIHBlcmZvcm1hbmNlLCBpbmNyZWFzZSB5b3VyXCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxdWVzdCByYXRlL2xpbWl0IGFuZCBlbmFibGUgb3RoZXIgcGVya3MsIHN1Y2ggYXMgbWV0cmljcyBhbmQgYWR2YW5jZWQgQVBJcy5cIik7XG4gICAgY29uc29sZS5sb2coXCJcIik7XG4gICAgY29uc29sZS5sb2coXCJGb3IgbW9yZSBkZXRhaWxzOiBodHRwczovXFwvZG9jcy5ldGhlcnMub3JnL2FwaS1rZXlzL1wiKTtcbiAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PT09PT09PT09PT09PT09PT09XCIpO1xufVxuZXhwb3J0cy5zaG93VGhyb3R0bGVNZXNzYWdlID0gc2hvd1Rocm90dGxlTWVzc2FnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW11bml0eS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzaG93VGhyb3R0bGVNZXNzYWdlIiwic2hvd24iLCJTZXQiLCJzZXJ2aWNlIiwiaGFzIiwiYWRkIiwiY29uc29sZSIsImxvZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/community.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/default-provider.js":
/*!************************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/default-provider.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getDefaultProvider = void 0;\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst provider_ankr_js_1 = __webpack_require__(/*! ./provider-ankr.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-ankr.js\");\nconst provider_alchemy_js_1 = __webpack_require__(/*! ./provider-alchemy.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-alchemy.js\");\nconst provider_cloudflare_js_1 = __webpack_require__(/*! ./provider-cloudflare.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-cloudflare.js\");\nconst provider_etherscan_js_1 = __webpack_require__(/*! ./provider-etherscan.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-etherscan.js\");\nconst provider_infura_js_1 = __webpack_require__(/*! ./provider-infura.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-infura.js\");\n//import { PocketProvider } from \"./provider-pocket.js\";\nconst provider_quicknode_js_1 = __webpack_require__(/*! ./provider-quicknode.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-quicknode.js\");\nconst provider_fallback_js_1 = __webpack_require__(/*! ./provider-fallback.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-fallback.js\");\nconst provider_jsonrpc_js_1 = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js\");\nconst network_js_1 = __webpack_require__(/*! ./network.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/network.js\");\nconst provider_websocket_js_1 = __webpack_require__(/*! ./provider-websocket.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-websocket.js\");\nfunction isWebSocketLike(value) {\n    return value && typeof value.send === \"function\" && typeof value.close === \"function\";\n}\nconst Testnets = \"goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt\".split(\" \");\n/**\n *  Returns a default provider for %%network%%.\n *\n *  If %%network%% is a [[WebSocketLike]] or string that begins with\n *  ``\"ws:\"`` or ``\"wss:\"``, a [[WebSocketProvider]] is returned backed\n *  by that WebSocket or URL.\n *\n *  If %%network%% is a string that begins with ``\"HTTP:\"`` or ``\"HTTPS:\"``,\n *  a [[JsonRpcProvider]] is returned connected to that URL.\n *\n *  Otherwise, a default provider is created backed by well-known public\n *  Web3 backends (such as [[link-infura]]) using community-provided API\n *  keys.\n *\n *  The %%options%% allows specifying custom API keys per backend (setting\n *  an API key to ``\"-\"`` will omit that provider) and ``options.exclusive``\n *  can be set to either a backend name or and array of backend names, which\n *  will whitelist **only** those backends.\n *\n *  Current backend strings supported are:\n *  - ``\"alchemy\"``\n *  - ``\"ankr\"``\n *  - ``\"cloudflare\"``\n *  - ``\"etherscan\"``\n *  - ``\"infura\"``\n *  - ``\"publicPolygon\"``\n *  - ``\"quicknode\"``\n *\n *  @example:\n *    // Connect to a local Geth node\n *    provider = getDefaultProvider(\"http://localhost:8545/\");\n *\n *    // Connect to Ethereum mainnet with any current and future\n *    // third-party services available\n *    provider = getDefaultProvider(\"mainnet\");\n *\n *    // Connect to Polygoin, but only allow Etherscan and\n *    // INFURA and use \"MY_API_KEY\" in calls to Etherscan.\n *    provider = getDefaultProvider(\"matic\", {\n *      etherscan: \"MY_API_KEY\",\n *      exclusive: [ \"etherscan\", \"infura\" ]\n *    });\n */ function getDefaultProvider(network, options) {\n    if (options == null) {\n        options = {};\n    }\n    const allowService = (name)=>{\n        if (options[name] === \"-\") {\n            return false;\n        }\n        if (typeof options.exclusive === \"string\") {\n            return name === options.exclusive;\n        }\n        if (Array.isArray(options.exclusive)) {\n            return options.exclusive.indexOf(name) !== -1;\n        }\n        return true;\n    };\n    if (typeof network === \"string\" && network.match(/^https?:/)) {\n        return new provider_jsonrpc_js_1.JsonRpcProvider(network);\n    }\n    if (typeof network === \"string\" && network.match(/^wss?:/) || isWebSocketLike(network)) {\n        return new provider_websocket_js_1.WebSocketProvider(network);\n    }\n    // Get the network and name, if possible\n    let staticNetwork = null;\n    try {\n        staticNetwork = network_js_1.Network.from(network);\n    } catch (error) {}\n    const providers = [];\n    if (allowService(\"publicPolygon\") && staticNetwork) {\n        if (staticNetwork.name === \"matic\") {\n            providers.push(new provider_jsonrpc_js_1.JsonRpcProvider(\"https://polygon-rpc.com/\", staticNetwork, {\n                staticNetwork\n            }));\n        }\n    }\n    if (allowService(\"alchemy\")) {\n        try {\n            providers.push(new provider_alchemy_js_1.AlchemyProvider(network, options.alchemy));\n        } catch (error) {}\n    }\n    if (allowService(\"ankr\") && options.ankr != null) {\n        try {\n            providers.push(new provider_ankr_js_1.AnkrProvider(network, options.ankr));\n        } catch (error) {}\n    }\n    if (allowService(\"cloudflare\")) {\n        try {\n            providers.push(new provider_cloudflare_js_1.CloudflareProvider(network));\n        } catch (error) {}\n    }\n    if (allowService(\"etherscan\")) {\n        try {\n            providers.push(new provider_etherscan_js_1.EtherscanProvider(network, options.etherscan));\n        } catch (error) {}\n    }\n    if (allowService(\"infura\")) {\n        try {\n            let projectId = options.infura;\n            let projectSecret = undefined;\n            if (typeof projectId === \"object\") {\n                projectSecret = projectId.projectSecret;\n                projectId = projectId.projectId;\n            }\n            providers.push(new provider_infura_js_1.InfuraProvider(network, projectId, projectSecret));\n        } catch (error) {}\n    }\n    /*\n        if (options.pocket !== \"-\") {\n            try {\n                let appId = options.pocket;\n                let secretKey: undefined | string = undefined;\n                let loadBalancer: undefined | boolean = undefined;\n                if (typeof(appId) === \"object\") {\n                    loadBalancer = !!appId.loadBalancer;\n                    secretKey = appId.secretKey;\n                    appId = appId.appId;\n                }\n                providers.push(new PocketProvider(network, appId, secretKey, loadBalancer));\n            } catch (error) { console.log(error); }\n        }\n    */ if (allowService(\"quicknode\")) {\n        try {\n            let token = options.quicknode;\n            providers.push(new provider_quicknode_js_1.QuickNodeProvider(network, token));\n        } catch (error) {}\n    }\n    (0, index_js_1.assert)(providers.length, \"unsupported default network\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"getDefaultProvider\"\n    });\n    // No need for a FallbackProvider\n    if (providers.length === 1) {\n        return providers[0];\n    }\n    // We use the floor because public third-party providers can be unreliable,\n    // so a low number of providers with a large quorum will fail too often\n    let quorum = Math.floor(providers.length / 2);\n    if (quorum > 2) {\n        quorum = 2;\n    }\n    // Testnets don't need as strong a security gaurantee and speed is\n    // more useful during testing\n    if (staticNetwork && Testnets.indexOf(staticNetwork.name) !== -1) {\n        quorum = 1;\n    }\n    // Provided override qorum takes priority\n    if (options && options.quorum) {\n        quorum = options.quorum;\n    }\n    return new provider_fallback_js_1.FallbackProvider(providers, undefined, {\n        quorum\n    });\n}\nexports.getDefaultProvider = getDefaultProvider; //# sourceMappingURL=default-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/default-provider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/ens-resolver.js":
/*!********************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/ens-resolver.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  ENS is a service which allows easy-to-remember names to map to\n *  network addresses.\n *\n *  @_section: api/providers/ens-resolver:ENS Resolver  [about-ens-rsolver]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.EnsResolver = exports.BasicMulticoinProviderPlugin = exports.MulticoinProviderPlugin = void 0;\nconst index_js_1 = __webpack_require__(/*! ../address/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../constants/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/constants/index.js\");\nconst index_js_3 = __webpack_require__(/*! ../contract/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/contract/index.js\");\nconst index_js_4 = __webpack_require__(/*! ../hash/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/hash/index.js\");\nconst index_js_5 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\n// @TODO: This should use the fetch-data:ipfs gateway\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        (0, index_js_5.assertArgument)(false, \"unsupported IPFS format\", \"link\", link);\n    }\n    return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\n;\n;\n/**\n *  A provider plugin super-class for processing multicoin address types.\n */ class MulticoinProviderPlugin {\n    /**\n     *  Creates a new **MulticoinProviderPluing** for %%name%%.\n     */ constructor(name){\n        (0, index_js_5.defineProperties)(this, {\n            name\n        });\n    }\n    connect(proivder) {\n        return this;\n    }\n    /**\n     *  Returns ``true`` if %%coinType%% is supported by this plugin.\n     */ supportsCoinType(coinType) {\n        return false;\n    }\n    /**\n     *  Resovles to the encoded %%address%% for %%coinType%%.\n     */ async encodeAddress(coinType, address) {\n        throw new Error(\"unsupported coin\");\n    }\n    /**\n     *  Resovles to the decoded %%data%% for %%coinType%%.\n     */ async decodeAddress(coinType, data) {\n        throw new Error(\"unsupported coin\");\n    }\n}\nexports.MulticoinProviderPlugin = MulticoinProviderPlugin;\nconst BasicMulticoinPluginId = \"org.ethers.plugins.provider.BasicMulticoin\";\n/**\n *  A **BasicMulticoinProviderPlugin** provides service for common\n *  coin types, which do not require additional libraries to encode or\n *  decode.\n */ class BasicMulticoinProviderPlugin extends MulticoinProviderPlugin {\n    /**\n     *  Creates a new **BasicMulticoinProviderPlugin**.\n     */ constructor(){\n        super(BasicMulticoinPluginId);\n    }\n}\nexports.BasicMulticoinProviderPlugin = BasicMulticoinProviderPlugin;\nconst matcherIpfs = new RegExp(\"^(ipfs)://(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https)://(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")\n];\n/**\n *  A connected object to a resolved ENS name resolver, which can be\n *  used to query additional details.\n */ class EnsResolver {\n    // For EIP-2544 names, the ancestor that provided the resolver\n    #supports2544;\n    #resolver;\n    constructor(provider, address, name){\n        (0, index_js_5.defineProperties)(this, {\n            provider,\n            address,\n            name\n        });\n        this.#supports2544 = null;\n        this.#resolver = new index_js_3.Contract(address, [\n            \"function supportsInterface(bytes4) view returns (bool)\",\n            \"function resolve(bytes, bytes) view returns (bytes)\",\n            \"function addr(bytes32) view returns (address)\",\n            \"function addr(bytes32, uint) view returns (bytes)\",\n            \"function text(bytes32, string) view returns (string)\",\n            \"function contenthash(bytes32) view returns (bytes)\"\n        ], provider);\n    }\n    /**\n     *  Resolves to true if the resolver supports wildcard resolution.\n     */ async supportsWildcard() {\n        if (this.#supports2544 == null) {\n            this.#supports2544 = (async ()=>{\n                try {\n                    return await this.#resolver.supportsInterface(\"0x9061b923\");\n                } catch (error) {\n                    // Wildcard resolvers must understand supportsInterface\n                    // and return true.\n                    if ((0, index_js_5.isError)(error, \"CALL_EXCEPTION\")) {\n                        return false;\n                    }\n                    // Let future attempts try again...\n                    this.#supports2544 = null;\n                    throw error;\n                }\n            })();\n        }\n        return await this.#supports2544;\n    }\n    async #fetch(funcName, params) {\n        params = (params || []).slice();\n        const iface = this.#resolver.interface;\n        // The first parameters is always the nodehash\n        params.unshift((0, index_js_4.namehash)(this.name));\n        let fragment = null;\n        if (await this.supportsWildcard()) {\n            fragment = iface.getFunction(funcName);\n            (0, index_js_5.assert)(fragment, \"missing fragment\", \"UNKNOWN_ERROR\", {\n                info: {\n                    funcName\n                }\n            });\n            params = [\n                (0, index_js_4.dnsEncode)(this.name),\n                iface.encodeFunctionData(fragment, params)\n            ];\n            funcName = \"resolve(bytes,bytes)\";\n        }\n        params.push({\n            enableCcipRead: true\n        });\n        try {\n            const result = await this.#resolver[funcName](...params);\n            if (fragment) {\n                return iface.decodeFunctionResult(fragment, result)[0];\n            }\n            return result;\n        } catch (error) {\n            if (!(0, index_js_5.isError)(error, \"CALL_EXCEPTION\")) {\n                throw error;\n            }\n        }\n        return null;\n    }\n    /**\n     *  Resolves to the address for %%coinType%% or null if the\n     *  provided %%coinType%% has not been configured.\n     */ async getAddress(coinType) {\n        if (coinType == null) {\n            coinType = 60;\n        }\n        if (coinType === 60) {\n            try {\n                const result = await this.#fetch(\"addr(bytes32)\");\n                // No address\n                if (result == null || result === index_js_2.ZeroAddress) {\n                    return null;\n                }\n                return result;\n            } catch (error) {\n                if ((0, index_js_5.isError)(error, \"CALL_EXCEPTION\")) {\n                    return null;\n                }\n                throw error;\n            }\n        }\n        // Try decoding its EVM canonical chain as an EVM chain address first\n        if (coinType >= 0 && coinType < 0x80000000) {\n            let ethCoinType = coinType + 0x80000000;\n            const data = await this.#fetch(\"addr(bytes32,uint)\", [\n                ethCoinType\n            ]);\n            if ((0, index_js_5.isHexString)(data, 20)) {\n                return (0, index_js_1.getAddress)(data);\n            }\n        }\n        let coinPlugin = null;\n        for (const plugin of this.provider.plugins){\n            if (!(plugin instanceof MulticoinProviderPlugin)) {\n                continue;\n            }\n            if (plugin.supportsCoinType(coinType)) {\n                coinPlugin = plugin;\n                break;\n            }\n        }\n        if (coinPlugin == null) {\n            return null;\n        }\n        // keccak256(\"addr(bytes32,uint256\")\n        const data = await this.#fetch(\"addr(bytes32,uint)\", [\n            coinType\n        ]);\n        // No address\n        if (data == null || data === \"0x\") {\n            return null;\n        }\n        // Compute the address\n        const address = await coinPlugin.decodeAddress(coinType, data);\n        if (address != null) {\n            return address;\n        }\n        (0, index_js_5.assert)(false, `invalid coin data`, \"UNSUPPORTED_OPERATION\", {\n            operation: `getAddress(${coinType})`,\n            info: {\n                coinType,\n                data\n            }\n        });\n    }\n    /**\n     *  Resolves to the EIP-634 text record for %%key%%, or ``null``\n     *  if unconfigured.\n     */ async getText(key) {\n        const data = await this.#fetch(\"text(bytes32,string)\", [\n            key\n        ]);\n        if (data == null || data === \"0x\") {\n            return null;\n        }\n        return data;\n    }\n    /**\n     *  Rsolves to the content-hash or ``null`` if unconfigured.\n     */ async getContentHash() {\n        // keccak256(\"contenthash()\")\n        const data = await this.#fetch(\"contenthash(bytes32)\");\n        // No contenthash\n        if (data == null || data === \"0x\") {\n            return null;\n        }\n        // IPFS (CID: 1, Type: 70=DAG-PB, 72=libp2p-key)\n        const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const scheme = ipfs[1] === \"e3010170\" ? \"ipfs\" : \"ipns\";\n            const length = parseInt(ipfs[4], 16);\n            if (ipfs[5].length === length * 2) {\n                return `${scheme}:/\\/${(0, index_js_5.encodeBase58)(\"0x\" + ipfs[2])}`;\n            }\n        }\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n        if (swarm && swarm[1].length === 64) {\n            return `bzz:/\\/${swarm[1]}`;\n        }\n        (0, index_js_5.assert)(false, `invalid or unsupported content hash data`, \"UNSUPPORTED_OPERATION\", {\n            operation: \"getContentHash()\",\n            info: {\n                data\n            }\n        });\n    }\n    /**\n     *  Resolves to the avatar url or ``null`` if the avatar is either\n     *  unconfigured or incorrectly configured (e.g. references an NFT\n     *  not owned by the address).\n     *\n     *  If diagnosing issues with configurations, the [[_getAvatar]]\n     *  method may be useful.\n     */ async getAvatar() {\n        const avatar = await this._getAvatar();\n        return avatar.url;\n    }\n    /**\n     *  When resolving an avatar, there are many steps involved, such\n     *  fetching metadata and possibly validating ownership of an\n     *  NFT.\n     *\n     *  This method can be used to examine each step and the value it\n     *  was working from.\n     */ async _getAvatar() {\n        const linkage = [\n            {\n                type: \"name\",\n                value: this.name\n            }\n        ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) {\n                linkage.push({\n                    type: \"!avatar\",\n                    value: \"\"\n                });\n                return {\n                    url: null,\n                    linkage\n                };\n            }\n            linkage.push({\n                type: \"avatar\",\n                value: avatar\n            });\n            for(let i = 0; i < matchers.length; i++){\n                const match = avatar.match(matchers[i]);\n                if (match == null) {\n                    continue;\n                }\n                const scheme = match[1].toLowerCase();\n                switch(scheme){\n                    case \"https\":\n                    case \"data\":\n                        linkage.push({\n                            type: \"url\",\n                            value: avatar\n                        });\n                        return {\n                            linkage,\n                            url: avatar\n                        };\n                    case \"ipfs\":\n                        {\n                            const url = getIpfsLink(avatar);\n                            linkage.push({\n                                type: \"ipfs\",\n                                value: avatar\n                            });\n                            linkage.push({\n                                type: \"url\",\n                                value: url\n                            });\n                            return {\n                                linkage,\n                                url\n                            };\n                        }\n                    case \"erc721\":\n                    case \"erc1155\":\n                        {\n                            // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                            const selector = scheme === \"erc721\" ? \"tokenURI(uint256)\" : \"uri(uint256)\";\n                            linkage.push({\n                                type: scheme,\n                                value: avatar\n                            });\n                            // The owner of this name\n                            const owner = await this.getAddress();\n                            if (owner == null) {\n                                linkage.push({\n                                    type: \"!owner\",\n                                    value: \"\"\n                                });\n                                return {\n                                    url: null,\n                                    linkage\n                                };\n                            }\n                            const comps = (match[2] || \"\").split(\"/\");\n                            if (comps.length !== 2) {\n                                linkage.push({\n                                    type: `!${scheme}caip`,\n                                    value: match[2] || \"\"\n                                });\n                                return {\n                                    url: null,\n                                    linkage\n                                };\n                            }\n                            const tokenId = comps[1];\n                            const contract = new index_js_3.Contract(comps[0], [\n                                // ERC-721\n                                \"function tokenURI(uint) view returns (string)\",\n                                \"function ownerOf(uint) view returns (address)\",\n                                // ERC-1155\n                                \"function uri(uint) view returns (string)\",\n                                \"function balanceOf(address, uint256) view returns (uint)\"\n                            ], this.provider);\n                            // Check that this account owns the token\n                            if (scheme === \"erc721\") {\n                                const tokenOwner = await contract.ownerOf(tokenId);\n                                if (owner !== tokenOwner) {\n                                    linkage.push({\n                                        type: \"!owner\",\n                                        value: tokenOwner\n                                    });\n                                    return {\n                                        url: null,\n                                        linkage\n                                    };\n                                }\n                                linkage.push({\n                                    type: \"owner\",\n                                    value: tokenOwner\n                                });\n                            } else if (scheme === \"erc1155\") {\n                                const balance = await contract.balanceOf(owner, tokenId);\n                                if (!balance) {\n                                    linkage.push({\n                                        type: \"!balance\",\n                                        value: \"0\"\n                                    });\n                                    return {\n                                        url: null,\n                                        linkage\n                                    };\n                                }\n                                linkage.push({\n                                    type: \"balance\",\n                                    value: balance.toString()\n                                });\n                            }\n                            // Call the token contract for the metadata URL\n                            let metadataUrl = await contract[selector](tokenId);\n                            if (metadataUrl == null || metadataUrl === \"0x\") {\n                                linkage.push({\n                                    type: \"!metadata-url\",\n                                    value: \"\"\n                                });\n                                return {\n                                    url: null,\n                                    linkage\n                                };\n                            }\n                            linkage.push({\n                                type: \"metadata-url-base\",\n                                value: metadataUrl\n                            });\n                            // ERC-1155 allows a generic {id} in the URL\n                            if (scheme === \"erc1155\") {\n                                metadataUrl = metadataUrl.replace(\"{id}\", (0, index_js_5.toBeHex)(tokenId, 32).substring(2));\n                                linkage.push({\n                                    type: \"metadata-url-expanded\",\n                                    value: metadataUrl\n                                });\n                            }\n                            // Transform IPFS metadata links\n                            if (metadataUrl.match(/^ipfs:/i)) {\n                                metadataUrl = getIpfsLink(metadataUrl);\n                            }\n                            linkage.push({\n                                type: \"metadata-url\",\n                                value: metadataUrl\n                            });\n                            // Get the token metadata\n                            let metadata = {};\n                            const response = await new index_js_5.FetchRequest(metadataUrl).send();\n                            response.assertOk();\n                            try {\n                                metadata = response.bodyJson;\n                            } catch (error) {\n                                try {\n                                    linkage.push({\n                                        type: \"!metadata\",\n                                        value: response.bodyText\n                                    });\n                                } catch (error) {\n                                    const bytes = response.body;\n                                    if (bytes) {\n                                        linkage.push({\n                                            type: \"!metadata\",\n                                            value: (0, index_js_5.hexlify)(bytes)\n                                        });\n                                    }\n                                    return {\n                                        url: null,\n                                        linkage\n                                    };\n                                }\n                                return {\n                                    url: null,\n                                    linkage\n                                };\n                            }\n                            if (!metadata) {\n                                linkage.push({\n                                    type: \"!metadata\",\n                                    value: \"\"\n                                });\n                                return {\n                                    url: null,\n                                    linkage\n                                };\n                            }\n                            linkage.push({\n                                type: \"metadata\",\n                                value: JSON.stringify(metadata)\n                            });\n                            // Pull the image URL out\n                            let imageUrl = metadata.image;\n                            if (typeof imageUrl !== \"string\") {\n                                linkage.push({\n                                    type: \"!imageUrl\",\n                                    value: \"\"\n                                });\n                                return {\n                                    url: null,\n                                    linkage\n                                };\n                            }\n                            if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                            } else {\n                                // Transform IPFS link to gateway\n                                const ipfs = imageUrl.match(matcherIpfs);\n                                if (ipfs == null) {\n                                    linkage.push({\n                                        type: \"!imageUrl-ipfs\",\n                                        value: imageUrl\n                                    });\n                                    return {\n                                        url: null,\n                                        linkage\n                                    };\n                                }\n                                linkage.push({\n                                    type: \"imageUrl-ipfs\",\n                                    value: imageUrl\n                                });\n                                imageUrl = getIpfsLink(imageUrl);\n                            }\n                            linkage.push({\n                                type: \"url\",\n                                value: imageUrl\n                            });\n                            return {\n                                linkage,\n                                url: imageUrl\n                            };\n                        }\n                }\n            }\n        } catch (error) {}\n        return {\n            linkage,\n            url: null\n        };\n    }\n    static async getEnsAddress(provider) {\n        const network = await provider.getNetwork();\n        const ensPlugin = network.getPlugin(\"org.ethers.plugins.network.Ens\");\n        // No ENS...\n        (0, index_js_5.assert)(ensPlugin, \"network does not support ENS\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"getEnsAddress\",\n            info: {\n                network\n            }\n        });\n        return ensPlugin.address;\n    }\n    static async #getResolver(provider, name) {\n        const ensAddr = await EnsResolver.getEnsAddress(provider);\n        try {\n            const contract = new index_js_3.Contract(ensAddr, [\n                \"function resolver(bytes32) view returns (address)\"\n            ], provider);\n            const addr = await contract.resolver((0, index_js_4.namehash)(name), {\n                enableCcipRead: true\n            });\n            if (addr === index_js_2.ZeroAddress) {\n                return null;\n            }\n            return addr;\n        } catch (error) {\n            // ENS registry cannot throw errors on resolver(bytes32),\n            // so probably a link error\n            throw error;\n        }\n        return null;\n    }\n    /**\n     *  Resolve to the ENS resolver for %%name%% using %%provider%% or\n     *  ``null`` if unconfigured.\n     */ static async fromName(provider, name) {\n        let currentName = name;\n        while(true){\n            if (currentName === \"\" || currentName === \".\") {\n                return null;\n            }\n            // Optimization since the eth node cannot change and does\n            // not have a wildcard resolver\n            if (name !== \"eth\" && currentName === \"eth\") {\n                return null;\n            }\n            // Check the current node for a resolver\n            const addr = await EnsResolver.#getResolver(provider, currentName);\n            // Found a resolver!\n            if (addr != null) {\n                const resolver = new EnsResolver(provider, addr, name);\n                // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                if (currentName !== name && !await resolver.supportsWildcard()) {\n                    return null;\n                }\n                return resolver;\n            }\n            // Get the parent node\n            currentName = currentName.split(\".\").slice(1).join(\".\");\n        }\n    }\n}\nexports.EnsResolver = EnsResolver; //# sourceMappingURL=ens-resolver.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/ens-resolver.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/format.js":
/*!**************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/format.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.formatTransactionResponse = exports.formatTransactionReceipt = exports.formatReceiptLog = exports.formatBlock = exports.formatLog = exports.formatUint256 = exports.formatHash = exports.formatData = exports.formatBoolean = exports.object = exports.arrayOf = exports.allowNull = void 0;\n/**\n *  @_ignore\n */ const index_js_1 = __webpack_require__(/*! ../address/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../crypto/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/index.js\");\nconst index_js_3 = __webpack_require__(/*! ../transaction/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/transaction/index.js\");\nconst index_js_4 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst BN_0 = BigInt(0);\nfunction allowNull(format, nullValue) {\n    return function(value) {\n        if (value == null) {\n            return nullValue;\n        }\n        return format(value);\n    };\n}\nexports.allowNull = allowNull;\nfunction arrayOf(format) {\n    return (array)=>{\n        if (!Array.isArray(array)) {\n            throw new Error(\"not an array\");\n        }\n        return array.map((i)=>format(i));\n    };\n}\nexports.arrayOf = arrayOf;\n// Requires an object which matches a fleet of other formatters\n// Any FormatFunc may return `undefined` to have the value omitted\n// from the result object. Calls preserve `this`.\nfunction object(format, altNames) {\n    return (value)=>{\n        const result = {};\n        for(const key in format){\n            let srcKey = key;\n            if (altNames && key in altNames && !(srcKey in value)) {\n                for (const altKey of altNames[key]){\n                    if (altKey in value) {\n                        srcKey = altKey;\n                        break;\n                    }\n                }\n            }\n            try {\n                const nv = format[key](value[srcKey]);\n                if (nv !== undefined) {\n                    result[key] = nv;\n                }\n            } catch (error) {\n                const message = error instanceof Error ? error.message : \"not-an-error\";\n                (0, index_js_4.assert)(false, `invalid value for value.${key} (${message})`, \"BAD_DATA\", {\n                    value\n                });\n            }\n        }\n        return result;\n    };\n}\nexports.object = object;\nfunction formatBoolean(value) {\n    switch(value){\n        case true:\n        case \"true\":\n            return true;\n        case false:\n        case \"false\":\n            return false;\n    }\n    (0, index_js_4.assertArgument)(false, `invalid boolean; ${JSON.stringify(value)}`, \"value\", value);\n}\nexports.formatBoolean = formatBoolean;\nfunction formatData(value) {\n    (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, true), \"invalid data\", \"value\", value);\n    return value;\n}\nexports.formatData = formatData;\nfunction formatHash(value) {\n    (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, 32), \"invalid hash\", \"value\", value);\n    return value;\n}\nexports.formatHash = formatHash;\nfunction formatUint256(value) {\n    if (!(0, index_js_4.isHexString)(value)) {\n        throw new Error(\"invalid uint256\");\n    }\n    return (0, index_js_4.zeroPadValue)(value, 32);\n}\nexports.formatUint256 = formatUint256;\nconst _formatLog = object({\n    address: index_js_1.getAddress,\n    blockHash: formatHash,\n    blockNumber: index_js_4.getNumber,\n    data: formatData,\n    index: index_js_4.getNumber,\n    removed: allowNull(formatBoolean, false),\n    topics: arrayOf(formatHash),\n    transactionHash: formatHash,\n    transactionIndex: index_js_4.getNumber\n}, {\n    index: [\n        \"logIndex\"\n    ]\n});\nfunction formatLog(value) {\n    return _formatLog(value);\n}\nexports.formatLog = formatLog;\nconst _formatBlock = object({\n    hash: allowNull(formatHash),\n    parentHash: formatHash,\n    number: index_js_4.getNumber,\n    timestamp: index_js_4.getNumber,\n    nonce: allowNull(formatData),\n    difficulty: index_js_4.getBigInt,\n    gasLimit: index_js_4.getBigInt,\n    gasUsed: index_js_4.getBigInt,\n    miner: allowNull(index_js_1.getAddress),\n    extraData: formatData,\n    baseFeePerGas: allowNull(index_js_4.getBigInt)\n});\nfunction formatBlock(value) {\n    const result = _formatBlock(value);\n    result.transactions = value.transactions.map((tx)=>{\n        if (typeof tx === \"string\") {\n            return tx;\n        }\n        return formatTransactionResponse(tx);\n    });\n    return result;\n}\nexports.formatBlock = formatBlock;\nconst _formatReceiptLog = object({\n    transactionIndex: index_js_4.getNumber,\n    blockNumber: index_js_4.getNumber,\n    transactionHash: formatHash,\n    address: index_js_1.getAddress,\n    topics: arrayOf(formatHash),\n    data: formatData,\n    index: index_js_4.getNumber,\n    blockHash: formatHash\n}, {\n    index: [\n        \"logIndex\"\n    ]\n});\nfunction formatReceiptLog(value) {\n    return _formatReceiptLog(value);\n}\nexports.formatReceiptLog = formatReceiptLog;\nconst _formatTransactionReceipt = object({\n    to: allowNull(index_js_1.getAddress, null),\n    from: allowNull(index_js_1.getAddress, null),\n    contractAddress: allowNull(index_js_1.getAddress, null),\n    // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n    index: index_js_4.getNumber,\n    root: allowNull(index_js_4.hexlify),\n    gasUsed: index_js_4.getBigInt,\n    logsBloom: allowNull(formatData),\n    blockHash: formatHash,\n    hash: formatHash,\n    logs: arrayOf(formatReceiptLog),\n    blockNumber: index_js_4.getNumber,\n    //confirmations: allowNull(getNumber, null),\n    cumulativeGasUsed: index_js_4.getBigInt,\n    effectiveGasPrice: allowNull(index_js_4.getBigInt),\n    status: allowNull(index_js_4.getNumber),\n    type: allowNull(index_js_4.getNumber, 0)\n}, {\n    effectiveGasPrice: [\n        \"gasPrice\"\n    ],\n    hash: [\n        \"transactionHash\"\n    ],\n    index: [\n        \"transactionIndex\"\n    ]\n});\nfunction formatTransactionReceipt(value) {\n    return _formatTransactionReceipt(value);\n}\nexports.formatTransactionReceipt = formatTransactionReceipt;\nfunction formatTransactionResponse(value) {\n    // Some clients (TestRPC) do strange things like return 0x0 for the\n    // 0 address; correct this to be a real address\n    if (value.to && (0, index_js_4.getBigInt)(value.to) === BN_0) {\n        value.to = \"0x0000000000000000000000000000000000000000\";\n    }\n    const result = object({\n        hash: formatHash,\n        type: (value)=>{\n            if (value === \"0x\" || value == null) {\n                return 0;\n            }\n            return (0, index_js_4.getNumber)(value);\n        },\n        accessList: allowNull(index_js_3.accessListify, null),\n        blockHash: allowNull(formatHash, null),\n        blockNumber: allowNull(index_js_4.getNumber, null),\n        transactionIndex: allowNull(index_js_4.getNumber, null),\n        //confirmations: allowNull(getNumber, null),\n        from: index_js_1.getAddress,\n        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set\n        gasPrice: allowNull(index_js_4.getBigInt),\n        maxPriorityFeePerGas: allowNull(index_js_4.getBigInt),\n        maxFeePerGas: allowNull(index_js_4.getBigInt),\n        gasLimit: index_js_4.getBigInt,\n        to: allowNull(index_js_1.getAddress, null),\n        value: index_js_4.getBigInt,\n        nonce: index_js_4.getNumber,\n        data: formatData,\n        creates: allowNull(index_js_1.getAddress, null),\n        chainId: allowNull(index_js_4.getBigInt, null)\n    }, {\n        data: [\n            \"input\"\n        ],\n        gasLimit: [\n            \"gas\"\n        ]\n    })(value);\n    // If to and creates are empty, populate the creates from the value\n    if (result.to == null && result.creates == null) {\n        result.creates = (0, index_js_1.getCreateAddress)(result);\n    }\n    // @TODO: Check fee data\n    // Add an access list to supported transaction types\n    if ((value.type === 1 || value.type === 2) && value.accessList == null) {\n        result.accessList = [];\n    }\n    // Compute the signature\n    if (value.signature) {\n        result.signature = index_js_2.Signature.from(value.signature);\n    } else {\n        result.signature = index_js_2.Signature.from(value);\n    }\n    // Some backends omit ChainId on legacy transactions, but we can compute it\n    if (result.chainId == null) {\n        const chainId = result.signature.legacyChainId;\n        if (chainId != null) {\n            result.chainId = chainId;\n        }\n    }\n    // @TODO: check chainID\n    /*\n    if (value.chainId != null) {\n        let chainId = value.chainId;\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        result.chainId = chainId;\n\n    } else {\n        let chainId = value.networkId;\n\n        // geth-etc returns chainId\n        if (chainId == null && result.v == null) {\n            chainId = value.chainId;\n        }\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        if (typeof(chainId) !== \"number\" && result.v != null) {\n            chainId = (result.v - 35) / 2;\n            if (chainId < 0) { chainId = 0; }\n            chainId = parseInt(chainId);\n        }\n\n        if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n        result.chainId = chainId;\n    }\n    */ // 0x0000... should actually be null\n    if (result.blockHash && (0, index_js_4.getBigInt)(result.blockHash) === BN_0) {\n        result.blockHash = null;\n    }\n    return result;\n}\nexports.formatTransactionResponse = formatTransactionResponse; //# sourceMappingURL=format.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/format.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  A **Provider** provides a connection to the blockchain, whch can be\n *  used to query its current state, simulate execution and send transactions\n *  to update the state.\n *\n *  It is one of the most fundamental components of interacting with a\n *  blockchain application, and there are many ways to connect, such as over\n *  HTTP, WebSockets or injected providers such as [MetaMask](link-metamask).\n *\n *  @_section: api/providers:Providers  [about-providers]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SocketEventSubscriber = exports.SocketPendingSubscriber = exports.SocketBlockSubscriber = exports.SocketSubscriber = exports.WebSocketProvider = exports.SocketProvider = exports.IpcSocketProvider = exports.QuickNodeProvider = exports.PocketProvider = exports.InfuraWebSocketProvider = exports.InfuraProvider = exports.EtherscanPlugin = exports.EtherscanProvider = exports.CloudflareProvider = exports.AnkrProvider = exports.AlchemyProvider = exports.BrowserProvider = exports.JsonRpcSigner = exports.JsonRpcProvider = exports.JsonRpcApiProvider = exports.FallbackProvider = exports.copyRequest = exports.TransactionResponse = exports.TransactionReceipt = exports.Log = exports.FeeData = exports.Block = exports.FetchUrlFeeDataNetworkPlugin = exports.FeeDataNetworkPlugin = exports.EnsPlugin = exports.GasCostPlugin = exports.NetworkPlugin = exports.NonceManager = exports.Network = exports.MulticoinProviderPlugin = exports.EnsResolver = exports.getDefaultProvider = exports.showThrottleMessage = exports.VoidSigner = exports.AbstractSigner = exports.UnmanagedSubscriber = exports.AbstractProvider = void 0;\nvar abstract_provider_js_1 = __webpack_require__(/*! ./abstract-provider.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/abstract-provider.js\");\nObject.defineProperty(exports, \"AbstractProvider\", ({\n    enumerable: true,\n    get: function() {\n        return abstract_provider_js_1.AbstractProvider;\n    }\n}));\nObject.defineProperty(exports, \"UnmanagedSubscriber\", ({\n    enumerable: true,\n    get: function() {\n        return abstract_provider_js_1.UnmanagedSubscriber;\n    }\n}));\nvar abstract_signer_js_1 = __webpack_require__(/*! ./abstract-signer.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/abstract-signer.js\");\nObject.defineProperty(exports, \"AbstractSigner\", ({\n    enumerable: true,\n    get: function() {\n        return abstract_signer_js_1.AbstractSigner;\n    }\n}));\nObject.defineProperty(exports, \"VoidSigner\", ({\n    enumerable: true,\n    get: function() {\n        return abstract_signer_js_1.VoidSigner;\n    }\n}));\nvar community_js_1 = __webpack_require__(/*! ./community.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/community.js\");\nObject.defineProperty(exports, \"showThrottleMessage\", ({\n    enumerable: true,\n    get: function() {\n        return community_js_1.showThrottleMessage;\n    }\n}));\nvar default_provider_js_1 = __webpack_require__(/*! ./default-provider.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/default-provider.js\");\nObject.defineProperty(exports, \"getDefaultProvider\", ({\n    enumerable: true,\n    get: function() {\n        return default_provider_js_1.getDefaultProvider;\n    }\n}));\nvar ens_resolver_js_1 = __webpack_require__(/*! ./ens-resolver.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/ens-resolver.js\");\nObject.defineProperty(exports, \"EnsResolver\", ({\n    enumerable: true,\n    get: function() {\n        return ens_resolver_js_1.EnsResolver;\n    }\n}));\nObject.defineProperty(exports, \"MulticoinProviderPlugin\", ({\n    enumerable: true,\n    get: function() {\n        return ens_resolver_js_1.MulticoinProviderPlugin;\n    }\n}));\nvar network_js_1 = __webpack_require__(/*! ./network.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/network.js\");\nObject.defineProperty(exports, \"Network\", ({\n    enumerable: true,\n    get: function() {\n        return network_js_1.Network;\n    }\n}));\nvar signer_noncemanager_js_1 = __webpack_require__(/*! ./signer-noncemanager.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/signer-noncemanager.js\");\nObject.defineProperty(exports, \"NonceManager\", ({\n    enumerable: true,\n    get: function() {\n        return signer_noncemanager_js_1.NonceManager;\n    }\n}));\nvar plugins_network_js_1 = __webpack_require__(/*! ./plugins-network.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/plugins-network.js\");\nObject.defineProperty(exports, \"NetworkPlugin\", ({\n    enumerable: true,\n    get: function() {\n        return plugins_network_js_1.NetworkPlugin;\n    }\n}));\nObject.defineProperty(exports, \"GasCostPlugin\", ({\n    enumerable: true,\n    get: function() {\n        return plugins_network_js_1.GasCostPlugin;\n    }\n}));\nObject.defineProperty(exports, \"EnsPlugin\", ({\n    enumerable: true,\n    get: function() {\n        return plugins_network_js_1.EnsPlugin;\n    }\n}));\nObject.defineProperty(exports, \"FeeDataNetworkPlugin\", ({\n    enumerable: true,\n    get: function() {\n        return plugins_network_js_1.FeeDataNetworkPlugin;\n    }\n}));\nObject.defineProperty(exports, \"FetchUrlFeeDataNetworkPlugin\", ({\n    enumerable: true,\n    get: function() {\n        return plugins_network_js_1.FetchUrlFeeDataNetworkPlugin;\n    }\n}));\nvar provider_js_1 = __webpack_require__(/*! ./provider.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider.js\");\nObject.defineProperty(exports, \"Block\", ({\n    enumerable: true,\n    get: function() {\n        return provider_js_1.Block;\n    }\n}));\nObject.defineProperty(exports, \"FeeData\", ({\n    enumerable: true,\n    get: function() {\n        return provider_js_1.FeeData;\n    }\n}));\nObject.defineProperty(exports, \"Log\", ({\n    enumerable: true,\n    get: function() {\n        return provider_js_1.Log;\n    }\n}));\nObject.defineProperty(exports, \"TransactionReceipt\", ({\n    enumerable: true,\n    get: function() {\n        return provider_js_1.TransactionReceipt;\n    }\n}));\nObject.defineProperty(exports, \"TransactionResponse\", ({\n    enumerable: true,\n    get: function() {\n        return provider_js_1.TransactionResponse;\n    }\n}));\nObject.defineProperty(exports, \"copyRequest\", ({\n    enumerable: true,\n    get: function() {\n        return provider_js_1.copyRequest;\n    }\n}));\nvar provider_fallback_js_1 = __webpack_require__(/*! ./provider-fallback.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-fallback.js\");\nObject.defineProperty(exports, \"FallbackProvider\", ({\n    enumerable: true,\n    get: function() {\n        return provider_fallback_js_1.FallbackProvider;\n    }\n}));\nvar provider_jsonrpc_js_1 = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js\");\nObject.defineProperty(exports, \"JsonRpcApiProvider\", ({\n    enumerable: true,\n    get: function() {\n        return provider_jsonrpc_js_1.JsonRpcApiProvider;\n    }\n}));\nObject.defineProperty(exports, \"JsonRpcProvider\", ({\n    enumerable: true,\n    get: function() {\n        return provider_jsonrpc_js_1.JsonRpcProvider;\n    }\n}));\nObject.defineProperty(exports, \"JsonRpcSigner\", ({\n    enumerable: true,\n    get: function() {\n        return provider_jsonrpc_js_1.JsonRpcSigner;\n    }\n}));\nvar provider_browser_js_1 = __webpack_require__(/*! ./provider-browser.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-browser.js\");\nObject.defineProperty(exports, \"BrowserProvider\", ({\n    enumerable: true,\n    get: function() {\n        return provider_browser_js_1.BrowserProvider;\n    }\n}));\nvar provider_alchemy_js_1 = __webpack_require__(/*! ./provider-alchemy.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-alchemy.js\");\nObject.defineProperty(exports, \"AlchemyProvider\", ({\n    enumerable: true,\n    get: function() {\n        return provider_alchemy_js_1.AlchemyProvider;\n    }\n}));\nvar provider_ankr_js_1 = __webpack_require__(/*! ./provider-ankr.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-ankr.js\");\nObject.defineProperty(exports, \"AnkrProvider\", ({\n    enumerable: true,\n    get: function() {\n        return provider_ankr_js_1.AnkrProvider;\n    }\n}));\nvar provider_cloudflare_js_1 = __webpack_require__(/*! ./provider-cloudflare.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-cloudflare.js\");\nObject.defineProperty(exports, \"CloudflareProvider\", ({\n    enumerable: true,\n    get: function() {\n        return provider_cloudflare_js_1.CloudflareProvider;\n    }\n}));\nvar provider_etherscan_js_1 = __webpack_require__(/*! ./provider-etherscan.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-etherscan.js\");\nObject.defineProperty(exports, \"EtherscanProvider\", ({\n    enumerable: true,\n    get: function() {\n        return provider_etherscan_js_1.EtherscanProvider;\n    }\n}));\nObject.defineProperty(exports, \"EtherscanPlugin\", ({\n    enumerable: true,\n    get: function() {\n        return provider_etherscan_js_1.EtherscanPlugin;\n    }\n}));\nvar provider_infura_js_1 = __webpack_require__(/*! ./provider-infura.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-infura.js\");\nObject.defineProperty(exports, \"InfuraProvider\", ({\n    enumerable: true,\n    get: function() {\n        return provider_infura_js_1.InfuraProvider;\n    }\n}));\nObject.defineProperty(exports, \"InfuraWebSocketProvider\", ({\n    enumerable: true,\n    get: function() {\n        return provider_infura_js_1.InfuraWebSocketProvider;\n    }\n}));\nvar provider_pocket_js_1 = __webpack_require__(/*! ./provider-pocket.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-pocket.js\");\nObject.defineProperty(exports, \"PocketProvider\", ({\n    enumerable: true,\n    get: function() {\n        return provider_pocket_js_1.PocketProvider;\n    }\n}));\nvar provider_quicknode_js_1 = __webpack_require__(/*! ./provider-quicknode.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-quicknode.js\");\nObject.defineProperty(exports, \"QuickNodeProvider\", ({\n    enumerable: true,\n    get: function() {\n        return provider_quicknode_js_1.QuickNodeProvider;\n    }\n}));\nconst provider_ipcsocket_js_1 = __webpack_require__(/*! ./provider-ipcsocket.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-ipcsocket.js\"); /*-browser*/ \nObject.defineProperty(exports, \"IpcSocketProvider\", ({\n    enumerable: true,\n    get: function() {\n        return provider_ipcsocket_js_1.IpcSocketProvider;\n    }\n}));\nvar provider_socket_js_1 = __webpack_require__(/*! ./provider-socket.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-socket.js\");\nObject.defineProperty(exports, \"SocketProvider\", ({\n    enumerable: true,\n    get: function() {\n        return provider_socket_js_1.SocketProvider;\n    }\n}));\nvar provider_websocket_js_1 = __webpack_require__(/*! ./provider-websocket.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-websocket.js\");\nObject.defineProperty(exports, \"WebSocketProvider\", ({\n    enumerable: true,\n    get: function() {\n        return provider_websocket_js_1.WebSocketProvider;\n    }\n}));\nvar provider_socket_js_2 = __webpack_require__(/*! ./provider-socket.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-socket.js\");\nObject.defineProperty(exports, \"SocketSubscriber\", ({\n    enumerable: true,\n    get: function() {\n        return provider_socket_js_2.SocketSubscriber;\n    }\n}));\nObject.defineProperty(exports, \"SocketBlockSubscriber\", ({\n    enumerable: true,\n    get: function() {\n        return provider_socket_js_2.SocketBlockSubscriber;\n    }\n}));\nObject.defineProperty(exports, \"SocketPendingSubscriber\", ({\n    enumerable: true,\n    get: function() {\n        return provider_socket_js_2.SocketPendingSubscriber;\n    }\n}));\nObject.defineProperty(exports, \"SocketEventSubscriber\", ({\n    enumerable: true,\n    get: function() {\n        return provider_socket_js_2.SocketEventSubscriber;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9wcm92aWRlcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7OztDQVVDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw2QkFBNkIsR0FBR0EsK0JBQStCLEdBQUdBLDZCQUE2QixHQUFHQSx3QkFBd0IsR0FBR0EseUJBQXlCLEdBQUdBLHNCQUFzQixHQUFHQSx5QkFBeUIsR0FBR0EseUJBQXlCLEdBQUdBLHNCQUFzQixHQUFHQSwrQkFBK0IsR0FBR0Esc0JBQXNCLEdBQUdBLHVCQUF1QixHQUFHQSx5QkFBeUIsR0FBR0EsMEJBQTBCLEdBQUdBLG9CQUFvQixHQUFHQSx1QkFBdUIsR0FBR0EsdUJBQXVCLEdBQUdBLHFCQUFxQixHQUFHQSx1QkFBdUIsR0FBR0EsMEJBQTBCLEdBQUdBLHdCQUF3QixHQUFHQSxtQkFBbUIsR0FBR0EsMkJBQTJCLEdBQUdBLDBCQUEwQixHQUFHQSxXQUFXLEdBQUdBLGVBQWUsR0FBR0EsYUFBYSxHQUFHQSxvQ0FBb0MsR0FBR0EsNEJBQTRCLEdBQUdBLGlCQUFpQixHQUFHQSxxQkFBcUIsR0FBR0EscUJBQXFCLEdBQUdBLG9CQUFvQixHQUFHQSxlQUFlLEdBQUdBLCtCQUErQixHQUFHQSxtQkFBbUIsR0FBR0EsMEJBQTBCLEdBQUdBLDJCQUEyQixHQUFHQSxrQkFBa0IsR0FBR0Esc0JBQXNCLEdBQUdBLDJCQUEyQixHQUFHQSx3QkFBd0IsR0FBRyxLQUFLO0FBQ3psQyxJQUFJNEMseUJBQXlCQyxtQkFBT0EsQ0FBQyx1R0FBd0I7QUFDN0QvQyxvREFBbUQ7SUFBRWdELFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILHVCQUF1QkQsZ0JBQWdCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDOUk3Qyx1REFBc0Q7SUFBRWdELFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILHVCQUF1QkYsbUJBQW1CO0lBQUU7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QUFBRSxDQUFDLEVBQUM7QUFDakosSUFBSTJELHVCQUF1QnRCLG1CQUFPQSxDQUFDLG1HQUFzQjtBQUN6RC9DLGtEQUFpRDtJQUFFZ0QsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT29CLHFCQUFxQjVELGNBQWM7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN4SSxJQUFJNkQsMEJBQTBCdkIsbUJBQU9BLENBQUMseUdBQXlCO0FBQy9EL0MscURBQW9EO0lBQUVnRCxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPcUIsd0JBQXdCOUQsaUJBQWlCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDakosSUFBSStELHVCQUF1QnhCLG1CQUFPQSxDQUFDLG1HQUFzQjtBQUN6RC9DLG9EQUFtRDtJQUFFZ0QsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT3NCLHFCQUFxQmhFLGdCQUFnQjtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzVJUCx5REFBd0Q7SUFBRWdELFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9zQixxQkFBcUJqRSxxQkFBcUI7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN0Sk4sMkRBQTBEO0lBQUVnRCxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPc0IscUJBQXFCbEUsdUJBQXVCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDMUpMLHlEQUF3RDtJQUFFZ0QsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT3NCLHFCQUFxQm5FLHFCQUFxQjtJQUFFO0FBQUUsQ0FBQyxFQUFDLEVBQ3RKLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL3Byb3ZpZGVycy9pbmRleC5qcz9mZWY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiAgQSAqKlByb3ZpZGVyKiogcHJvdmlkZXMgYSBjb25uZWN0aW9uIHRvIHRoZSBibG9ja2NoYWluLCB3aGNoIGNhbiBiZVxuICogIHVzZWQgdG8gcXVlcnkgaXRzIGN1cnJlbnQgc3RhdGUsIHNpbXVsYXRlIGV4ZWN1dGlvbiBhbmQgc2VuZCB0cmFuc2FjdGlvbnNcbiAqICB0byB1cGRhdGUgdGhlIHN0YXRlLlxuICpcbiAqICBJdCBpcyBvbmUgb2YgdGhlIG1vc3QgZnVuZGFtZW50YWwgY29tcG9uZW50cyBvZiBpbnRlcmFjdGluZyB3aXRoIGFcbiAqICBibG9ja2NoYWluIGFwcGxpY2F0aW9uLCBhbmQgdGhlcmUgYXJlIG1hbnkgd2F5cyB0byBjb25uZWN0LCBzdWNoIGFzIG92ZXJcbiAqICBIVFRQLCBXZWJTb2NrZXRzIG9yIGluamVjdGVkIHByb3ZpZGVycyBzdWNoIGFzIFtNZXRhTWFza10obGluay1tZXRhbWFzaykuXG4gKlxuICogIEBfc2VjdGlvbjogYXBpL3Byb3ZpZGVyczpQcm92aWRlcnMgIFthYm91dC1wcm92aWRlcnNdXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU29ja2V0RXZlbnRTdWJzY3JpYmVyID0gZXhwb3J0cy5Tb2NrZXRQZW5kaW5nU3Vic2NyaWJlciA9IGV4cG9ydHMuU29ja2V0QmxvY2tTdWJzY3JpYmVyID0gZXhwb3J0cy5Tb2NrZXRTdWJzY3JpYmVyID0gZXhwb3J0cy5XZWJTb2NrZXRQcm92aWRlciA9IGV4cG9ydHMuU29ja2V0UHJvdmlkZXIgPSBleHBvcnRzLklwY1NvY2tldFByb3ZpZGVyID0gZXhwb3J0cy5RdWlja05vZGVQcm92aWRlciA9IGV4cG9ydHMuUG9ja2V0UHJvdmlkZXIgPSBleHBvcnRzLkluZnVyYVdlYlNvY2tldFByb3ZpZGVyID0gZXhwb3J0cy5JbmZ1cmFQcm92aWRlciA9IGV4cG9ydHMuRXRoZXJzY2FuUGx1Z2luID0gZXhwb3J0cy5FdGhlcnNjYW5Qcm92aWRlciA9IGV4cG9ydHMuQ2xvdWRmbGFyZVByb3ZpZGVyID0gZXhwb3J0cy5BbmtyUHJvdmlkZXIgPSBleHBvcnRzLkFsY2hlbXlQcm92aWRlciA9IGV4cG9ydHMuQnJvd3NlclByb3ZpZGVyID0gZXhwb3J0cy5Kc29uUnBjU2lnbmVyID0gZXhwb3J0cy5Kc29uUnBjUHJvdmlkZXIgPSBleHBvcnRzLkpzb25ScGNBcGlQcm92aWRlciA9IGV4cG9ydHMuRmFsbGJhY2tQcm92aWRlciA9IGV4cG9ydHMuY29weVJlcXVlc3QgPSBleHBvcnRzLlRyYW5zYWN0aW9uUmVzcG9uc2UgPSBleHBvcnRzLlRyYW5zYWN0aW9uUmVjZWlwdCA9IGV4cG9ydHMuTG9nID0gZXhwb3J0cy5GZWVEYXRhID0gZXhwb3J0cy5CbG9jayA9IGV4cG9ydHMuRmV0Y2hVcmxGZWVEYXRhTmV0d29ya1BsdWdpbiA9IGV4cG9ydHMuRmVlRGF0YU5ldHdvcmtQbHVnaW4gPSBleHBvcnRzLkVuc1BsdWdpbiA9IGV4cG9ydHMuR2FzQ29zdFBsdWdpbiA9IGV4cG9ydHMuTmV0d29ya1BsdWdpbiA9IGV4cG9ydHMuTm9uY2VNYW5hZ2VyID0gZXhwb3J0cy5OZXR3b3JrID0gZXhwb3J0cy5NdWx0aWNvaW5Qcm92aWRlclBsdWdpbiA9IGV4cG9ydHMuRW5zUmVzb2x2ZXIgPSBleHBvcnRzLmdldERlZmF1bHRQcm92aWRlciA9IGV4cG9ydHMuc2hvd1Rocm90dGxlTWVzc2FnZSA9IGV4cG9ydHMuVm9pZFNpZ25lciA9IGV4cG9ydHMuQWJzdHJhY3RTaWduZXIgPSBleHBvcnRzLlVubWFuYWdlZFN1YnNjcmliZXIgPSBleHBvcnRzLkFic3RyYWN0UHJvdmlkZXIgPSB2b2lkIDA7XG52YXIgYWJzdHJhY3RfcHJvdmlkZXJfanNfMSA9IHJlcXVpcmUoXCIuL2Fic3RyYWN0LXByb3ZpZGVyLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQWJzdHJhY3RQcm92aWRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYWJzdHJhY3RfcHJvdmlkZXJfanNfMS5BYnN0cmFjdFByb3ZpZGVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVW5tYW5hZ2VkU3Vic2NyaWJlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYWJzdHJhY3RfcHJvdmlkZXJfanNfMS5Vbm1hbmFnZWRTdWJzY3JpYmVyOyB9IH0pO1xudmFyIGFic3RyYWN0X3NpZ25lcl9qc18xID0gcmVxdWlyZShcIi4vYWJzdHJhY3Qtc2lnbmVyLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQWJzdHJhY3RTaWduZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFic3RyYWN0X3NpZ25lcl9qc18xLkFic3RyYWN0U2lnbmVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVm9pZFNpZ25lclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYWJzdHJhY3Rfc2lnbmVyX2pzXzEuVm9pZFNpZ25lcjsgfSB9KTtcbnZhciBjb21tdW5pdHlfanNfMSA9IHJlcXVpcmUoXCIuL2NvbW11bml0eS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNob3dUaHJvdHRsZU1lc3NhZ2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbW11bml0eV9qc18xLnNob3dUaHJvdHRsZU1lc3NhZ2U7IH0gfSk7XG52YXIgZGVmYXVsdF9wcm92aWRlcl9qc18xID0gcmVxdWlyZShcIi4vZGVmYXVsdC1wcm92aWRlci5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldERlZmF1bHRQcm92aWRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVmYXVsdF9wcm92aWRlcl9qc18xLmdldERlZmF1bHRQcm92aWRlcjsgfSB9KTtcbnZhciBlbnNfcmVzb2x2ZXJfanNfMSA9IHJlcXVpcmUoXCIuL2Vucy1yZXNvbHZlci5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVuc1Jlc29sdmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbnNfcmVzb2x2ZXJfanNfMS5FbnNSZXNvbHZlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk11bHRpY29pblByb3ZpZGVyUGx1Z2luXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbnNfcmVzb2x2ZXJfanNfMS5NdWx0aWNvaW5Qcm92aWRlclBsdWdpbjsgfSB9KTtcbnZhciBuZXR3b3JrX2pzXzEgPSByZXF1aXJlKFwiLi9uZXR3b3JrLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTmV0d29ya1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV0d29ya19qc18xLk5ldHdvcms7IH0gfSk7XG52YXIgc2lnbmVyX25vbmNlbWFuYWdlcl9qc18xID0gcmVxdWlyZShcIi4vc2lnbmVyLW5vbmNlbWFuYWdlci5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vbmNlTWFuYWdlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2lnbmVyX25vbmNlbWFuYWdlcl9qc18xLk5vbmNlTWFuYWdlcjsgfSB9KTtcbnZhciBwbHVnaW5zX25ldHdvcmtfanNfMSA9IHJlcXVpcmUoXCIuL3BsdWdpbnMtbmV0d29yay5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5ldHdvcmtQbHVnaW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBsdWdpbnNfbmV0d29ya19qc18xLk5ldHdvcmtQbHVnaW47IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJHYXNDb3N0UGx1Z2luXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwbHVnaW5zX25ldHdvcmtfanNfMS5HYXNDb3N0UGx1Z2luOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRW5zUGx1Z2luXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwbHVnaW5zX25ldHdvcmtfanNfMS5FbnNQbHVnaW47IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGZWVEYXRhTmV0d29ya1BsdWdpblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGx1Z2luc19uZXR3b3JrX2pzXzEuRmVlRGF0YU5ldHdvcmtQbHVnaW47IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGZXRjaFVybEZlZURhdGFOZXR3b3JrUGx1Z2luXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwbHVnaW5zX25ldHdvcmtfanNfMS5GZXRjaFVybEZlZURhdGFOZXR3b3JrUGx1Z2luOyB9IH0pO1xudmFyIHByb3ZpZGVyX2pzXzEgPSByZXF1aXJlKFwiLi9wcm92aWRlci5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJsb2NrXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlcl9qc18xLkJsb2NrOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRmVlRGF0YVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdmlkZXJfanNfMS5GZWVEYXRhOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTG9nXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlcl9qc18xLkxvZzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRyYW5zYWN0aW9uUmVjZWlwdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdmlkZXJfanNfMS5UcmFuc2FjdGlvblJlY2VpcHQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUcmFuc2FjdGlvblJlc3BvbnNlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlcl9qc18xLlRyYW5zYWN0aW9uUmVzcG9uc2U7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb3B5UmVxdWVzdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdmlkZXJfanNfMS5jb3B5UmVxdWVzdDsgfSB9KTtcbnZhciBwcm92aWRlcl9mYWxsYmFja19qc18xID0gcmVxdWlyZShcIi4vcHJvdmlkZXItZmFsbGJhY2suanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGYWxsYmFja1Byb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlcl9mYWxsYmFja19qc18xLkZhbGxiYWNrUHJvdmlkZXI7IH0gfSk7XG52YXIgcHJvdmlkZXJfanNvbnJwY19qc18xID0gcmVxdWlyZShcIi4vcHJvdmlkZXItanNvbnJwYy5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkpzb25ScGNBcGlQcm92aWRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdmlkZXJfanNvbnJwY19qc18xLkpzb25ScGNBcGlQcm92aWRlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkpzb25ScGNQcm92aWRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdmlkZXJfanNvbnJwY19qc18xLkpzb25ScGNQcm92aWRlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkpzb25ScGNTaWduZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3ZpZGVyX2pzb25ycGNfanNfMS5Kc29uUnBjU2lnbmVyOyB9IH0pO1xudmFyIHByb3ZpZGVyX2Jyb3dzZXJfanNfMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVyLWJyb3dzZXIuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCcm93c2VyUHJvdmlkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3ZpZGVyX2Jyb3dzZXJfanNfMS5Ccm93c2VyUHJvdmlkZXI7IH0gfSk7XG52YXIgcHJvdmlkZXJfYWxjaGVteV9qc18xID0gcmVxdWlyZShcIi4vcHJvdmlkZXItYWxjaGVteS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFsY2hlbXlQcm92aWRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdmlkZXJfYWxjaGVteV9qc18xLkFsY2hlbXlQcm92aWRlcjsgfSB9KTtcbnZhciBwcm92aWRlcl9hbmtyX2pzXzEgPSByZXF1aXJlKFwiLi9wcm92aWRlci1hbmtyLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQW5rclByb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlcl9hbmtyX2pzXzEuQW5rclByb3ZpZGVyOyB9IH0pO1xudmFyIHByb3ZpZGVyX2Nsb3VkZmxhcmVfanNfMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVyLWNsb3VkZmxhcmUuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDbG91ZGZsYXJlUHJvdmlkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3ZpZGVyX2Nsb3VkZmxhcmVfanNfMS5DbG91ZGZsYXJlUHJvdmlkZXI7IH0gfSk7XG52YXIgcHJvdmlkZXJfZXRoZXJzY2FuX2pzXzEgPSByZXF1aXJlKFwiLi9wcm92aWRlci1ldGhlcnNjYW4uanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFdGhlcnNjYW5Qcm92aWRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdmlkZXJfZXRoZXJzY2FuX2pzXzEuRXRoZXJzY2FuUHJvdmlkZXI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFdGhlcnNjYW5QbHVnaW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3ZpZGVyX2V0aGVyc2Nhbl9qc18xLkV0aGVyc2NhblBsdWdpbjsgfSB9KTtcbnZhciBwcm92aWRlcl9pbmZ1cmFfanNfMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVyLWluZnVyYS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkluZnVyYVByb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlcl9pbmZ1cmFfanNfMS5JbmZ1cmFQcm92aWRlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkluZnVyYVdlYlNvY2tldFByb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlcl9pbmZ1cmFfanNfMS5JbmZ1cmFXZWJTb2NrZXRQcm92aWRlcjsgfSB9KTtcbnZhciBwcm92aWRlcl9wb2NrZXRfanNfMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVyLXBvY2tldC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBvY2tldFByb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlcl9wb2NrZXRfanNfMS5Qb2NrZXRQcm92aWRlcjsgfSB9KTtcbnZhciBwcm92aWRlcl9xdWlja25vZGVfanNfMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVyLXF1aWNrbm9kZS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlF1aWNrTm9kZVByb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlcl9xdWlja25vZGVfanNfMS5RdWlja05vZGVQcm92aWRlcjsgfSB9KTtcbmNvbnN0IHByb3ZpZGVyX2lwY3NvY2tldF9qc18xID0gcmVxdWlyZShcIi4vcHJvdmlkZXItaXBjc29ja2V0LmpzXCIpOyAvKi1icm93c2VyKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIklwY1NvY2tldFByb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlcl9pcGNzb2NrZXRfanNfMS5JcGNTb2NrZXRQcm92aWRlcjsgfSB9KTtcbnZhciBwcm92aWRlcl9zb2NrZXRfanNfMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVyLXNvY2tldC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNvY2tldFByb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlcl9zb2NrZXRfanNfMS5Tb2NrZXRQcm92aWRlcjsgfSB9KTtcbnZhciBwcm92aWRlcl93ZWJzb2NrZXRfanNfMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVyLXdlYnNvY2tldC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIldlYlNvY2tldFByb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlcl93ZWJzb2NrZXRfanNfMS5XZWJTb2NrZXRQcm92aWRlcjsgfSB9KTtcbnZhciBwcm92aWRlcl9zb2NrZXRfanNfMiA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVyLXNvY2tldC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNvY2tldFN1YnNjcmliZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3ZpZGVyX3NvY2tldF9qc18yLlNvY2tldFN1YnNjcmliZXI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTb2NrZXRCbG9ja1N1YnNjcmliZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3ZpZGVyX3NvY2tldF9qc18yLlNvY2tldEJsb2NrU3Vic2NyaWJlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNvY2tldFBlbmRpbmdTdWJzY3JpYmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlcl9zb2NrZXRfanNfMi5Tb2NrZXRQZW5kaW5nU3Vic2NyaWJlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNvY2tldEV2ZW50U3Vic2NyaWJlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdmlkZXJfc29ja2V0X2pzXzIuU29ja2V0RXZlbnRTdWJzY3JpYmVyOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU29ja2V0RXZlbnRTdWJzY3JpYmVyIiwiU29ja2V0UGVuZGluZ1N1YnNjcmliZXIiLCJTb2NrZXRCbG9ja1N1YnNjcmliZXIiLCJTb2NrZXRTdWJzY3JpYmVyIiwiV2ViU29ja2V0UHJvdmlkZXIiLCJTb2NrZXRQcm92aWRlciIsIklwY1NvY2tldFByb3ZpZGVyIiwiUXVpY2tOb2RlUHJvdmlkZXIiLCJQb2NrZXRQcm92aWRlciIsIkluZnVyYVdlYlNvY2tldFByb3ZpZGVyIiwiSW5mdXJhUHJvdmlkZXIiLCJFdGhlcnNjYW5QbHVnaW4iLCJFdGhlcnNjYW5Qcm92aWRlciIsIkNsb3VkZmxhcmVQcm92aWRlciIsIkFua3JQcm92aWRlciIsIkFsY2hlbXlQcm92aWRlciIsIkJyb3dzZXJQcm92aWRlciIsIkpzb25ScGNTaWduZXIiLCJKc29uUnBjUHJvdmlkZXIiLCJKc29uUnBjQXBpUHJvdmlkZXIiLCJGYWxsYmFja1Byb3ZpZGVyIiwiY29weVJlcXVlc3QiLCJUcmFuc2FjdGlvblJlc3BvbnNlIiwiVHJhbnNhY3Rpb25SZWNlaXB0IiwiTG9nIiwiRmVlRGF0YSIsIkJsb2NrIiwiRmV0Y2hVcmxGZWVEYXRhTmV0d29ya1BsdWdpbiIsIkZlZURhdGFOZXR3b3JrUGx1Z2luIiwiRW5zUGx1Z2luIiwiR2FzQ29zdFBsdWdpbiIsIk5ldHdvcmtQbHVnaW4iLCJOb25jZU1hbmFnZXIiLCJOZXR3b3JrIiwiTXVsdGljb2luUHJvdmlkZXJQbHVnaW4iLCJFbnNSZXNvbHZlciIsImdldERlZmF1bHRQcm92aWRlciIsInNob3dUaHJvdHRsZU1lc3NhZ2UiLCJWb2lkU2lnbmVyIiwiQWJzdHJhY3RTaWduZXIiLCJVbm1hbmFnZWRTdWJzY3JpYmVyIiwiQWJzdHJhY3RQcm92aWRlciIsImFic3RyYWN0X3Byb3ZpZGVyX2pzXzEiLCJyZXF1aXJlIiwiZW51bWVyYWJsZSIsImdldCIsImFic3RyYWN0X3NpZ25lcl9qc18xIiwiY29tbXVuaXR5X2pzXzEiLCJkZWZhdWx0X3Byb3ZpZGVyX2pzXzEiLCJlbnNfcmVzb2x2ZXJfanNfMSIsIm5ldHdvcmtfanNfMSIsInNpZ25lcl9ub25jZW1hbmFnZXJfanNfMSIsInBsdWdpbnNfbmV0d29ya19qc18xIiwicHJvdmlkZXJfanNfMSIsInByb3ZpZGVyX2ZhbGxiYWNrX2pzXzEiLCJwcm92aWRlcl9qc29ucnBjX2pzXzEiLCJwcm92aWRlcl9icm93c2VyX2pzXzEiLCJwcm92aWRlcl9hbGNoZW15X2pzXzEiLCJwcm92aWRlcl9hbmtyX2pzXzEiLCJwcm92aWRlcl9jbG91ZGZsYXJlX2pzXzEiLCJwcm92aWRlcl9ldGhlcnNjYW5fanNfMSIsInByb3ZpZGVyX2luZnVyYV9qc18xIiwicHJvdmlkZXJfcG9ja2V0X2pzXzEiLCJwcm92aWRlcl9xdWlja25vZGVfanNfMSIsInByb3ZpZGVyX2lwY3NvY2tldF9qc18xIiwicHJvdmlkZXJfc29ja2V0X2pzXzEiLCJwcm92aWRlcl93ZWJzb2NrZXRfanNfMSIsInByb3ZpZGVyX3NvY2tldF9qc18yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/network.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/network.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  A **Network** encapsulates the various properties required to\n *  interact with a specific chain.\n *\n *  @_subsection: api/providers:Networks  [networks]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Network = void 0;\nconst index_js_1 = __webpack_require__(/*! ../transaction/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/transaction/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst plugins_network_js_1 = __webpack_require__(/*! ./plugins-network.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/plugins-network.js\");\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/ const Networks = new Map();\n/**\n *  A **Network** provides access to a chain's properties and allows\n *  for plug-ins to extend functionality.\n */ class Network {\n    #name;\n    #chainId;\n    #plugins;\n    /**\n     *  Creates a new **Network** for %%name%% and %%chainId%%.\n     */ constructor(name, chainId){\n        this.#name = name;\n        this.#chainId = (0, index_js_2.getBigInt)(chainId);\n        this.#plugins = new Map();\n    }\n    /**\n     *  Returns a JSON-compatible representation of a Network.\n     */ toJSON() {\n        return {\n            name: this.name,\n            chainId: String(this.chainId)\n        };\n    }\n    /**\n     *  The network common name.\n     *\n     *  This is the canonical name, as networks migh have multiple\n     *  names.\n     */ get name() {\n        return this.#name;\n    }\n    set name(value) {\n        this.#name = value;\n    }\n    /**\n     *  The network chain ID.\n     */ get chainId() {\n        return this.#chainId;\n    }\n    set chainId(value) {\n        this.#chainId = (0, index_js_2.getBigInt)(value, \"chainId\");\n    }\n    /**\n     *  Returns true if %%other%% matches this network. Any chain ID\n     *  must match, and if no chain ID is present, the name must match.\n     *\n     *  This method does not currently check for additional properties,\n     *  such as ENS address or plug-in compatibility.\n     */ matches(other) {\n        if (other == null) {\n            return false;\n        }\n        if (typeof other === \"string\") {\n            try {\n                return this.chainId === (0, index_js_2.getBigInt)(other);\n            } catch (error) {}\n            return this.name === other;\n        }\n        if (typeof other === \"number\" || typeof other === \"bigint\") {\n            try {\n                return this.chainId === (0, index_js_2.getBigInt)(other);\n            } catch (error) {}\n            return false;\n        }\n        if (typeof other === \"object\") {\n            if (other.chainId != null) {\n                try {\n                    return this.chainId === (0, index_js_2.getBigInt)(other.chainId);\n                } catch (error) {}\n                return false;\n            }\n            if (other.name != null) {\n                return this.name === other.name;\n            }\n            return false;\n        }\n        return false;\n    }\n    /**\n     *  Returns the list of plugins currently attached to this Network.\n     */ get plugins() {\n        return Array.from(this.#plugins.values());\n    }\n    /**\n     *  Attach a new %%plugin%% to this Network. The network name\n     *  must be unique, excluding any fragment.\n     */ attachPlugin(plugin) {\n        if (this.#plugins.get(plugin.name)) {\n            throw new Error(`cannot replace existing plugin: ${plugin.name} `);\n        }\n        this.#plugins.set(plugin.name, plugin.clone());\n        return this;\n    }\n    /**\n     *  Return the plugin, if any, matching %%name%% exactly. Plugins\n     *  with fragments will not be returned unless %%name%% includes\n     *  a fragment.\n     */ getPlugin(name) {\n        return this.#plugins.get(name) || null;\n    }\n    /**\n     *  Gets a list of all plugins that match %%name%%, with otr without\n     *  a fragment.\n     */ getPlugins(basename) {\n        return this.plugins.filter((p)=>p.name.split(\"#\")[0] === basename);\n    }\n    /**\n     *  Create a copy of this Network.\n     */ clone() {\n        const clone = new Network(this.name, this.chainId);\n        this.plugins.forEach((plugin)=>{\n            clone.attachPlugin(plugin.clone());\n        });\n        return clone;\n    }\n    /**\n     *  Compute the intrinsic gas required for a transaction.\n     *\n     *  A GasCostPlugin can be attached to override the default\n     *  values.\n     */ computeIntrinsicGas(tx) {\n        const costs = this.getPlugin(\"org.ethers.plugins.network.GasCost\") || new plugins_network_js_1.GasCostPlugin();\n        let gas = costs.txBase;\n        if (tx.to == null) {\n            gas += costs.txCreate;\n        }\n        if (tx.data) {\n            for(let i = 2; i < tx.data.length; i += 2){\n                if (tx.data.substring(i, i + 2) === \"00\") {\n                    gas += costs.txDataZero;\n                } else {\n                    gas += costs.txDataNonzero;\n                }\n            }\n        }\n        if (tx.accessList) {\n            const accessList = (0, index_js_1.accessListify)(tx.accessList);\n            for(const addr in accessList){\n                gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n            }\n        }\n        return gas;\n    }\n    /**\n     *  Returns a new Network for the %%network%% name or chainId.\n     */ static from(network) {\n        injectCommonNetworks();\n        // Default network\n        if (network == null) {\n            return Network.from(\"mainnet\");\n        }\n        // Canonical name or chain ID\n        if (typeof network === \"number\") {\n            network = BigInt(network);\n        }\n        if (typeof network === \"string\" || typeof network === \"bigint\") {\n            const networkFunc = Networks.get(network);\n            if (networkFunc) {\n                return networkFunc();\n            }\n            if (typeof network === \"bigint\") {\n                return new Network(\"unknown\", network);\n            }\n            (0, index_js_2.assertArgument)(false, \"unknown network\", \"network\", network);\n        }\n        // Clonable with network-like abilities\n        if (typeof network.clone === \"function\") {\n            const clone = network.clone();\n            //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n            //}\n            return clone;\n        }\n        // Networkish\n        if (typeof network === \"object\") {\n            (0, index_js_2.assertArgument)(typeof network.name === \"string\" && typeof network.chainId === \"number\", \"invalid network object name or chainId\", \"network\", network);\n            const custom = new Network(network.name, network.chainId);\n            if (network.ensAddress || network.ensNetwork != null) {\n                custom.attachPlugin(new plugins_network_js_1.EnsPlugin(network.ensAddress, network.ensNetwork));\n            }\n            //if ((<any>network).layerOneConnection) {\n            //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n            //}\n            return custom;\n        }\n        (0, index_js_2.assertArgument)(false, \"invalid network\", \"network\", network);\n    }\n    /**\n     *  Register %%nameOrChainId%% with a function which returns\n     *  an instance of a Network representing that chain.\n     */ static register(nameOrChainId, networkFunc) {\n        if (typeof nameOrChainId === \"number\") {\n            nameOrChainId = BigInt(nameOrChainId);\n        }\n        const existing = Networks.get(nameOrChainId);\n        if (existing) {\n            (0, index_js_2.assertArgument)(false, `conflicting network for ${JSON.stringify(existing.name)}`, \"nameOrChainId\", nameOrChainId);\n        }\n        Networks.set(nameOrChainId, networkFunc);\n    }\n}\nexports.Network = Network;\n// We don't want to bring in formatUnits because it is backed by\n// FixedNumber and we want to keep Networks tiny. The values\n// included by the Gas Stations are also IEEE 754 with lots of\n// rounding issues and exceed the strict checks formatUnits has.\nfunction parseUnits(_value, decimals) {\n    const value = String(_value);\n    if (!value.match(/^[0-9.]+$/)) {\n        throw new Error(`invalid gwei value: ${_value}`);\n    }\n    // Break into [ whole, fraction ]\n    const comps = value.split(\".\");\n    if (comps.length === 1) {\n        comps.push(\"\");\n    }\n    // More than 1 decimal point or too many fractional positions\n    if (comps.length !== 2) {\n        throw new Error(`invalid gwei value: ${_value}`);\n    }\n    // Pad the fraction to 9 decimalplaces\n    while(comps[1].length < decimals){\n        comps[1] += \"0\";\n    }\n    // Too many decimals and some non-zero ending, take the ceiling\n    if (comps[1].length > 9) {\n        let frac = BigInt(comps[1].substring(0, 9));\n        if (!comps[1].substring(9).match(/^0+$/)) {\n            frac++;\n        }\n        comps[1] = frac.toString();\n    }\n    return BigInt(comps[0] + comps[1]);\n}\n// Used by Polygon to use a gas station for fee data\nfunction getGasStationPlugin(url) {\n    return new plugins_network_js_1.FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request)=>{\n        // Prevent Cloudflare from blocking our request in node.js\n        request.setHeader(\"User-Agent\", \"ethers\");\n        let response;\n        try {\n            const [_response, _feeData] = await Promise.all([\n                request.send(),\n                fetchFeeData()\n            ]);\n            response = _response;\n            const payload = response.bodyJson.standard;\n            const feeData = {\n                gasPrice: _feeData.gasPrice,\n                maxFeePerGas: parseUnits(payload.maxFee, 9),\n                maxPriorityFeePerGas: parseUnits(payload.maxPriorityFee, 9)\n            };\n            return feeData;\n        } catch (error) {\n            (0, index_js_2.assert)(false, `error encountered with polygon gas station (${JSON.stringify(request.url)})`, \"SERVER_ERROR\", {\n                request,\n                response,\n                error\n            });\n        }\n    });\n}\n// Used by Optimism for a custom priority fee\nfunction getPriorityFeePlugin(maxPriorityFeePerGas) {\n    return new plugins_network_js_1.FetchUrlFeeDataNetworkPlugin(\"data:\", async (fetchFeeData, provider, request)=>{\n        const feeData = await fetchFeeData();\n        // This should always fail\n        if (feeData.maxFeePerGas == null || feeData.maxPriorityFeePerGas == null) {\n            return feeData;\n        }\n        // Compute the corrected baseFee to recompute the updated values\n        const baseFee = feeData.maxFeePerGas - feeData.maxPriorityFeePerGas;\n        return {\n            gasPrice: feeData.gasPrice,\n            maxFeePerGas: baseFee + maxPriorityFeePerGas,\n            maxPriorityFeePerGas\n        };\n    });\n}\n// See: https://chainlist.org\nlet injected = false;\nfunction injectCommonNetworks() {\n    if (injected) {\n        return;\n    }\n    injected = true;\n    /// Register popular Ethereum networks\n    function registerEth(name, chainId, options) {\n        const func = function() {\n            const network = new Network(name, chainId);\n            // We use 0 to disable ENS\n            if (options.ensNetwork != null) {\n                network.attachPlugin(new plugins_network_js_1.EnsPlugin(null, options.ensNetwork));\n            }\n            network.attachPlugin(new plugins_network_js_1.GasCostPlugin());\n            (options.plugins || []).forEach((plugin)=>{\n                network.attachPlugin(plugin);\n            });\n            return network;\n        };\n        // Register the network by name and chain ID\n        Network.register(name, func);\n        Network.register(chainId, func);\n        if (options.altNames) {\n            options.altNames.forEach((name)=>{\n                Network.register(name, func);\n            });\n        }\n    }\n    registerEth(\"mainnet\", 1, {\n        ensNetwork: 1,\n        altNames: [\n            \"homestead\"\n        ]\n    });\n    registerEth(\"ropsten\", 3, {\n        ensNetwork: 3\n    });\n    registerEth(\"rinkeby\", 4, {\n        ensNetwork: 4\n    });\n    registerEth(\"goerli\", 5, {\n        ensNetwork: 5\n    });\n    registerEth(\"kovan\", 42, {\n        ensNetwork: 42\n    });\n    registerEth(\"sepolia\", 11155111, {});\n    registerEth(\"classic\", 61, {});\n    registerEth(\"classicKotti\", 6, {});\n    registerEth(\"arbitrum\", 42161, {\n        ensNetwork: 1\n    });\n    registerEth(\"arbitrum-goerli\", 421613, {});\n    registerEth(\"bnb\", 56, {\n        ensNetwork: 1\n    });\n    registerEth(\"bnbt\", 97, {});\n    registerEth(\"linea\", 59144, {\n        ensNetwork: 1\n    });\n    registerEth(\"linea-goerli\", 59140, {});\n    registerEth(\"matic\", 137, {\n        ensNetwork: 1,\n        plugins: [\n            getGasStationPlugin(\"https://gasstation.polygon.technology/v2\")\n        ]\n    });\n    registerEth(\"matic-mumbai\", 80001, {\n        altNames: [\n            \"maticMumbai\",\n            \"maticmum\"\n        ],\n        plugins: [\n            getGasStationPlugin(\"https://gasstation-testnet.polygon.technology/v2\")\n        ]\n    });\n    registerEth(\"optimism\", 10, {\n        ensNetwork: 1,\n        plugins: [\n            getPriorityFeePlugin(BigInt(\"1000000\"))\n        ]\n    });\n    registerEth(\"optimism-goerli\", 420, {});\n    registerEth(\"xdai\", 100, {\n        ensNetwork: 1\n    });\n} //# sourceMappingURL=network.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9wcm92aWRlcnMvbmV0d29yay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7OztDQUtDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxlQUFlLEdBQUcsS0FBSztBQUN2QixNQUFNRyxhQUFhQyxtQkFBT0EsQ0FBQyw4RkFBeUI7QUFDcEQsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUMsa0ZBQW1CO0FBQzlDLE1BQU1FLHVCQUF1QkYsbUJBQU9BLENBQUMsbUdBQXNCO0FBQzNEOzs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBLEdBQ0EsTUFBTUcsV0FBVyxJQUFJQztBQUNyQjs7O0NBR0MsR0FDRCxNQUFNTjtJQUNGLENBQUNPLElBQUksQ0FBQztJQUNOLENBQUNDLE9BQU8sQ0FBQztJQUNULENBQUNDLE9BQU8sQ0FBQztJQUNUOztLQUVDLEdBQ0RDLFlBQVlILElBQUksRUFBRUMsT0FBTyxDQUFFO1FBQ3ZCLElBQUksQ0FBQyxDQUFDRCxJQUFJLEdBQUdBO1FBQ2IsSUFBSSxDQUFDLENBQUNDLE9BQU8sR0FBRyxDQUFDLEdBQUdMLFdBQVdRLFNBQVMsRUFBRUg7UUFDMUMsSUFBSSxDQUFDLENBQUNDLE9BQU8sR0FBRyxJQUFJSDtJQUN4QjtJQUNBOztLQUVDLEdBQ0RNLFNBQVM7UUFDTCxPQUFPO1lBQUVMLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQUVDLFNBQVNLLE9BQU8sSUFBSSxDQUFDTCxPQUFPO1FBQUU7SUFDNUQ7SUFDQTs7Ozs7S0FLQyxHQUNELElBQUlELE9BQU87UUFBRSxPQUFPLElBQUksQ0FBQyxDQUFDQSxJQUFJO0lBQUU7SUFDaEMsSUFBSUEsS0FBS1IsS0FBSyxFQUFFO1FBQUUsSUFBSSxDQUFDLENBQUNRLElBQUksR0FBR1I7SUFBTztJQUN0Qzs7S0FFQyxHQUNELElBQUlTLFVBQVU7UUFBRSxPQUFPLElBQUksQ0FBQyxDQUFDQSxPQUFPO0lB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QUFnQixHQUFHLENBQUM7SUFDaENBLFlBQVksWUFBWSxPQUFPO1FBQzNCekMsWUFBWTtJQUNoQjtJQUNBeUMsWUFBWSxtQkFBbUIsUUFBUSxDQUFDO0lBQ3hDQSxZQUFZLE9BQU8sSUFBSTtRQUFFekMsWUFBWTtJQUFFO0lBQ3ZDeUMsWUFBWSxRQUFRLElBQUksQ0FBQztJQUN6QkEsWUFBWSxTQUFTLE9BQU87UUFBRXpDLFlBQVk7SUFBRTtJQUM1Q3lDLFlBQVksZ0JBQWdCLE9BQU8sQ0FBQztJQUNwQ0EsWUFBWSxTQUFTLEtBQUs7UUFDdEJ6QyxZQUFZO1FBQ1puRCxTQUFTO1lBQ0xrRSxvQkFBb0I7U0FDdkI7SUFDTDtJQUNBMEIsWUFBWSxnQkFBZ0IsT0FBTztRQUMvQkcsVUFBVTtZQUFDO1lBQWU7U0FBVztRQUNyQy9GLFNBQVM7WUFDTGtFLG9CQUFvQjtTQUN2QjtJQUNMO0lBQ0EwQixZQUFZLFlBQVksSUFBSTtRQUN4QnpDLFlBQVk7UUFDWm5ELFNBQVM7WUFDTHlGLHFCQUFxQjNDLE9BQU87U0FDL0I7SUFDTDtJQUNBOEMsWUFBWSxtQkFBbUIsS0FBSyxDQUFDO0lBQ3JDQSxZQUFZLFFBQVEsS0FBSztRQUFFekMsWUFBWTtJQUFFO0FBQzdDLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvcHJvdmlkZXJzL25ldHdvcmsuanM/Y2JkOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogIEEgKipOZXR3b3JrKiogZW5jYXBzdWxhdGVzIHRoZSB2YXJpb3VzIHByb3BlcnRpZXMgcmVxdWlyZWQgdG9cbiAqICBpbnRlcmFjdCB3aXRoIGEgc3BlY2lmaWMgY2hhaW4uXG4gKlxuICogIEBfc3Vic2VjdGlvbjogYXBpL3Byb3ZpZGVyczpOZXR3b3JrcyAgW25ldHdvcmtzXVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk5ldHdvcmsgPSB2b2lkIDA7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4uL3RyYW5zYWN0aW9uL2luZGV4LmpzXCIpO1xuY29uc3QgaW5kZXhfanNfMiA9IHJlcXVpcmUoXCIuLi91dGlscy9pbmRleC5qc1wiKTtcbmNvbnN0IHBsdWdpbnNfbmV0d29ya19qc18xID0gcmVxdWlyZShcIi4vcGx1Z2lucy1uZXR3b3JrLmpzXCIpO1xuLyogKiAqICpcbi8vIE5ldHdvcmtzIHdoaWNoIG9wZXJhdGlvbiBhZ2FpbnN0IGFuIEwyIGNhbiB1c2UgdGhpcyBwbHVnaW4gdG9cbi8vIHNwZWNpZnkgaG93IHRvIGFjY2VzcyBMMSwgZm9yIHRoZSBwdXJwb3NlIG9mIHJlc29sdmluZyBFTlMsXG4vLyBmb3IgZXhhbXBsZS5cbmV4cG9ydCBjbGFzcyBMYXllck9uZUNvbm5lY3Rpb25QbHVnaW4gZXh0ZW5kcyBOZXR3b3JrUGx1Z2luIHtcbiAgICByZWFkb25seSBwcm92aWRlciE6IFByb3ZpZGVyO1xuLy8gQFRPRE86IFJlbmFtZSB0byBDaGFpbkFjY2VzcyBhbmQgYWxsb3cgZm9yIGNvbm5lY3RpbmcgdG8gYW55IGNoYWluXG4gICAgY29uc3RydWN0b3IocHJvdmlkZXI6IFByb3ZpZGVyKSB7XG4gICAgICAgIHN1cGVyKFwib3JnLmV0aGVycy5wbHVnaW5zLmxheWVyLW9uZS1jb25uZWN0aW9uXCIpO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzPExheWVyT25lQ29ubmVjdGlvblBsdWdpbj4odGhpcywgeyBwcm92aWRlciB9KTtcbiAgICB9XG5cbiAgICBjbG9uZSgpOiBMYXllck9uZUNvbm5lY3Rpb25QbHVnaW4ge1xuICAgICAgICByZXR1cm4gbmV3IExheWVyT25lQ29ubmVjdGlvblBsdWdpbih0aGlzLnByb3ZpZGVyKTtcbiAgICB9XG59XG4qL1xuY29uc3QgTmV0d29ya3MgPSBuZXcgTWFwKCk7XG4vKipcbiAqICBBICoqTmV0d29yayoqIHByb3ZpZGVzIGFjY2VzcyB0byBhIGNoYWluJ3MgcHJvcGVydGllcyBhbmQgYWxsb3dzXG4gKiAgZm9yIHBsdWctaW5zIHRvIGV4dGVuZCBmdW5jdGlvbmFsaXR5LlxuICovXG5jbGFzcyBOZXR3b3JrIHtcbiAgICAjbmFtZTtcbiAgICAjY2hhaW5JZDtcbiAgICAjcGx1Z2lucztcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyAqKk5ldHdvcmsqKiBmb3IgJSVuYW1lJSUgYW5kICUlY2hhaW5JZCUlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGNoYWluSWQpIHtcbiAgICAgICAgdGhpcy4jbmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuI2NoYWluSWQgPSAoMCwgaW5kZXhfanNfMi5nZXRCaWdJbnQpKGNoYWluSWQpO1xuICAgICAgICB0aGlzLiNwbHVnaW5zID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBhIEpTT04tY29tcGF0aWJsZSByZXByZXNlbnRhdGlvbiBvZiBhIE5ldHdvcmsuXG4gICAgICovXG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4geyBuYW1lOiB0aGlzLm5hbWUsIGNoYWluSWQ6IFN0cmluZyh0aGlzLmNoYWluSWQpIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgbmV0d29yayBjb21tb24gbmFtZS5cbiAgICAgKlxuICAgICAqICBUaGlzIGlzIHRoZSBjYW5vbmljYWwgbmFtZSwgYXMgbmV0d29ya3MgbWlnaCBoYXZlIG11bHRpcGxlXG4gICAgICogIG5hbWVzLlxuICAgICAqL1xuICAgIGdldCBuYW1lKCkgeyByZXR1cm4gdGhpcy4jbmFtZTsgfVxuICAgIHNldCBuYW1lKHZhbHVlKSB7IHRoaXMuI25hbWUgPSB2YWx1ZTsgfVxuICAgIC8qKlxuICAgICAqICBUaGUgbmV0d29yayBjaGFpbiBJRC5cbiAgICAgKi9cbiAgICBnZXQgY2hhaW5JZCgpIHsgcmV0dXJuIHRoaXMuI2NoYWluSWQ7IH1cbiAgICBzZXQgY2hhaW5JZCh2YWx1ZSkgeyB0aGlzLiNjaGFpbklkID0gKDAsIGluZGV4X2pzXzIuZ2V0QmlnSW50KSh2YWx1ZSwgXCJjaGFpbklkXCIpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdHJ1ZSBpZiAlJW90aGVyJSUgbWF0Y2hlcyB0aGlzIG5ldHdvcmsuIEFueSBjaGFpbiBJRFxuICAgICAqICBtdXN0IG1hdGNoLCBhbmQgaWYgbm8gY2hhaW4gSUQgaXMgcHJlc2VudCwgdGhlIG5hbWUgbXVzdCBtYXRjaC5cbiAgICAgKlxuICAgICAqICBUaGlzIG1ldGhvZCBkb2VzIG5vdCBjdXJyZW50bHkgY2hlY2sgZm9yIGFkZGl0aW9uYWwgcHJvcGVydGllcyxcbiAgICAgKiAgc3VjaCBhcyBFTlMgYWRkcmVzcyBvciBwbHVnLWluIGNvbXBhdGliaWxpdHkuXG4gICAgICovXG4gICAgbWF0Y2hlcyhvdGhlcikge1xuICAgICAgICBpZiAob3RoZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgKG90aGVyKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuY2hhaW5JZCA9PT0gKDAsIGluZGV4X2pzXzIuZ2V0QmlnSW50KShvdGhlcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgICAgIHJldHVybiAodGhpcy5uYW1lID09PSBvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiAob3RoZXIpID09PSBcIm51bWJlclwiIHx8IHR5cGVvZiAob3RoZXIpID09PSBcImJpZ2ludFwiKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5jaGFpbklkID09PSAoMCwgaW5kZXhfanNfMi5nZXRCaWdJbnQpKG90aGVyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgKG90aGVyKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgaWYgKG90aGVyLmNoYWluSWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5jaGFpbklkID09PSAoMCwgaW5kZXhfanNfMi5nZXRCaWdJbnQpKG90aGVyLmNoYWluSWQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3RoZXIubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLm5hbWUgPT09IG90aGVyLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdGhlIGxpc3Qgb2YgcGx1Z2lucyBjdXJyZW50bHkgYXR0YWNoZWQgdG8gdGhpcyBOZXR3b3JrLlxuICAgICAqL1xuICAgIGdldCBwbHVnaW5zKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLiNwbHVnaW5zLnZhbHVlcygpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEF0dGFjaCBhIG5ldyAlJXBsdWdpbiUlIHRvIHRoaXMgTmV0d29yay4gVGhlIG5ldHdvcmsgbmFtZVxuICAgICAqICBtdXN0IGJlIHVuaXF1ZSwgZXhjbHVkaW5nIGFueSBmcmFnbWVudC5cbiAgICAgKi9cbiAgICBhdHRhY2hQbHVnaW4ocGx1Z2luKSB7XG4gICAgICAgIGlmICh0aGlzLiNwbHVnaW5zLmdldChwbHVnaW4ubmFtZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IHJlcGxhY2UgZXhpc3RpbmcgcGx1Z2luOiAke3BsdWdpbi5uYW1lfSBgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNwbHVnaW5zLnNldChwbHVnaW4ubmFtZSwgcGx1Z2luLmNsb25lKCkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiB0aGUgcGx1Z2luLCBpZiBhbnksIG1hdGNoaW5nICUlbmFtZSUlIGV4YWN0bHkuIFBsdWdpbnNcbiAgICAgKiAgd2l0aCBmcmFnbWVudHMgd2lsbCBub3QgYmUgcmV0dXJuZWQgdW5sZXNzICUlbmFtZSUlIGluY2x1ZGVzXG4gICAgICogIGEgZnJhZ21lbnQuXG4gICAgICovXG4gICAgZ2V0UGx1Z2luKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLiNwbHVnaW5zLmdldChuYW1lKSkgfHwgbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEdldHMgYSBsaXN0IG9mIGFsbCBwbHVnaW5zIHRoYXQgbWF0Y2ggJSVuYW1lJSUsIHdpdGggb3RyIHdpdGhvdXRcbiAgICAgKiAgYSBmcmFnbWVudC5cbiAgICAgKi9cbiAgICBnZXRQbHVnaW5zKGJhc2VuYW1lKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5wbHVnaW5zLmZpbHRlcigocCkgPT4gKHAubmFtZS5zcGxpdChcIiNcIilbMF0gPT09IGJhc2VuYW1lKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlIGEgY29weSBvZiB0aGlzIE5ldHdvcmsuXG4gICAgICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IGNsb25lID0gbmV3IE5ldHdvcmsodGhpcy5uYW1lLCB0aGlzLmNoYWluSWQpO1xuICAgICAgICB0aGlzLnBsdWdpbnMuZm9yRWFjaCgocGx1Z2luKSA9PiB7XG4gICAgICAgICAgICBjbG9uZS5hdHRhY2hQbHVnaW4ocGx1Z2luLmNsb25lKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQ29tcHV0ZSB0aGUgaW50cmluc2ljIGdhcyByZXF1aXJlZCBmb3IgYSB0cmFuc2FjdGlvbi5cbiAgICAgKlxuICAgICAqICBBIEdhc0Nvc3RQbHVnaW4gY2FuIGJlIGF0dGFjaGVkIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0XG4gICAgICogIHZhbHVlcy5cbiAgICAgKi9cbiAgICBjb21wdXRlSW50cmluc2ljR2FzKHR4KSB7XG4gICAgICAgIGNvbnN0IGNvc3RzID0gdGhpcy5nZXRQbHVnaW4oXCJvcmcuZXRoZXJzLnBsdWdpbnMubmV0d29yay5HYXNDb3N0XCIpIHx8IChuZXcgcGx1Z2luc19uZXR3b3JrX2pzXzEuR2FzQ29zdFBsdWdpbigpKTtcbiAgICAgICAgbGV0IGdhcyA9IGNvc3RzLnR4QmFzZTtcbiAgICAgICAgaWYgKHR4LnRvID09IG51bGwpIHtcbiAgICAgICAgICAgIGdhcyArPSBjb3N0cy50eENyZWF0ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHguZGF0YSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDI7IGkgPCB0eC5kYXRhLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR4LmRhdGEuc3Vic3RyaW5nKGksIGkgKyAyKSA9PT0gXCIwMFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGdhcyArPSBjb3N0cy50eERhdGFaZXJvO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZ2FzICs9IGNvc3RzLnR4RGF0YU5vbnplcm87XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eC5hY2Nlc3NMaXN0KSB7XG4gICAgICAgICAgICBjb25zdCBhY2Nlc3NMaXN0ID0gKDAsIGluZGV4X2pzXzEuYWNjZXNzTGlzdGlmeSkodHguYWNjZXNzTGlzdCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGFkZHIgaW4gYWNjZXNzTGlzdCkge1xuICAgICAgICAgICAgICAgIGdhcyArPSBjb3N0cy50eEFjY2Vzc0xpc3RBZGRyZXNzICsgY29zdHMudHhBY2Nlc3NMaXN0U3RvcmFnZUtleSAqIGFjY2Vzc0xpc3RbYWRkcl0uc3RvcmFnZUtleXMubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnYXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGEgbmV3IE5ldHdvcmsgZm9yIHRoZSAlJW5ldHdvcmslJSBuYW1lIG9yIGNoYWluSWQuXG4gICAgICovXG4gICAgc3RhdGljIGZyb20obmV0d29yaykge1xuICAgICAgICBpbmplY3RDb21tb25OZXR3b3JrcygpO1xuICAgICAgICAvLyBEZWZhdWx0IG5ldHdvcmtcbiAgICAgICAgaWYgKG5ldHdvcmsgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIE5ldHdvcmsuZnJvbShcIm1haW5uZXRcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2Fub25pY2FsIG5hbWUgb3IgY2hhaW4gSURcbiAgICAgICAgaWYgKHR5cGVvZiAobmV0d29yaykgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIG5ldHdvcmsgPSBCaWdJbnQobmV0d29yayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiAobmV0d29yaykgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIChuZXR3b3JrKSA9PT0gXCJiaWdpbnRcIikge1xuICAgICAgICAgICAgY29uc3QgbmV0d29ya0Z1bmMgPSBOZXR3b3Jrcy5nZXQobmV0d29yayk7XG4gICAgICAgICAgICBpZiAobmV0d29ya0Z1bmMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV0d29ya0Z1bmMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgKG5ldHdvcmspID09PSBcImJpZ2ludFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBOZXR3b3JrKFwidW5rbm93blwiLCBuZXR3b3JrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICgwLCBpbmRleF9qc18yLmFzc2VydEFyZ3VtZW50KShmYWxzZSwgXCJ1bmtub3duIG5ldHdvcmtcIiwgXCJuZXR3b3JrXCIsIG5ldHdvcmspO1xuICAgICAgICB9XG4gICAgICAgIC8vIENsb25hYmxlIHdpdGggbmV0d29yay1saWtlIGFiaWxpdGllc1xuICAgICAgICBpZiAodHlwZW9mIChuZXR3b3JrLmNsb25lKSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zdCBjbG9uZSA9IG5ldHdvcmsuY2xvbmUoKTtcbiAgICAgICAgICAgIC8vaWYgKHR5cGVvZihuZXR3b3JrLm5hbWUpICE9PSBcInN0cmluZ1wiIHx8IHR5cGVvZihuZXR3b3JrLmNoYWluSWQpICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAvL31cbiAgICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOZXR3b3JraXNoXG4gICAgICAgIGlmICh0eXBlb2YgKG5ldHdvcmspID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAoMCwgaW5kZXhfanNfMi5hc3NlcnRBcmd1bWVudCkodHlwZW9mIChuZXR3b3JrLm5hbWUpID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiAobmV0d29yay5jaGFpbklkKSA9PT0gXCJudW1iZXJcIiwgXCJpbnZhbGlkIG5ldHdvcmsgb2JqZWN0IG5hbWUgb3IgY2hhaW5JZFwiLCBcIm5ldHdvcmtcIiwgbmV0d29yayk7XG4gICAgICAgICAgICBjb25zdCBjdXN0b20gPSBuZXcgTmV0d29yaygobmV0d29yay5uYW1lKSwgKG5ldHdvcmsuY2hhaW5JZCkpO1xuICAgICAgICAgICAgaWYgKG5ldHdvcmsuZW5zQWRkcmVzcyB8fCBuZXR3b3JrLmVuc05ldHdvcmsgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGN1c3RvbS5hdHRhY2hQbHVnaW4obmV3IHBsdWdpbnNfbmV0d29ya19qc18xLkVuc1BsdWdpbihuZXR3b3JrLmVuc0FkZHJlc3MsIG5ldHdvcmsuZW5zTmV0d29yaykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9pZiAoKDxhbnk+bmV0d29yaykubGF5ZXJPbmVDb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAvLyAgICBjdXN0b20uYXR0YWNoUGx1Z2luKG5ldyBMYXllck9uZUNvbm5lY3Rpb25QbHVnaW4oKDxhbnk+bmV0d29yaykubGF5ZXJPbmVDb25uZWN0aW9uKSk7XG4gICAgICAgICAgICAvL31cbiAgICAgICAgICAgIHJldHVybiBjdXN0b207XG4gICAgICAgIH1cbiAgICAgICAgKDAsIGluZGV4X2pzXzIuYXNzZXJ0QXJndW1lbnQpKGZhbHNlLCBcImludmFsaWQgbmV0d29ya1wiLCBcIm5ldHdvcmtcIiwgbmV0d29yayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZWdpc3RlciAlJW5hbWVPckNoYWluSWQlJSB3aXRoIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJuc1xuICAgICAqICBhbiBpbnN0YW5jZSBvZiBhIE5ldHdvcmsgcmVwcmVzZW50aW5nIHRoYXQgY2hhaW4uXG4gICAgICovXG4gICAgc3RhdGljIHJlZ2lzdGVyKG5hbWVPckNoYWluSWQsIG5ldHdvcmtGdW5jKSB7XG4gICAgICAgIGlmICh0eXBlb2YgKG5hbWVPckNoYWluSWQpID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBuYW1lT3JDaGFpbklkID0gQmlnSW50KG5hbWVPckNoYWluSWQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gTmV0d29ya3MuZ2V0KG5hbWVPckNoYWluSWQpO1xuICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgICgwLCBpbmRleF9qc18yLmFzc2VydEFyZ3VtZW50KShmYWxzZSwgYGNvbmZsaWN0aW5nIG5ldHdvcmsgZm9yICR7SlNPTi5zdHJpbmdpZnkoZXhpc3RpbmcubmFtZSl9YCwgXCJuYW1lT3JDaGFpbklkXCIsIG5hbWVPckNoYWluSWQpO1xuICAgICAgICB9XG4gICAgICAgIE5ldHdvcmtzLnNldChuYW1lT3JDaGFpbklkLCBuZXR3b3JrRnVuYyk7XG4gICAgfVxufVxuZXhwb3J0cy5OZXR3b3JrID0gTmV0d29yaztcbi8vIFdlIGRvbid0IHdhbnQgdG8gYnJpbmcgaW4gZm9ybWF0VW5pdHMgYmVjYXVzZSBpdCBpcyBiYWNrZWQgYnlcbi8vIEZpeGVkTnVtYmVyIGFuZCB3ZSB3YW50IHRvIGtlZXAgTmV0d29ya3MgdGlueS4gVGhlIHZhbHVlc1xuLy8gaW5jbHVkZWQgYnkgdGhlIEdhcyBTdGF0aW9ucyBhcmUgYWxzbyBJRUVFIDc1NCB3aXRoIGxvdHMgb2Zcbi8vIHJvdW5kaW5nIGlzc3VlcyBhbmQgZXhjZWVkIHRoZSBzdHJpY3QgY2hlY2tzIGZvcm1hdFVuaXRzIGhhcy5cbmZ1bmN0aW9uIHBhcnNlVW5pdHMoX3ZhbHVlLCBkZWNpbWFscykge1xuICAgIGNvbnN0IHZhbHVlID0gU3RyaW5nKF92YWx1ZSk7XG4gICAgaWYgKCF2YWx1ZS5tYXRjaCgvXlswLTkuXSskLykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGd3ZWkgdmFsdWU6ICR7X3ZhbHVlfWApO1xuICAgIH1cbiAgICAvLyBCcmVhayBpbnRvIFsgd2hvbGUsIGZyYWN0aW9uIF1cbiAgICBjb25zdCBjb21wcyA9IHZhbHVlLnNwbGl0KFwiLlwiKTtcbiAgICBpZiAoY29tcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGNvbXBzLnB1c2goXCJcIik7XG4gICAgfVxuICAgIC8vIE1vcmUgdGhhbiAxIGRlY2ltYWwgcG9pbnQgb3IgdG9vIG1hbnkgZnJhY3Rpb25hbCBwb3NpdGlvbnNcbiAgICBpZiAoY29tcHMubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBnd2VpIHZhbHVlOiAke192YWx1ZX1gKTtcbiAgICB9XG4gICAgLy8gUGFkIHRoZSBmcmFjdGlvbiB0byA5IGRlY2ltYWxwbGFjZXNcbiAgICB3aGlsZSAoY29tcHNbMV0ubGVuZ3RoIDwgZGVjaW1hbHMpIHtcbiAgICAgICAgY29tcHNbMV0gKz0gXCIwXCI7XG4gICAgfVxuICAgIC8vIFRvbyBtYW55IGRlY2ltYWxzIGFuZCBzb21lIG5vbi16ZXJvIGVuZGluZywgdGFrZSB0aGUgY2VpbGluZ1xuICAgIGlmIChjb21wc1sxXS5sZW5ndGggPiA5KSB7XG4gICAgICAgIGxldCBmcmFjID0gQmlnSW50KGNvbXBzWzFdLnN1YnN0cmluZygwLCA5KSk7XG4gICAgICAgIGlmICghY29tcHNbMV0uc3Vic3RyaW5nKDkpLm1hdGNoKC9eMCskLykpIHtcbiAgICAgICAgICAgIGZyYWMrKztcbiAgICAgICAgfVxuICAgICAgICBjb21wc1sxXSA9IGZyYWMudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgcmV0dXJuIEJpZ0ludChjb21wc1swXSArIGNvbXBzWzFdKTtcbn1cbi8vIFVzZWQgYnkgUG9seWdvbiB0byB1c2UgYSBnYXMgc3RhdGlvbiBmb3IgZmVlIGRhdGFcbmZ1bmN0aW9uIGdldEdhc1N0YXRpb25QbHVnaW4odXJsKSB7XG4gICAgcmV0dXJuIG5ldyBwbHVnaW5zX25ldHdvcmtfanNfMS5GZXRjaFVybEZlZURhdGFOZXR3b3JrUGx1Z2luKHVybCwgYXN5bmMgKGZldGNoRmVlRGF0YSwgcHJvdmlkZXIsIHJlcXVlc3QpID0+IHtcbiAgICAgICAgLy8gUHJldmVudCBDbG91ZGZsYXJlIGZyb20gYmxvY2tpbmcgb3VyIHJlcXVlc3QgaW4gbm9kZS5qc1xuICAgICAgICByZXF1ZXN0LnNldEhlYWRlcihcIlVzZXItQWdlbnRcIiwgXCJldGhlcnNcIik7XG4gICAgICAgIGxldCByZXNwb25zZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IFtfcmVzcG9uc2UsIF9mZWVEYXRhXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnNlbmQoKSwgZmV0Y2hGZWVEYXRhKClcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgcmVzcG9uc2UgPSBfcmVzcG9uc2U7XG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gcmVzcG9uc2UuYm9keUpzb24uc3RhbmRhcmQ7XG4gICAgICAgICAgICBjb25zdCBmZWVEYXRhID0ge1xuICAgICAgICAgICAgICAgIGdhc1ByaWNlOiBfZmVlRGF0YS5nYXNQcmljZSxcbiAgICAgICAgICAgICAgICBtYXhGZWVQZXJHYXM6IHBhcnNlVW5pdHMocGF5bG9hZC5tYXhGZWUsIDkpLFxuICAgICAgICAgICAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzOiBwYXJzZVVuaXRzKHBheWxvYWQubWF4UHJpb3JpdHlGZWUsIDkpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBmZWVEYXRhO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgKDAsIGluZGV4X2pzXzIuYXNzZXJ0KShmYWxzZSwgYGVycm9yIGVuY291bnRlcmVkIHdpdGggcG9seWdvbiBnYXMgc3RhdGlvbiAoJHtKU09OLnN0cmluZ2lmeShyZXF1ZXN0LnVybCl9KWAsIFwiU0VSVkVSX0VSUk9SXCIsIHsgcmVxdWVzdCwgcmVzcG9uc2UsIGVycm9yIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vLyBVc2VkIGJ5IE9wdGltaXNtIGZvciBhIGN1c3RvbSBwcmlvcml0eSBmZWVcbmZ1bmN0aW9uIGdldFByaW9yaXR5RmVlUGx1Z2luKG1heFByaW9yaXR5RmVlUGVyR2FzKSB7XG4gICAgcmV0dXJuIG5ldyBwbHVnaW5zX25ldHdvcmtfanNfMS5GZXRjaFVybEZlZURhdGFOZXR3b3JrUGx1Z2luKFwiZGF0YTpcIiwgYXN5bmMgKGZldGNoRmVlRGF0YSwgcHJvdmlkZXIsIHJlcXVlc3QpID0+IHtcbiAgICAgICAgY29uc3QgZmVlRGF0YSA9IGF3YWl0IGZldGNoRmVlRGF0YSgpO1xuICAgICAgICAvLyBUaGlzIHNob3VsZCBhbHdheXMgZmFpbFxuICAgICAgICBpZiAoZmVlRGF0YS5tYXhGZWVQZXJHYXMgPT0gbnVsbCB8fCBmZWVEYXRhLm1heFByaW9yaXR5RmVlUGVyR2FzID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmZWVEYXRhO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvbXB1dGUgdGhlIGNvcnJlY3RlZCBiYXNlRmVlIHRvIHJlY29tcHV0ZSB0aGUgdXBkYXRlZCB2YWx1ZXNcbiAgICAgICAgY29uc3QgYmFzZUZlZSA9IGZlZURhdGEubWF4RmVlUGVyR2FzIC0gZmVlRGF0YS5tYXhQcmlvcml0eUZlZVBlckdhcztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdhc1ByaWNlOiBmZWVEYXRhLmdhc1ByaWNlLFxuICAgICAgICAgICAgbWF4RmVlUGVyR2FzOiAoYmFzZUZlZSArIG1heFByaW9yaXR5RmVlUGVyR2FzKSxcbiAgICAgICAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzXG4gICAgICAgIH07XG4gICAgfSk7XG59XG4vLyBTZWU6IGh0dHBzOi8vY2hhaW5saXN0Lm9yZ1xubGV0IGluamVjdGVkID0gZmFsc2U7XG5mdW5jdGlvbiBpbmplY3RDb21tb25OZXR3b3JrcygpIHtcbiAgICBpZiAoaW5qZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbmplY3RlZCA9IHRydWU7XG4gICAgLy8vIFJlZ2lzdGVyIHBvcHVsYXIgRXRoZXJldW0gbmV0d29ya3NcbiAgICBmdW5jdGlvbiByZWdpc3RlckV0aChuYW1lLCBjaGFpbklkLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zdCBuZXR3b3JrID0gbmV3IE5ldHdvcmsobmFtZSwgY2hhaW5JZCk7XG4gICAgICAgICAgICAvLyBXZSB1c2UgMCB0byBkaXNhYmxlIEVOU1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZW5zTmV0d29yayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbmV0d29yay5hdHRhY2hQbHVnaW4obmV3IHBsdWdpbnNfbmV0d29ya19qc18xLkVuc1BsdWdpbihudWxsLCBvcHRpb25zLmVuc05ldHdvcmspKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ldHdvcmsuYXR0YWNoUGx1Z2luKG5ldyBwbHVnaW5zX25ldHdvcmtfanNfMS5HYXNDb3N0UGx1Z2luKCkpO1xuICAgICAgICAgICAgKG9wdGlvbnMucGx1Z2lucyB8fCBbXSkuZm9yRWFjaCgocGx1Z2luKSA9PiB7XG4gICAgICAgICAgICAgICAgbmV0d29yay5hdHRhY2hQbHVnaW4ocGx1Z2luKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ldHdvcms7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFJlZ2lzdGVyIHRoZSBuZXR3b3JrIGJ5IG5hbWUgYW5kIGNoYWluIElEXG4gICAgICAgIE5ldHdvcmsucmVnaXN0ZXIobmFtZSwgZnVuYyk7XG4gICAgICAgIE5ldHdvcmsucmVnaXN0ZXIoY2hhaW5JZCwgZnVuYyk7XG4gICAgICAgIGlmIChvcHRpb25zLmFsdE5hbWVzKSB7XG4gICAgICAgICAgICBvcHRpb25zLmFsdE5hbWVzLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICBOZXR3b3JrLnJlZ2lzdGVyKG5hbWUsIGZ1bmMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVnaXN0ZXJFdGgoXCJtYWlubmV0XCIsIDEsIHsgZW5zTmV0d29yazogMSwgYWx0TmFtZXM6IFtcImhvbWVzdGVhZFwiXSB9KTtcbiAgICByZWdpc3RlckV0aChcInJvcHN0ZW5cIiwgMywgeyBlbnNOZXR3b3JrOiAzIH0pO1xuICAgIHJlZ2lzdGVyRXRoKFwicmlua2VieVwiLCA0LCB7IGVuc05ldHdvcms6IDQgfSk7XG4gICAgcmVnaXN0ZXJFdGgoXCJnb2VybGlcIiwgNSwgeyBlbnNOZXR3b3JrOiA1IH0pO1xuICAgIHJlZ2lzdGVyRXRoKFwia292YW5cIiwgNDIsIHsgZW5zTmV0d29yazogNDIgfSk7XG4gICAgcmVnaXN0ZXJFdGgoXCJzZXBvbGlhXCIsIDExMTU1MTExLCB7fSk7XG4gICAgcmVnaXN0ZXJFdGgoXCJjbGFzc2ljXCIsIDYxLCB7fSk7XG4gICAgcmVnaXN0ZXJFdGgoXCJjbGFzc2ljS290dGlcIiwgNiwge30pO1xuICAgIHJlZ2lzdGVyRXRoKFwiYXJiaXRydW1cIiwgNDIxNjEsIHtcbiAgICAgICAgZW5zTmV0d29yazogMSxcbiAgICB9KTtcbiAgICByZWdpc3RlckV0aChcImFyYml0cnVtLWdvZXJsaVwiLCA0MjE2MTMsIHt9KTtcbiAgICByZWdpc3RlckV0aChcImJuYlwiLCA1NiwgeyBlbnNOZXR3b3JrOiAxIH0pO1xuICAgIHJlZ2lzdGVyRXRoKFwiYm5idFwiLCA5Nywge30pO1xuICAgIHJlZ2lzdGVyRXRoKFwibGluZWFcIiwgNTkxNDQsIHsgZW5zTmV0d29yazogMSB9KTtcbiAgICByZWdpc3RlckV0aChcImxpbmVhLWdvZXJsaVwiLCA1OTE0MCwge30pO1xuICAgIHJlZ2lzdGVyRXRoKFwibWF0aWNcIiwgMTM3LCB7XG4gICAgICAgIGVuc05ldHdvcms6IDEsXG4gICAgICAgIHBsdWdpbnM6IFtcbiAgICAgICAgICAgIGdldEdhc1N0YXRpb25QbHVnaW4oXCJodHRwczovXFwvZ2Fzc3RhdGlvbi5wb2x5Z29uLnRlY2hub2xvZ3kvdjJcIilcbiAgICAgICAgXVxuICAgIH0pO1xuICAgIHJlZ2lzdGVyRXRoKFwibWF0aWMtbXVtYmFpXCIsIDgwMDAxLCB7XG4gICAgICAgIGFsdE5hbWVzOiBbXCJtYXRpY011bWJhaVwiLCBcIm1hdGljbXVtXCJdLFxuICAgICAgICBwbHVnaW5zOiBbXG4gICAgICAgICAgICBnZXRHYXNTdGF0aW9uUGx1Z2luKFwiaHR0cHM6L1xcL2dhc3N0YXRpb24tdGVzdG5ldC5wb2x5Z29uLnRlY2hub2xvZ3kvdjJcIilcbiAgICAgICAgXVxuICAgIH0pO1xuICAgIHJlZ2lzdGVyRXRoKFwib3B0aW1pc21cIiwgMTAsIHtcbiAgICAgICAgZW5zTmV0d29yazogMSxcbiAgICAgICAgcGx1Z2luczogW1xuICAgICAgICAgICAgZ2V0UHJpb3JpdHlGZWVQbHVnaW4oQmlnSW50KFwiMTAwMDAwMFwiKSlcbiAgICAgICAgXVxuICAgIH0pO1xuICAgIHJlZ2lzdGVyRXRoKFwib3B0aW1pc20tZ29lcmxpXCIsIDQyMCwge30pO1xuICAgIHJlZ2lzdGVyRXRoKFwieGRhaVwiLCAxMDAsIHsgZW5zTmV0d29yazogMSB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5ldHdvcmsuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTmV0d29yayIsImluZGV4X2pzXzEiLCJyZXF1aXJlIiwiaW5kZXhfanNfMiIsInBsdWdpbnNfbmV0d29ya19qc18xIiwiTmV0d29ya3MiLCJNYXAiLCJuYW1lIiwiY2hhaW5JZCIsInBsdWdpbnMiLCJjb25zdHJ1Y3RvciIsImdldEJpZ0ludCIsInRvSlNPTiIsIlN0cmluZyIsIm1hdGNoZXMiLCJvdGhlciIsImVycm9yIiwiQXJyYXkiLCJmcm9tIiwidmFsdWVzIiwiYXR0YWNoUGx1Z2luIiwicGx1Z2luIiwiZ2V0IiwiRXJyb3IiLCJzZXQiLCJjbG9uZSIsImdldFBsdWdpbiIsImdldFBsdWdpbnMiLCJiYXNlbmFtZSIsImZpbHRlciIsInAiLCJzcGxpdCIsImZvckVhY2giLCJjb21wdXRlSW50cmluc2ljR2FzIiwidHgiLCJjb3N0cyIsIkdhc0Nvc3RQbHVnaW4iLCJnYXMiLCJ0eEJhc2UiLCJ0byIsInR4Q3JlYXRlIiwiZGF0YSIsImkiLCJsZW5ndGgiLCJzdWJzdHJpbmciLCJ0eERhdGFaZXJvIiwidHhEYXRhTm9uemVybyIsImFjY2Vzc0xpc3QiLCJhY2Nlc3NMaXN0aWZ5IiwiYWRkciIsInR4QWNjZXNzTGlzdEFkZHJlc3MiLCJ0eEFjY2Vzc0xpc3RTdG9yYWdlS2V5Iiwic3RvcmFnZUtleXMiLCJuZXR3b3JrIiwiaW5qZWN0Q29tbW9uTmV0d29ya3MiLCJCaWdJbnQiLCJuZXR3b3JrRnVuYyIsImFzc2VydEFyZ3VtZW50IiwiY3VzdG9tIiwiZW5zQWRkcmVzcyIsImVuc05ldHdvcmsiLCJFbnNQbHVnaW4iLCJyZWdpc3RlciIsIm5hbWVPckNoYWluSWQiLCJleGlzdGluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJwYXJzZVVuaXRzIiwiX3ZhbHVlIiwiZGVjaW1hbHMiLCJtYXRjaCIsImNvbXBzIiwicHVzaCIsImZyYWMiLCJ0b1N0cmluZyIsImdldEdhc1N0YXRpb25QbHVnaW4iLCJ1cmwiLCJGZXRjaFVybEZlZURhdGFOZXR3b3JrUGx1Z2luIiwiZmV0Y2hGZWVEYXRhIiwicHJvdmlkZXIiLCJyZXF1ZXN0Iiwic2V0SGVhZGVyIiwicmVzcG9uc2UiLCJfcmVzcG9uc2UiLCJfZmVlRGF0YSIsIlByb21pc2UiLCJhbGwiLCJzZW5kIiwicGF5bG9hZCIsImJvZHlKc29uIiwic3RhbmRhcmQiLCJmZWVEYXRhIiwiZ2FzUHJpY2UiLCJtYXhGZWVQZXJHYXMiLCJtYXhGZWUiLCJtYXhQcmlvcml0eUZlZVBlckdhcyIsIm1heFByaW9yaXR5RmVlIiwiYXNzZXJ0IiwiZ2V0UHJpb3JpdHlGZWVQbHVnaW4iLCJiYXNlRmVlIiwiaW5qZWN0ZWQiLCJyZWdpc3RlckV0aCIsIm9wdGlvbnMiLCJmdW5jIiwiYWx0TmFtZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/network.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/plugins-network.js":
/*!***********************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/plugins-network.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FetchUrlFeeDataNetworkPlugin = exports.FeeDataNetworkPlugin = exports.EnsPlugin = exports.GasCostPlugin = exports.NetworkPlugin = void 0;\nconst properties_js_1 = __webpack_require__(/*! ../utils/properties.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/properties.js\");\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\n/**\n *  A **NetworkPlugin** provides additional functionality on a [[Network]].\n */ class NetworkPlugin {\n    /**\n     *  Creates a new **NetworkPlugin**.\n     */ constructor(name){\n        (0, properties_js_1.defineProperties)(this, {\n            name\n        });\n    }\n    /**\n     *  Creates a copy of this plugin.\n     */ clone() {\n        return new NetworkPlugin(this.name);\n    }\n}\nexports.NetworkPlugin = NetworkPlugin;\n/**\n *  A **GasCostPlugin** allows a network to provide alternative values when\n *  computing the intrinsic gas required for a transaction.\n */ class GasCostPlugin extends NetworkPlugin {\n    /**\n     *  Creates a new GasCostPlugin from %%effectiveBlock%% until the\n     *  latest block or another GasCostPlugin supercedes that block number,\n     *  with the associated %%costs%%.\n     */ constructor(effectiveBlock, costs){\n        if (effectiveBlock == null) {\n            effectiveBlock = 0;\n        }\n        super(`org.ethers.network.plugins.GasCost#${effectiveBlock || 0}`);\n        const props = {\n            effectiveBlock\n        };\n        function set(name, nullish) {\n            let value = (costs || {})[name];\n            if (value == null) {\n                value = nullish;\n            }\n            (0, index_js_1.assertArgument)(typeof value === \"number\", `invalud value for ${name}`, \"costs\", costs);\n            props[name] = value;\n        }\n        set(\"txBase\", 21000);\n        set(\"txCreate\", 32000);\n        set(\"txDataZero\", 4);\n        set(\"txDataNonzero\", 16);\n        set(\"txAccessListStorageKey\", 1900);\n        set(\"txAccessListAddress\", 2400);\n        (0, properties_js_1.defineProperties)(this, props);\n    }\n    clone() {\n        return new GasCostPlugin(this.effectiveBlock, this);\n    }\n}\nexports.GasCostPlugin = GasCostPlugin;\n/**\n *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry\n *  Contract address and the target network to use when using that\n *  contract.\n *\n *  Various testnets have their own instance of the contract to use, but\n *  in general, the mainnet instance supports multi-chain addresses and\n *  should be used.\n */ class EnsPlugin extends NetworkPlugin {\n    /**\n     *  Creates a new **EnsPlugin** connected to %%address%% on the\n     *  %%targetNetwork%%. The default ENS address and mainnet is used\n     *  if unspecified.\n     */ constructor(address, targetNetwork){\n        super(\"org.ethers.plugins.network.Ens\");\n        (0, properties_js_1.defineProperties)(this, {\n            address: address || EnsAddress,\n            targetNetwork: targetNetwork == null ? 1 : targetNetwork\n        });\n    }\n    clone() {\n        return new EnsPlugin(this.address, this.targetNetwork);\n    }\n}\nexports.EnsPlugin = EnsPlugin;\n/**\n *  A **FeeDataNetworkPlugin** allows a network to provide and alternate\n *  means to specify its fee data.\n *\n *  For example, a network which does not support [[link-eip-1559]] may\n *  choose to use a Gas Station site to approximate the gas price.\n */ class FeeDataNetworkPlugin extends NetworkPlugin {\n    #feeDataFunc;\n    /**\n     *  The fee data function provided to the constructor.\n     */ get feeDataFunc() {\n        return this.#feeDataFunc;\n    }\n    /**\n     *  Creates a new **FeeDataNetworkPlugin**.\n     */ constructor(feeDataFunc){\n        super(\"org.ethers.plugins.network.FeeData\");\n        this.#feeDataFunc = feeDataFunc;\n    }\n    /**\n     *  Resolves to the fee data.\n     */ async getFeeData(provider) {\n        return await this.#feeDataFunc(provider);\n    }\n    clone() {\n        return new FeeDataNetworkPlugin(this.#feeDataFunc);\n    }\n}\nexports.FeeDataNetworkPlugin = FeeDataNetworkPlugin;\nclass FetchUrlFeeDataNetworkPlugin extends NetworkPlugin {\n    #url;\n    #processFunc;\n    /**\n     *  The URL to initialize the FetchRequest with in %%processFunc%%.\n     */ get url() {\n        return this.#url;\n    }\n    /**\n     *  The callback to use when computing the FeeData.\n     */ get processFunc() {\n        return this.#processFunc;\n    }\n    /**\n     *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will\n     *  be used when computing the fee data for the network.\n     */ constructor(url, processFunc){\n        super(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\n        this.#url = url;\n        this.#processFunc = processFunc;\n    }\n    // We are immutable, so we can serve as our own clone\n    clone() {\n        return this;\n    }\n}\nexports.FetchUrlFeeDataNetworkPlugin = FetchUrlFeeDataNetworkPlugin; /*\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\n\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\n        super(\"org.ethers.network-plugins.custom-block\");\n        this.#blockFunc = blockFunc;\n        this.#blockWithTxsFunc = blockWithTxsFunc;\n    }\n\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\n        return await this.#blockFunc(provider, block);\n    }\n\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\n        return await this.#blockWithTxsFunc(provider, block);\n    }\n\n    clone(): CustomBlockNetworkPlugin {\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\n    }\n}\n*/  //# sourceMappingURL=plugins-network.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/plugins-network.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-alchemy.js":
/*!************************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/provider-alchemy.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AlchemyProvider = void 0;\n/**\n *  About Alchemy\n *\n *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]\n */ const index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst community_js_1 = __webpack_require__(/*! ./community.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/community.js\");\nconst network_js_1 = __webpack_require__(/*! ./network.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/network.js\");\nconst provider_jsonrpc_js_1 = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js\");\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nfunction getHost(name) {\n    switch(name){\n        case \"mainnet\":\n            return \"eth-mainnet.alchemyapi.io\";\n        case \"goerli\":\n            return \"eth-goerli.g.alchemy.com\";\n        case \"sepolia\":\n            return \"eth-sepolia.g.alchemy.com\";\n        case \"arbitrum\":\n            return \"arb-mainnet.g.alchemy.com\";\n        case \"arbitrum-goerli\":\n            return \"arb-goerli.g.alchemy.com\";\n        case \"matic\":\n            return \"polygon-mainnet.g.alchemy.com\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai.g.alchemy.com\";\n        case \"optimism\":\n            return \"opt-mainnet.g.alchemy.com\";\n        case \"optimism-goerli\":\n            return \"opt-goerli.g.alchemy.com\";\n    }\n    (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AlchemyProvider** connects to the [[link-alchemy]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-alchemy-signup).\n *\n *  @_docloc: api/providers/thirdparty\n */ class AlchemyProvider extends provider_jsonrpc_js_1.JsonRpcProvider {\n    constructor(_network, apiKey){\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = network_js_1.Network.from(_network);\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        const request = AlchemyProvider.getRequest(network, apiKey);\n        super(request, network, {\n            staticNetwork: network\n        });\n        (0, index_js_1.defineProperties)(this, {\n            apiKey\n        });\n    }\n    _getProvider(chainId) {\n        try {\n            return new AlchemyProvider(chainId, this.apiKey);\n        } catch (error) {}\n        return super._getProvider(chainId);\n    }\n    async _perform(req) {\n        // https://docs.alchemy.com/reference/trace-transaction\n        if (req.method === \"getTransactionResult\") {\n            const { trace, tx } = await (0, index_js_1.resolveProperties)({\n                trace: this.send(\"trace_transaction\", [\n                    req.hash\n                ]),\n                tx: this.getTransaction(req.hash)\n            });\n            if (trace == null || tx == null) {\n                return null;\n            }\n            let data;\n            let error = false;\n            try {\n                data = trace[0].result.output;\n                error = trace[0].error === \"Reverted\";\n            } catch (error) {}\n            if (data) {\n                (0, index_js_1.assert)(!error, \"an error occurred during transaction executions\", \"CALL_EXCEPTION\", {\n                    action: \"getTransactionResult\",\n                    data,\n                    reason: null,\n                    transaction: tx,\n                    invocation: null,\n                    revert: null // @TODO\n                });\n                return data;\n            }\n            (0, index_js_1.assert)(false, \"could not parse trace result\", \"BAD_DATA\", {\n                value: trace\n            });\n        }\n        return await super._perform(req);\n    }\n    isCommunityResource() {\n        return this.apiKey === defaultApiKey;\n    }\n    static getRequest(network, apiKey) {\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        const request = new index_js_1.FetchRequest(`https:/\\/${getHost(network.name)}/v2/${apiKey}`);\n        request.allowGzip = true;\n        if (apiKey === defaultApiKey) {\n            request.retryFunc = async (request, response, attempt)=>{\n                (0, community_js_1.showThrottleMessage)(\"alchemy\");\n                return true;\n            };\n        }\n        return request;\n    }\n}\nexports.AlchemyProvider = AlchemyProvider; //# sourceMappingURL=provider-alchemy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-alchemy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-ankr.js":
/*!*********************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/provider-ankr.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AnkrProvider = void 0;\n/**\n *  [[link-ankr]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Ankr  [providers-ankr]\n */ const index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst community_js_1 = __webpack_require__(/*! ./community.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/community.js\");\nconst network_js_1 = __webpack_require__(/*! ./network.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/network.js\");\nconst provider_jsonrpc_js_1 = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js\");\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\nfunction getHost(name) {\n    switch(name){\n        case \"mainnet\":\n            return \"rpc.ankr.com/eth\";\n        case \"goerli\":\n            return \"rpc.ankr.com/eth_goerli\";\n        case \"matic\":\n            return \"rpc.ankr.com/polygon\";\n        case \"arbitrum\":\n            return \"rpc.ankr.com/arbitrum\";\n    }\n    (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AnkrProvider** connects to the [[link-ankr]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-ankr-signup).\n */ class AnkrProvider extends provider_jsonrpc_js_1.JsonRpcProvider {\n    /**\n     *  Create a new **AnkrProvider**.\n     *\n     *  By default connecting to ``mainnet`` with a highly throttled\n     *  API key.\n     */ constructor(_network, apiKey){\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = network_js_1.Network.from(_network);\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        // Ankr does not support filterId, so we force polling\n        const options = {\n            polling: true,\n            staticNetwork: network\n        };\n        const request = AnkrProvider.getRequest(network, apiKey);\n        super(request, network, options);\n        (0, index_js_1.defineProperties)(this, {\n            apiKey\n        });\n    }\n    _getProvider(chainId) {\n        try {\n            return new AnkrProvider(chainId, this.apiKey);\n        } catch (error) {}\n        return super._getProvider(chainId);\n    }\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%apiKey%%.\n     */ static getRequest(network, apiKey) {\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        const request = new index_js_1.FetchRequest(`https:/\\/${getHost(network.name)}/${apiKey}`);\n        request.allowGzip = true;\n        if (apiKey === defaultApiKey) {\n            request.retryFunc = async (request, response, attempt)=>{\n                (0, community_js_1.showThrottleMessage)(\"AnkrProvider\");\n                return true;\n            };\n        }\n        return request;\n    }\n    getRpcError(payload, error) {\n        if (payload.method === \"eth_sendRawTransaction\") {\n            if (error && error.error && error.error.message === \"INTERNAL_ERROR: could not replace existing tx\") {\n                error.error.message = \"replacement transaction underpriced\";\n            }\n        }\n        return super.getRpcError(payload, error);\n    }\n    isCommunityResource() {\n        return this.apiKey === defaultApiKey;\n    }\n}\nexports.AnkrProvider = AnkrProvider; //# sourceMappingURL=provider-ankr.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-ankr.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-browser.js":
/*!************************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/provider-browser.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BrowserProvider = void 0;\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst provider_jsonrpc_js_1 = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js\");\n;\n/**\n *  A **BrowserProvider** is intended to wrap an injected provider which\n *  adheres to the [[link-eip-1193]] standard, which most (if not all)\n *  currently do.\n */ class BrowserProvider extends provider_jsonrpc_js_1.JsonRpcApiPollingProvider {\n    #request;\n    /**\n     *  Connnect to the %%ethereum%% provider, optionally forcing the\n     *  %%network%%.\n     */ constructor(ethereum, network){\n        super(network, {\n            batchMaxCount: 1\n        });\n        this.#request = async (method, params)=>{\n            const payload = {\n                method,\n                params\n            };\n            this.emit(\"debug\", {\n                action: \"sendEip1193Request\",\n                payload\n            });\n            try {\n                const result = await ethereum.request(payload);\n                this.emit(\"debug\", {\n                    action: \"receiveEip1193Result\",\n                    result\n                });\n                return result;\n            } catch (e) {\n                const error = new Error(e.message);\n                error.code = e.code;\n                error.data = e.data;\n                error.payload = payload;\n                this.emit(\"debug\", {\n                    action: \"receiveEip1193Error\",\n                    error\n                });\n                throw error;\n            }\n        };\n    }\n    async send(method, params) {\n        await this._start();\n        return await super.send(method, params);\n    }\n    async _send(payload) {\n        (0, index_js_1.assertArgument)(!Array.isArray(payload), \"EIP-1193 does not support batch request\", \"payload\", payload);\n        try {\n            const result = await this.#request(payload.method, payload.params || []);\n            return [\n                {\n                    id: payload.id,\n                    result\n                }\n            ];\n        } catch (e) {\n            return [\n                {\n                    id: payload.id,\n                    error: {\n                        code: e.code,\n                        data: e.data,\n                        message: e.message\n                    }\n                }\n            ];\n        }\n    }\n    getRpcError(payload, error) {\n        error = JSON.parse(JSON.stringify(error));\n        // EIP-1193 gives us some machine-readable error codes, so rewrite\n        // them into \n        switch(error.error.code || -1){\n            case 4001:\n                error.error.message = `ethers-user-denied: ${error.error.message}`;\n                break;\n            case 4200:\n                error.error.message = `ethers-unsupported: ${error.error.message}`;\n                break;\n        }\n        return super.getRpcError(payload, error);\n    }\n    /**\n     *  Resolves to ``true`` if the provider manages the %%address%%.\n     */ async hasSigner(address) {\n        if (address == null) {\n            address = 0;\n        }\n        const accounts = await this.send(\"eth_accounts\", []);\n        if (typeof address === \"number\") {\n            return accounts.length > address;\n        }\n        address = address.toLowerCase();\n        return accounts.filter((a)=>a.toLowerCase() === address).length !== 0;\n    }\n    async getSigner(address) {\n        if (address == null) {\n            address = 0;\n        }\n        if (!await this.hasSigner(address)) {\n            try {\n                //const resp = \n                await this.#request(\"eth_requestAccounts\", []);\n            //console.log(\"RESP\", resp);\n            } catch (error) {\n                const payload = error.payload;\n                throw this.getRpcError(payload, {\n                    id: payload.id,\n                    error\n                });\n            }\n        }\n        return await super.getSigner(address);\n    }\n}\nexports.BrowserProvider = BrowserProvider; //# sourceMappingURL=provider-browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-browser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-cloudflare.js":
/*!***************************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/provider-cloudflare.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  About Cloudflare\n *\n *  @_subsection: api/providers/thirdparty:Cloudflare  [providers-cloudflare]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CloudflareProvider = void 0;\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst network_js_1 = __webpack_require__(/*! ./network.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/network.js\");\nconst provider_jsonrpc_js_1 = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js\");\n/**\n *  About Cloudflare...\n */ class CloudflareProvider extends provider_jsonrpc_js_1.JsonRpcProvider {\n    constructor(_network){\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = network_js_1.Network.from(_network);\n        (0, index_js_1.assertArgument)(network.name === \"mainnet\", \"unsupported network\", \"network\", _network);\n        super(\"https://cloudflare-eth.com/\", network, {\n            staticNetwork: network\n        });\n    }\n}\nexports.CloudflareProvider = CloudflareProvider; //# sourceMappingURL=provider-cloudflare.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9wcm92aWRlcnMvcHJvdmlkZXItY2xvdWRmbGFyZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7O0NBSUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDBCQUEwQixHQUFHLEtBQUs7QUFDbEMsTUFBTUcsYUFBYUMsbUJBQU9BLENBQUMsa0ZBQW1CO0FBQzlDLE1BQU1DLGVBQWVELG1CQUFPQSxDQUFDLG1GQUFjO0FBQzNDLE1BQU1FLHdCQUF3QkYsbUJBQU9BLENBQUMscUdBQXVCO0FBQzdEOztDQUVDLEdBQ0QsTUFBTUYsMkJBQTJCSSxzQkFBc0JDLGVBQWU7SUFDbEVDLFlBQVlDLFFBQVEsQ0FBRTtRQUNsQixJQUFJQSxZQUFZLE1BQU07WUFDbEJBLFdBQVc7UUFDZjtRQUNBLE1BQU1DLFVBQVVMLGFBQWFNLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDSDtRQUN6QyxJQUFHTixXQUFXVSxjQUFjLEVBQUVILFFBQVFJLElBQUksS0FBSyxXQUFXLHVCQUF1QixXQUFXTDtRQUM3RixLQUFLLENBQUMsK0JBQWdDQyxTQUFTO1lBQUVLLGVBQWVMO1FBQVE7SUFDNUU7QUFDSjtBQUNBViwwQkFBMEIsR0FBR0Usb0JBQzdCLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL3Byb3ZpZGVycy9wcm92aWRlci1jbG91ZGZsYXJlLmpzPzBmNzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqICBBYm91dCBDbG91ZGZsYXJlXG4gKlxuICogIEBfc3Vic2VjdGlvbjogYXBpL3Byb3ZpZGVycy90aGlyZHBhcnR5OkNsb3VkZmxhcmUgIFtwcm92aWRlcnMtY2xvdWRmbGFyZV1cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DbG91ZGZsYXJlUHJvdmlkZXIgPSB2b2lkIDA7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4uL3V0aWxzL2luZGV4LmpzXCIpO1xuY29uc3QgbmV0d29ya19qc18xID0gcmVxdWlyZShcIi4vbmV0d29yay5qc1wiKTtcbmNvbnN0IHByb3ZpZGVyX2pzb25ycGNfanNfMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVyLWpzb25ycGMuanNcIik7XG4vKipcbiAqICBBYm91dCBDbG91ZGZsYXJlLi4uXG4gKi9cbmNsYXNzIENsb3VkZmxhcmVQcm92aWRlciBleHRlbmRzIHByb3ZpZGVyX2pzb25ycGNfanNfMS5Kc29uUnBjUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKF9uZXR3b3JrKSB7XG4gICAgICAgIGlmIChfbmV0d29yayA9PSBudWxsKSB7XG4gICAgICAgICAgICBfbmV0d29yayA9IFwibWFpbm5ldFwiO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ldHdvcmsgPSBuZXR3b3JrX2pzXzEuTmV0d29yay5mcm9tKF9uZXR3b3JrKTtcbiAgICAgICAgKDAsIGluZGV4X2pzXzEuYXNzZXJ0QXJndW1lbnQpKG5ldHdvcmsubmFtZSA9PT0gXCJtYWlubmV0XCIsIFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiLCBcIm5ldHdvcmtcIiwgX25ldHdvcmspO1xuICAgICAgICBzdXBlcihcImh0dHBzOi9cXC9jbG91ZGZsYXJlLWV0aC5jb20vXCIsIG5ldHdvcmssIHsgc3RhdGljTmV0d29yazogbmV0d29yayB9KTtcbiAgICB9XG59XG5leHBvcnRzLkNsb3VkZmxhcmVQcm92aWRlciA9IENsb3VkZmxhcmVQcm92aWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLWNsb3VkZmxhcmUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ2xvdWRmbGFyZVByb3ZpZGVyIiwiaW5kZXhfanNfMSIsInJlcXVpcmUiLCJuZXR3b3JrX2pzXzEiLCJwcm92aWRlcl9qc29ucnBjX2pzXzEiLCJKc29uUnBjUHJvdmlkZXIiLCJjb25zdHJ1Y3RvciIsIl9uZXR3b3JrIiwibmV0d29yayIsIk5ldHdvcmsiLCJmcm9tIiwiYXNzZXJ0QXJndW1lbnQiLCJuYW1lIiwic3RhdGljTmV0d29yayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-cloudflare.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-etherscan.js":
/*!**************************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/provider-etherscan.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  [[link-etherscan]] provides a third-party service for connecting to\n *  various blockchains over a combination of JSON-RPC and custom API\n *  endpoints.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection api/providers/thirdparty:Etherscan  [providers-etherscan]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.EtherscanProvider = exports.EtherscanPlugin = void 0;\nconst index_js_1 = __webpack_require__(/*! ../abi/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../contract/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/contract/index.js\");\nconst index_js_3 = __webpack_require__(/*! ../transaction/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/transaction/index.js\");\nconst index_js_4 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst abstract_provider_js_1 = __webpack_require__(/*! ./abstract-provider.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/abstract-provider.js\");\nconst network_js_1 = __webpack_require__(/*! ./network.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/network.js\");\nconst plugins_network_js_1 = __webpack_require__(/*! ./plugins-network.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/plugins-network.js\");\nconst community_js_1 = __webpack_require__(/*! ./community.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/community.js\");\nconst THROTTLE = 2000;\nfunction isPromise(value) {\n    return value && typeof value.then === \"function\";\n}\nconst EtherscanPluginId = \"org.ethers.plugins.provider.Etherscan\";\n/**\n *  A Network can include an **EtherscanPlugin** to provide\n *  a custom base URL.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */ class EtherscanPlugin extends plugins_network_js_1.NetworkPlugin {\n    /**\n     *  Creates a new **EtherscanProvider** which will use\n     *  %%baseUrl%%.\n     */ constructor(baseUrl){\n        super(EtherscanPluginId);\n        (0, index_js_4.defineProperties)(this, {\n            baseUrl\n        });\n    }\n    clone() {\n        return new EtherscanPlugin(this.baseUrl);\n    }\n}\nexports.EtherscanPlugin = EtherscanPlugin;\nconst skipKeys = [\n    \"enableCcipRead\"\n];\nlet nextId = 1;\n/**\n *  The **EtherscanBaseProvider** is the super-class of\n *  [[EtherscanProvider]], which should generally be used instead.\n *\n *  Since the **EtherscanProvider** includes additional code for\n *  [[Contract]] access, in //rare cases// that contracts are not\n *  used, this class can reduce code size.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */ class EtherscanProvider extends abstract_provider_js_1.AbstractProvider {\n    #plugin;\n    /**\n     *  Creates a new **EtherscanBaseProvider**.\n     */ constructor(_network, _apiKey){\n        const apiKey = _apiKey != null ? _apiKey : null;\n        super();\n        const network = network_js_1.Network.from(_network);\n        this.#plugin = network.getPlugin(EtherscanPluginId);\n        (0, index_js_4.defineProperties)(this, {\n            apiKey,\n            network\n        });\n        // Test that the network is supported by Etherscan\n        this.getBaseUrl();\n    }\n    /**\n     *  Returns the base URL.\n     *\n     *  If an [[EtherscanPlugin]] is configured on the\n     *  [[EtherscanBaseProvider_network]], returns the plugin's\n     *  baseUrl.\n     */ getBaseUrl() {\n        if (this.#plugin) {\n            return this.#plugin.baseUrl;\n        }\n        switch(this.network.name){\n            case \"mainnet\":\n                return \"https://api.etherscan.io\";\n            case \"goerli\":\n                return \"https://api-goerli.etherscan.io\";\n            case \"sepolia\":\n                return \"https://api-sepolia.etherscan.io\";\n            case \"arbitrum\":\n                return \"https://api.arbiscan.io\";\n            case \"arbitrum-goerli\":\n                return \"https://api-goerli.arbiscan.io\";\n            case \"matic\":\n                return \"https://api.polygonscan.com\";\n            case \"matic-mumbai\":\n                return \"https://api-testnet.polygonscan.com\";\n            case \"optimism\":\n                return \"https://api-optimistic.etherscan.io\";\n            case \"optimism-goerli\":\n                return \"https://api-goerli-optimistic.etherscan.io\";\n            case \"bnb\":\n                return \"http://api.bscscan.com\";\n            case \"bnbt\":\n                return \"http://api-testnet.bscscan.com\";\n            default:\n        }\n        (0, index_js_4.assertArgument)(false, \"unsupported network\", \"network\", this.network);\n    }\n    /**\n     *  Returns the URL for the %%module%% and %%params%%.\n     */ getUrl(module, params) {\n        const query = Object.keys(params).reduce((accum, key)=>{\n            const value = params[key];\n            if (value != null) {\n                accum += `&${key}=${value}`;\n            }\n            return accum;\n        }, \"\");\n        const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : \"\";\n        return `${this.getBaseUrl()}/api?module=${module}${query}${apiKey}`;\n    }\n    /**\n     *  Returns the URL for using POST requests.\n     */ getPostUrl() {\n        return `${this.getBaseUrl()}/api`;\n    }\n    /**\n     *  Returns the parameters for using POST requests.\n     */ getPostData(module, params) {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n    async detectNetwork() {\n        return this.network;\n    }\n    /**\n     *  Resolves to the result of calling %%module%% with %%params%%.\n     *\n     *  If %%post%%, the request is made as a POST request.\n     */ async fetch(module, params, post) {\n        const id = nextId++;\n        const url = post ? this.getPostUrl() : this.getUrl(module, params);\n        const payload = post ? this.getPostData(module, params) : null;\n        this.emit(\"debug\", {\n            action: \"sendRequest\",\n            id,\n            url,\n            payload: payload\n        });\n        const request = new index_js_4.FetchRequest(url);\n        request.setThrottleParams({\n            slotInterval: 1000\n        });\n        request.retryFunc = (req, resp, attempt)=>{\n            if (this.isCommunityResource()) {\n                (0, community_js_1.showThrottleMessage)(\"Etherscan\");\n            }\n            return Promise.resolve(true);\n        };\n        request.processFunc = async (request, response)=>{\n            const result = response.hasBody() ? JSON.parse((0, index_js_4.toUtf8String)(response.body)) : {};\n            const throttle = (typeof result.result === \"string\" ? result.result : \"\").toLowerCase().indexOf(\"rate limit\") >= 0;\n            if (module === \"proxy\") {\n                // This JSON response indicates we are being throttled\n                if (result && result.status == 0 && result.message == \"NOTOK\" && throttle) {\n                    this.emit(\"debug\", {\n                        action: \"receiveError\",\n                        id,\n                        reason: \"proxy-NOTOK\",\n                        error: result\n                    });\n                    response.throwThrottleError(result.result, THROTTLE);\n                }\n            } else {\n                if (throttle) {\n                    this.emit(\"debug\", {\n                        action: \"receiveError\",\n                        id,\n                        reason: \"null result\",\n                        error: result.result\n                    });\n                    response.throwThrottleError(result.result, THROTTLE);\n                }\n            }\n            return response;\n        };\n        if (payload) {\n            request.setHeader(\"content-type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n            request.body = Object.keys(payload).map((k)=>`${k}=${payload[k]}`).join(\"&\");\n        }\n        const response = await request.send();\n        try {\n            response.assertOk();\n        } catch (error) {\n            this.emit(\"debug\", {\n                action: \"receiveError\",\n                id,\n                error,\n                reason: \"assertOk\"\n            });\n            (0, index_js_4.assert)(false, \"response error\", \"SERVER_ERROR\", {\n                request,\n                response\n            });\n        }\n        if (!response.hasBody()) {\n            this.emit(\"debug\", {\n                action: \"receiveError\",\n                id,\n                error: \"missing body\",\n                reason: \"null body\"\n            });\n            (0, index_js_4.assert)(false, \"missing response\", \"SERVER_ERROR\", {\n                request,\n                response\n            });\n        }\n        const result = JSON.parse((0, index_js_4.toUtf8String)(response.body));\n        if (module === \"proxy\") {\n            if (result.jsonrpc != \"2.0\") {\n                this.emit(\"debug\", {\n                    action: \"receiveError\",\n                    id,\n                    result,\n                    reason: \"invalid JSON-RPC\"\n                });\n                (0, index_js_4.assert)(false, \"invalid JSON-RPC response (missing jsonrpc='2.0')\", \"SERVER_ERROR\", {\n                    request,\n                    response,\n                    info: {\n                        result\n                    }\n                });\n            }\n            if (result.error) {\n                this.emit(\"debug\", {\n                    action: \"receiveError\",\n                    id,\n                    result,\n                    reason: \"JSON-RPC error\"\n                });\n                (0, index_js_4.assert)(false, \"error response\", \"SERVER_ERROR\", {\n                    request,\n                    response,\n                    info: {\n                        result\n                    }\n                });\n            }\n            this.emit(\"debug\", {\n                action: \"receiveRequest\",\n                id,\n                result\n            });\n            return result.result;\n        } else {\n            // getLogs, getHistory have weird success responses\n            if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n                this.emit(\"debug\", {\n                    action: \"receiveRequest\",\n                    id,\n                    result\n                });\n                return result.result;\n            }\n            if (result.status != 1 || typeof result.message === \"string\" && !result.message.match(/^OK/)) {\n                this.emit(\"debug\", {\n                    action: \"receiveError\",\n                    id,\n                    result\n                });\n                (0, index_js_4.assert)(false, \"error response\", \"SERVER_ERROR\", {\n                    request,\n                    response,\n                    info: {\n                        result\n                    }\n                });\n            }\n            this.emit(\"debug\", {\n                action: \"receiveRequest\",\n                id,\n                result\n            });\n            return result.result;\n        }\n    }\n    /**\n     *  Returns %%transaction%% normalized for the Etherscan API.\n     */ _getTransactionPostData(transaction) {\n        const result = {};\n        for(let key in transaction){\n            if (skipKeys.indexOf(key) >= 0) {\n                continue;\n            }\n            if (transaction[key] == null) {\n                continue;\n            }\n            let value = transaction[key];\n            if (key === \"type\" && value === 0) {\n                continue;\n            }\n            if (key === \"blockTag\" && value === \"latest\") {\n                continue;\n            }\n            // Quantity-types require no leading zero, unless 0\n            if (({\n                type: true,\n                gasLimit: true,\n                gasPrice: true,\n                maxFeePerGs: true,\n                maxPriorityFeePerGas: true,\n                nonce: true,\n                value: true\n            })[key]) {\n                value = (0, index_js_4.toQuantity)(value);\n            } else if (key === \"accessList\") {\n                value = \"[\" + (0, index_js_3.accessListify)(value).map((set)=>{\n                    return `{address:\"${set.address}\",storageKeys:[\"${set.storageKeys.join('\",\"')}\"]}`;\n                }).join(\",\") + \"]\";\n            } else {\n                value = (0, index_js_4.hexlify)(value);\n            }\n            result[key] = value;\n        }\n        return result;\n    }\n    /**\n     *  Throws the normalized Etherscan error.\n     */ _checkError(req, error, transaction) {\n        // Pull any message out if, possible\n        let message = \"\";\n        if ((0, index_js_4.isError)(error, \"SERVER_ERROR\")) {\n            // Check for an error emitted by a proxy call\n            try {\n                message = error.info.result.error.message;\n            } catch (e) {}\n            if (!message) {\n                try {\n                    message = error.info.message;\n                } catch (e) {}\n            }\n        }\n        if (req.method === \"estimateGas\") {\n            if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {\n                (0, index_js_4.assert)(false, \"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n                    transaction: req.transaction\n                });\n            }\n        }\n        if (req.method === \"call\" || req.method === \"estimateGas\") {\n            if (message.match(/execution reverted/i)) {\n                let data = \"\";\n                try {\n                    data = error.info.result.error.data;\n                } catch (error) {}\n                const e = index_js_1.AbiCoder.getBuiltinCallException(req.method, req.transaction, data);\n                e.info = {\n                    request: req,\n                    error\n                };\n                throw e;\n            }\n        }\n        if (message) {\n            if (req.method === \"broadcastTransaction\") {\n                const transaction = index_js_3.Transaction.from(req.signedTransaction);\n                if (message.match(/replacement/i) && message.match(/underpriced/i)) {\n                    (0, index_js_4.assert)(false, \"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n                        transaction\n                    });\n                }\n                if (message.match(/insufficient funds/)) {\n                    (0, index_js_4.assert)(false, \"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n                        transaction\n                    });\n                }\n                if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n                    (0, index_js_4.assert)(false, \"nonce has already been used\", \"NONCE_EXPIRED\", {\n                        transaction\n                    });\n                }\n            }\n        }\n        // Something we could not process\n        throw error;\n    }\n    async _detectNetwork() {\n        return this.network;\n    }\n    async _perform(req) {\n        switch(req.method){\n            case \"chainId\":\n                return this.network.chainId;\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_blockNumber\"\n                });\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_gasPrice\"\n                });\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n            case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n            case \"getStorage\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: req.address,\n                    position: req.position,\n                    tag: req.blockTag\n                });\n            case \"broadcastTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: req.signedTransaction\n                }, true).catch((error)=>{\n                    return this._checkError(req, error, req.signedTransaction);\n                });\n            case \"getBlock\":\n                if (\"blockTag\" in req) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: req.blockTag,\n                        boolean: req.includeTransactions ? \"true\" : \"false\"\n                    });\n                }\n                (0, index_js_4.assert)(false, \"getBlock by blockHash not supported by Etherscan\", \"UNSUPPORTED_OPERATION\", {\n                    operation: \"getBlock(blockHash)\"\n                });\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: req.hash\n                });\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: req.hash\n                });\n            case \"call\":\n                {\n                    if (req.blockTag !== \"latest\") {\n                        throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                    }\n                    const postData = this._getTransactionPostData(req.transaction);\n                    postData.module = \"proxy\";\n                    postData.action = \"eth_call\";\n                    try {\n                        return await this.fetch(\"proxy\", postData, true);\n                    } catch (error) {\n                        return this._checkError(req, error, req.transaction);\n                    }\n                }\n            case \"estimateGas\":\n                {\n                    const postData = this._getTransactionPostData(req.transaction);\n                    postData.module = \"proxy\";\n                    postData.action = \"eth_estimateGas\";\n                    try {\n                        return await this.fetch(\"proxy\", postData, true);\n                    } catch (error) {\n                        return this._checkError(req, error, req.transaction);\n                    }\n                }\n            /*\n                        case \"getLogs\": {\n                            // Needs to complain if more than one address is passed in\n                            const args: Record<string, any> = { action: \"getLogs\" }\n            \n                            if (params.filter.fromBlock) {\n                                args.fromBlock = checkLogTag(params.filter.fromBlock);\n                            }\n            \n                            if (params.filter.toBlock) {\n                                args.toBlock = checkLogTag(params.filter.toBlock);\n                            }\n            \n                            if (params.filter.address) {\n                                args.address = params.filter.address;\n                            }\n            \n                            // @TODO: We can handle slightly more complicated logs using the logs API\n                            if (params.filter.topics && params.filter.topics.length > 0) {\n                                if (params.filter.topics.length > 1) {\n                                    logger.throwError(\"unsupported topic count\", Logger.Errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                                }\n                                if (params.filter.topics.length === 1) {\n                                    const topic0 = params.filter.topics[0];\n                                    if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                                        logger.throwError(\"unsupported topic format\", Logger.Errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                                    }\n                                    args.topic0 = topic0;\n                                }\n                            }\n            \n                            const logs: Array<any> = await this.fetch(\"logs\", args);\n            \n                            // Cache txHash => blockHash\n                            let blocks: { [tag: string]: string } = {};\n            \n                            // Add any missing blockHash to the logs\n                            for (let i = 0; i < logs.length; i++) {\n                                const log = logs[i];\n                                if (log.blockHash != null) { continue; }\n                                if (blocks[log.blockNumber] == null) {\n                                    const block = await this.getBlock(log.blockNumber);\n                                    if (block) {\n                                        blocks[log.blockNumber] = block.hash;\n                                    }\n                                }\n            \n                                log.blockHash = blocks[log.blockNumber];\n                            }\n            \n                            return logs;\n                        }\n            */ default:\n                break;\n        }\n        return super._perform(req);\n    }\n    async getNetwork() {\n        return this.network;\n    }\n    /**\n     *  Resolves to the current price of ether.\n     *\n     *  This returns ``0`` on any network other than ``mainnet``.\n     */ async getEtherPrice() {\n        if (this.network.name !== \"mainnet\") {\n            return 0.0;\n        }\n        return parseFloat((await this.fetch(\"stats\", {\n            action: \"ethprice\"\n        })).ethusd);\n    }\n    /**\n     *  Resolves to a [Contract]] for %%address%%, using the\n     *  Etherscan API to retreive the Contract ABI.\n     */ async getContract(_address) {\n        let address = this._getAddress(_address);\n        if (isPromise(address)) {\n            address = await address;\n        }\n        try {\n            const resp = await this.fetch(\"contract\", {\n                action: \"getabi\",\n                address\n            });\n            const abi = JSON.parse(resp);\n            return new index_js_2.Contract(address, abi, this);\n        } catch (error) {\n            return null;\n        }\n    }\n    isCommunityResource() {\n        return this.apiKey == null;\n    }\n}\nexports.EtherscanProvider = EtherscanProvider; //# sourceMappingURL=provider-etherscan.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-etherscan.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-fallback.js":
/*!*************************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/provider-fallback.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FallbackProvider = void 0;\n/**\n *  A **FallbackProvider** providers resiliance, security and performatnce\n *  in a way that is customizable and configurable.\n *\n *  @_section: api/providers/fallback-provider:Fallback Provider [about-fallback-provider]\n */ const index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst abstract_provider_js_1 = __webpack_require__(/*! ./abstract-provider.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/abstract-provider.js\");\nconst network_js_1 = __webpack_require__(/*! ./network.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/network.js\");\nconst BN_1 = BigInt(\"1\");\nconst BN_2 = BigInt(\"2\");\nfunction shuffle(array) {\n    for(let i = array.length - 1; i > 0; i--){\n        const j = Math.floor(Math.random() * (i + 1));\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n    }\n}\nfunction stall(duration) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, duration);\n    });\n}\nfunction getTime() {\n    return new Date().getTime();\n}\nfunction stringify(value) {\n    return JSON.stringify(value, (key, value)=>{\n        if (typeof value === \"bigint\") {\n            return {\n                type: \"bigint\",\n                value: value.toString()\n            };\n        }\n        return value;\n    });\n}\n;\nconst defaultConfig = {\n    stallTimeout: 400,\n    priority: 1,\n    weight: 1\n};\nconst defaultState = {\n    blockNumber: -2,\n    requests: 0,\n    lateResponses: 0,\n    errorResponses: 0,\n    outOfSync: -1,\n    unsupportedEvents: 0,\n    rollingDuration: 0,\n    score: 0,\n    _network: null,\n    _updateNumber: null,\n    _totalTime: 0,\n    _lastFatalError: null,\n    _lastFatalErrorTimestamp: 0\n};\nasync function waitForSync(config, blockNumber) {\n    while(config.blockNumber < 0 || config.blockNumber < blockNumber){\n        if (!config._updateNumber) {\n            config._updateNumber = (async ()=>{\n                try {\n                    const blockNumber = await config.provider.getBlockNumber();\n                    if (blockNumber > config.blockNumber) {\n                        config.blockNumber = blockNumber;\n                    }\n                } catch (error) {\n                    config.blockNumber = -2;\n                    config._lastFatalError = error;\n                    config._lastFatalErrorTimestamp = getTime();\n                }\n                config._updateNumber = null;\n            })();\n        }\n        await config._updateNumber;\n        config.outOfSync++;\n        if (config._lastFatalError) {\n            break;\n        }\n    }\n}\nfunction _normalize(value) {\n    if (value == null) {\n        return \"null\";\n    }\n    if (Array.isArray(value)) {\n        return \"[\" + value.map(_normalize).join(\",\") + \"]\";\n    }\n    if (typeof value === \"object\" && typeof value.toJSON === \"function\") {\n        return _normalize(value.toJSON());\n    }\n    switch(typeof value){\n        case \"boolean\":\n        case \"symbol\":\n            return value.toString();\n        case \"bigint\":\n        case \"number\":\n            return BigInt(value).toString();\n        case \"string\":\n            return JSON.stringify(value);\n        case \"object\":\n            {\n                const keys = Object.keys(value);\n                keys.sort();\n                return \"{\" + keys.map((k)=>`${JSON.stringify(k)}:${_normalize(value[k])}`).join(\",\") + \"}\";\n            }\n    }\n    console.log(\"Could not serialize\", value);\n    throw new Error(\"Hmm...\");\n}\nfunction normalizeResult(value) {\n    if (\"error\" in value) {\n        const error = value.error;\n        return {\n            tag: _normalize(error),\n            value: error\n        };\n    }\n    const result = value.result;\n    return {\n        tag: _normalize(result),\n        value: result\n    };\n}\n// This strategy picks the highest weight result, as long as the weight is\n// equal to or greater than quorum\nfunction checkQuorum(quorum, results) {\n    const tally = new Map();\n    for (const { value, tag, weight } of results){\n        const t = tally.get(tag) || {\n            value,\n            weight: 0\n        };\n        t.weight += weight;\n        tally.set(tag, t);\n    }\n    let best = null;\n    for (const r of tally.values()){\n        if (r.weight >= quorum && (!best || r.weight > best.weight)) {\n            best = r;\n        }\n    }\n    if (best) {\n        return best.value;\n    }\n    return undefined;\n}\nfunction getMedian(quorum, results) {\n    let resultWeight = 0;\n    const errorMap = new Map();\n    let bestError = null;\n    const values = [];\n    for (const { value, tag, weight } of results){\n        if (value instanceof Error) {\n            const e = errorMap.get(tag) || {\n                value,\n                weight: 0\n            };\n            e.weight += weight;\n            errorMap.set(tag, e);\n            if (bestError == null || e.weight > bestError.weight) {\n                bestError = e;\n            }\n        } else {\n            values.push(BigInt(value));\n            resultWeight += weight;\n        }\n    }\n    if (resultWeight < quorum) {\n        // We have quorum for an error\n        if (bestError && bestError.weight >= quorum) {\n            return bestError.value;\n        }\n        // We do not have quorum for a result\n        return undefined;\n    }\n    // Get the sorted values\n    values.sort((a, b)=>a < b ? -1 : b > a ? 1 : 0);\n    const mid = Math.floor(values.length / 2);\n    // Odd-length; take the middle value\n    if (values.length % 2) {\n        return values[mid];\n    }\n    // Even length; take the ceiling of the mean of the center two values\n    return (values[mid - 1] + values[mid] + BN_1) / BN_2;\n}\nfunction getAnyResult(quorum, results) {\n    // If any value or error meets quorum, that is our preferred result\n    const result = checkQuorum(quorum, results);\n    if (result !== undefined) {\n        return result;\n    }\n    // Otherwise, do we have any result?\n    for (const r of results){\n        if (r.value) {\n            return r.value;\n        }\n    }\n    // Nope!\n    return undefined;\n}\nfunction getFuzzyMode(quorum, results) {\n    if (quorum === 1) {\n        return (0, index_js_1.getNumber)(getMedian(quorum, results), \"%internal\");\n    }\n    const tally = new Map();\n    const add = (result, weight)=>{\n        const t = tally.get(result) || {\n            result,\n            weight: 0\n        };\n        t.weight += weight;\n        tally.set(result, t);\n    };\n    for (const { weight, value } of results){\n        const r = (0, index_js_1.getNumber)(value);\n        add(r - 1, weight);\n        add(r, weight);\n        add(r + 1, weight);\n    }\n    let bestWeight = 0;\n    let bestResult = undefined;\n    for (const { weight, result } of tally.values()){\n        // Use this result, if this result meets quorum and has either:\n        // - a better weight\n        // - or equal weight, but the result is larger\n        if (weight >= quorum && (weight > bestWeight || bestResult != null && weight === bestWeight && result > bestResult)) {\n            bestWeight = weight;\n            bestResult = result;\n        }\n    }\n    return bestResult;\n}\n/**\n *  A **FallbackProvider** manages several [[Providers]] providing\n *  resiliance by switching between slow or misbehaving nodes, security\n *  by requiring multiple backends to aggree and performance by allowing\n *  faster backends to respond earlier.\n *\n */ class FallbackProvider extends abstract_provider_js_1.AbstractProvider {\n    #configs;\n    #height;\n    #initialSyncPromise;\n    /**\n     *  Creates a new **FallbackProvider** with %%providers%% connected to\n     *  %%network%%.\n     *\n     *  If a [[Provider]] is included in %%providers%%, defaults are used\n     *  for the configuration.\n     */ constructor(providers, network, options){\n        super(network, options);\n        this.#configs = providers.map((p)=>{\n            if (p instanceof abstract_provider_js_1.AbstractProvider) {\n                return Object.assign({\n                    provider: p\n                }, defaultConfig, defaultState);\n            } else {\n                return Object.assign({}, defaultConfig, p, defaultState);\n            }\n        });\n        this.#height = -2;\n        this.#initialSyncPromise = null;\n        if (options && options.quorum != null) {\n            this.quorum = options.quorum;\n        } else {\n            this.quorum = Math.ceil(this.#configs.reduce((accum, config)=>{\n                accum += config.weight;\n                return accum;\n            }, 0) / 2);\n        }\n        this.eventQuorum = 1;\n        this.eventWorkers = 1;\n        (0, index_js_1.assertArgument)(this.quorum <= this.#configs.reduce((a, c)=>a + c.weight, 0), \"quorum exceed provider wieght\", \"quorum\", this.quorum);\n    }\n    get providerConfigs() {\n        return this.#configs.map((c)=>{\n            const result = Object.assign({}, c);\n            for(const key in result){\n                if (key[0] === \"_\") {\n                    delete result[key];\n                }\n            }\n            return result;\n        });\n    }\n    async _detectNetwork() {\n        return network_js_1.Network.from((0, index_js_1.getBigInt)(await this._perform({\n            method: \"chainId\"\n        })));\n    }\n    // @TODO: Add support to select providers to be the event subscriber\n    //_getSubscriber(sub: Subscription): Subscriber {\n    //    throw new Error(\"@TODO\");\n    //}\n    /**\n     *  Transforms a %%req%% into the correct method call on %%provider%%.\n     */ async _translatePerform(provider, req) {\n        switch(req.method){\n            case \"broadcastTransaction\":\n                return await provider.broadcastTransaction(req.signedTransaction);\n            case \"call\":\n                return await provider.call(Object.assign({}, req.transaction, {\n                    blockTag: req.blockTag\n                }));\n            case \"chainId\":\n                return (await provider.getNetwork()).chainId;\n            case \"estimateGas\":\n                return await provider.estimateGas(req.transaction);\n            case \"getBalance\":\n                return await provider.getBalance(req.address, req.blockTag);\n            case \"getBlock\":\n                {\n                    const block = \"blockHash\" in req ? req.blockHash : req.blockTag;\n                    return await provider.getBlock(block, req.includeTransactions);\n                }\n            case \"getBlockNumber\":\n                return await provider.getBlockNumber();\n            case \"getCode\":\n                return await provider.getCode(req.address, req.blockTag);\n            case \"getGasPrice\":\n                return (await provider.getFeeData()).gasPrice;\n            case \"getLogs\":\n                return await provider.getLogs(req.filter);\n            case \"getStorage\":\n                return await provider.getStorage(req.address, req.position, req.blockTag);\n            case \"getTransaction\":\n                return await provider.getTransaction(req.hash);\n            case \"getTransactionCount\":\n                return await provider.getTransactionCount(req.address, req.blockTag);\n            case \"getTransactionReceipt\":\n                return await provider.getTransactionReceipt(req.hash);\n            case \"getTransactionResult\":\n                return await provider.getTransactionResult(req.hash);\n        }\n    }\n    // Grab the next (random) config that is not already part of\n    // the running set\n    #getNextConfig(running) {\n        // @TODO: Maybe do a check here to favour (heavily) providers that\n        //        do not require waitForSync and disfavour providers that\n        //        seem down-ish or are behaving slowly\n        const configs = Array.from(running).map((r)=>r.config);\n        // Shuffle the states, sorted by priority\n        const allConfigs = this.#configs.slice();\n        shuffle(allConfigs);\n        allConfigs.sort((a, b)=>a.priority - b.priority);\n        for (const config of allConfigs){\n            if (config._lastFatalError) {\n                continue;\n            }\n            if (configs.indexOf(config) === -1) {\n                return config;\n            }\n        }\n        return null;\n    }\n    // Adds a new runner (if available) to running.\n    #addRunner(running, req) {\n        const config = this.#getNextConfig(running);\n        // No runners available\n        if (config == null) {\n            return null;\n        }\n        // Create a new runner\n        const runner = {\n            config,\n            result: null,\n            didBump: false,\n            perform: null,\n            staller: null\n        };\n        const now = getTime();\n        // Start performing this operation\n        runner.perform = (async ()=>{\n            try {\n                config.requests++;\n                const result = await this._translatePerform(config.provider, req);\n                runner.result = {\n                    result\n                };\n            } catch (error) {\n                config.errorResponses++;\n                runner.result = {\n                    error\n                };\n            }\n            const dt = getTime() - now;\n            config._totalTime += dt;\n            config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;\n            runner.perform = null;\n        })();\n        // Start a staller; when this times out, it's time to force\n        // kicking off another runner because we are taking too long\n        runner.staller = (async ()=>{\n            await stall(config.stallTimeout);\n            runner.staller = null;\n        })();\n        running.add(runner);\n        return runner;\n    }\n    // Initializes the blockNumber and network for each runner and\n    // blocks until initialized\n    async #initialSync() {\n        let initialSync = this.#initialSyncPromise;\n        if (!initialSync) {\n            const promises = [];\n            this.#configs.forEach((config)=>{\n                promises.push((async ()=>{\n                    await waitForSync(config, 0);\n                    if (!config._lastFatalError) {\n                        config._network = await config.provider.getNetwork();\n                    }\n                })());\n            });\n            this.#initialSyncPromise = initialSync = (async ()=>{\n                // Wait for all providers to have a block number and network\n                await Promise.all(promises);\n                // Check all the networks match\n                let chainId = null;\n                for (const config of this.#configs){\n                    if (config._lastFatalError) {\n                        continue;\n                    }\n                    const network = config._network;\n                    if (chainId == null) {\n                        chainId = network.chainId;\n                    } else if (network.chainId !== chainId) {\n                        (0, index_js_1.assert)(false, \"cannot mix providers on different networks\", \"UNSUPPORTED_OPERATION\", {\n                            operation: \"new FallbackProvider\"\n                        });\n                    }\n                }\n            })();\n        }\n        await initialSync;\n    }\n    async #checkQuorum(running, req) {\n        // Get all the result objects\n        const results = [];\n        for (const runner of running){\n            if (runner.result != null) {\n                const { tag, value } = normalizeResult(runner.result);\n                results.push({\n                    tag,\n                    value,\n                    weight: runner.config.weight\n                });\n            }\n        }\n        // Are there enough results to event meet quorum?\n        if (results.reduce((a, r)=>a + r.weight, 0) < this.quorum) {\n            return undefined;\n        }\n        switch(req.method){\n            case \"getBlockNumber\":\n                {\n                    // We need to get the bootstrap block height\n                    if (this.#height === -2) {\n                        this.#height = Math.ceil((0, index_js_1.getNumber)(getMedian(this.quorum, this.#configs.filter((c)=>!c._lastFatalError).map((c)=>({\n                                value: c.blockNumber,\n                                tag: (0, index_js_1.getNumber)(c.blockNumber).toString(),\n                                weight: c.weight\n                            })))));\n                    }\n                    // Find the mode across all the providers, allowing for\n                    // a little drift between block heights\n                    const mode = getFuzzyMode(this.quorum, results);\n                    if (mode === undefined) {\n                        return undefined;\n                    }\n                    if (mode > this.#height) {\n                        this.#height = mode;\n                    }\n                    return this.#height;\n                }\n            case \"getGasPrice\":\n            case \"estimateGas\":\n                return getMedian(this.quorum, results);\n            case \"getBlock\":\n                // Pending blocks are in the mempool and already\n                // quite untrustworthy; just grab anything\n                if (\"blockTag\" in req && req.blockTag === \"pending\") {\n                    return getAnyResult(this.quorum, results);\n                }\n                return checkQuorum(this.quorum, results);\n            case \"call\":\n            case \"chainId\":\n            case \"getBalance\":\n            case \"getTransactionCount\":\n            case \"getCode\":\n            case \"getStorage\":\n            case \"getTransaction\":\n            case \"getTransactionReceipt\":\n            case \"getLogs\":\n                return checkQuorum(this.quorum, results);\n            case \"broadcastTransaction\":\n                return getAnyResult(this.quorum, results);\n        }\n        (0, index_js_1.assert)(false, \"unsupported method\", \"UNSUPPORTED_OPERATION\", {\n            operation: `_perform(${stringify(req.method)})`\n        });\n    }\n    async #waitForQuorum(running, req) {\n        if (running.size === 0) {\n            throw new Error(\"no runners?!\");\n        }\n        // Any promises that are interesting to watch for; an expired stall\n        // or a successful perform\n        const interesting = [];\n        let newRunners = 0;\n        for (const runner of running){\n            // No responses, yet; keep an eye on it\n            if (runner.perform) {\n                interesting.push(runner.perform);\n            }\n            // Still stalling...\n            if (runner.staller) {\n                interesting.push(runner.staller);\n                continue;\n            }\n            // This runner has already triggered another runner\n            if (runner.didBump) {\n                continue;\n            }\n            // Got a response (result or error) or stalled; kick off another runner\n            runner.didBump = true;\n            newRunners++;\n        }\n        // Check if we have reached quorum on a result (or error)\n        const value = await this.#checkQuorum(running, req);\n        if (value !== undefined) {\n            if (value instanceof Error) {\n                throw value;\n            }\n            return value;\n        }\n        // Add any new runners, because a staller timed out or a result\n        // or error response came in.\n        for(let i = 0; i < newRunners; i++){\n            this.#addRunner(running, req);\n        }\n        // All providers have returned, and we have no result\n        (0, index_js_1.assert)(interesting.length > 0, \"quorum not met\", \"SERVER_ERROR\", {\n            request: \"%sub-requests\",\n            info: {\n                request: req,\n                results: Array.from(running).map((r)=>stringify(r.result))\n            }\n        });\n        // Wait for someone to either complete its perform or stall out\n        await Promise.race(interesting);\n        // This is recursive, but at worst case the depth is 2x the\n        // number of providers (each has a perform and a staller)\n        return await this.#waitForQuorum(running, req);\n    }\n    async _perform(req) {\n        // Broadcasting a transaction is rare (ish) and already incurs\n        // a cost on the user, so spamming is safe-ish. Just send it to\n        // every backend.\n        if (req.method === \"broadcastTransaction\") {\n            const results = await Promise.all(this.#configs.map(async ({ provider, weight })=>{\n                try {\n                    const result = await provider._perform(req);\n                    return Object.assign(normalizeResult({\n                        result\n                    }), {\n                        weight\n                    });\n                } catch (error) {\n                    return Object.assign(normalizeResult({\n                        error\n                    }), {\n                        weight\n                    });\n                }\n            }));\n            const result = getAnyResult(this.quorum, results);\n            (0, index_js_1.assert)(result !== undefined, \"problem multi-broadcasting\", \"SERVER_ERROR\", {\n                request: \"%sub-requests\",\n                info: {\n                    request: req,\n                    results: results.map(stringify)\n                }\n            });\n            if (result instanceof Error) {\n                throw result;\n            }\n            return result;\n        }\n        await this.#initialSync();\n        // Bootstrap enough runners to meet quorum\n        const running = new Set();\n        for(let i = 0; i < this.quorum; i++){\n            this.#addRunner(running, req);\n        }\n        const result = await this.#waitForQuorum(running, req);\n        // Track requests sent to a provider that are still\n        // outstanding after quorum has been otherwise found\n        for (const runner of running){\n            if (runner.perform && runner.result == null) {\n                runner.config.lateResponses++;\n            }\n        }\n        return result;\n    }\n    async destroy() {\n        for (const { provider } of this.#configs){\n            provider.destroy();\n        }\n        super.destroy();\n    }\n}\nexports.FallbackProvider = FallbackProvider; //# sourceMappingURL=provider-fallback.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-fallback.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-infura.js":
/*!***********************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/provider-infura.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InfuraProvider = exports.InfuraWebSocketProvider = void 0;\n/**\n *  [[link-infura]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:INFURA  [providers-infura]\n */ const index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst community_js_1 = __webpack_require__(/*! ./community.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/community.js\");\nconst network_js_1 = __webpack_require__(/*! ./network.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/network.js\");\nconst provider_jsonrpc_js_1 = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js\");\nconst provider_websocket_js_1 = __webpack_require__(/*! ./provider-websocket.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-websocket.js\");\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nfunction getHost(name) {\n    switch(name){\n        case \"mainnet\":\n            return \"mainnet.infura.io\";\n        case \"goerli\":\n            return \"goerli.infura.io\";\n        case \"sepolia\":\n            return \"sepolia.infura.io\";\n        case \"arbitrum\":\n            return \"arbitrum-mainnet.infura.io\";\n        case \"arbitrum-goerli\":\n            return \"arbitrum-goerli.infura.io\";\n        case \"linea\":\n            return \"linea-mainnet.infura.io\";\n        case \"linea-goerli\":\n            return \"linea-goerli.infura.io\";\n        case \"matic\":\n            return \"polygon-mainnet.infura.io\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai.infura.io\";\n        case \"optimism\":\n            return \"optimism-mainnet.infura.io\";\n        case \"optimism-goerli\":\n            return \"optimism-goerli.infura.io\";\n    }\n    (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **InfuraWebSocketProvider** connects to the [[link-infura]]\n *  WebSocket end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */ class InfuraWebSocketProvider extends provider_websocket_js_1.WebSocketProvider {\n    /**\n     *  Creates a new **InfuraWebSocketProvider**.\n     */ constructor(network, projectId){\n        const provider = new InfuraProvider(network, projectId);\n        const req = provider._getConnection();\n        (0, index_js_1.assert)(!req.credentials, \"INFURA WebSocket project secrets unsupported\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"InfuraProvider.getWebSocketProvider()\"\n        });\n        const url = req.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n        (0, index_js_1.defineProperties)(this, {\n            projectId: provider.projectId,\n            projectSecret: provider.projectSecret\n        });\n    }\n    isCommunityResource() {\n        return this.projectId === defaultProjectId;\n    }\n}\nexports.InfuraWebSocketProvider = InfuraWebSocketProvider;\n/**\n *  The **InfuraProvider** connects to the [[link-infura]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */ class InfuraProvider extends provider_jsonrpc_js_1.JsonRpcProvider {\n    /**\n     *  Creates a new **InfuraProvider**.\n     */ constructor(_network, projectId, projectSecret){\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = network_js_1.Network.from(_network);\n        if (projectId == null) {\n            projectId = defaultProjectId;\n        }\n        if (projectSecret == null) {\n            projectSecret = null;\n        }\n        const request = InfuraProvider.getRequest(network, projectId, projectSecret);\n        super(request, network, {\n            staticNetwork: network\n        });\n        (0, index_js_1.defineProperties)(this, {\n            projectId,\n            projectSecret\n        });\n    }\n    _getProvider(chainId) {\n        try {\n            return new InfuraProvider(chainId, this.projectId, this.projectSecret);\n        } catch (error) {}\n        return super._getProvider(chainId);\n    }\n    isCommunityResource() {\n        return this.projectId === defaultProjectId;\n    }\n    /**\n     *  Creates a new **InfuraWebSocketProvider**.\n     */ static getWebSocketProvider(network, projectId) {\n        return new InfuraWebSocketProvider(network, projectId);\n    }\n    /**\n     *  Returns a prepared request for connecting to %%network%%\n     *  with %%projectId%% and %%projectSecret%%.\n     */ static getRequest(network, projectId, projectSecret) {\n        if (projectId == null) {\n            projectId = defaultProjectId;\n        }\n        if (projectSecret == null) {\n            projectSecret = null;\n        }\n        const request = new index_js_1.FetchRequest(`https:/\\/${getHost(network.name)}/v3/${projectId}`);\n        request.allowGzip = true;\n        if (projectSecret) {\n            request.setCredentials(\"\", projectSecret);\n        }\n        if (projectId === defaultProjectId) {\n            request.retryFunc = async (request, response, attempt)=>{\n                (0, community_js_1.showThrottleMessage)(\"InfuraProvider\");\n                return true;\n            };\n        }\n        return request;\n    }\n}\nexports.InfuraProvider = InfuraProvider; //# sourceMappingURL=provider-infura.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9wcm92aWRlcnMvcHJvdmlkZXItaW5mdXJhLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxzQkFBc0IsR0FBR0EsK0JBQStCLEdBQUcsS0FBSztBQUNoRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FpQkMsR0FDRCxNQUFNSSxhQUFhQyxtQkFBT0EsQ0FBQyxrRkFBbUI7QUFDOUMsTUFBTUMsaUJBQWlCRCxtQkFBT0EsQ0FBQyx1RkFBZ0I7QUFDL0MsTUFBTUUsZUFBZUYsbUJBQU9BLENBQUMsbUZBQWM7QUFDM0MsTUFBTUcsd0JBQXdCSCxtQkFBT0EsQ0FBQyxxR0FBdUI7QUFDN0QsTUFBTUksMEJBQTBCSixtQkFBT0EsQ0FBQyx5R0FBeUI7QUFDakUsTUFBTUssbUJBQW1CO0FBQ3pCLFNBQVNDLFFBQVFDLElBQUk7SUFDakIsT0FBUUE7UUFDSixLQUFLO1lBQ0QsT0FBTztRQUNYLEtBQUs7WUFDRCxPQUFPO1FBQ1gsS0FBSztZQUNELE9BQU87UUFDWCxLQUFLO1lBQ0QsT0FBTztRQUNYLEtBQUs7WUFDRCxPQUFPO1FBQ1gsS0FBSztZQUNELE9BQU87UUFDWCxLQUFLO1lBQ0QsT0FBTztRQUNYLEtBQUs7WUFDRCxPQUFPO1FBQ1gsS0FBSztZQUNELE9BQU87UUFDWCxLQUFLO1lBQ0QsT0FBTztRQUNYLEtBQUs7WUFDRCxPQUFPO0lBQ2Y7SUFDQyxJQUFHUixXQUFXUyxjQUFjLEVBQUUsT0FBTyx1QkFBdUIsV0FBV0Q7QUFDNUU7QUFDQTs7Ozs7Ozs7Q0FRQyxHQUNELE1BQU1ULGdDQUFnQ00sd0JBQXdCSyxpQkFBaUI7SUFZM0U7O0tBRUMsR0FDREMsWUFBWUMsT0FBTyxFQUFFQyxTQUFTLENBQUU7UUFDNUIsTUFBTUMsV0FBVyxJQUFJaEIsZUFBZWMsU0FBU0M7UUFDN0MsTUFBTUUsTUFBTUQsU0FBU0UsY0FBYztRQUNsQyxJQUFHaEIsV0FBV2lCLE1BQU0sRUFBRSxDQUFDRixJQUFJRyxXQUFXLEVBQUUsZ0RBQWdELHlCQUF5QjtZQUFFQyxXQUFXO1FBQXdDO1FBQ3ZLLE1BQU1DLE1BQU1MLElBQUlLLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDLFVBQVUsTUFBTUEsT0FBTyxDQUFDLFFBQVE7UUFDNUQsS0FBSyxDQUFDRCxLQUFLUjtRQUNWLElBQUdaLFdBQVdzQixnQkFBZ0IsRUFBRSxJQUFJLEVBQUU7WUFDbkNULFdBQVdDLFNBQVNELFNBQVM7WUFDN0JVLGVBQWVULFNBQVNTLGFBQWE7UUFDekM7SUFDSjtJQUNBQyxzQkFBc0I7UUFDbEIsT0FBUSxJQUFJLENBQUNYLFNBQVMsS0FBS1A7SUFDL0I7QUFDSjtBQUNBViwrQkFBK0IsR0FBR0c7QUFDbEM7Ozs7Ozs7O0NBUUMsR0FDRCxNQUFNRCx1QkFBdUJNLHNCQUFzQnFCLGVBQWU7SUFZOUQ7O0tBRUMsR0FDRGQsWUFBWWUsUUFBUSxFQUFFYixTQUFTLEVBQUVVLGFBQWEsQ0FBRTtRQUM1QyxJQUFJRyxZQUFZLE1BQU07WUFDbEJBLFdBQVc7UUFDZjtRQUNBLE1BQU1kLFVBQVVULGFBQWF3QixPQUFPLENBQUNDLElBQUksQ0FBQ0Y7UUFDMUMsSUFBSWIsYUFBYSxNQUFNO1lBQ25CQSxZQUFZUDtRQUNoQjtRQUNBLElBQUlpQixpQkFBaUIsTUFBTTtZQUN2QkEsZ0JBQWdCO1FBQ3BCO1FBQ0EsTUFBTU0sVUFBVS9CLGVBQWVnQyxVQUFVLENBQUNsQixTQUFTQyxXQUFXVTtRQUM5RCxLQUFLLENBQUNNLFNBQVNqQixTQUFTO1lBQUVtQixlQUFlbkI7UUFBUTtRQUNoRCxJQUFHWixXQUFXc0IsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFO1lBQUVUO1lBQVdVO1FBQWM7SUFDdEU7SUFDQVMsYUFBYUMsT0FBTyxFQUFFO1FBQ2xCLElBQUk7WUFDQSxPQUFPLElBQUluQyxlQUFlbUMsU0FBUyxJQUFJLENBQUNwQixTQUFTLEVBQUUsSUFBSSxDQUFDVSxhQUFhO1FBQ3pFLEVBQ0EsT0FBT1csT0FBTyxDQUFFO1FBQ2hCLE9BQU8sS0FBSyxDQUFDRixhQUFhQztJQUM5QjtJQUNBVCxzQkFBc0I7UUFDbEIsT0FBUSxJQUFJLENBQUNYLFNBQVMsS0FBS1A7SUFDL0I7SUFDQTs7S0FFQyxHQUNELE9BQU82QixxQkFBcUJ2QixPQUFPLEVBQUVDLFNBQVMsRUFBRTtRQUM1QyxPQUFPLElBQUlkLHdCQUF3QmEsU0FBU0M7SUFDaEQ7SUFDQTs7O0tBR0MsR0FDRCxPQUFPaUIsV0FBV2xCLE9BQU8sRUFBRUMsU0FBUyxFQUFFVSxhQUFhLEVBQUU7UUFDakQsSUFBSVYsYUFBYSxNQUFNO1lBQ25CQSxZQUFZUDtRQUNoQjtRQUNBLElBQUlpQixpQkFBaUIsTUFBTTtZQUN2QkEsZ0JBQWdCO1FBQ3BCO1FBQ0EsTUFBTU0sVUFBVSxJQUFJN0IsV0FBV29DLFlBQVksQ0FBQyxDQUFDLFNBQVMsRUFBRTdCLFFBQVFLLFFBQVFKLElBQUksRUFBRSxJQUFJLEVBQUVLLFVBQVUsQ0FBQztRQUMvRmdCLFFBQVFRLFNBQVMsR0FBRztRQUNwQixJQUFJZCxlQUFlO1lBQ2ZNLFFBQVFTLGNBQWMsQ0FBQyxJQUFJZjtRQUMvQjtRQUNBLElBQUlWLGNBQWNQLGtCQUFrQjtZQUNoQ3VCLFFBQVFVLFNBQVMsR0FBRyxPQUFPVixTQUFTVyxVQUFVQztnQkFDekMsSUFBR3ZDLGVBQWV3QyxtQkFBbUIsRUFBRTtnQkFDeEMsT0FBTztZQUNYO1FBQ0o7UUFDQSxPQUFPYjtJQUNYO0FBQ0o7QUFDQWpDLHNCQUFzQixHQUFHRSxnQkFDekIsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvcHJvdmlkZXJzL3Byb3ZpZGVyLWluZnVyYS5qcz8zMTU5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JbmZ1cmFQcm92aWRlciA9IGV4cG9ydHMuSW5mdXJhV2ViU29ja2V0UHJvdmlkZXIgPSB2b2lkIDA7XG4vKipcbiAqICBbW2xpbmstaW5mdXJhXV0gcHJvdmlkZXMgYSB0aGlyZC1wYXJ0eSBzZXJ2aWNlIGZvciBjb25uZWN0aW5nIHRvXG4gKiAgdmFyaW91cyBibG9ja2NoYWlucyBvdmVyIEpTT04tUlBDLlxuICpcbiAqICAqKlN1cHBvcnRlZCBOZXR3b3JrcyoqXG4gKlxuICogIC0gRXRoZXJldW0gTWFpbm5ldCAoYGBtYWlubmV0YGApXG4gKiAgLSBHb2VybGkgVGVzdG5ldCAoYGBnb2VybGlgYClcbiAqICAtIFNlcG9saWEgVGVzdG5ldCAoYGBzZXBvbGlhYGApXG4gKiAgLSBBcmJpdHJ1bSAoYGBhcmJpdHJ1bWBgKVxuICogIC0gQXJiaXRydW0gR29lcmxpIFRlc3RuZXQgKGBgYXJiaXRydW0tZ29lcmxpYGApXG4gKiAgLSBPcHRpbWlzbSAoYGBvcHRpbWlzbWBgKVxuICogIC0gT3B0aW1pc20gR29lcmxpIFRlc3RuZXQgKGBgb3B0aW1pc20tZ29lcmxpYGApXG4gKiAgLSBQb2x5Z29uIChgYG1hdGljYGApXG4gKiAgLSBQb2x5Z29uIE11bWJhaSBUZXN0bmV0IChgYG1hdGljLW11bWJhaWBgKVxuICpcbiAqICBAX3N1YnNlY3Rpb246IGFwaS9wcm92aWRlcnMvdGhpcmRwYXJ0eTpJTkZVUkEgIFtwcm92aWRlcnMtaW5mdXJhXVxuICovXG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4uL3V0aWxzL2luZGV4LmpzXCIpO1xuY29uc3QgY29tbXVuaXR5X2pzXzEgPSByZXF1aXJlKFwiLi9jb21tdW5pdHkuanNcIik7XG5jb25zdCBuZXR3b3JrX2pzXzEgPSByZXF1aXJlKFwiLi9uZXR3b3JrLmpzXCIpO1xuY29uc3QgcHJvdmlkZXJfanNvbnJwY19qc18xID0gcmVxdWlyZShcIi4vcHJvdmlkZXItanNvbnJwYy5qc1wiKTtcbmNvbnN0IHByb3ZpZGVyX3dlYnNvY2tldF9qc18xID0gcmVxdWlyZShcIi4vcHJvdmlkZXItd2Vic29ja2V0LmpzXCIpO1xuY29uc3QgZGVmYXVsdFByb2plY3RJZCA9IFwiODQ4NDIwNzhiMDk5NDY2MzhjMDMxNTdmODM0MDUyMTNcIjtcbmZ1bmN0aW9uIGdldEhvc3QobmFtZSkge1xuICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICBjYXNlIFwibWFpbm5ldFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwibWFpbm5ldC5pbmZ1cmEuaW9cIjtcbiAgICAgICAgY2FzZSBcImdvZXJsaVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiZ29lcmxpLmluZnVyYS5pb1wiO1xuICAgICAgICBjYXNlIFwic2Vwb2xpYVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwic2Vwb2xpYS5pbmZ1cmEuaW9cIjtcbiAgICAgICAgY2FzZSBcImFyYml0cnVtXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJhcmJpdHJ1bS1tYWlubmV0LmluZnVyYS5pb1wiO1xuICAgICAgICBjYXNlIFwiYXJiaXRydW0tZ29lcmxpXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJhcmJpdHJ1bS1nb2VybGkuaW5mdXJhLmlvXCI7XG4gICAgICAgIGNhc2UgXCJsaW5lYVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwibGluZWEtbWFpbm5ldC5pbmZ1cmEuaW9cIjtcbiAgICAgICAgY2FzZSBcImxpbmVhLWdvZXJsaVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwibGluZWEtZ29lcmxpLmluZnVyYS5pb1wiO1xuICAgICAgICBjYXNlIFwibWF0aWNcIjpcbiAgICAgICAgICAgIHJldHVybiBcInBvbHlnb24tbWFpbm5ldC5pbmZ1cmEuaW9cIjtcbiAgICAgICAgY2FzZSBcIm1hdGljLW11bWJhaVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwicG9seWdvbi1tdW1iYWkuaW5mdXJhLmlvXCI7XG4gICAgICAgIGNhc2UgXCJvcHRpbWlzbVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwib3B0aW1pc20tbWFpbm5ldC5pbmZ1cmEuaW9cIjtcbiAgICAgICAgY2FzZSBcIm9wdGltaXNtLWdvZXJsaVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwib3B0aW1pc20tZ29lcmxpLmluZnVyYS5pb1wiO1xuICAgIH1cbiAgICAoMCwgaW5kZXhfanNfMS5hc3NlcnRBcmd1bWVudCkoZmFsc2UsIFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiLCBcIm5ldHdvcmtcIiwgbmFtZSk7XG59XG4vKipcbiAqICBUaGUgKipJbmZ1cmFXZWJTb2NrZXRQcm92aWRlcioqIGNvbm5lY3RzIHRvIHRoZSBbW2xpbmstaW5mdXJhXV1cbiAqICBXZWJTb2NrZXQgZW5kLXBvaW50cy5cbiAqXG4gKiAgQnkgZGVmYXVsdCwgYSBoaWdobHktdGhyb3R0bGVkIEFQSSBrZXkgaXMgdXNlZCwgd2hpY2ggaXNcbiAqICBhcHByb3ByaWF0ZSBmb3IgcXVpY2sgcHJvdG90eXBlcyBhbmQgc2ltcGxlIHNjcmlwdHMuIFRvXG4gKiAgZ2FpbiBhY2Nlc3MgdG8gYW4gaW5jcmVhc2VkIHJhdGUtbGltaXQsIGl0IGlzIGhpZ2hseVxuICogIHJlY29tbWVuZGVkIHRvIFtzaWduIHVwIGhlcmVdKGxpbmstaW5mdXJhLXNpZ251cCkuXG4gKi9cbmNsYXNzIEluZnVyYVdlYlNvY2tldFByb3ZpZGVyIGV4dGVuZHMgcHJvdmlkZXJfd2Vic29ja2V0X2pzXzEuV2ViU29ja2V0UHJvdmlkZXIge1xuICAgIC8qKlxuICAgICAqICBUaGUgUHJvamVjdCBJRCBmb3IgdGhlIElORlVSQSBjb25uZWN0aW9uLlxuICAgICAqL1xuICAgIHByb2plY3RJZDtcbiAgICAvKipcbiAgICAgKiAgVGhlIFByb2plY3QgU2VjcmV0LlxuICAgICAqXG4gICAgICogIElmIG51bGwsIG5vIGF1dGhlbnRpY2F0ZWQgcmVxdWVzdHMgYXJlIG1hZGUuIFRoaXMgc2hvdWxkIG5vdFxuICAgICAqICBiZSB1c2VkIG91dHNpZGUgb2YgcHJpdmF0ZSBjb250ZXh0cy5cbiAgICAgKi9cbiAgICBwcm9qZWN0U2VjcmV0O1xuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3ICoqSW5mdXJhV2ViU29ja2V0UHJvdmlkZXIqKi5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihuZXR3b3JrLCBwcm9qZWN0SWQpIHtcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgSW5mdXJhUHJvdmlkZXIobmV0d29yaywgcHJvamVjdElkKTtcbiAgICAgICAgY29uc3QgcmVxID0gcHJvdmlkZXIuX2dldENvbm5lY3Rpb24oKTtcbiAgICAgICAgKDAsIGluZGV4X2pzXzEuYXNzZXJ0KSghcmVxLmNyZWRlbnRpYWxzLCBcIklORlVSQSBXZWJTb2NrZXQgcHJvamVjdCBzZWNyZXRzIHVuc3VwcG9ydGVkXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uOiBcIkluZnVyYVByb3ZpZGVyLmdldFdlYlNvY2tldFByb3ZpZGVyKClcIiB9KTtcbiAgICAgICAgY29uc3QgdXJsID0gcmVxLnVybC5yZXBsYWNlKC9eaHR0cC9pLCBcIndzXCIpLnJlcGxhY2UoXCIvdjMvXCIsIFwiL3dzL3YzL1wiKTtcbiAgICAgICAgc3VwZXIodXJsLCBuZXR3b3JrKTtcbiAgICAgICAgKDAsIGluZGV4X2pzXzEuZGVmaW5lUHJvcGVydGllcykodGhpcywge1xuICAgICAgICAgICAgcHJvamVjdElkOiBwcm92aWRlci5wcm9qZWN0SWQsXG4gICAgICAgICAgICBwcm9qZWN0U2VjcmV0OiBwcm92aWRlci5wcm9qZWN0U2VjcmV0XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpc0NvbW11bml0eVJlc291cmNlKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMucHJvamVjdElkID09PSBkZWZhdWx0UHJvamVjdElkKTtcbiAgICB9XG59XG5leHBvcnRzLkluZnVyYVdlYlNvY2tldFByb3ZpZGVyID0gSW5mdXJhV2ViU29ja2V0UHJvdmlkZXI7XG4vKipcbiAqICBUaGUgKipJbmZ1cmFQcm92aWRlcioqIGNvbm5lY3RzIHRvIHRoZSBbW2xpbmstaW5mdXJhXV1cbiAqICBKU09OLVJQQyBlbmQtcG9pbnRzLlxuICpcbiAqICBCeSBkZWZhdWx0LCBhIGhpZ2hseS10aHJvdHRsZWQgQVBJIGtleSBpcyB1c2VkLCB3aGljaCBpc1xuICogIGFwcHJvcHJpYXRlIGZvciBxdWljayBwcm90b3R5cGVzIGFuZCBzaW1wbGUgc2NyaXB0cy4gVG9cbiAqICBnYWluIGFjY2VzcyB0byBhbiBpbmNyZWFzZWQgcmF0ZS1saW1pdCwgaXQgaXMgaGlnaGx5XG4gKiAgcmVjb21tZW5kZWQgdG8gW3NpZ24gdXAgaGVyZV0obGluay1pbmZ1cmEtc2lnbnVwKS5cbiAqL1xuY2xhc3MgSW5mdXJhUHJvdmlkZXIgZXh0ZW5kcyBwcm92aWRlcl9qc29ucnBjX2pzXzEuSnNvblJwY1Byb3ZpZGVyIHtcbiAgICAvKipcbiAgICAgKiAgVGhlIFByb2plY3QgSUQgZm9yIHRoZSBJTkZVUkEgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBwcm9qZWN0SWQ7XG4gICAgLyoqXG4gICAgICogIFRoZSBQcm9qZWN0IFNlY3JldC5cbiAgICAgKlxuICAgICAqICBJZiBudWxsLCBubyBhdXRoZW50aWNhdGVkIHJlcXVlc3RzIGFyZSBtYWRlLiBUaGlzIHNob3VsZCBub3RcbiAgICAgKiAgYmUgdXNlZCBvdXRzaWRlIG9mIHByaXZhdGUgY29udGV4dHMuXG4gICAgICovXG4gICAgcHJvamVjdFNlY3JldDtcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyAqKkluZnVyYVByb3ZpZGVyKiouXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoX25ldHdvcmssIHByb2plY3RJZCwgcHJvamVjdFNlY3JldCkge1xuICAgICAgICBpZiAoX25ldHdvcmsgPT0gbnVsbCkge1xuICAgICAgICAgICAgX25ldHdvcmsgPSBcIm1haW5uZXRcIjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXR3b3JrID0gbmV0d29ya19qc18xLk5ldHdvcmsuZnJvbShfbmV0d29yayk7XG4gICAgICAgIGlmIChwcm9qZWN0SWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcHJvamVjdElkID0gZGVmYXVsdFByb2plY3RJZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvamVjdFNlY3JldCA9PSBudWxsKSB7XG4gICAgICAgICAgICBwcm9qZWN0U2VjcmV0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gSW5mdXJhUHJvdmlkZXIuZ2V0UmVxdWVzdChuZXR3b3JrLCBwcm9qZWN0SWQsIHByb2plY3RTZWNyZXQpO1xuICAgICAgICBzdXBlcihyZXF1ZXN0LCBuZXR3b3JrLCB7IHN0YXRpY05ldHdvcms6IG5ldHdvcmsgfSk7XG4gICAgICAgICgwLCBpbmRleF9qc18xLmRlZmluZVByb3BlcnRpZXMpKHRoaXMsIHsgcHJvamVjdElkLCBwcm9qZWN0U2VjcmV0IH0pO1xuICAgIH1cbiAgICBfZ2V0UHJvdmlkZXIoY2hhaW5JZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbmZ1cmFQcm92aWRlcihjaGFpbklkLCB0aGlzLnByb2plY3RJZCwgdGhpcy5wcm9qZWN0U2VjcmV0KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICByZXR1cm4gc3VwZXIuX2dldFByb3ZpZGVyKGNoYWluSWQpO1xuICAgIH1cbiAgICBpc0NvbW11bml0eVJlc291cmNlKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMucHJvamVjdElkID09PSBkZWZhdWx0UHJvamVjdElkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIENyZWF0ZXMgYSBuZXcgKipJbmZ1cmFXZWJTb2NrZXRQcm92aWRlcioqLlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRXZWJTb2NrZXRQcm92aWRlcihuZXR3b3JrLCBwcm9qZWN0SWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbmZ1cmFXZWJTb2NrZXRQcm92aWRlcihuZXR3b3JrLCBwcm9qZWN0SWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBhIHByZXBhcmVkIHJlcXVlc3QgZm9yIGNvbm5lY3RpbmcgdG8gJSVuZXR3b3JrJSVcbiAgICAgKiAgd2l0aCAlJXByb2plY3RJZCUlIGFuZCAlJXByb2plY3RTZWNyZXQlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0UmVxdWVzdChuZXR3b3JrLCBwcm9qZWN0SWQsIHByb2plY3RTZWNyZXQpIHtcbiAgICAgICAgaWYgKHByb2plY3RJZCA9PSBudWxsKSB7XG4gICAgICAgICAgICBwcm9qZWN0SWQgPSBkZWZhdWx0UHJvamVjdElkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9qZWN0U2VjcmV0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHByb2plY3RTZWNyZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgaW5kZXhfanNfMS5GZXRjaFJlcXVlc3QoYGh0dHBzOi9cXC8ke2dldEhvc3QobmV0d29yay5uYW1lKX0vdjMvJHtwcm9qZWN0SWR9YCk7XG4gICAgICAgIHJlcXVlc3QuYWxsb3dHemlwID0gdHJ1ZTtcbiAgICAgICAgaWYgKHByb2plY3RTZWNyZXQpIHtcbiAgICAgICAgICAgIHJlcXVlc3Quc2V0Q3JlZGVudGlhbHMoXCJcIiwgcHJvamVjdFNlY3JldCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb2plY3RJZCA9PT0gZGVmYXVsdFByb2plY3RJZCkge1xuICAgICAgICAgICAgcmVxdWVzdC5yZXRyeUZ1bmMgPSBhc3luYyAocmVxdWVzdCwgcmVzcG9uc2UsIGF0dGVtcHQpID0+IHtcbiAgICAgICAgICAgICAgICAoMCwgY29tbXVuaXR5X2pzXzEuc2hvd1Rocm90dGxlTWVzc2FnZSkoXCJJbmZ1cmFQcm92aWRlclwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgfVxufVxuZXhwb3J0cy5JbmZ1cmFQcm92aWRlciA9IEluZnVyYVByb3ZpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXItaW5mdXJhLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkluZnVyYVByb3ZpZGVyIiwiSW5mdXJhV2ViU29ja2V0UHJvdmlkZXIiLCJpbmRleF9qc18xIiwicmVxdWlyZSIsImNvbW11bml0eV9qc18xIiwibmV0d29ya19qc18xIiwicHJvdmlkZXJfanNvbnJwY19qc18xIiwicHJvdmlkZXJfd2Vic29ja2V0X2pzXzEiLCJkZWZhdWx0UHJvamVjdElkIiwiZ2V0SG9zdCIsIm5hbWUiLCJhc3NlcnRBcmd1bWVudCIsIldlYlNvY2tldFByb3ZpZGVyIiwiY29uc3RydWN0b3IiLCJuZXR3b3JrIiwicHJvamVjdElkIiwicHJvdmlkZXIiLCJyZXEiLCJfZ2V0Q29ubmVjdGlvbiIsImFzc2VydCIsImNyZWRlbnRpYWxzIiwib3BlcmF0aW9uIiwidXJsIiwicmVwbGFjZSIsImRlZmluZVByb3BlcnRpZXMiLCJwcm9qZWN0U2VjcmV0IiwiaXNDb21tdW5pdHlSZXNvdXJjZSIsIkpzb25ScGNQcm92aWRlciIsIl9uZXR3b3JrIiwiTmV0d29yayIsImZyb20iLCJyZXF1ZXN0IiwiZ2V0UmVxdWVzdCIsInN0YXRpY05ldHdvcmsiLCJfZ2V0UHJvdmlkZXIiLCJjaGFpbklkIiwiZXJyb3IiLCJnZXRXZWJTb2NrZXRQcm92aWRlciIsIkZldGNoUmVxdWVzdCIsImFsbG93R3ppcCIsInNldENyZWRlbnRpYWxzIiwicmV0cnlGdW5jIiwicmVzcG9uc2UiLCJhdHRlbXB0Iiwic2hvd1Rocm90dGxlTWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-infura.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-ipcsocket.js":
/*!**************************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/provider-ipcsocket.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IpcSocketProvider = void 0;\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst provider_socket_js_1 = __webpack_require__(/*! ./provider-socket.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-socket.js\");\n// @TODO: Is this sufficient? Is this robust? Will newlines occur between\n// all payloads and only between payloads?\nfunction splitBuffer(data) {\n    const messages = [];\n    let lastStart = 0;\n    while(true){\n        const nl = data.indexOf(10, lastStart);\n        if (nl === -1) {\n            break;\n        }\n        messages.push(data.subarray(lastStart, nl).toString().trim());\n        lastStart = nl + 1;\n    }\n    return {\n        messages,\n        remaining: data.subarray(lastStart)\n    };\n}\n/**\n *  An **IpcSocketProvider** connects over an IPC socket on the host\n *  which provides fast access to the node, but requires the node and\n *  the script run on the same machine.\n */ class IpcSocketProvider extends provider_socket_js_1.SocketProvider {\n    #socket;\n    /**\n     *  The connected socket.\n     */ get socket() {\n        return this.#socket;\n    }\n    constructor(path, network){\n        super(network);\n        this.#socket = (0, net_1.connect)(path);\n        this.socket.on(\"ready\", async ()=>{\n            try {\n                await this._start();\n            } catch (error) {\n                console.log(\"failed to start IpcSocketProvider\", error);\n            // @TODO: Now what? Restart?\n            }\n        });\n        let response = Buffer.alloc(0);\n        this.socket.on(\"data\", (data)=>{\n            response = Buffer.concat([\n                response,\n                data\n            ]);\n            const { messages, remaining } = splitBuffer(response);\n            messages.forEach((message)=>{\n                this._processMessage(message);\n            });\n            response = remaining;\n        });\n        this.socket.on(\"end\", ()=>{\n            this.emit(\"close\");\n            this.socket.destroy();\n            this.socket.end();\n        });\n    }\n    destroy() {\n        this.socket.destroy();\n        this.socket.end();\n        super.destroy();\n    }\n    async _write(message) {\n        this.socket.write(message);\n    }\n}\nexports.IpcSocketProvider = IpcSocketProvider; //# sourceMappingURL=provider-ipcsocket.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9wcm92aWRlcnMvcHJvdmlkZXItaXBjc29ja2V0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx5QkFBeUIsR0FBRyxLQUFLO0FBQ2pDLE1BQU1HLFFBQVFDLG1CQUFPQSxDQUFDLGdCQUFLO0FBQzNCLE1BQU1DLHVCQUF1QkQsbUJBQU9BLENBQUMsbUdBQXNCO0FBQzNELHlFQUF5RTtBQUN6RSwwQ0FBMEM7QUFDMUMsU0FBU0UsWUFBWUMsSUFBSTtJQUNyQixNQUFNQyxXQUFXLEVBQUU7SUFDbkIsSUFBSUMsWUFBWTtJQUNoQixNQUFPLEtBQU07UUFDVCxNQUFNQyxLQUFLSCxLQUFLSSxPQUFPLENBQUMsSUFBSUY7UUFDNUIsSUFBSUMsT0FBTyxDQUFDLEdBQUc7WUFDWDtRQUNKO1FBQ0FGLFNBQVNJLElBQUksQ0FBQ0wsS0FBS00sUUFBUSxDQUFDSixXQUFXQyxJQUFJSSxRQUFRLEdBQUdDLElBQUk7UUFDMUROLFlBQVlDLEtBQUs7SUFDckI7SUFDQSxPQUFPO1FBQUVGO1FBQVVRLFdBQVdULEtBQUtNLFFBQVEsQ0FBQ0o7SUFBVztBQUMzRDtBQUNBOzs7O0NBSUMsR0FDRCxNQUFNUCwwQkFBMEJHLHFCQUFxQlksY0FBYztJQUMvRCxDQUFDQyxNQUFNLENBQUM7SUFDUjs7S0FFQyxHQUNELElBQUlBLFNBQVM7UUFBRSxPQUFPLElBQUksQ0FBQyxDQUFDQSxNQUFNO0lBQUU7SUFDcENDLFlBQVlDLElBQUksRUFBRUMsT0FBTyxDQUFFO1FBQ3ZCLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUMsQ0FBQ0gsTUFBTSxHQUFHLENBQUMsR0FBR2YsTUFBTW1CLE9BQU8sRUFBRUY7UUFDbEMsSUFBSSxDQUFDRixNQUFNLENBQUNLLEVBQUUsQ0FBQyxTQUFTO1lBQ3BCLElBQUk7Z0JBQ0EsTUFBTSxJQUFJLENBQUNDLE1BQU07WUFDckIsRUFDQSxPQUFPQyxPQUFPO2dCQUNWQyxRQUFRQyxHQUFHLENBQUMscUNBQXFDRjtZQUNqRCw0QkFBNEI7WUFDaEM7UUFDSjtRQUNBLElBQUlHLFdBQVdDLE9BQU9DLEtBQUssQ0FBQztRQUM1QixJQUFJLENBQUNaLE1BQU0sQ0FBQ0ssRUFBRSxDQUFDLFFBQVEsQ0FBQ2hCO1lBQ3BCcUIsV0FBV0MsT0FBT0UsTUFBTSxDQUFDO2dCQUFDSDtnQkFBVXJCO2FBQUs7WUFDekMsTUFBTSxFQUFFQyxRQUFRLEVBQUVRLFNBQVMsRUFBRSxHQUFHVixZQUFZc0I7WUFDNUNwQixTQUFTd0IsT0FBTyxDQUFDLENBQUNDO2dCQUNkLElBQUksQ0FBQ0MsZUFBZSxDQUFDRDtZQUN6QjtZQUNBTCxXQUFXWjtRQUNmO1FBQ0EsSUFBSSxDQUFDRSxNQUFNLENBQUNLLEVBQUUsQ0FBQyxPQUFPO1lBQ2xCLElBQUksQ0FBQ1ksSUFBSSxDQUFDO1lBQ1YsSUFBSSxDQUFDakIsTUFBTSxDQUFDa0IsT0FBTztZQUNuQixJQUFJLENBQUNsQixNQUFNLENBQUNtQixHQUFHO1FBQ25CO0lBQ0o7SUFDQUQsVUFBVTtRQUNOLElBQUksQ0FBQ2xCLE1BQU0sQ0FBQ2tCLE9BQU87UUFDbkIsSUFBSSxDQUFDbEIsTUFBTSxDQUFDbUIsR0FBRztRQUNmLEtBQUssQ0FBQ0Q7SUFDVjtJQUNBLE1BQU1FLE9BQU9MLE9BQU8sRUFBRTtRQUNsQixJQUFJLENBQUNmLE1BQU0sQ0FBQ3FCLEtBQUssQ0FBQ047SUFDdEI7QUFDSjtBQUNBakMseUJBQXlCLEdBQUdFLG1CQUM1Qiw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9wcm92aWRlcnMvcHJvdmlkZXItaXBjc29ja2V0LmpzPzYzYTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklwY1NvY2tldFByb3ZpZGVyID0gdm9pZCAwO1xuY29uc3QgbmV0XzEgPSByZXF1aXJlKFwibmV0XCIpO1xuY29uc3QgcHJvdmlkZXJfc29ja2V0X2pzXzEgPSByZXF1aXJlKFwiLi9wcm92aWRlci1zb2NrZXQuanNcIik7XG4vLyBAVE9ETzogSXMgdGhpcyBzdWZmaWNpZW50PyBJcyB0aGlzIHJvYnVzdD8gV2lsbCBuZXdsaW5lcyBvY2N1ciBiZXR3ZWVuXG4vLyBhbGwgcGF5bG9hZHMgYW5kIG9ubHkgYmV0d2VlbiBwYXlsb2Fkcz9cbmZ1bmN0aW9uIHNwbGl0QnVmZmVyKGRhdGEpIHtcbiAgICBjb25zdCBtZXNzYWdlcyA9IFtdO1xuICAgIGxldCBsYXN0U3RhcnQgPSAwO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGNvbnN0IG5sID0gZGF0YS5pbmRleE9mKDEwLCBsYXN0U3RhcnQpO1xuICAgICAgICBpZiAobmwgPT09IC0xKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBtZXNzYWdlcy5wdXNoKGRhdGEuc3ViYXJyYXkobGFzdFN0YXJ0LCBubCkudG9TdHJpbmcoKS50cmltKCkpO1xuICAgICAgICBsYXN0U3RhcnQgPSBubCArIDE7XG4gICAgfVxuICAgIHJldHVybiB7IG1lc3NhZ2VzLCByZW1haW5pbmc6IGRhdGEuc3ViYXJyYXkobGFzdFN0YXJ0KSB9O1xufVxuLyoqXG4gKiAgQW4gKipJcGNTb2NrZXRQcm92aWRlcioqIGNvbm5lY3RzIG92ZXIgYW4gSVBDIHNvY2tldCBvbiB0aGUgaG9zdFxuICogIHdoaWNoIHByb3ZpZGVzIGZhc3QgYWNjZXNzIHRvIHRoZSBub2RlLCBidXQgcmVxdWlyZXMgdGhlIG5vZGUgYW5kXG4gKiAgdGhlIHNjcmlwdCBydW4gb24gdGhlIHNhbWUgbWFjaGluZS5cbiAqL1xuY2xhc3MgSXBjU29ja2V0UHJvdmlkZXIgZXh0ZW5kcyBwcm92aWRlcl9zb2NrZXRfanNfMS5Tb2NrZXRQcm92aWRlciB7XG4gICAgI3NvY2tldDtcbiAgICAvKipcbiAgICAgKiAgVGhlIGNvbm5lY3RlZCBzb2NrZXQuXG4gICAgICovXG4gICAgZ2V0IHNvY2tldCgpIHsgcmV0dXJuIHRoaXMuI3NvY2tldDsgfVxuICAgIGNvbnN0cnVjdG9yKHBhdGgsIG5ldHdvcmspIHtcbiAgICAgICAgc3VwZXIobmV0d29yayk7XG4gICAgICAgIHRoaXMuI3NvY2tldCA9ICgwLCBuZXRfMS5jb25uZWN0KShwYXRoKTtcbiAgICAgICAgdGhpcy5zb2NrZXQub24oXCJyZWFkeVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3N0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImZhaWxlZCB0byBzdGFydCBJcGNTb2NrZXRQcm92aWRlclwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgLy8gQFRPRE86IE5vdyB3aGF0PyBSZXN0YXJ0P1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gQnVmZmVyLmFsbG9jKDApO1xuICAgICAgICB0aGlzLnNvY2tldC5vbihcImRhdGFcIiwgKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHJlc3BvbnNlID0gQnVmZmVyLmNvbmNhdChbcmVzcG9uc2UsIGRhdGFdKTtcbiAgICAgICAgICAgIGNvbnN0IHsgbWVzc2FnZXMsIHJlbWFpbmluZyB9ID0gc3BsaXRCdWZmZXIocmVzcG9uc2UpO1xuICAgICAgICAgICAgbWVzc2FnZXMuZm9yRWFjaCgobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3NNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXNwb25zZSA9IHJlbWFpbmluZztcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc29ja2V0Lm9uKFwiZW5kXCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImNsb3NlXCIpO1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQuZW5kKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnNvY2tldC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuc29ja2V0LmVuZCgpO1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgfVxuICAgIGFzeW5jIF93cml0ZShtZXNzYWdlKSB7XG4gICAgICAgIHRoaXMuc29ja2V0LndyaXRlKG1lc3NhZ2UpO1xuICAgIH1cbn1cbmV4cG9ydHMuSXBjU29ja2V0UHJvdmlkZXIgPSBJcGNTb2NrZXRQcm92aWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLWlwY3NvY2tldC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJJcGNTb2NrZXRQcm92aWRlciIsIm5ldF8xIiwicmVxdWlyZSIsInByb3ZpZGVyX3NvY2tldF9qc18xIiwic3BsaXRCdWZmZXIiLCJkYXRhIiwibWVzc2FnZXMiLCJsYXN0U3RhcnQiLCJubCIsImluZGV4T2YiLCJwdXNoIiwic3ViYXJyYXkiLCJ0b1N0cmluZyIsInRyaW0iLCJyZW1haW5pbmciLCJTb2NrZXRQcm92aWRlciIsInNvY2tldCIsImNvbnN0cnVjdG9yIiwicGF0aCIsIm5ldHdvcmsiLCJjb25uZWN0Iiwib24iLCJfc3RhcnQiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJyZXNwb25zZSIsIkJ1ZmZlciIsImFsbG9jIiwiY29uY2F0IiwiZm9yRWFjaCIsIm1lc3NhZ2UiLCJfcHJvY2Vzc01lc3NhZ2UiLCJlbWl0IiwiZGVzdHJveSIsImVuZCIsIl93cml0ZSIsIndyaXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-ipcsocket.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js":
/*!************************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  One of the most common ways to interact with the blockchain is\n *  by a node running a JSON-RPC interface which can be connected to,\n *  based on the transport, using:\n *\n *  - HTTP or HTTPS - [[JsonRpcProvider]]\n *  - WebSocket - [[WebSocketProvider]]\n *  - IPC - [[IpcSocketProvider]]\n *\n * @_section: api/providers/jsonrpc:JSON-RPC Provider  [about-jsonrpcProvider]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.JsonRpcProvider = exports.JsonRpcApiPollingProvider = exports.JsonRpcApiProvider = exports.JsonRpcSigner = void 0;\n// @TODO:\n// - Add the batching API\n// https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/eth1.0-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=true&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false\nconst index_js_1 = __webpack_require__(/*! ../abi/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/abi/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../address/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/index.js\");\nconst index_js_3 = __webpack_require__(/*! ../hash/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/hash/index.js\");\nconst index_js_4 = __webpack_require__(/*! ../transaction/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/transaction/index.js\");\nconst index_js_5 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst abstract_provider_js_1 = __webpack_require__(/*! ./abstract-provider.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/abstract-provider.js\");\nconst abstract_signer_js_1 = __webpack_require__(/*! ./abstract-signer.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/abstract-signer.js\");\nconst network_js_1 = __webpack_require__(/*! ./network.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/network.js\");\nconst subscriber_filterid_js_1 = __webpack_require__(/*! ./subscriber-filterid.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/subscriber-filterid.js\");\nconst subscriber_polling_js_1 = __webpack_require__(/*! ./subscriber-polling.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/subscriber-polling.js\");\nconst Primitive = \"bigint,boolean,function,number,string,symbol\".split(/,/g);\n//const Methods = \"getAddress,then\".split(/,/g);\nfunction deepCopy(value) {\n    if (value == null || Primitive.indexOf(typeof value) >= 0) {\n        return value;\n    }\n    // Keep any Addressable\n    if (typeof value.getAddress === \"function\") {\n        return value;\n    }\n    if (Array.isArray(value)) {\n        return value.map(deepCopy);\n    }\n    if (typeof value === \"object\") {\n        return Object.keys(value).reduce((accum, key)=>{\n            accum[key] = value[key];\n            return accum;\n        }, {});\n    }\n    throw new Error(`should not happen: ${value} (${typeof value})`);\n}\nfunction stall(duration) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, duration);\n    });\n}\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nfunction isPollable(value) {\n    return value && typeof value.pollingInterval === \"number\";\n}\nconst defaultOptions = {\n    polling: false,\n    staticNetwork: null,\n    batchStallTime: 10,\n    batchMaxSize: 1 << 20,\n    batchMaxCount: 100,\n    cacheTimeout: 250,\n    pollingInterval: 4000\n};\n// @TODO: Unchecked Signers\nclass JsonRpcSigner extends abstract_signer_js_1.AbstractSigner {\n    constructor(provider, address){\n        super(provider);\n        address = (0, index_js_2.getAddress)(address);\n        (0, index_js_5.defineProperties)(this, {\n            address\n        });\n    }\n    connect(provider) {\n        (0, index_js_5.assert)(false, \"cannot reconnect JsonRpcSigner\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"signer.connect\"\n        });\n    }\n    async getAddress() {\n        return this.address;\n    }\n    // JSON-RPC will automatially fill in nonce, etc. so we just check from\n    async populateTransaction(tx) {\n        return await this.populateCall(tx);\n    }\n    // Returns just the hash of the transaction after sent, which is what\n    // the bare JSON-RPC API does;\n    async sendUncheckedTransaction(_tx) {\n        const tx = deepCopy(_tx);\n        const promises = [];\n        // Make sure the from matches the sender\n        if (tx.from) {\n            const _from = tx.from;\n            promises.push((async ()=>{\n                const from = await (0, index_js_2.resolveAddress)(_from, this.provider);\n                (0, index_js_5.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n                tx.from = from;\n            })());\n        } else {\n            tx.from = this.address;\n        }\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (tx.gasLimit == null) {\n            promises.push((async ()=>{\n                tx.gasLimit = await this.provider.estimateGas({\n                    ...tx,\n                    from: this.address\n                });\n            })());\n        }\n        // The address may be an ENS name or Addressable\n        if (tx.to != null) {\n            const _to = tx.to;\n            promises.push((async ()=>{\n                tx.to = await (0, index_js_2.resolveAddress)(_to, this.provider);\n            })());\n        }\n        // Wait until all of our properties are filled in\n        if (promises.length) {\n            await Promise.all(promises);\n        }\n        const hexTx = this.provider.getRpcTransaction(tx);\n        return this.provider.send(\"eth_sendTransaction\", [\n            hexTx\n        ]);\n    }\n    async sendTransaction(tx) {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider.getBlockNumber();\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(tx);\n        // Unfortunately, JSON-RPC only provides and opaque transaction hash\n        // for a response, and we need the actual transaction, so we poll\n        // for it; it should show up very quickly\n        return await new Promise((resolve, reject)=>{\n            const timeouts = [\n                1000,\n                100\n            ];\n            const checkTx = async ()=>{\n                // Try getting the transaction\n                const tx = await this.provider.getTransaction(hash);\n                if (tx != null) {\n                    resolve(tx.replaceableTransaction(blockNumber));\n                    return;\n                }\n                // Wait another 4 seconds\n                this.provider._setTimeout(()=>{\n                    checkTx();\n                }, timeouts.pop() || 4000);\n            };\n            checkTx();\n        });\n    }\n    async signTransaction(_tx) {\n        const tx = deepCopy(_tx);\n        // Make sure the from matches the sender\n        if (tx.from) {\n            const from = await (0, index_js_2.resolveAddress)(tx.from, this.provider);\n            (0, index_js_5.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n            tx.from = from;\n        } else {\n            tx.from = this.address;\n        }\n        const hexTx = this.provider.getRpcTransaction(tx);\n        return await this.provider.send(\"eth_signTransaction\", [\n            hexTx\n        ]);\n    }\n    async signMessage(_message) {\n        const message = typeof _message === \"string\" ? (0, index_js_5.toUtf8Bytes)(_message) : _message;\n        return await this.provider.send(\"personal_sign\", [\n            (0, index_js_5.hexlify)(message),\n            this.address.toLowerCase()\n        ]);\n    }\n    async signTypedData(domain, types, _value) {\n        const value = deepCopy(_value);\n        // Populate any ENS names (in-place)\n        const populated = await index_js_3.TypedDataEncoder.resolveNames(domain, types, value, async (value)=>{\n            const address = await (0, index_js_2.resolveAddress)(value);\n            (0, index_js_5.assertArgument)(address != null, \"TypedData does not support null address\", \"value\", value);\n            return address;\n        });\n        return await this.provider.send(\"eth_signTypedData_v4\", [\n            this.address.toLowerCase(),\n            JSON.stringify(index_js_3.TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n        ]);\n    }\n    async unlock(password) {\n        return this.provider.send(\"personal_unlockAccount\", [\n            this.address.toLowerCase(),\n            password,\n            null\n        ]);\n    }\n    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n    async _legacySignMessage(_message) {\n        const message = typeof _message === \"string\" ? (0, index_js_5.toUtf8Bytes)(_message) : _message;\n        return await this.provider.send(\"eth_sign\", [\n            this.address.toLowerCase(),\n            (0, index_js_5.hexlify)(message)\n        ]);\n    }\n}\nexports.JsonRpcSigner = JsonRpcSigner;\n/**\n *  The JsonRpcApiProvider is an abstract class and **MUST** be\n *  sub-classed.\n *\n *  It provides the base for all JSON-RPC-based Provider interaction.\n *\n *  Sub-classing Notes:\n *  - a sub-class MUST override _send\n *  - a sub-class MUST call the `_start()` method once connected\n */ class JsonRpcApiProvider extends abstract_provider_js_1.AbstractProvider {\n    #options;\n    // The next ID to use for the JSON-RPC ID field\n    #nextId;\n    // Payloads are queued and triggered in batches using the drainTimer\n    #payloads;\n    #drainTimer;\n    #notReady;\n    #network;\n    #scheduleDrain() {\n        if (this.#drainTimer) {\n            return;\n        }\n        // If we aren't using batching, no hard in sending it immeidately\n        const stallTime = this._getOption(\"batchMaxCount\") === 1 ? 0 : this._getOption(\"batchStallTime\");\n        this.#drainTimer = setTimeout(()=>{\n            this.#drainTimer = null;\n            const payloads = this.#payloads;\n            this.#payloads = [];\n            while(payloads.length){\n                // Create payload batches that satisfy our batch constraints\n                const batch = [\n                    payloads.shift()\n                ];\n                while(payloads.length){\n                    if (batch.length === this.#options.batchMaxCount) {\n                        break;\n                    }\n                    batch.push(payloads.shift());\n                    const bytes = JSON.stringify(batch.map((p)=>p.payload));\n                    if (bytes.length > this.#options.batchMaxSize) {\n                        payloads.unshift(batch.pop());\n                        break;\n                    }\n                }\n                // Process the result to each payload\n                (async ()=>{\n                    const payload = batch.length === 1 ? batch[0].payload : batch.map((p)=>p.payload);\n                    this.emit(\"debug\", {\n                        action: \"sendRpcPayload\",\n                        payload\n                    });\n                    try {\n                        const result = await this._send(payload);\n                        this.emit(\"debug\", {\n                            action: \"receiveRpcResult\",\n                            result\n                        });\n                        // Process results in batch order\n                        for (const { resolve, reject, payload } of batch){\n                            if (this.destroyed) {\n                                reject((0, index_js_5.makeError)(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", {\n                                    operation: payload.method\n                                }));\n                                continue;\n                            }\n                            // Find the matching result\n                            const resp = result.filter((r)=>r.id === payload.id)[0];\n                            // No result; the node failed us in unexpected ways\n                            if (resp == null) {\n                                const error = (0, index_js_5.makeError)(\"missing response for request\", \"BAD_DATA\", {\n                                    value: result,\n                                    info: {\n                                        payload\n                                    }\n                                });\n                                this.emit(\"error\", error);\n                                reject(error);\n                                continue;\n                            }\n                            // The response is an error\n                            if (\"error\" in resp) {\n                                reject(this.getRpcError(payload, resp));\n                                continue;\n                            }\n                            // All good; send the result\n                            resolve(resp.result);\n                        }\n                    } catch (error) {\n                        this.emit(\"debug\", {\n                            action: \"receiveRpcError\",\n                            error\n                        });\n                        for (const { reject } of batch){\n                            // @TODO: augment the error with the payload\n                            reject(error);\n                        }\n                    }\n                })();\n            }\n        }, stallTime);\n    }\n    constructor(network, options){\n        super(network, options);\n        this.#nextId = 1;\n        this.#options = Object.assign({}, defaultOptions, options || {});\n        this.#payloads = [];\n        this.#drainTimer = null;\n        this.#network = null;\n        {\n            let resolve = null;\n            const promise = new Promise((_resolve)=>{\n                resolve = _resolve;\n            });\n            this.#notReady = {\n                promise,\n                resolve\n            };\n        }\n        // Make sure any static network is compatbile with the provided netwrok\n        const staticNetwork = this._getOption(\"staticNetwork\");\n        if (staticNetwork) {\n            (0, index_js_5.assertArgument)(network == null || staticNetwork.matches(network), \"staticNetwork MUST match network object\", \"options\", options);\n            this.#network = staticNetwork;\n        }\n    }\n    /**\n     *  Returns the value associated with the option %%key%%.\n     *\n     *  Sub-classes can use this to inquire about configuration options.\n     */ _getOption(key) {\n        return this.#options[key];\n    }\n    /**\n     *  Gets the [[Network]] this provider has committed to. On each call, the network\n     *  is detected, and if it has changed, the call will reject.\n     */ get _network() {\n        (0, index_js_5.assert)(this.#network, \"network is not available yet\", \"NETWORK_ERROR\");\n        return this.#network;\n    }\n    /**\n     *  Resolves to the non-normalized value by performing %%req%%.\n     *\n     *  Sub-classes may override this to modify behavior of actions,\n     *  and should generally call ``super._perform`` as a fallback.\n     */ async _perform(req) {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (req.method === \"call\" || req.method === \"estimateGas\") {\n            let tx = req.transaction;\n            if (tx && tx.type != null && (0, index_js_5.getBigInt)(tx.type)) {\n                // If there are no EIP-1559 properties, it might be non-EIP-a559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        req = Object.assign({}, req, {\n                            transaction: Object.assign({}, tx, {\n                                type: undefined\n                            })\n                        });\n                    }\n                }\n            }\n        }\n        const request = this.getRpcRequest(req);\n        if (request != null) {\n            return await this.send(request.method, request.args);\n        }\n        return super._perform(req);\n    }\n    /**\n     *  Sub-classes may override this; it detects the *actual* network that\n     *  we are **currently** connected to.\n     *\n     *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the\n     *  _send primitive must be used instead.\n     */ async _detectNetwork() {\n        const network = this._getOption(\"staticNetwork\");\n        if (network) {\n            return network;\n        }\n        // If we are ready, use ``send``, which enabled requests to be batched\n        if (this.ready) {\n            return network_js_1.Network.from((0, index_js_5.getBigInt)(await this.send(\"eth_chainId\", [])));\n        }\n        // We are not ready yet; use the primitive _send\n        const payload = {\n            id: this.#nextId++,\n            method: \"eth_chainId\",\n            params: [],\n            jsonrpc: \"2.0\"\n        };\n        this.emit(\"debug\", {\n            action: \"sendRpcPayload\",\n            payload\n        });\n        let result;\n        try {\n            result = (await this._send(payload))[0];\n        } catch (error) {\n            this.emit(\"debug\", {\n                action: \"receiveRpcError\",\n                error\n            });\n            throw error;\n        }\n        this.emit(\"debug\", {\n            action: \"receiveRpcResult\",\n            result\n        });\n        if (\"result\" in result) {\n            return network_js_1.Network.from((0, index_js_5.getBigInt)(result.result));\n        }\n        throw this.getRpcError(payload, result);\n    }\n    /**\n     *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls\n     *  will be passed to [[_send]] from [[send]]. If it is overridden, then\n     *  ``super._start()`` **MUST** be called.\n     *\n     *  Calling it multiple times is safe and has no effect.\n     */ _start() {\n        if (this.#notReady == null || this.#notReady.resolve == null) {\n            return;\n        }\n        this.#notReady.resolve();\n        this.#notReady = null;\n        (async ()=>{\n            // Bootstrap the network\n            while(this.#network == null && !this.destroyed){\n                try {\n                    this.#network = await this._detectNetwork();\n                } catch (error) {\n                    if (this.destroyed) {\n                        break;\n                    }\n                    console.log(\"JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)\");\n                    this.emit(\"error\", (0, index_js_5.makeError)(\"failed to bootstrap network detection\", \"NETWORK_ERROR\", {\n                        event: \"initial-network-discovery\",\n                        info: {\n                            error\n                        }\n                    }));\n                    await stall(1000);\n                }\n            }\n            // Start dispatching requests\n            this.#scheduleDrain();\n        })();\n    }\n    /**\n     *  Resolves once the [[_start]] has been called. This can be used in\n     *  sub-classes to defer sending data until the connection has been\n     *  established.\n     */ async _waitUntilReady() {\n        if (this.#notReady == null) {\n            return;\n        }\n        return await this.#notReady.promise;\n    }\n    /**\n     *  Return a Subscriber that will manage the %%sub%%.\n     *\n     *  Sub-classes may override this to modify the behavior of\n     *  subscription management.\n     */ _getSubscriber(sub) {\n        // Pending Filters aren't availble via polling\n        if (sub.type === \"pending\") {\n            return new subscriber_filterid_js_1.FilterIdPendingSubscriber(this);\n        }\n        if (sub.type === \"event\") {\n            if (this._getOption(\"polling\")) {\n                return new subscriber_polling_js_1.PollingEventSubscriber(this, sub.filter);\n            }\n            return new subscriber_filterid_js_1.FilterIdEventSubscriber(this, sub.filter);\n        }\n        // Orphaned Logs are handled automatically, by the filter, since\n        // logs with removed are emitted by it\n        if (sub.type === \"orphan\" && sub.filter.orphan === \"drop-log\") {\n            return new abstract_provider_js_1.UnmanagedSubscriber(\"orphan\");\n        }\n        return super._getSubscriber(sub);\n    }\n    /**\n     *  Returns true only if the [[_start]] has been called.\n     */ get ready() {\n        return this.#notReady == null;\n    }\n    /**\n     *  Returns %%tx%% as a normalized JSON-RPC transaction request,\n     *  which has all values hexlified and any numeric values converted\n     *  to Quantity values.\n     */ getRpcTransaction(tx) {\n        const result = {};\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\n            \"chainId\",\n            \"gasLimit\",\n            \"gasPrice\",\n            \"type\",\n            \"maxFeePerGas\",\n            \"maxPriorityFeePerGas\",\n            \"nonce\",\n            \"value\"\n        ].forEach((key)=>{\n            if (tx[key] == null) {\n                return;\n            }\n            let dstKey = key;\n            if (key === \"gasLimit\") {\n                dstKey = \"gas\";\n            }\n            result[dstKey] = (0, index_js_5.toQuantity)((0, index_js_5.getBigInt)(tx[key], `tx.${key}`));\n        });\n        // Make sure addresses and data are lowercase\n        [\n            \"from\",\n            \"to\",\n            \"data\"\n        ].forEach((key)=>{\n            if (tx[key] == null) {\n                return;\n            }\n            result[key] = (0, index_js_5.hexlify)(tx[key]);\n        });\n        // Normalize the access list object\n        if (tx.accessList) {\n            result[\"accessList\"] = (0, index_js_4.accessListify)(tx.accessList);\n        }\n        return result;\n    }\n    /**\n     *  Returns the request method and arguments required to perform\n     *  %%req%%.\n     */ getRpcRequest(req) {\n        switch(req.method){\n            case \"chainId\":\n                return {\n                    method: \"eth_chainId\",\n                    args: []\n                };\n            case \"getBlockNumber\":\n                return {\n                    method: \"eth_blockNumber\",\n                    args: []\n                };\n            case \"getGasPrice\":\n                return {\n                    method: \"eth_gasPrice\",\n                    args: []\n                };\n            case \"getBalance\":\n                return {\n                    method: \"eth_getBalance\",\n                    args: [\n                        getLowerCase(req.address),\n                        req.blockTag\n                    ]\n                };\n            case \"getTransactionCount\":\n                return {\n                    method: \"eth_getTransactionCount\",\n                    args: [\n                        getLowerCase(req.address),\n                        req.blockTag\n                    ]\n                };\n            case \"getCode\":\n                return {\n                    method: \"eth_getCode\",\n                    args: [\n                        getLowerCase(req.address),\n                        req.blockTag\n                    ]\n                };\n            case \"getStorage\":\n                return {\n                    method: \"eth_getStorageAt\",\n                    args: [\n                        getLowerCase(req.address),\n                        \"0x\" + req.position.toString(16),\n                        req.blockTag\n                    ]\n                };\n            case \"broadcastTransaction\":\n                return {\n                    method: \"eth_sendRawTransaction\",\n                    args: [\n                        req.signedTransaction\n                    ]\n                };\n            case \"getBlock\":\n                if (\"blockTag\" in req) {\n                    return {\n                        method: \"eth_getBlockByNumber\",\n                        args: [\n                            req.blockTag,\n                            !!req.includeTransactions\n                        ]\n                    };\n                } else if (\"blockHash\" in req) {\n                    return {\n                        method: \"eth_getBlockByHash\",\n                        args: [\n                            req.blockHash,\n                            !!req.includeTransactions\n                        ]\n                    };\n                }\n                break;\n            case \"getTransaction\":\n                return {\n                    method: \"eth_getTransactionByHash\",\n                    args: [\n                        req.hash\n                    ]\n                };\n            case \"getTransactionReceipt\":\n                return {\n                    method: \"eth_getTransactionReceipt\",\n                    args: [\n                        req.hash\n                    ]\n                };\n            case \"call\":\n                return {\n                    method: \"eth_call\",\n                    args: [\n                        this.getRpcTransaction(req.transaction),\n                        req.blockTag\n                    ]\n                };\n            case \"estimateGas\":\n                {\n                    return {\n                        method: \"eth_estimateGas\",\n                        args: [\n                            this.getRpcTransaction(req.transaction)\n                        ]\n                    };\n                }\n            case \"getLogs\":\n                if (req.filter && req.filter.address != null) {\n                    if (Array.isArray(req.filter.address)) {\n                        req.filter.address = req.filter.address.map(getLowerCase);\n                    } else {\n                        req.filter.address = getLowerCase(req.filter.address);\n                    }\n                }\n                return {\n                    method: \"eth_getLogs\",\n                    args: [\n                        req.filter\n                    ]\n                };\n        }\n        return null;\n    }\n    /**\n     *  Returns an ethers-style Error for the given JSON-RPC error\n     *  %%payload%%, coalescing the various strings and error shapes\n     *  that different nodes return, coercing them into a machine-readable\n     *  standardized error.\n     */ getRpcError(payload, _error) {\n        const { method } = payload;\n        const { error } = _error;\n        if (method === \"eth_estimateGas\" && error.message) {\n            const msg = error.message;\n            if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {\n                return (0, index_js_5.makeError)(\"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n                    transaction: payload.params[0],\n                    info: {\n                        payload,\n                        error\n                    }\n                });\n            }\n        }\n        if (method === \"eth_call\" || method === \"eth_estimateGas\") {\n            const result = spelunkData(error);\n            const e = index_js_1.AbiCoder.getBuiltinCallException(method === \"eth_call\" ? \"call\" : \"estimateGas\", payload.params[0], result ? result.data : null);\n            e.info = {\n                error,\n                payload\n            };\n            return e;\n        }\n        // Only estimateGas and call can return arbitrary contract-defined text, so now we\n        // we can process text safely.\n        const message = JSON.stringify(spelunkMessage(error));\n        if (typeof error.message === \"string\" && error.message.match(/user denied|ethers-user-denied/i)) {\n            const actionMap = {\n                eth_sign: \"signMessage\",\n                personal_sign: \"signMessage\",\n                eth_signTypedData_v4: \"signTypedData\",\n                eth_signTransaction: \"signTransaction\",\n                eth_sendTransaction: \"sendTransaction\",\n                eth_requestAccounts: \"requestAccess\",\n                wallet_requestAccounts: \"requestAccess\"\n            };\n            return (0, index_js_5.makeError)(`user rejected action`, \"ACTION_REJECTED\", {\n                action: actionMap[method] || \"unknown\",\n                reason: \"rejected\",\n                info: {\n                    payload,\n                    error\n                }\n            });\n        }\n        if (method === \"eth_sendRawTransaction\" || method === \"eth_sendTransaction\") {\n            const transaction = payload.params[0];\n            if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n                return (0, index_js_5.makeError)(\"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n                    transaction,\n                    info: {\n                        error\n                    }\n                });\n            }\n            if (message.match(/nonce/i) && message.match(/too low/i)) {\n                return (0, index_js_5.makeError)(\"nonce has already been used\", \"NONCE_EXPIRED\", {\n                    transaction,\n                    info: {\n                        error\n                    }\n                });\n            }\n            // \"replacement transaction underpriced\"\n            if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {\n                return (0, index_js_5.makeError)(\"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n                    transaction,\n                    info: {\n                        error\n                    }\n                });\n            }\n            if (message.match(/only replay-protected/i)) {\n                return (0, index_js_5.makeError)(\"legacy pre-eip-155 transactions not supported\", \"UNSUPPORTED_OPERATION\", {\n                    operation: method,\n                    info: {\n                        transaction,\n                        info: {\n                            error\n                        }\n                    }\n                });\n            }\n        }\n        let unsupported = !!message.match(/the method .* does not exist/i);\n        if (!unsupported) {\n            if (error && error.details && error.details.startsWith(\"Unauthorized method:\")) {\n                unsupported = true;\n            }\n        }\n        if (unsupported) {\n            return (0, index_js_5.makeError)(\"unsupported operation\", \"UNSUPPORTED_OPERATION\", {\n                operation: payload.method,\n                info: {\n                    error,\n                    payload\n                }\n            });\n        }\n        return (0, index_js_5.makeError)(\"could not coalesce error\", \"UNKNOWN_ERROR\", {\n            error,\n            payload\n        });\n    }\n    /**\n     *  Requests the %%method%% with %%params%% via the JSON-RPC protocol\n     *  over the underlying channel. This can be used to call methods\n     *  on the backend that do not have a high-level API within the Provider\n     *  API.\n     *\n     *  This method queues requests according to the batch constraints\n     *  in the options, assigns the request a unique ID.\n     *\n     *  **Do NOT override** this method in sub-classes; instead\n     *  override [[_send]] or force the options values in the\n     *  call to the constructor to modify this method's behavior.\n     */ send(method, params) {\n        // @TODO: cache chainId?? purge on switch_networks\n        // We have been destroyed; no operations are supported anymore\n        if (this.destroyed) {\n            return Promise.reject((0, index_js_5.makeError)(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", {\n                operation: method\n            }));\n        }\n        const id = this.#nextId++;\n        const promise = new Promise((resolve, reject)=>{\n            this.#payloads.push({\n                resolve,\n                reject,\n                payload: {\n                    method,\n                    params,\n                    id,\n                    jsonrpc: \"2.0\"\n                }\n            });\n        });\n        // If there is not a pending drainTimer, set one\n        this.#scheduleDrain();\n        return promise;\n    }\n    /**\n     *  Resolves to the [[Signer]] account for  %%address%% managed by\n     *  the client.\n     *\n     *  If the %%address%% is a number, it is used as an index in the\n     *  the accounts from [[listAccounts]].\n     *\n     *  This can only be used on clients which manage accounts (such as\n     *  Geth with imported account or MetaMask).\n     *\n     *  Throws if the account doesn't exist.\n     */ async getSigner(address) {\n        if (address == null) {\n            address = 0;\n        }\n        const accountsPromise = this.send(\"eth_accounts\", []);\n        // Account index\n        if (typeof address === \"number\") {\n            const accounts = await accountsPromise;\n            if (address >= accounts.length) {\n                throw new Error(\"no such account\");\n            }\n            return new JsonRpcSigner(this, accounts[address]);\n        }\n        const { accounts } = await (0, index_js_5.resolveProperties)({\n            network: this.getNetwork(),\n            accounts: accountsPromise\n        });\n        // Account address\n        address = (0, index_js_2.getAddress)(address);\n        for (const account of accounts){\n            if ((0, index_js_2.getAddress)(account) === address) {\n                return new JsonRpcSigner(this, address);\n            }\n        }\n        throw new Error(\"invalid account\");\n    }\n    async listAccounts() {\n        const accounts = await this.send(\"eth_accounts\", []);\n        return accounts.map((a)=>new JsonRpcSigner(this, a));\n    }\n    destroy() {\n        // Stop processing requests\n        if (this.#drainTimer) {\n            clearTimeout(this.#drainTimer);\n            this.#drainTimer = null;\n        }\n        // Cancel all pending requests\n        for (const { payload, reject } of this.#payloads){\n            reject((0, index_js_5.makeError)(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", {\n                operation: payload.method\n            }));\n        }\n        this.#payloads = [];\n        // Parent clean-up\n        super.destroy();\n    }\n}\nexports.JsonRpcApiProvider = JsonRpcApiProvider;\n// @TODO: remove this in v7, it is not exported because this functionality\n// is exposed in the JsonRpcApiProvider by setting polling to true. It should\n// be safe to remove regardless, because it isn't reachable, but just in case.\n/**\n *  @_ignore:\n */ class JsonRpcApiPollingProvider extends JsonRpcApiProvider {\n    #pollingInterval;\n    constructor(network, options){\n        super(network, options);\n        this.#pollingInterval = 4000;\n    }\n    _getSubscriber(sub) {\n        const subscriber = super._getSubscriber(sub);\n        if (isPollable(subscriber)) {\n            subscriber.pollingInterval = this.#pollingInterval;\n        }\n        return subscriber;\n    }\n    /**\n     *  The polling interval (default: 4000 ms)\n     */ get pollingInterval() {\n        return this.#pollingInterval;\n    }\n    set pollingInterval(value) {\n        if (!Number.isInteger(value) || value < 0) {\n            throw new Error(\"invalid interval\");\n        }\n        this.#pollingInterval = value;\n        this._forEachSubscriber((sub)=>{\n            if (isPollable(sub)) {\n                sub.pollingInterval = this.#pollingInterval;\n            }\n        });\n    }\n}\nexports.JsonRpcApiPollingProvider = JsonRpcApiPollingProvider;\n/**\n *  The JsonRpcProvider is one of the most common Providers,\n *  which performs all operations over HTTP (or HTTPS) requests.\n *\n *  Events are processed by polling the backend for the current block\n *  number; when it advances, all block-base events are then checked\n *  for updates.\n */ class JsonRpcProvider extends JsonRpcApiPollingProvider {\n    #connect;\n    constructor(url, network, options){\n        if (url == null) {\n            url = \"http://localhost:8545\";\n        }\n        super(network, options);\n        if (typeof url === \"string\") {\n            this.#connect = new index_js_5.FetchRequest(url);\n        } else {\n            this.#connect = url.clone();\n        }\n    }\n    _getConnection() {\n        return this.#connect.clone();\n    }\n    async send(method, params) {\n        // All requests are over HTTP, so we can just start handling requests\n        // We do this here rather than the constructor so that we don't send any\n        // requests to the network (i.e. eth_chainId) until we absolutely have to.\n        await this._start();\n        return await super.send(method, params);\n    }\n    async _send(payload) {\n        // Configure a POST connection for the requested method\n        const request = this._getConnection();\n        request.body = JSON.stringify(payload);\n        request.setHeader(\"content-type\", \"application/json\");\n        const response = await request.send();\n        response.assertOk();\n        let resp = response.bodyJson;\n        if (!Array.isArray(resp)) {\n            resp = [\n                resp\n            ];\n        }\n        return resp;\n    }\n}\nexports.JsonRpcProvider = JsonRpcProvider;\nfunction spelunkData(value) {\n    if (value == null) {\n        return null;\n    }\n    // These *are* the droids we're looking for.\n    if (typeof value.message === \"string\" && value.message.match(/revert/i) && (0, index_js_5.isHexString)(value.data)) {\n        return {\n            message: value.message,\n            data: value.data\n        };\n    }\n    // Spelunk further...\n    if (typeof value === \"object\") {\n        for(const key in value){\n            const result = spelunkData(value[key]);\n            if (result) {\n                return result;\n            }\n        }\n        return null;\n    }\n    // Might be a JSON string we can further descend...\n    if (typeof value === \"string\") {\n        try {\n            return spelunkData(JSON.parse(value));\n        } catch (error) {}\n    }\n    return null;\n}\nfunction _spelunkMessage(value, result) {\n    if (value == null) {\n        return;\n    }\n    // These *are* the droids we're looking for.\n    if (typeof value.message === \"string\") {\n        result.push(value.message);\n    }\n    // Spelunk further...\n    if (typeof value === \"object\") {\n        for(const key in value){\n            _spelunkMessage(value[key], result);\n        }\n    }\n    // Might be a JSON string we can further descend...\n    if (typeof value === \"string\") {\n        try {\n            return _spelunkMessage(JSON.parse(value), result);\n        } catch (error) {}\n    }\n}\nfunction spelunkMessage(value) {\n    const result = [];\n    _spelunkMessage(value, result);\n    return result;\n} //# sourceMappingURL=provider-jsonrpc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-pocket.js":
/*!***********************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/provider-pocket.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PocketProvider = void 0;\n/**\n *  [[link-pocket]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]\n */ const index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst community_js_1 = __webpack_require__(/*! ./community.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/community.js\");\nconst network_js_1 = __webpack_require__(/*! ./network.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/network.js\");\nconst provider_jsonrpc_js_1 = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js\");\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nfunction getHost(name) {\n    switch(name){\n        case \"mainnet\":\n            return \"eth-mainnet.gateway.pokt.network\";\n        case \"goerli\":\n            return \"eth-goerli.gateway.pokt.network\";\n        case \"matic\":\n            return \"poly-mainnet.gateway.pokt.network\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai-rpc.gateway.pokt.network\";\n    }\n    (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **PocketProvider** connects to the [[link-pocket]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-pocket-signup).\n */ class PocketProvider extends provider_jsonrpc_js_1.JsonRpcProvider {\n    /**\n     *  Create a new **PocketProvider**.\n     *\n     *  By default connecting to ``mainnet`` with a highly throttled\n     *  API key.\n     */ constructor(_network, applicationId, applicationSecret){\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = network_js_1.Network.from(_network);\n        if (applicationId == null) {\n            applicationId = defaultApplicationId;\n        }\n        if (applicationSecret == null) {\n            applicationSecret = null;\n        }\n        const options = {\n            staticNetwork: network\n        };\n        const request = PocketProvider.getRequest(network, applicationId, applicationSecret);\n        super(request, network, options);\n        (0, index_js_1.defineProperties)(this, {\n            applicationId,\n            applicationSecret\n        });\n    }\n    _getProvider(chainId) {\n        try {\n            return new PocketProvider(chainId, this.applicationId, this.applicationSecret);\n        } catch (error) {}\n        return super._getProvider(chainId);\n    }\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%applicationId%%.\n     */ static getRequest(network, applicationId, applicationSecret) {\n        if (applicationId == null) {\n            applicationId = defaultApplicationId;\n        }\n        const request = new index_js_1.FetchRequest(`https:/\\/${getHost(network.name)}/v1/lb/${applicationId}`);\n        request.allowGzip = true;\n        if (applicationSecret) {\n            request.setCredentials(\"\", applicationSecret);\n        }\n        if (applicationId === defaultApplicationId) {\n            request.retryFunc = async (request, response, attempt)=>{\n                (0, community_js_1.showThrottleMessage)(\"PocketProvider\");\n                return true;\n            };\n        }\n        return request;\n    }\n    isCommunityResource() {\n        return this.applicationId === defaultApplicationId;\n    }\n}\nexports.PocketProvider = PocketProvider; //# sourceMappingURL=provider-pocket.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-pocket.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-quicknode.js":
/*!**************************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/provider-quicknode.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  [[link-quicknode]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:QuickNode  [providers-quicknode]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.QuickNodeProvider = void 0;\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst community_js_1 = __webpack_require__(/*! ./community.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/community.js\");\nconst network_js_1 = __webpack_require__(/*! ./network.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/network.js\");\nconst provider_jsonrpc_js_1 = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js\");\nconst defaultToken = \"919b412a057b5e9c9b6dce193c5a60242d6efadb\";\nfunction getHost(name) {\n    switch(name){\n        case \"mainnet\":\n            return \"ethers.quiknode.pro\";\n        case \"goerli\":\n            return \"ethers.ethereum-goerli.quiknode.pro\";\n        //case \"sepolia\":\n        //    return \"sepolia.infura.io\";\n        case \"arbitrum\":\n            return \"ethers.arbitrum-mainnet.quiknode.pro\";\n        case \"arbitrum-goerli\":\n            return \"ethers.arbitrum-goerli.quiknode.pro\";\n        case \"matic\":\n            return \"ethers.matic.quiknode.pro\";\n        case \"matic-mumbai\":\n            return \"ethers.matic-testnet.quiknode.pro\";\n        case \"optimism\":\n            return \"ethers.optimism.quiknode.pro\";\n        case \"optimism-goerli\":\n            return \"ethers.optimism-goerli.quiknode.pro\";\n    }\n    (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **QuickNodeProvider** connects to the [[link-quicknode]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API token is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-quicknode).\n */ class QuickNodeProvider extends provider_jsonrpc_js_1.JsonRpcProvider {\n    /**\n     *  Creates a new **QuickNodeProvider**.\n     */ constructor(_network, token){\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = network_js_1.Network.from(_network);\n        if (token == null) {\n            token = defaultToken;\n        }\n        const request = QuickNodeProvider.getRequest(network, token);\n        super(request, network, {\n            staticNetwork: network\n        });\n        (0, index_js_1.defineProperties)(this, {\n            token\n        });\n    }\n    _getProvider(chainId) {\n        try {\n            return new QuickNodeProvider(chainId, this.token);\n        } catch (error) {}\n        return super._getProvider(chainId);\n    }\n    isCommunityResource() {\n        return this.token === defaultToken;\n    }\n    /**\n     *  Returns a new request prepared for %%network%% and the\n     *  %%token%%.\n     */ static getRequest(network, token) {\n        if (token == null) {\n            token = defaultToken;\n        }\n        const request = new index_js_1.FetchRequest(`https:/\\/${getHost(network.name)}/${token}`);\n        request.allowGzip = true;\n        //if (projectSecret) { request.setCredentials(\"\", projectSecret); }\n        if (token === defaultToken) {\n            request.retryFunc = async (request, response, attempt)=>{\n                (0, community_js_1.showThrottleMessage)(\"QuickNodeProvider\");\n                return true;\n            };\n        }\n        return request;\n    }\n}\nexports.QuickNodeProvider = QuickNodeProvider; //# sourceMappingURL=provider-quicknode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-quicknode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-socket.js":
/*!***********************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/provider-socket.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  Generic long-lived socket provider.\n *\n *  Sub-classing notes\n *  - a sub-class MUST call the `_start()` method once connected\n *  - a sub-class MUST override the `_write(string)` method\n *  - a sub-class MUST call `_processMessage(string)` for each message\n *\n *  @_subsection: api/providers/abstract-provider:Socket Providers  [about-socketProvider]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SocketProvider = exports.SocketEventSubscriber = exports.SocketPendingSubscriber = exports.SocketBlockSubscriber = exports.SocketSubscriber = void 0;\nconst abstract_provider_js_1 = __webpack_require__(/*! ./abstract-provider.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/abstract-provider.js\");\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst provider_jsonrpc_js_1 = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js\");\n/**\n *  A **SocketSubscriber** uses a socket transport to handle events and\n *  should use [[_emit]] to manage the events.\n */ class SocketSubscriber {\n    #provider;\n    #filter;\n    /**\n     *  The filter.\n     */ get filter() {\n        return JSON.parse(this.#filter);\n    }\n    #filterId;\n    #paused;\n    #emitPromise;\n    /**\n     *  Creates a new **SocketSubscriber** attached to %%provider%% listening\n     *  to %%filter%%.\n     */ constructor(provider, filter){\n        this.#provider = provider;\n        this.#filter = JSON.stringify(filter);\n        this.#filterId = null;\n        this.#paused = null;\n        this.#emitPromise = null;\n    }\n    start() {\n        this.#filterId = this.#provider.send(\"eth_subscribe\", this.filter).then((filterId)=>{\n            ;\n            this.#provider._register(filterId, this);\n            return filterId;\n        });\n    }\n    stop() {\n        this.#filterId.then((filterId)=>{\n            this.#provider.send(\"eth_unsubscribe\", [\n                filterId\n            ]);\n        });\n        this.#filterId = null;\n    }\n    // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs\n    //        and resume\n    pause(dropWhilePaused) {\n        (0, index_js_1.assert)(dropWhilePaused, \"preserve logs while paused not supported by SocketSubscriber yet\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"pause(false)\"\n        });\n        this.#paused = !!dropWhilePaused;\n    }\n    resume() {\n        this.#paused = null;\n    }\n    /**\n     *  @_ignore:\n     */ _handleMessage(message) {\n        if (this.#filterId == null) {\n            return;\n        }\n        if (this.#paused === null) {\n            let emitPromise = this.#emitPromise;\n            if (emitPromise == null) {\n                emitPromise = this._emit(this.#provider, message);\n            } else {\n                emitPromise = emitPromise.then(async ()=>{\n                    await this._emit(this.#provider, message);\n                });\n            }\n            this.#emitPromise = emitPromise.then(()=>{\n                if (this.#emitPromise === emitPromise) {\n                    this.#emitPromise = null;\n                }\n            });\n        }\n    }\n    /**\n     *  Sub-classes **must** override this to emit the events on the\n     *  provider.\n     */ async _emit(provider, message) {\n        throw new Error(\"sub-classes must implemente this; _emit\");\n    }\n}\nexports.SocketSubscriber = SocketSubscriber;\n/**\n *  A **SocketBlockSubscriber** listens for ``newHeads`` events and emits\n *  ``\"block\"`` events.\n */ class SocketBlockSubscriber extends SocketSubscriber {\n    /**\n     *  @_ignore:\n     */ constructor(provider){\n        super(provider, [\n            \"newHeads\"\n        ]);\n    }\n    async _emit(provider, message) {\n        provider.emit(\"block\", parseInt(message.number));\n    }\n}\nexports.SocketBlockSubscriber = SocketBlockSubscriber;\n/**\n *  A **SocketPendingSubscriber** listens for pending transacitons and emits\n *  ``\"pending\"`` events.\n */ class SocketPendingSubscriber extends SocketSubscriber {\n    /**\n     *  @_ignore:\n     */ constructor(provider){\n        super(provider, [\n            \"newPendingTransactions\"\n        ]);\n    }\n    async _emit(provider, message) {\n        provider.emit(\"pending\", message);\n    }\n}\nexports.SocketPendingSubscriber = SocketPendingSubscriber;\n/**\n *  A **SocketEventSubscriber** listens for event logs.\n */ class SocketEventSubscriber extends SocketSubscriber {\n    #logFilter;\n    /**\n     *  The filter.\n     */ get logFilter() {\n        return JSON.parse(this.#logFilter);\n    }\n    /**\n     *  @_ignore:\n     */ constructor(provider, filter){\n        super(provider, [\n            \"logs\",\n            filter\n        ]);\n        this.#logFilter = JSON.stringify(filter);\n    }\n    async _emit(provider, message) {\n        provider.emit(this.logFilter, provider._wrapLog(message, provider._network));\n    }\n}\nexports.SocketEventSubscriber = SocketEventSubscriber;\n/**\n *  A **SocketProvider** is backed by a long-lived connection over a\n *  socket, which can subscribe and receive real-time messages over\n *  its communication channel.\n */ class SocketProvider extends provider_jsonrpc_js_1.JsonRpcApiProvider {\n    #callbacks;\n    // Maps each filterId to its subscriber\n    #subs;\n    // If any events come in before a subscriber has finished\n    // registering, queue them\n    #pending;\n    /**\n     *  Creates a new **SocketProvider** connected to %%network%%.\n     *\n     *  If unspecified, the network will be discovered.\n     */ constructor(network){\n        super(network, {\n            batchMaxCount: 1\n        });\n        this.#callbacks = new Map();\n        this.#subs = new Map();\n        this.#pending = new Map();\n    }\n    // This value is only valid after _start has been called\n    /*\n    get _network(): Network {\n        if (this.#network == null) {\n            throw new Error(\"this shouldn't happen\");\n        }\n        return this.#network.clone();\n    }\n    */ _getSubscriber(sub) {\n        switch(sub.type){\n            case \"close\":\n                return new abstract_provider_js_1.UnmanagedSubscriber(\"close\");\n            case \"block\":\n                return new SocketBlockSubscriber(this);\n            case \"pending\":\n                return new SocketPendingSubscriber(this);\n            case \"event\":\n                return new SocketEventSubscriber(this, sub.filter);\n            case \"orphan\":\n                // Handled auto-matically within AbstractProvider\n                // when the log.removed = true\n                if (sub.filter.orphan === \"drop-log\") {\n                    return new abstract_provider_js_1.UnmanagedSubscriber(\"drop-log\");\n                }\n        }\n        return super._getSubscriber(sub);\n    }\n    /**\n     *  Register a new subscriber. This is used internalled by Subscribers\n     *  and generally is unecessary unless extending capabilities.\n     */ _register(filterId, subscriber) {\n        this.#subs.set(filterId, subscriber);\n        const pending = this.#pending.get(filterId);\n        if (pending) {\n            for (const message of pending){\n                subscriber._handleMessage(message);\n            }\n            this.#pending.delete(filterId);\n        }\n    }\n    async _send(payload) {\n        // WebSocket provider doesn't accept batches\n        (0, index_js_1.assertArgument)(!Array.isArray(payload), \"WebSocket does not support batch send\", \"payload\", payload);\n        // @TODO: stringify payloads here and store to prevent mutations\n        // Prepare a promise to respond to\n        const promise = new Promise((resolve, reject)=>{\n            this.#callbacks.set(payload.id, {\n                payload,\n                resolve,\n                reject\n            });\n        });\n        // Wait until the socket is connected before writing to it\n        await this._waitUntilReady();\n        // Write the request to the socket\n        await this._write(JSON.stringify(payload));\n        return [\n            await promise\n        ];\n    }\n    // Sub-classes must call this once they are connected\n    /*\n    async _start(): Promise<void> {\n        if (this.#ready) { return; }\n\n        for (const { payload } of this.#callbacks.values()) {\n            await this._write(JSON.stringify(payload));\n        }\n\n        this.#ready = (async function() {\n            await super._start();\n        })();\n    }\n    */ /**\n     *  Sub-classes **must** call this with messages received over their\n     *  transport to be processed and dispatched.\n     */ async _processMessage(message) {\n        const result = JSON.parse(message);\n        if (result && typeof result === \"object\" && \"id\" in result) {\n            const callback = this.#callbacks.get(result.id);\n            if (callback == null) {\n                this.emit(\"error\", (0, index_js_1.makeError)(\"received result for unknown id\", \"UNKNOWN_ERROR\", {\n                    reasonCode: \"UNKNOWN_ID\",\n                    result\n                }));\n                return;\n            }\n            this.#callbacks.delete(result.id);\n            callback.resolve(result);\n        } else if (result && result.method === \"eth_subscription\") {\n            const filterId = result.params.subscription;\n            const subscriber = this.#subs.get(filterId);\n            if (subscriber) {\n                subscriber._handleMessage(result.params.result);\n            } else {\n                let pending = this.#pending.get(filterId);\n                if (pending == null) {\n                    pending = [];\n                    this.#pending.set(filterId, pending);\n                }\n                pending.push(result.params.result);\n            }\n        } else {\n            this.emit(\"error\", (0, index_js_1.makeError)(\"received unexpected message\", \"UNKNOWN_ERROR\", {\n                reasonCode: \"UNEXPECTED_MESSAGE\",\n                result\n            }));\n            return;\n        }\n    }\n    /**\n     *  Sub-classes **must** override this to send %%message%% over their\n     *  transport.\n     */ async _write(message) {\n        throw new Error(\"sub-classes must override this\");\n    }\n}\nexports.SocketProvider = SocketProvider; //# sourceMappingURL=provider-socket.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-socket.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-websocket.js":
/*!**************************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/provider-websocket.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WebSocketProvider = void 0;\nconst ws_js_1 = __webpack_require__(/*! ./ws.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/ws.js\"); /*-browser*/ \nconst provider_socket_js_1 = __webpack_require__(/*! ./provider-socket.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-socket.js\");\n/**\n *  A JSON-RPC provider which is backed by a WebSocket.\n *\n *  WebSockets are often preferred because they retain a live connection\n *  to a server, which permits more instant access to events.\n *\n *  However, this incurs higher server infrasturture costs, so additional\n *  resources may be required to host your own WebSocket nodes and many\n *  third-party services charge additional fees for WebSocket endpoints.\n */ class WebSocketProvider extends provider_socket_js_1.SocketProvider {\n    #connect;\n    #websocket;\n    get websocket() {\n        if (this.#websocket == null) {\n            throw new Error(\"websocket closed\");\n        }\n        return this.#websocket;\n    }\n    constructor(url, network){\n        super(network);\n        if (typeof url === \"string\") {\n            this.#connect = ()=>{\n                return new ws_js_1.WebSocket(url);\n            };\n            this.#websocket = this.#connect();\n        } else if (typeof url === \"function\") {\n            this.#connect = url;\n            this.#websocket = url();\n        } else {\n            this.#connect = null;\n            this.#websocket = url;\n        }\n        this.websocket.onopen = async ()=>{\n            try {\n                await this._start();\n                this.resume();\n            } catch (error) {\n                console.log(\"failed to start WebsocketProvider\", error);\n            // @TODO: now what? Attempt reconnect?\n            }\n        };\n        this.websocket.onmessage = (message)=>{\n            this._processMessage(message.data);\n        };\n    /*\n                this.websocket.onclose = (event) => {\n                    // @TODO: What event.code should we reconnect on?\n                    const reconnect = false;\n                    if (reconnect) {\n                        this.pause(true);\n                        if (this.#connect) {\n                            this.#websocket = this.#connect();\n                            this.#websocket.onopen = ...\n                            // @TODO: this requires the super class to rebroadcast; move it there\n                        }\n                        this._reconnect();\n                    }\n                };\n        */ }\n    async _write(message) {\n        this.websocket.send(message);\n    }\n    async destroy() {\n        if (this.#websocket != null) {\n            this.#websocket.close();\n            this.#websocket = null;\n        }\n        super.destroy();\n    }\n}\nexports.WebSocketProvider = WebSocketProvider; //# sourceMappingURL=provider-websocket.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9wcm92aWRlcnMvcHJvdmlkZXItd2Vic29ja2V0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx5QkFBeUIsR0FBRyxLQUFLO0FBQ2pDLE1BQU1HLFVBQVVDLG1CQUFPQSxDQUFDLHlFQUFTLEdBQUcsVUFBVTtBQUM5QyxNQUFNQyx1QkFBdUJELG1CQUFPQSxDQUFDLG1HQUFzQjtBQUMzRDs7Ozs7Ozs7O0NBU0MsR0FDRCxNQUFNRiwwQkFBMEJHLHFCQUFxQkMsY0FBYztJQUMvRCxDQUFDQyxPQUFPLENBQUM7SUFDVCxDQUFDQyxTQUFTLENBQUM7SUFDWCxJQUFJQSxZQUFZO1FBQ1osSUFBSSxJQUFJLENBQUMsQ0FBQ0EsU0FBUyxJQUFJLE1BQU07WUFDekIsTUFBTSxJQUFJQyxNQUFNO1FBQ3BCO1FBQ0EsT0FBTyxJQUFJLENBQUMsQ0FBQ0QsU0FBUztJQUMxQjtJQUNBRSxZQUFZQyxHQUFHLEVBQUVDLE9BQU8sQ0FBRTtRQUN0QixLQUFLLENBQUNBO1FBQ04sSUFBSSxPQUFRRCxRQUFTLFVBQVU7WUFDM0IsSUFBSSxDQUFDLENBQUNKLE9BQU8sR0FBRztnQkFBUSxPQUFPLElBQUlKLFFBQVFVLFNBQVMsQ0FBQ0Y7WUFBTTtZQUMzRCxJQUFJLENBQUMsQ0FBQ0gsU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDRCxPQUFPO1FBQ25DLE9BQ0ssSUFBSSxPQUFRSSxRQUFTLFlBQVk7WUFDbEMsSUFBSSxDQUFDLENBQUNKLE9BQU8sR0FBR0k7WUFDaEIsSUFBSSxDQUFDLENBQUNILFNBQVMsR0FBR0c7UUFDdEIsT0FDSztZQUNELElBQUksQ0FBQyxDQUFDSixPQUFPLEdBQUc7WUFDaEIsSUFBSSxDQUFDLENBQUNDLFNBQVMsR0FBR0c7UUFDdEI7UUFDQSxJQUFJLENBQUNILFNBQVMsQ0FBQ00sTUFBTSxHQUFHO1lBQ3BCLElBQUk7Z0JBQ0EsTUFBTSxJQUFJLENBQUNDLE1BQU07Z0JBQ2pCLElBQUksQ0FBQ0MsTUFBTTtZQUNmLEVBQ0EsT0FBT0MsT0FBTztnQkFDVkMsUUFBUUMsR0FBRyxDQUFDLHFDQUFxQ0Y7WUFDakQsc0NBQXNDO1lBQzFDO1FBQ0o7UUFDQSxJQUFJLENBQUNULFNBQVMsQ0FBQ1ksU0FBUyxHQUFHLENBQUNDO1lBQ3hCLElBQUksQ0FBQ0MsZUFBZSxDQUFDRCxRQUFRRSxJQUFJO1FBQ3JDO0lBQ0E7Ozs7Ozs7Ozs7Ozs7O1FBY0EsR0FDSjtJQUNBLE1BQU1DLE9BQU9ILE9BQU8sRUFBRTtRQUNsQixJQUFJLENBQUNiLFNBQVMsQ0FBQ2lCLElBQUksQ0FBQ0o7SUFDeEI7SUFDQSxNQUFNSyxVQUFVO1FBQ1osSUFBSSxJQUFJLENBQUMsQ0FBQ2xCLFNBQVMsSUFBSSxNQUFNO1lBQ3pCLElBQUksQ0FBQyxDQUFDQSxTQUFTLENBQUNtQixLQUFLO1lBQ3JCLElBQUksQ0FBQyxDQUFDbkIsU0FBUyxHQUFHO1FBQ3RCO1FBQ0EsS0FBSyxDQUFDa0I7SUFDVjtBQUNKO0FBQ0ExQix5QkFBeUIsR0FBR0UsbUJBQzVCLDhDQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL3Byb3ZpZGVycy9wcm92aWRlci13ZWJzb2NrZXQuanM/Mzc1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV2ViU29ja2V0UHJvdmlkZXIgPSB2b2lkIDA7XG5jb25zdCB3c19qc18xID0gcmVxdWlyZShcIi4vd3MuanNcIik7IC8qLWJyb3dzZXIqL1xuY29uc3QgcHJvdmlkZXJfc29ja2V0X2pzXzEgPSByZXF1aXJlKFwiLi9wcm92aWRlci1zb2NrZXQuanNcIik7XG4vKipcbiAqICBBIEpTT04tUlBDIHByb3ZpZGVyIHdoaWNoIGlzIGJhY2tlZCBieSBhIFdlYlNvY2tldC5cbiAqXG4gKiAgV2ViU29ja2V0cyBhcmUgb2Z0ZW4gcHJlZmVycmVkIGJlY2F1c2UgdGhleSByZXRhaW4gYSBsaXZlIGNvbm5lY3Rpb25cbiAqICB0byBhIHNlcnZlciwgd2hpY2ggcGVybWl0cyBtb3JlIGluc3RhbnQgYWNjZXNzIHRvIGV2ZW50cy5cbiAqXG4gKiAgSG93ZXZlciwgdGhpcyBpbmN1cnMgaGlnaGVyIHNlcnZlciBpbmZyYXN0dXJ0dXJlIGNvc3RzLCBzbyBhZGRpdGlvbmFsXG4gKiAgcmVzb3VyY2VzIG1heSBiZSByZXF1aXJlZCB0byBob3N0IHlvdXIgb3duIFdlYlNvY2tldCBub2RlcyBhbmQgbWFueVxuICogIHRoaXJkLXBhcnR5IHNlcnZpY2VzIGNoYXJnZSBhZGRpdGlvbmFsIGZlZXMgZm9yIFdlYlNvY2tldCBlbmRwb2ludHMuXG4gKi9cbmNsYXNzIFdlYlNvY2tldFByb3ZpZGVyIGV4dGVuZHMgcHJvdmlkZXJfc29ja2V0X2pzXzEuU29ja2V0UHJvdmlkZXIge1xuICAgICNjb25uZWN0O1xuICAgICN3ZWJzb2NrZXQ7XG4gICAgZ2V0IHdlYnNvY2tldCgpIHtcbiAgICAgICAgaWYgKHRoaXMuI3dlYnNvY2tldCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3ZWJzb2NrZXQgY2xvc2VkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLiN3ZWJzb2NrZXQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHVybCwgbmV0d29yaykge1xuICAgICAgICBzdXBlcihuZXR3b3JrKTtcbiAgICAgICAgaWYgKHR5cGVvZiAodXJsKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhpcy4jY29ubmVjdCA9ICgpID0+IHsgcmV0dXJuIG5ldyB3c19qc18xLldlYlNvY2tldCh1cmwpOyB9O1xuICAgICAgICAgICAgdGhpcy4jd2Vic29ja2V0ID0gdGhpcy4jY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiAodXJsKSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLiNjb25uZWN0ID0gdXJsO1xuICAgICAgICAgICAgdGhpcy4jd2Vic29ja2V0ID0gdXJsKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLiNjb25uZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuI3dlYnNvY2tldCA9IHVybDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndlYnNvY2tldC5vbm9wZW4gPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3N0YXJ0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZmFpbGVkIHRvIHN0YXJ0IFdlYnNvY2tldFByb3ZpZGVyXCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAvLyBAVE9ETzogbm93IHdoYXQ/IEF0dGVtcHQgcmVjb25uZWN0P1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLndlYnNvY2tldC5vbm1lc3NhZ2UgPSAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc01lc3NhZ2UobWVzc2FnZS5kYXRhKTtcbiAgICAgICAgfTtcbiAgICAgICAgLypcbiAgICAgICAgICAgICAgICB0aGlzLndlYnNvY2tldC5vbmNsb3NlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEBUT0RPOiBXaGF0IGV2ZW50LmNvZGUgc2hvdWxkIHdlIHJlY29ubmVjdCBvbj9cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVjb25uZWN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWNvbm5lY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGF1c2UodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4jY29ubmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI3dlYnNvY2tldCA9IHRoaXMuI2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiN3ZWJzb2NrZXQub25vcGVuID0gLi4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQFRPRE86IHRoaXMgcmVxdWlyZXMgdGhlIHN1cGVyIGNsYXNzIHRvIHJlYnJvYWRjYXN0OyBtb3ZlIGl0IHRoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICovXG4gICAgfVxuICAgIGFzeW5jIF93cml0ZShtZXNzYWdlKSB7XG4gICAgICAgIHRoaXMud2Vic29ja2V0LnNlbmQobWVzc2FnZSk7XG4gICAgfVxuICAgIGFzeW5jIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLiN3ZWJzb2NrZXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy4jd2Vic29ja2V0LmNsb3NlKCk7XG4gICAgICAgICAgICB0aGlzLiN3ZWJzb2NrZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB9XG59XG5leHBvcnRzLldlYlNvY2tldFByb3ZpZGVyID0gV2ViU29ja2V0UHJvdmlkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm92aWRlci13ZWJzb2NrZXQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiV2ViU29ja2V0UHJvdmlkZXIiLCJ3c19qc18xIiwicmVxdWlyZSIsInByb3ZpZGVyX3NvY2tldF9qc18xIiwiU29ja2V0UHJvdmlkZXIiLCJjb25uZWN0Iiwid2Vic29ja2V0IiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsInVybCIsIm5ldHdvcmsiLCJXZWJTb2NrZXQiLCJvbm9wZW4iLCJfc3RhcnQiLCJyZXN1bWUiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJvbm1lc3NhZ2UiLCJtZXNzYWdlIiwiX3Byb2Nlc3NNZXNzYWdlIiwiZGF0YSIsIl93cml0ZSIsInNlbmQiLCJkZXN0cm95IiwiY2xvc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/provider-websocket.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/provider.js":
/*!****************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/provider.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TransactionResponse = exports.TransactionReceipt = exports.Log = exports.Block = exports.copyRequest = exports.FeeData = void 0;\n//import { resolveAddress } from \"@ethersproject/address\";\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../transaction/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/transaction/index.js\");\nconst BN_0 = BigInt(0);\n// -----------------------\nfunction getValue(value) {\n    if (value == null) {\n        return null;\n    }\n    return value;\n}\nfunction toJson(value) {\n    if (value == null) {\n        return null;\n    }\n    return value.toString();\n}\n// @TODO? <T extends FeeData = { }> implements Required<T>\n/**\n *  A **FeeData** wraps all the fee-related values associated with\n *  the network.\n */ class FeeData {\n    /**\n     *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\n     *  %%maxPriorityFeePerGas%%.\n     */ constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas){\n        (0, index_js_1.defineProperties)(this, {\n            gasPrice: getValue(gasPrice),\n            maxFeePerGas: getValue(maxFeePerGas),\n            maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)\n        });\n    }\n    /**\n     *  Returns a JSON-friendly value.\n     */ toJSON() {\n        const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;\n        return {\n            _type: \"FeeData\",\n            gasPrice: toJson(gasPrice),\n            maxFeePerGas: toJson(maxFeePerGas),\n            maxPriorityFeePerGas: toJson(maxPriorityFeePerGas)\n        };\n    }\n}\nexports.FeeData = FeeData;\n;\n/**\n *  Returns a copy of %%req%% with all properties coerced to their strict\n *  types.\n */ function copyRequest(req) {\n    const result = {};\n    // These could be addresses, ENS names or Addressables\n    if (req.to) {\n        result.to = req.to;\n    }\n    if (req.from) {\n        result.from = req.from;\n    }\n    if (req.data) {\n        result.data = (0, index_js_1.hexlify)(req.data);\n    }\n    const bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value\".split(/,/);\n    for (const key of bigIntKeys){\n        if (!(key in req) || req[key] == null) {\n            continue;\n        }\n        result[key] = (0, index_js_1.getBigInt)(req[key], `request.${key}`);\n    }\n    const numberKeys = \"type,nonce\".split(/,/);\n    for (const key of numberKeys){\n        if (!(key in req) || req[key] == null) {\n            continue;\n        }\n        result[key] = (0, index_js_1.getNumber)(req[key], `request.${key}`);\n    }\n    if (req.accessList) {\n        result.accessList = (0, index_js_2.accessListify)(req.accessList);\n    }\n    if (\"blockTag\" in req) {\n        result.blockTag = req.blockTag;\n    }\n    if (\"enableCcipRead\" in req) {\n        result.enableCcipRead = !!req.enableCcipRead;\n    }\n    if (\"customData\" in req) {\n        result.customData = req.customData;\n    }\n    return result;\n}\nexports.copyRequest = copyRequest;\n/**\n *  A **Block** represents the data associated with a full block on\n *  Ethereum.\n */ class Block {\n    #transactions;\n    /**\n     *  Create a new **Block** object.\n     *\n     *  This should generally not be necessary as the unless implementing a\n     *  low-level library.\n     */ constructor(block, provider){\n        this.#transactions = block.transactions.map((tx)=>{\n            if (typeof tx !== \"string\") {\n                return new TransactionResponse(tx, provider);\n            }\n            return tx;\n        });\n        (0, index_js_1.defineProperties)(this, {\n            provider,\n            hash: getValue(block.hash),\n            number: block.number,\n            timestamp: block.timestamp,\n            parentHash: block.parentHash,\n            nonce: block.nonce,\n            difficulty: block.difficulty,\n            gasLimit: block.gasLimit,\n            gasUsed: block.gasUsed,\n            miner: block.miner,\n            extraData: block.extraData,\n            baseFeePerGas: getValue(block.baseFeePerGas)\n        });\n    }\n    /**\n     *  Returns the list of transaction hashes, in the order\n     *  they were executed within the block.\n     */ get transactions() {\n        return this.#transactions.map((tx)=>{\n            if (typeof tx === \"string\") {\n                return tx;\n            }\n            return tx.hash;\n        });\n    }\n    /**\n     *  Returns the complete transactions, in the order they\n     *  were executed within the block.\n     *\n     *  This is only available for blocks which prefetched\n     *  transactions, by passing ``true`` to %%prefetchTxs%%\n     *  into [[Provider-getBlock]].\n     */ get prefetchedTransactions() {\n        const txs = this.#transactions.slice();\n        // Doesn't matter...\n        if (txs.length === 0) {\n            return [];\n        }\n        // Make sure we prefetched the transactions\n        (0, index_js_1.assert)(typeof txs[0] === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"transactionResponses()\"\n        });\n        return txs;\n    }\n    /**\n     *  Returns a JSON-friendly value.\n     */ toJSON() {\n        const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash, miner, nonce, number, parentHash, timestamp, transactions } = this;\n        return {\n            _type: \"Block\",\n            baseFeePerGas: toJson(baseFeePerGas),\n            difficulty: toJson(difficulty),\n            extraData,\n            gasLimit: toJson(gasLimit),\n            gasUsed: toJson(gasUsed),\n            hash,\n            miner,\n            nonce,\n            number,\n            parentHash,\n            timestamp,\n            transactions\n        };\n    }\n    [Symbol.iterator]() {\n        let index = 0;\n        const txs = this.transactions;\n        return {\n            next: ()=>{\n                if (index < this.length) {\n                    return {\n                        value: txs[index++],\n                        done: false\n                    };\n                }\n                return {\n                    value: undefined,\n                    done: true\n                };\n            }\n        };\n    }\n    /**\n     *  The number of transactions in this block.\n     */ get length() {\n        return this.#transactions.length;\n    }\n    /**\n     *  The [[link-js-date]] this block was included at.\n     */ get date() {\n        if (this.timestamp == null) {\n            return null;\n        }\n        return new Date(this.timestamp * 1000);\n    }\n    /**\n     *  Get the transaction at %%indexe%% within this block.\n     */ async getTransaction(indexOrHash) {\n        // Find the internal value by its index or hash\n        let tx = undefined;\n        if (typeof indexOrHash === \"number\") {\n            tx = this.#transactions[indexOrHash];\n        } else {\n            const hash = indexOrHash.toLowerCase();\n            for (const v of this.#transactions){\n                if (typeof v === \"string\") {\n                    if (v !== hash) {\n                        continue;\n                    }\n                    tx = v;\n                    break;\n                } else {\n                    if (v.hash === hash) {\n                        continue;\n                    }\n                    tx = v;\n                    break;\n                }\n            }\n        }\n        if (tx == null) {\n            throw new Error(\"no such tx\");\n        }\n        if (typeof tx === \"string\") {\n            return await this.provider.getTransaction(tx);\n        } else {\n            return tx;\n        }\n    }\n    /**\n     *  If a **Block** was fetched with a request to include the transactions\n     *  this will allow synchronous access to those transactions.\n     *\n     *  If the transactions were not prefetched, this will throw.\n     */ getPrefetchedTransaction(indexOrHash) {\n        const txs = this.prefetchedTransactions;\n        if (typeof indexOrHash === \"number\") {\n            return txs[indexOrHash];\n        }\n        indexOrHash = indexOrHash.toLowerCase();\n        for (const tx of txs){\n            if (tx.hash === indexOrHash) {\n                return tx;\n            }\n        }\n        (0, index_js_1.assertArgument)(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\n    }\n    /**\n     *  Returns true if this block been mined. This provides a type guard\n     *  for all properties on a [[MinedBlock]].\n     */ isMined() {\n        return !!this.hash;\n    }\n    /**\n     *  Returns true if this block is an [[link-eip-2930]] block.\n     */ isLondon() {\n        return !!this.baseFeePerGas;\n    }\n    /**\n     *  @_ignore:\n     */ orphanedEvent() {\n        if (!this.isMined()) {\n            throw new Error(\"\");\n        }\n        return createOrphanedBlockFilter(this);\n    }\n}\nexports.Block = Block;\n//////////////////////\n// Log\n/**\n *  A **Log** in Ethereum represents an event that has been included in a\n *  transaction using the ``LOG*`` opcodes, which are most commonly used by\n *  Solidity's emit for announcing events.\n */ class Log {\n    /**\n     *  @_ignore:\n     */ constructor(log, provider){\n        this.provider = provider;\n        const topics = Object.freeze(log.topics.slice());\n        (0, index_js_1.defineProperties)(this, {\n            transactionHash: log.transactionHash,\n            blockHash: log.blockHash,\n            blockNumber: log.blockNumber,\n            removed: log.removed,\n            address: log.address,\n            data: log.data,\n            topics,\n            index: log.index,\n            transactionIndex: log.transactionIndex\n        });\n    }\n    /**\n     *  Returns a JSON-compatible object.\n     */ toJSON() {\n        const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;\n        return {\n            _type: \"log\",\n            address,\n            blockHash,\n            blockNumber,\n            data,\n            index,\n            removed,\n            topics,\n            transactionHash,\n            transactionIndex\n        };\n    }\n    /**\n     *  Returns the block that this log occurred in.\n     */ async getBlock() {\n        const block = await this.provider.getBlock(this.blockHash);\n        (0, index_js_1.assert)(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n        return block;\n    }\n    /**\n     *  Returns the transaction that this log occurred in.\n     */ async getTransaction() {\n        const tx = await this.provider.getTransaction(this.transactionHash);\n        (0, index_js_1.assert)(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n        return tx;\n    }\n    /**\n     *  Returns the transaction receipt fot the transaction that this\n     *  log occurred in.\n     */ async getTransactionReceipt() {\n        const receipt = await this.provider.getTransactionReceipt(this.transactionHash);\n        (0, index_js_1.assert)(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", {});\n        return receipt;\n    }\n    /**\n     *  @_ignore:\n     */ removedEvent() {\n        return createRemovedLogFilter(this);\n    }\n}\nexports.Log = Log;\n//////////////////////\n// Transaction Receipt\n/*\nexport interface LegacyTransactionReceipt {\n    byzantium: false;\n    status: null;\n    root: string;\n}\n\nexport interface ByzantiumTransactionReceipt {\n    byzantium: true;\n    status: number;\n    root: null;\n}\n*/ /**\n *  A **TransactionReceipt** includes additional information about a\n *  transaction that is only available after it has been mined.\n */ class TransactionReceipt {\n    #logs;\n    /**\n     *  @_ignore:\n     */ constructor(tx, provider){\n        this.#logs = Object.freeze(tx.logs.map((log)=>{\n            return new Log(log, provider);\n        }));\n        let gasPrice = BN_0;\n        if (tx.effectiveGasPrice != null) {\n            gasPrice = tx.effectiveGasPrice;\n        } else if (tx.gasPrice != null) {\n            gasPrice = tx.gasPrice;\n        }\n        (0, index_js_1.defineProperties)(this, {\n            provider,\n            to: tx.to,\n            from: tx.from,\n            contractAddress: tx.contractAddress,\n            hash: tx.hash,\n            index: tx.index,\n            blockHash: tx.blockHash,\n            blockNumber: tx.blockNumber,\n            logsBloom: tx.logsBloom,\n            gasUsed: tx.gasUsed,\n            cumulativeGasUsed: tx.cumulativeGasUsed,\n            gasPrice,\n            type: tx.type,\n            //byzantium: tx.byzantium,\n            status: tx.status,\n            root: tx.root\n        });\n    }\n    /**\n     *  The logs for this transaction.\n     */ get logs() {\n        return this.#logs;\n    }\n    /**\n     *  Returns a JSON-compatible representation.\n     */ toJSON() {\n        const { to, from, contractAddress, hash, index, blockHash, blockNumber, logsBloom, logs, status, root } = this;\n        return {\n            _type: \"TransactionReceipt\",\n            blockHash,\n            blockNumber,\n            //byzantium, \n            contractAddress,\n            cumulativeGasUsed: toJson(this.cumulativeGasUsed),\n            from,\n            gasPrice: toJson(this.gasPrice),\n            gasUsed: toJson(this.gasUsed),\n            hash,\n            index,\n            logs,\n            logsBloom,\n            root,\n            status,\n            to\n        };\n    }\n    /**\n     *  @_ignore:\n     */ get length() {\n        return this.logs.length;\n    }\n    [Symbol.iterator]() {\n        let index = 0;\n        return {\n            next: ()=>{\n                if (index < this.length) {\n                    return {\n                        value: this.logs[index++],\n                        done: false\n                    };\n                }\n                return {\n                    value: undefined,\n                    done: true\n                };\n            }\n        };\n    }\n    /**\n     *  The total fee for this transaction, in wei.\n     */ get fee() {\n        return this.gasUsed * this.gasPrice;\n    }\n    /**\n     *  Resolves to the block this transaction occurred in.\n     */ async getBlock() {\n        const block = await this.provider.getBlock(this.blockHash);\n        if (block == null) {\n            throw new Error(\"TODO\");\n        }\n        return block;\n    }\n    /**\n     *  Resolves to the transaction this transaction occurred in.\n     */ async getTransaction() {\n        const tx = await this.provider.getTransaction(this.hash);\n        if (tx == null) {\n            throw new Error(\"TODO\");\n        }\n        return tx;\n    }\n    /**\n     *  Resolves to the return value of the execution of this transaction.\n     *\n     *  Support for this feature is limited, as it requires an archive node\n     *  with the ``debug_`` or ``trace_`` API enabled.\n     */ async getResult() {\n        return await this.provider.getTransactionResult(this.hash);\n    }\n    /**\n     *  Resolves to the number of confirmations this transaction has.\n     */ async confirmations() {\n        return await this.provider.getBlockNumber() - this.blockNumber + 1;\n    }\n    /**\n     *  @_ignore:\n     */ removedEvent() {\n        return createRemovedTransactionFilter(this);\n    }\n    /**\n     *  @_ignore:\n     */ reorderedEvent(other) {\n        (0, index_js_1.assert)(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"reorderedEvent(other)\"\n        });\n        return createReorderedTransactionFilter(this, other);\n    }\n}\nexports.TransactionReceipt = TransactionReceipt;\n/**\n *  A **TransactionResponse** includes all properties about a transaction\n *  that was sent to the network, which may or may not be included in a\n *  block.\n *\n *  The [[TransactionResponse-isMined]] can be used to check if the\n *  transaction has been mined as well as type guard that the otherwise\n *  possibly ``null`` properties are defined.\n */ class TransactionResponse {\n    #startBlock;\n    /**\n     *  @_ignore:\n     */ constructor(tx, provider){\n        this.provider = provider;\n        this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;\n        this.blockHash = tx.blockHash != null ? tx.blockHash : null;\n        this.hash = tx.hash;\n        this.index = tx.index;\n        this.type = tx.type;\n        this.from = tx.from;\n        this.to = tx.to || null;\n        this.gasLimit = tx.gasLimit;\n        this.nonce = tx.nonce;\n        this.data = tx.data;\n        this.value = tx.value;\n        this.gasPrice = tx.gasPrice;\n        this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;\n        this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;\n        this.chainId = tx.chainId;\n        this.signature = tx.signature;\n        this.accessList = tx.accessList != null ? tx.accessList : null;\n        this.#startBlock = -1;\n    }\n    /**\n     *  Returns a JSON-compatible representation of this transaction.\n     */ toJSON() {\n        const { blockNumber, blockHash, index, hash, type, to, from, nonce, data, signature, accessList } = this;\n        return {\n            _type: \"TransactionReceipt\",\n            accessList,\n            blockNumber,\n            blockHash,\n            chainId: toJson(this.chainId),\n            data,\n            from,\n            gasLimit: toJson(this.gasLimit),\n            gasPrice: toJson(this.gasPrice),\n            hash,\n            maxFeePerGas: toJson(this.maxFeePerGas),\n            maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\n            nonce,\n            signature,\n            to,\n            index,\n            type,\n            value: toJson(this.value)\n        };\n    }\n    /**\n     *  Resolves to the Block that this transaction was included in.\n     *\n     *  This will return null if the transaction has not been included yet.\n     */ async getBlock() {\n        let blockNumber = this.blockNumber;\n        if (blockNumber == null) {\n            const tx = await this.getTransaction();\n            if (tx) {\n                blockNumber = tx.blockNumber;\n            }\n        }\n        if (blockNumber == null) {\n            return null;\n        }\n        const block = this.provider.getBlock(blockNumber);\n        if (block == null) {\n            throw new Error(\"TODO\");\n        }\n        return block;\n    }\n    /**\n     *  Resolves to this transaction being re-requested from the\n     *  provider. This can be used if you have an unmined transaction\n     *  and wish to get an up-to-date populated instance.\n     */ async getTransaction() {\n        return this.provider.getTransaction(this.hash);\n    }\n    /**\n     *  Resolve to the number of confirmations this transaction has.\n     */ async confirmations() {\n        if (this.blockNumber == null) {\n            const { tx, blockNumber } = await (0, index_js_1.resolveProperties)({\n                tx: this.getTransaction(),\n                blockNumber: this.provider.getBlockNumber()\n            });\n            // Not mined yet...\n            if (tx == null || tx.blockNumber == null) {\n                return 0;\n            }\n            return blockNumber - tx.blockNumber + 1;\n        }\n        const blockNumber = await this.provider.getBlockNumber();\n        return blockNumber - this.blockNumber + 1;\n    }\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */ async wait(_confirms, _timeout) {\n        const confirms = _confirms == null ? 1 : _confirms;\n        const timeout = _timeout == null ? 0 : _timeout;\n        let startBlock = this.#startBlock;\n        let nextScan = -1;\n        let stopScanning = startBlock === -1 ? true : false;\n        const checkReplacement = async ()=>{\n            // Get the current transaction count for this sender\n            if (stopScanning) {\n                return null;\n            }\n            const { blockNumber, nonce } = await (0, index_js_1.resolveProperties)({\n                blockNumber: this.provider.getBlockNumber(),\n                nonce: this.provider.getTransactionCount(this.from)\n            });\n            // No transaction or our nonce has not been mined yet; but we\n            // can start scanning later when we do start\n            if (nonce < this.nonce) {\n                startBlock = blockNumber;\n                return;\n            }\n            // We were mined; no replacement\n            if (stopScanning) {\n                return null;\n            }\n            const mined = await this.getTransaction();\n            if (mined && mined.blockNumber != null) {\n                return;\n            }\n            // We were replaced; start scanning for that transaction\n            // Starting to scan; look back a few extra blocks for safety\n            if (nextScan === -1) {\n                nextScan = startBlock - 3;\n                if (nextScan < this.#startBlock) {\n                    nextScan = this.#startBlock;\n                }\n            }\n            while(nextScan <= blockNumber){\n                // Get the next block to scan\n                if (stopScanning) {\n                    return null;\n                }\n                const block = await this.provider.getBlock(nextScan, true);\n                // This should not happen; but we'll try again shortly\n                if (block == null) {\n                    return;\n                }\n                // We were mined; no replacement\n                for (const hash of block){\n                    if (hash === this.hash) {\n                        return;\n                    }\n                }\n                // Search for the transaction that replaced us\n                for(let i = 0; i < block.length; i++){\n                    const tx = await block.getTransaction(i);\n                    if (tx.from === this.from && tx.nonce === this.nonce) {\n                        // Get the receipt\n                        if (stopScanning) {\n                            return null;\n                        }\n                        const receipt = await this.provider.getTransactionReceipt(tx.hash);\n                        // This should not happen; but we'll try again shortly\n                        if (receipt == null) {\n                            return;\n                        }\n                        // We will retry this on the next block (this case could be optimized)\n                        if (blockNumber - receipt.blockNumber + 1 < confirms) {\n                            return;\n                        }\n                        // The reason we were replaced\n                        let reason = \"replaced\";\n                        if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {\n                            reason = \"repriced\";\n                        } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_0) {\n                            reason = \"cancelled\";\n                        }\n                        (0, index_js_1.assert)(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\n                            cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                            reason,\n                            replacement: tx.replaceableTransaction(startBlock),\n                            hash: tx.hash,\n                            receipt\n                        });\n                    }\n                }\n                nextScan++;\n            }\n            return;\n        };\n        const checkReceipt = (receipt)=>{\n            if (receipt == null || receipt.status !== 0) {\n                return receipt;\n            }\n            (0, index_js_1.assert)(false, \"transaction execution reverted\", \"CALL_EXCEPTION\", {\n                action: \"sendTransaction\",\n                data: null,\n                reason: null,\n                invocation: null,\n                revert: null,\n                transaction: {\n                    to: receipt.to,\n                    from: receipt.from,\n                    data: \"\" // @TODO: in v7, split out sendTransaction properties\n                },\n                receipt\n            });\n        };\n        const receipt = await this.provider.getTransactionReceipt(this.hash);\n        if (confirms === 0) {\n            return checkReceipt(receipt);\n        }\n        if (receipt) {\n            if (await receipt.confirmations() >= confirms) {\n                return checkReceipt(receipt);\n            }\n        } else {\n            // Check for a replacement; throws if a replacement was found\n            await checkReplacement();\n            // Allow null only when the confirms is 0\n            if (confirms === 0) {\n                return null;\n            }\n        }\n        const waiter = new Promise((resolve, reject)=>{\n            // List of things to cancel when we have a result (one way or the other)\n            const cancellers = [];\n            const cancel = ()=>{\n                cancellers.forEach((c)=>c());\n            };\n            // On cancel, stop scanning for replacements\n            cancellers.push(()=>{\n                stopScanning = true;\n            });\n            // Set up any timeout requested\n            if (timeout > 0) {\n                const timer = setTimeout(()=>{\n                    cancel();\n                    reject((0, index_js_1.makeError)(\"wait for transaction timeout\", \"TIMEOUT\"));\n                }, timeout);\n                cancellers.push(()=>{\n                    clearTimeout(timer);\n                });\n            }\n            const txListener = async (receipt)=>{\n                // Done; return it!\n                if (await receipt.confirmations() >= confirms) {\n                    cancel();\n                    try {\n                        resolve(checkReceipt(receipt));\n                    } catch (error) {\n                        reject(error);\n                    }\n                }\n            };\n            cancellers.push(()=>{\n                this.provider.off(this.hash, txListener);\n            });\n            this.provider.on(this.hash, txListener);\n            // We support replacement detection; start checking\n            if (startBlock >= 0) {\n                const replaceListener = async ()=>{\n                    try {\n                        // Check for a replacement; this throws only if one is found\n                        await checkReplacement();\n                    } catch (error) {\n                        // We were replaced (with enough confirms); re-throw the error\n                        if ((0, index_js_1.isError)(error, \"TRANSACTION_REPLACED\")) {\n                            cancel();\n                            reject(error);\n                            return;\n                        }\n                    }\n                    // Rescheudle a check on the next block\n                    if (!stopScanning) {\n                        this.provider.once(\"block\", replaceListener);\n                    }\n                };\n                cancellers.push(()=>{\n                    this.provider.off(\"block\", replaceListener);\n                });\n                this.provider.once(\"block\", replaceListener);\n            }\n        });\n        return await waiter;\n    }\n    /**\n     *  Returns ``true`` if this transaction has been included.\n     *\n     *  This is effective only as of the time the TransactionResponse\n     *  was instantiated. To get up-to-date information, use\n     *  [[getTransaction]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  non-null property values for properties that are null for\n     *  unmined transactions.\n     */ isMined() {\n        return this.blockHash != null;\n    }\n    /**\n     *  Returns true if the transaction is a legacy (i.e. ``type == 0``)\n     *  transaction.\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */ isLegacy() {\n        return this.type === 0;\n    }\n    /**\n     *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)\n     *  transaction. See [[link-eip-2070]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */ isBerlin() {\n        return this.type === 1;\n    }\n    /**\n     *  Returns true if the transaction is a London (i.e. ``type == 2``)\n     *  transaction. See [[link-eip-1559]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */ isLondon() {\n        return this.type === 2;\n    }\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that evict this transaction.\n     */ removedEvent() {\n        (0, index_js_1.assert)(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"removeEvent()\"\n        });\n        return createRemovedTransactionFilter(this);\n    }\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that re-order this event against %%other%%.\n     */ reorderedEvent(other) {\n        (0, index_js_1.assert)(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"removeEvent()\"\n        });\n        (0, index_js_1.assert)(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"removeEvent()\"\n        });\n        return createReorderedTransactionFilter(this, other);\n    }\n    /**\n     *  Returns a new TransactionResponse instance which has the ability to\n     *  detect (and throw an error) if the transaction is replaced, which\n     *  will begin scanning at %%startBlock%%.\n     *\n     *  This should generally not be used by developers and is intended\n     *  primarily for internal use. Setting an incorrect %%startBlock%% can\n     *  have devastating performance consequences if used incorrectly.\n     */ replaceableTransaction(startBlock) {\n        (0, index_js_1.assertArgument)(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\n        const tx = new TransactionResponse(this, this.provider);\n        tx.#startBlock = startBlock;\n        return tx;\n    }\n}\nexports.TransactionResponse = TransactionResponse;\nfunction createOrphanedBlockFilter(block) {\n    return {\n        orphan: \"drop-block\",\n        hash: block.hash,\n        number: block.number\n    };\n}\nfunction createReorderedTransactionFilter(tx, other) {\n    return {\n        orphan: \"reorder-transaction\",\n        tx,\n        other\n    };\n}\nfunction createRemovedTransactionFilter(tx) {\n    return {\n        orphan: \"drop-transaction\",\n        tx\n    };\n}\nfunction createRemovedLogFilter(log) {\n    return {\n        orphan: \"drop-log\",\n        log: {\n            transactionHash: log.transactionHash,\n            blockHash: log.blockHash,\n            blockNumber: log.blockNumber,\n            address: log.address,\n            data: log.data,\n            topics: Object.freeze(log.topics.slice()),\n            index: log.index\n        }\n    };\n} //# sourceMappingURL=provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/provider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/signer-noncemanager.js":
/*!***************************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/signer-noncemanager.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.NonceManager = void 0;\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst abstract_signer_js_1 = __webpack_require__(/*! ./abstract-signer.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/abstract-signer.js\");\n/**\n *  A **NonceManager** wraps another [[Signer]] and automatically manages\n *  the nonce, ensuring serialized and sequential nonces are used during\n *  transaction.\n */ class NonceManager extends abstract_signer_js_1.AbstractSigner {\n    #noncePromise;\n    #delta;\n    /**\n     *  Creates a new **NonceManager** to manage %%signer%%.\n     */ constructor(signer){\n        super(signer.provider);\n        (0, index_js_1.defineProperties)(this, {\n            signer\n        });\n        this.#noncePromise = null;\n        this.#delta = 0;\n    }\n    async getAddress() {\n        return this.signer.getAddress();\n    }\n    connect(provider) {\n        return new NonceManager(this.signer.connect(provider));\n    }\n    async getNonce(blockTag) {\n        if (blockTag === \"pending\") {\n            if (this.#noncePromise == null) {\n                this.#noncePromise = super.getNonce(\"pending\");\n            }\n            const delta = this.#delta;\n            return await this.#noncePromise + delta;\n        }\n        return super.getNonce(blockTag);\n    }\n    /**\n     *  Manually increment the nonce. This may be useful when managng\n     *  offline transactions.\n     */ increment() {\n        this.#delta++;\n    }\n    /**\n     *  Resets the nonce, causing the **NonceManager** to reload the current\n     *  nonce from the blockchain on the next transaction.\n     */ reset() {\n        this.#delta = 0;\n        this.#noncePromise = null;\n    }\n    async sendTransaction(tx) {\n        const noncePromise = this.getNonce(\"pending\");\n        this.increment();\n        tx = await this.signer.populateTransaction(tx);\n        tx.nonce = await noncePromise;\n        // @TODO: Maybe handle interesting/recoverable errors?\n        // Like don't increment if the tx was certainly not sent\n        return await this.signer.sendTransaction(tx);\n    }\n    signTransaction(tx) {\n        return this.signer.signTransaction(tx);\n    }\n    signMessage(message) {\n        return this.signer.signMessage(message);\n    }\n    signTypedData(domain, types, value) {\n        return this.signer.signTypedData(domain, types, value);\n    }\n}\nexports.NonceManager = NonceManager; //# sourceMappingURL=signer-noncemanager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9wcm92aWRlcnMvc2lnbmVyLW5vbmNlbWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0JBQW9CLEdBQUcsS0FBSztBQUM1QixNQUFNRyxhQUFhQyxtQkFBT0EsQ0FBQyxrRkFBbUI7QUFDOUMsTUFBTUMsdUJBQXVCRCxtQkFBT0EsQ0FBQyxtR0FBc0I7QUFDM0Q7Ozs7Q0FJQyxHQUNELE1BQU1GLHFCQUFxQkcscUJBQXFCQyxjQUFjO0lBSzFELENBQUNDLFlBQVksQ0FBQztJQUNkLENBQUNDLEtBQUssQ0FBQztJQUNQOztLQUVDLEdBQ0RDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixLQUFLLENBQUNBLE9BQU9DLFFBQVE7UUFDcEIsSUFBR1IsV0FBV1MsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFO1lBQUVGO1FBQU87UUFDaEQsSUFBSSxDQUFDLENBQUNILFlBQVksR0FBRztRQUNyQixJQUFJLENBQUMsQ0FBQ0MsS0FBSyxHQUFHO0lBQ2xCO0lBQ0EsTUFBTUssYUFBYTtRQUNmLE9BQU8sSUFBSSxDQUFDSCxNQUFNLENBQUNHLFVBQVU7SUFDakM7SUFDQUMsUUFBUUgsUUFBUSxFQUFFO1FBQ2QsT0FBTyxJQUFJVCxhQUFhLElBQUksQ0FBQ1EsTUFBTSxDQUFDSSxPQUFPLENBQUNIO0lBQ2hEO0lBQ0EsTUFBTUksU0FBU0MsUUFBUSxFQUFFO1FBQ3JCLElBQUlBLGFBQWEsV0FBVztZQUN4QixJQUFJLElBQUksQ0FBQyxDQUFDVCxZQUFZLElBQUksTUFBTTtnQkFDNUIsSUFBSSxDQUFDLENBQUNBLFlBQVksR0FBRyxLQUFLLENBQUNRLFNBQVM7WUFDeEM7WUFDQSxNQUFNUCxRQUFRLElBQUksQ0FBQyxDQUFDQSxLQUFLO1lBQ3pCLE9BQU8sTUFBTyxJQUFJLENBQUMsQ0FBQ0QsWUFBWSxHQUFJQztRQUN4QztRQUNBLE9BQU8sS0FBSyxDQUFDTyxTQUFTQztJQUMxQjtJQUNBOzs7S0FHQyxHQUNEQyxZQUFZO1FBQ1IsSUFBSSxDQUFDLENBQUNULEtBQUs7SUFDZjtJQUNBOzs7S0FHQyxHQUNEVSxRQUFRO1FBQ0osSUFBSSxDQUFDLENBQUNWLEtBQUssR0FBRztRQUNkLElBQUksQ0FBQyxDQUFDRCxZQUFZLEdBQUc7SUFDekI7SUFDQSxNQUFNWSxnQkFBZ0JDLEVBQUUsRUFBRTtRQUN0QixNQUFNYixlQUFlLElBQUksQ0FBQ1EsUUFBUSxDQUFDO1FBQ25DLElBQUksQ0FBQ0UsU0FBUztRQUNkRyxLQUFLLE1BQU0sSUFBSSxDQUFDVixNQUFNLENBQUNXLG1CQUFtQixDQUFDRDtRQUMzQ0EsR0FBR0UsS0FBSyxHQUFHLE1BQU1mO1FBQ2pCLHNEQUFzRDtRQUN0RCx3REFBd0Q7UUFDeEQsT0FBTyxNQUFNLElBQUksQ0FBQ0csTUFBTSxDQUFDUyxlQUFlLENBQUNDO0lBQzdDO0lBQ0FHLGdCQUFnQkgsRUFBRSxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDVixNQUFNLENBQUNhLGVBQWUsQ0FBQ0g7SUFDdkM7SUFDQUksWUFBWUMsT0FBTyxFQUFFO1FBQ2pCLE9BQU8sSUFBSSxDQUFDZixNQUFNLENBQUNjLFdBQVcsQ0FBQ0M7SUFDbkM7SUFDQUMsY0FBY0MsTUFBTSxFQUFFQyxLQUFLLEVBQUUzQixLQUFLLEVBQUU7UUFDaEMsT0FBTyxJQUFJLENBQUNTLE1BQU0sQ0FBQ2dCLGFBQWEsQ0FBQ0MsUUFBUUMsT0FBTzNCO0lBQ3BEO0FBQ0o7QUFDQUQsb0JBQW9CLEdBQUdFLGNBQ3ZCLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL3Byb3ZpZGVycy9zaWduZXItbm9uY2VtYW5hZ2VyLmpzPzMzYTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk5vbmNlTWFuYWdlciA9IHZvaWQgMDtcbmNvbnN0IGluZGV4X2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvaW5kZXguanNcIik7XG5jb25zdCBhYnN0cmFjdF9zaWduZXJfanNfMSA9IHJlcXVpcmUoXCIuL2Fic3RyYWN0LXNpZ25lci5qc1wiKTtcbi8qKlxuICogIEEgKipOb25jZU1hbmFnZXIqKiB3cmFwcyBhbm90aGVyIFtbU2lnbmVyXV0gYW5kIGF1dG9tYXRpY2FsbHkgbWFuYWdlc1xuICogIHRoZSBub25jZSwgZW5zdXJpbmcgc2VyaWFsaXplZCBhbmQgc2VxdWVudGlhbCBub25jZXMgYXJlIHVzZWQgZHVyaW5nXG4gKiAgdHJhbnNhY3Rpb24uXG4gKi9cbmNsYXNzIE5vbmNlTWFuYWdlciBleHRlbmRzIGFic3RyYWN0X3NpZ25lcl9qc18xLkFic3RyYWN0U2lnbmVyIHtcbiAgICAvKipcbiAgICAgKiAgVGhlIFNpZ25lciBiZWluZyBtYW5hZ2VkLlxuICAgICAqL1xuICAgIHNpZ25lcjtcbiAgICAjbm9uY2VQcm9taXNlO1xuICAgICNkZWx0YTtcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyAqKk5vbmNlTWFuYWdlcioqIHRvIG1hbmFnZSAlJXNpZ25lciUlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNpZ25lcikge1xuICAgICAgICBzdXBlcihzaWduZXIucHJvdmlkZXIpO1xuICAgICAgICAoMCwgaW5kZXhfanNfMS5kZWZpbmVQcm9wZXJ0aWVzKSh0aGlzLCB7IHNpZ25lciB9KTtcbiAgICAgICAgdGhpcy4jbm9uY2VQcm9taXNlID0gbnVsbDtcbiAgICAgICAgdGhpcy4jZGVsdGEgPSAwO1xuICAgIH1cbiAgICBhc3luYyBnZXRBZGRyZXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaWduZXIuZ2V0QWRkcmVzcygpO1xuICAgIH1cbiAgICBjb25uZWN0KHByb3ZpZGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgTm9uY2VNYW5hZ2VyKHRoaXMuc2lnbmVyLmNvbm5lY3QocHJvdmlkZXIpKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0Tm9uY2UoYmxvY2tUYWcpIHtcbiAgICAgICAgaWYgKGJsb2NrVGFnID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICAgICAgaWYgKHRoaXMuI25vbmNlUHJvbWlzZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jbm9uY2VQcm9taXNlID0gc3VwZXIuZ2V0Tm9uY2UoXCJwZW5kaW5nXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSB0aGlzLiNkZWx0YTtcbiAgICAgICAgICAgIHJldHVybiAoYXdhaXQgdGhpcy4jbm9uY2VQcm9taXNlKSArIGRlbHRhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5nZXROb25jZShibG9ja1RhZyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBNYW51YWxseSBpbmNyZW1lbnQgdGhlIG5vbmNlLiBUaGlzIG1heSBiZSB1c2VmdWwgd2hlbiBtYW5hZ25nXG4gICAgICogIG9mZmxpbmUgdHJhbnNhY3Rpb25zLlxuICAgICAqL1xuICAgIGluY3JlbWVudCgpIHtcbiAgICAgICAgdGhpcy4jZGVsdGErKztcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlc2V0cyB0aGUgbm9uY2UsIGNhdXNpbmcgdGhlICoqTm9uY2VNYW5hZ2VyKiogdG8gcmVsb2FkIHRoZSBjdXJyZW50XG4gICAgICogIG5vbmNlIGZyb20gdGhlIGJsb2NrY2hhaW4gb24gdGhlIG5leHQgdHJhbnNhY3Rpb24uXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuI2RlbHRhID0gMDtcbiAgICAgICAgdGhpcy4jbm9uY2VQcm9taXNlID0gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgc2VuZFRyYW5zYWN0aW9uKHR4KSB7XG4gICAgICAgIGNvbnN0IG5vbmNlUHJvbWlzZSA9IHRoaXMuZ2V0Tm9uY2UoXCJwZW5kaW5nXCIpO1xuICAgICAgICB0aGlzLmluY3JlbWVudCgpO1xuICAgICAgICB0eCA9IGF3YWl0IHRoaXMuc2lnbmVyLnBvcHVsYXRlVHJhbnNhY3Rpb24odHgpO1xuICAgICAgICB0eC5ub25jZSA9IGF3YWl0IG5vbmNlUHJvbWlzZTtcbiAgICAgICAgLy8gQFRPRE86IE1heWJlIGhhbmRsZSBpbnRlcmVzdGluZy9yZWNvdmVyYWJsZSBlcnJvcnM/XG4gICAgICAgIC8vIExpa2UgZG9uJ3QgaW5jcmVtZW50IGlmIHRoZSB0eCB3YXMgY2VydGFpbmx5IG5vdCBzZW50XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnNpZ25lci5zZW5kVHJhbnNhY3Rpb24odHgpO1xuICAgIH1cbiAgICBzaWduVHJhbnNhY3Rpb24odHgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2lnbmVyLnNpZ25UcmFuc2FjdGlvbih0eCk7XG4gICAgfVxuICAgIHNpZ25NZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2lnbmVyLnNpZ25NZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH1cbiAgICBzaWduVHlwZWREYXRhKGRvbWFpbiwgdHlwZXMsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpZ25lci5zaWduVHlwZWREYXRhKGRvbWFpbiwgdHlwZXMsIHZhbHVlKTtcbiAgICB9XG59XG5leHBvcnRzLk5vbmNlTWFuYWdlciA9IE5vbmNlTWFuYWdlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpZ25lci1ub25jZW1hbmFnZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTm9uY2VNYW5hZ2VyIiwiaW5kZXhfanNfMSIsInJlcXVpcmUiLCJhYnN0cmFjdF9zaWduZXJfanNfMSIsIkFic3RyYWN0U2lnbmVyIiwibm9uY2VQcm9taXNlIiwiZGVsdGEiLCJjb25zdHJ1Y3RvciIsInNpZ25lciIsInByb3ZpZGVyIiwiZGVmaW5lUHJvcGVydGllcyIsImdldEFkZHJlc3MiLCJjb25uZWN0IiwiZ2V0Tm9uY2UiLCJibG9ja1RhZyIsImluY3JlbWVudCIsInJlc2V0Iiwic2VuZFRyYW5zYWN0aW9uIiwidHgiLCJwb3B1bGF0ZVRyYW5zYWN0aW9uIiwibm9uY2UiLCJzaWduVHJhbnNhY3Rpb24iLCJzaWduTWVzc2FnZSIsIm1lc3NhZ2UiLCJzaWduVHlwZWREYXRhIiwiZG9tYWluIiwidHlwZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/signer-noncemanager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/subscriber-filterid.js":
/*!***************************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/subscriber-filterid.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FilterIdPendingSubscriber = exports.FilterIdEventSubscriber = exports.FilterIdSubscriber = void 0;\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst subscriber_polling_js_1 = __webpack_require__(/*! ./subscriber-polling.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/subscriber-polling.js\");\nfunction copy(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\n/**\n *  Some backends support subscribing to events using a Filter ID.\n *\n *  When subscribing with this technique, the node issues a unique\n *  //Filter ID//. At this point the node dedicates resources to\n *  the filter, so that periodic calls to follow up on the //Filter ID//\n *  will receive any events since the last call.\n *\n *  @_docloc: api/providers/abstract-provider\n */ class FilterIdSubscriber {\n    #provider;\n    #filterIdPromise;\n    #poller;\n    #running;\n    #network;\n    #hault;\n    /**\n     *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]\n     *  and [[_emitResults]] to setup the subscription and provide the event\n     *  to the %%provider%%.\n     */ constructor(provider){\n        this.#provider = provider;\n        this.#filterIdPromise = null;\n        this.#poller = this.#poll.bind(this);\n        this.#running = false;\n        this.#network = null;\n        this.#hault = false;\n    }\n    /**\n     *  Sub-classes **must** override this to begin the subscription.\n     */ _subscribe(provider) {\n        throw new Error(\"subclasses must override this\");\n    }\n    /**\n     *  Sub-classes **must** override this handle the events.\n     */ _emitResults(provider, result) {\n        throw new Error(\"subclasses must override this\");\n    }\n    /**\n     *  Sub-classes **must** override this handle recovery on errors.\n     */ _recover(provider) {\n        throw new Error(\"subclasses must override this\");\n    }\n    async #poll(blockNumber) {\n        try {\n            // Subscribe if necessary\n            if (this.#filterIdPromise == null) {\n                this.#filterIdPromise = this._subscribe(this.#provider);\n            }\n            // Get the Filter ID\n            let filterId = null;\n            try {\n                filterId = await this.#filterIdPromise;\n            } catch (error) {\n                if (!(0, index_js_1.isError)(error, \"UNSUPPORTED_OPERATION\") || error.operation !== \"eth_newFilter\") {\n                    throw error;\n                }\n            }\n            // The backend does not support Filter ID; downgrade to\n            // polling\n            if (filterId == null) {\n                this.#filterIdPromise = null;\n                this.#provider._recoverSubscriber(this, this._recover(this.#provider));\n                return;\n            }\n            const network = await this.#provider.getNetwork();\n            if (!this.#network) {\n                this.#network = network;\n            }\n            if (this.#network.chainId !== network.chainId) {\n                throw new Error(\"chaid changed\");\n            }\n            if (this.#hault) {\n                return;\n            }\n            const result = await this.#provider.send(\"eth_getFilterChanges\", [\n                filterId\n            ]);\n            await this._emitResults(this.#provider, result);\n        } catch (error) {\n            console.log(\"@TODO\", error);\n        }\n        this.#provider.once(\"block\", this.#poller);\n    }\n    #teardown() {\n        const filterIdPromise = this.#filterIdPromise;\n        if (filterIdPromise) {\n            this.#filterIdPromise = null;\n            filterIdPromise.then((filterId)=>{\n                this.#provider.send(\"eth_uninstallFilter\", [\n                    filterId\n                ]);\n            });\n        }\n    }\n    start() {\n        if (this.#running) {\n            return;\n        }\n        this.#running = true;\n        this.#poll(-2);\n    }\n    stop() {\n        if (!this.#running) {\n            return;\n        }\n        this.#running = false;\n        this.#hault = true;\n        this.#teardown();\n        this.#provider.off(\"block\", this.#poller);\n    }\n    pause(dropWhilePaused) {\n        if (dropWhilePaused) {\n            this.#teardown();\n        }\n        this.#provider.off(\"block\", this.#poller);\n    }\n    resume() {\n        this.start();\n    }\n}\nexports.FilterIdSubscriber = FilterIdSubscriber;\n/**\n *  A **FilterIdSubscriber** for receiving contract events.\n *\n *  @_docloc: api/providers/abstract-provider\n */ class FilterIdEventSubscriber extends FilterIdSubscriber {\n    #event;\n    /**\n     *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%\n     *  listening for %%filter%%.\n     */ constructor(provider, filter){\n        super(provider);\n        this.#event = copy(filter);\n    }\n    _recover(provider) {\n        return new subscriber_polling_js_1.PollingEventSubscriber(provider, this.#event);\n    }\n    async _subscribe(provider) {\n        const filterId = await provider.send(\"eth_newFilter\", [\n            this.#event\n        ]);\n        return filterId;\n    }\n    async _emitResults(provider, results) {\n        for (const result of results){\n            provider.emit(this.#event, provider._wrapLog(result, provider._network));\n        }\n    }\n}\nexports.FilterIdEventSubscriber = FilterIdEventSubscriber;\n/**\n *  A **FilterIdSubscriber** for receiving pending transactions events.\n *\n *  @_docloc: api/providers/abstract-provider\n */ class FilterIdPendingSubscriber extends FilterIdSubscriber {\n    async _subscribe(provider) {\n        return await provider.send(\"eth_newPendingTransactionFilter\", []);\n    }\n    async _emitResults(provider, results) {\n        for (const result of results){\n            provider.emit(\"pending\", result);\n        }\n    }\n}\nexports.FilterIdPendingSubscriber = FilterIdPendingSubscriber; //# sourceMappingURL=subscriber-filterid.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9wcm92aWRlcnMvc3Vic2NyaWJlci1maWx0ZXJpZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUNBQWlDLEdBQUdBLCtCQUErQixHQUFHQSwwQkFBMEIsR0FBRyxLQUFLO0FBQ3hHLE1BQU1LLGFBQWFDLG1CQUFPQSxDQUFDLGtGQUFtQjtBQUM5QyxNQUFNQywwQkFBMEJELG1CQUFPQSxDQUFDLHlHQUF5QjtBQUNqRSxTQUFTRSxLQUFLQyxHQUFHO0lBQ2IsT0FBT0MsS0FBS0MsS0FBSyxDQUFDRCxLQUFLRSxTQUFTLENBQUNIO0FBQ3JDO0FBQ0E7Ozs7Ozs7OztDQVNDLEdBQ0QsTUFBTUw7SUFDRixDQUFDUyxRQUFRLENBQUM7SUFDVixDQUFDQyxlQUFlLENBQUM7SUFDakIsQ0FBQ0MsTUFBTSxDQUFDO0lBQ1IsQ0FBQ0MsT0FBTyxDQUFDO0lBQ1QsQ0FBQ0MsT0FBTyxDQUFDO0lBQ1QsQ0FBQ0MsS0FBSyxDQUFDO0lBQ1A7Ozs7S0FJQyxHQUNEQyxZQUFZTixRQUFRLENBQUU7UUFDbEIsSUFBSSxDQUFDLENBQUNBLFFBQVEsR0FBR0E7UUFDakIsSUFBSSxDQUFDLENBQUNDLGVBQWUsR0FBRztRQUN4QixJQUFJLENBQUMsQ0FBQ0MsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDSyxJQUFJLENBQUNDLElBQUksQ0FBQyxJQUFJO1FBQ25DLElBQUksQ0FBQyxDQUFDTCxPQUFPLEdBQUc7UUFDaEIsSUFBSSxDQUFDLENBQUNDLE9BQU8sR0FBRztRQUNoQixJQUFJLENBQUMsQ0FBQ0MsS0FBSyxHQUFHO0lBQ2xCO0lBQ0E7O0tBRUMsR0FDREksV0FBV1QsUUFBUSxFQUFFO1FBQ2pCLE1BQU0sSUFBSVUsTUFBTTtJQUNwQjtJQUNBOztLQUVDLEdBQ0RDLGFBQWFYLFFBQVEsRUFBRVksTUFBTSxFQUFFO1FBQzNCLE1BQU0s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TUFBTVgsYUFBYVgsUUFBUSxFQUFFcUMsT0FBTyxFQUFFO1FBQ2xDLEtBQUssTUFBTXpCLFVBQVV5QixRQUFTO1lBQzFCckMsU0FBU3NDLElBQUksQ0FBQyxXQUFXMUI7UUFDN0I7SUFDSjtBQUNKO0FBQ0F6QixpQ0FBaUMsR0FBR0UsMkJBQ3BDLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL3Byb3ZpZGVycy9zdWJzY3JpYmVyLWZpbHRlcmlkLmpzP2UxYzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZpbHRlcklkUGVuZGluZ1N1YnNjcmliZXIgPSBleHBvcnRzLkZpbHRlcklkRXZlbnRTdWJzY3JpYmVyID0gZXhwb3J0cy5GaWx0ZXJJZFN1YnNjcmliZXIgPSB2b2lkIDA7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4uL3V0aWxzL2luZGV4LmpzXCIpO1xuY29uc3Qgc3Vic2NyaWJlcl9wb2xsaW5nX2pzXzEgPSByZXF1aXJlKFwiLi9zdWJzY3JpYmVyLXBvbGxpbmcuanNcIik7XG5mdW5jdGlvbiBjb3B5KG9iaikge1xuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xufVxuLyoqXG4gKiAgU29tZSBiYWNrZW5kcyBzdXBwb3J0IHN1YnNjcmliaW5nIHRvIGV2ZW50cyB1c2luZyBhIEZpbHRlciBJRC5cbiAqXG4gKiAgV2hlbiBzdWJzY3JpYmluZyB3aXRoIHRoaXMgdGVjaG5pcXVlLCB0aGUgbm9kZSBpc3N1ZXMgYSB1bmlxdWVcbiAqICAvL0ZpbHRlciBJRC8vLiBBdCB0aGlzIHBvaW50IHRoZSBub2RlIGRlZGljYXRlcyByZXNvdXJjZXMgdG9cbiAqICB0aGUgZmlsdGVyLCBzbyB0aGF0IHBlcmlvZGljIGNhbGxzIHRvIGZvbGxvdyB1cCBvbiB0aGUgLy9GaWx0ZXIgSUQvL1xuICogIHdpbGwgcmVjZWl2ZSBhbnkgZXZlbnRzIHNpbmNlIHRoZSBsYXN0IGNhbGwuXG4gKlxuICogIEBfZG9jbG9jOiBhcGkvcHJvdmlkZXJzL2Fic3RyYWN0LXByb3ZpZGVyXG4gKi9cbmNsYXNzIEZpbHRlcklkU3Vic2NyaWJlciB7XG4gICAgI3Byb3ZpZGVyO1xuICAgICNmaWx0ZXJJZFByb21pc2U7XG4gICAgI3BvbGxlcjtcbiAgICAjcnVubmluZztcbiAgICAjbmV0d29yaztcbiAgICAjaGF1bHQ7XG4gICAgLyoqXG4gICAgICogIENyZWF0ZXMgYSBuZXcgKipGaWx0ZXJJZFN1YnNjcmliZXIqKiB3aGljaCB3aWxsIHVzZWQgW1tfc3Vic2NyaWJlXV1cbiAgICAgKiAgYW5kIFtbX2VtaXRSZXN1bHRzXV0gdG8gc2V0dXAgdGhlIHN1YnNjcmlwdGlvbiBhbmQgcHJvdmlkZSB0aGUgZXZlbnRcbiAgICAgKiAgdG8gdGhlICUlcHJvdmlkZXIlJS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlcikge1xuICAgICAgICB0aGlzLiNwcm92aWRlciA9IHByb3ZpZGVyO1xuICAgICAgICB0aGlzLiNmaWx0ZXJJZFByb21pc2UgPSBudWxsO1xuICAgICAgICB0aGlzLiNwb2xsZXIgPSB0aGlzLiNwb2xsLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuI3J1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy4jbmV0d29yayA9IG51bGw7XG4gICAgICAgIHRoaXMuI2hhdWx0ID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBTdWItY2xhc3NlcyAqKm11c3QqKiBvdmVycmlkZSB0aGlzIHRvIGJlZ2luIHRoZSBzdWJzY3JpcHRpb24uXG4gICAgICovXG4gICAgX3N1YnNjcmliZShwcm92aWRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzdWJjbGFzc2VzIG11c3Qgb3ZlcnJpZGUgdGhpc1wiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFN1Yi1jbGFzc2VzICoqbXVzdCoqIG92ZXJyaWRlIHRoaXMgaGFuZGxlIHRoZSBldmVudHMuXG4gICAgICovXG4gICAgX2VtaXRSZXN1bHRzKHByb3ZpZGVyLCByZXN1bHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic3ViY2xhc3NlcyBtdXN0IG92ZXJyaWRlIHRoaXNcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBTdWItY2xhc3NlcyAqKm11c3QqKiBvdmVycmlkZSB0aGlzIGhhbmRsZSByZWNvdmVyeSBvbiBlcnJvcnMuXG4gICAgICovXG4gICAgX3JlY292ZXIocHJvdmlkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic3ViY2xhc3NlcyBtdXN0IG92ZXJyaWRlIHRoaXNcIik7XG4gICAgfVxuICAgIGFzeW5jICNwb2xsKGJsb2NrTnVtYmVyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBTdWJzY3JpYmUgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICBpZiAodGhpcy4jZmlsdGVySWRQcm9taXNlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiNmaWx0ZXJJZFByb21pc2UgPSB0aGlzLl9zdWJzY3JpYmUodGhpcy4jcHJvdmlkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gR2V0IHRoZSBGaWx0ZXIgSURcbiAgICAgICAgICAgIGxldCBmaWx0ZXJJZCA9IG51bGw7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZpbHRlcklkID0gYXdhaXQgdGhpcy4jZmlsdGVySWRQcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoMCwgaW5kZXhfanNfMS5pc0Vycm9yKShlcnJvciwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIikgfHwgZXJyb3Iub3BlcmF0aW9uICE9PSBcImV0aF9uZXdGaWx0ZXJcIikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUaGUgYmFja2VuZCBkb2VzIG5vdCBzdXBwb3J0IEZpbHRlciBJRDsgZG93bmdyYWRlIHRvXG4gICAgICAgICAgICAvLyBwb2xsaW5nXG4gICAgICAgICAgICBpZiAoZmlsdGVySWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuI2ZpbHRlcklkUHJvbWlzZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy4jcHJvdmlkZXIuX3JlY292ZXJTdWJzY3JpYmVyKHRoaXMsIHRoaXMuX3JlY292ZXIodGhpcy4jcHJvdmlkZXIpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuZXR3b3JrID0gYXdhaXQgdGhpcy4jcHJvdmlkZXIuZ2V0TmV0d29yaygpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLiNuZXR3b3JrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jbmV0d29yayA9IG5ldHdvcms7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy4jbmV0d29yay5jaGFpbklkICE9PSBuZXR3b3JrLmNoYWluSWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjaGFpZCBjaGFuZ2VkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuI2hhdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy4jcHJvdmlkZXIuc2VuZChcImV0aF9nZXRGaWx0ZXJDaGFuZ2VzXCIsIFtmaWx0ZXJJZF0pO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fZW1pdFJlc3VsdHModGhpcy4jcHJvdmlkZXIsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkBUT0RPXCIsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNwcm92aWRlci5vbmNlKFwiYmxvY2tcIiwgdGhpcy4jcG9sbGVyKTtcbiAgICB9XG4gICAgI3RlYXJkb3duKCkge1xuICAgICAgICBjb25zdCBmaWx0ZXJJZFByb21pc2UgPSB0aGlzLiNmaWx0ZXJJZFByb21pc2U7XG4gICAgICAgIGlmIChmaWx0ZXJJZFByb21pc2UpIHtcbiAgICAgICAgICAgIHRoaXMuI2ZpbHRlcklkUHJvbWlzZSA9IG51bGw7XG4gICAgICAgICAgICBmaWx0ZXJJZFByb21pc2UudGhlbigoZmlsdGVySWQpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLiNwcm92aWRlci5zZW5kKFwiZXRoX3VuaW5zdGFsbEZpbHRlclwiLCBbZmlsdGVySWRdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICBpZiAodGhpcy4jcnVubmluZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3J1bm5pbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLiNwb2xsKC0yKTtcbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLiNydW5uaW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jcnVubmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLiNoYXVsdCA9IHRydWU7XG4gICAgICAgIHRoaXMuI3RlYXJkb3duKCk7XG4gICAgICAgIHRoaXMuI3Byb3ZpZGVyLm9mZihcImJsb2NrXCIsIHRoaXMuI3BvbGxlcik7XG4gICAgfVxuICAgIHBhdXNlKGRyb3BXaGlsZVBhdXNlZCkge1xuICAgICAgICBpZiAoZHJvcFdoaWxlUGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLiN0ZWFyZG93bigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3Byb3ZpZGVyLm9mZihcImJsb2NrXCIsIHRoaXMuI3BvbGxlcik7XG4gICAgfVxuICAgIHJlc3VtZSgpIHsgdGhpcy5zdGFydCgpOyB9XG59XG5leHBvcnRzLkZpbHRlcklkU3Vic2NyaWJlciA9IEZpbHRlcklkU3Vic2NyaWJlcjtcbi8qKlxuICogIEEgKipGaWx0ZXJJZFN1YnNjcmliZXIqKiBmb3IgcmVjZWl2aW5nIGNvbnRyYWN0IGV2ZW50cy5cbiAqXG4gKiAgQF9kb2Nsb2M6IGFwaS9wcm92aWRlcnMvYWJzdHJhY3QtcHJvdmlkZXJcbiAqL1xuY2xhc3MgRmlsdGVySWRFdmVudFN1YnNjcmliZXIgZXh0ZW5kcyBGaWx0ZXJJZFN1YnNjcmliZXIge1xuICAgICNldmVudDtcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyAqKkZpbHRlcklkRXZlbnRTdWJzY3JpYmVyKiogYXR0YWNoZWQgdG8gJSVwcm92aWRlciUlXG4gICAgICogIGxpc3RlbmluZyBmb3IgJSVmaWx0ZXIlJS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlciwgZmlsdGVyKSB7XG4gICAgICAgIHN1cGVyKHByb3ZpZGVyKTtcbiAgICAgICAgdGhpcy4jZXZlbnQgPSBjb3B5KGZpbHRlcik7XG4gICAgfVxuICAgIF9yZWNvdmVyKHByb3ZpZGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgc3Vic2NyaWJlcl9wb2xsaW5nX2pzXzEuUG9sbGluZ0V2ZW50U3Vic2NyaWJlcihwcm92aWRlciwgdGhpcy4jZXZlbnQpO1xuICAgIH1cbiAgICBhc3luYyBfc3Vic2NyaWJlKHByb3ZpZGVyKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlcklkID0gYXdhaXQgcHJvdmlkZXIuc2VuZChcImV0aF9uZXdGaWx0ZXJcIiwgW3RoaXMuI2V2ZW50XSk7XG4gICAgICAgIHJldHVybiBmaWx0ZXJJZDtcbiAgICB9XG4gICAgYXN5bmMgX2VtaXRSZXN1bHRzKHByb3ZpZGVyLCByZXN1bHRzKSB7XG4gICAgICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIHJlc3VsdHMpIHtcbiAgICAgICAgICAgIHByb3ZpZGVyLmVtaXQodGhpcy4jZXZlbnQsIHByb3ZpZGVyLl93cmFwTG9nKHJlc3VsdCwgcHJvdmlkZXIuX25ldHdvcmspKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuRmlsdGVySWRFdmVudFN1YnNjcmliZXIgPSBGaWx0ZXJJZEV2ZW50U3Vic2NyaWJlcjtcbi8qKlxuICogIEEgKipGaWx0ZXJJZFN1YnNjcmliZXIqKiBmb3IgcmVjZWl2aW5nIHBlbmRpbmcgdHJhbnNhY3Rpb25zIGV2ZW50cy5cbiAqXG4gKiAgQF9kb2Nsb2M6IGFwaS9wcm92aWRlcnMvYWJzdHJhY3QtcHJvdmlkZXJcbiAqL1xuY2xhc3MgRmlsdGVySWRQZW5kaW5nU3Vic2NyaWJlciBleHRlbmRzIEZpbHRlcklkU3Vic2NyaWJlciB7XG4gICAgYXN5bmMgX3N1YnNjcmliZShwcm92aWRlcikge1xuICAgICAgICByZXR1cm4gYXdhaXQgcHJvdmlkZXIuc2VuZChcImV0aF9uZXdQZW5kaW5nVHJhbnNhY3Rpb25GaWx0ZXJcIiwgW10pO1xuICAgIH1cbiAgICBhc3luYyBfZW1pdFJlc3VsdHMocHJvdmlkZXIsIHJlc3VsdHMpIHtcbiAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVzdWx0cykge1xuICAgICAgICAgICAgcHJvdmlkZXIuZW1pdChcInBlbmRpbmdcIiwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuRmlsdGVySWRQZW5kaW5nU3Vic2NyaWJlciA9IEZpbHRlcklkUGVuZGluZ1N1YnNjcmliZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVyLWZpbHRlcmlkLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkZpbHRlcklkUGVuZGluZ1N1YnNjcmliZXIiLCJGaWx0ZXJJZEV2ZW50U3Vic2NyaWJlciIsIkZpbHRlcklkU3Vic2NyaWJlciIsImluZGV4X2pzXzEiLCJyZXF1aXJlIiwic3Vic2NyaWJlcl9wb2xsaW5nX2pzXzEiLCJjb3B5Iiwib2JqIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwicHJvdmlkZXIiLCJmaWx0ZXJJZFByb21pc2UiLCJwb2xsZXIiLCJydW5uaW5nIiwibmV0d29yayIsImhhdWx0IiwiY29uc3RydWN0b3IiLCJwb2xsIiwiYmluZCIsIl9zdWJzY3JpYmUiLCJFcnJvciIsIl9lbWl0UmVzdWx0cyIsInJlc3VsdCIsIl9yZWNvdmVyIiwiYmxvY2tOdW1iZXIiLCJmaWx0ZXJJZCIsImVycm9yIiwiaXNFcnJvciIsIm9wZXJhdGlvbiIsIl9yZWNvdmVyU3Vic2NyaWJlciIsImdldE5ldHdvcmsiLCJjaGFpbklkIiwic2VuZCIsImNvbnNvbGUiLCJsb2ciLCJvbmNlIiwidGVhcmRvd24iLCJ0aGVuIiwic3RhcnQiLCJzdG9wIiwib2ZmIiwicGF1c2UiLCJkcm9wV2hpbGVQYXVzZWQiLCJyZXN1bWUiLCJldmVudCIsImZpbHRlciIsIlBvbGxpbmdFdmVudFN1YnNjcmliZXIiLCJyZXN1bHRzIiwiZW1pdCIsIl93cmFwTG9nIiwiX25ldHdvcmsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/subscriber-filterid.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/subscriber-polling.js":
/*!**************************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/subscriber-polling.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PollingEventSubscriber = exports.PollingTransactionSubscriber = exports.PollingOrphanSubscriber = exports.OnBlockSubscriber = exports.PollingBlockSubscriber = exports.getPollingSubscriber = void 0;\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nfunction copy(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\n/**\n *  Return the polling subscriber for common events.\n *\n *  @_docloc: api/providers/abstract-provider\n */ function getPollingSubscriber(provider, event) {\n    if (event === \"block\") {\n        return new PollingBlockSubscriber(provider);\n    }\n    if ((0, index_js_1.isHexString)(event, 32)) {\n        return new PollingTransactionSubscriber(provider, event);\n    }\n    (0, index_js_1.assert)(false, \"unsupported polling event\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"getPollingSubscriber\",\n        info: {\n            event\n        }\n    });\n}\nexports.getPollingSubscriber = getPollingSubscriber;\n// @TODO: refactor this\n/**\n *  A **PollingBlockSubscriber** polls at a regular interval for a change\n *  in the block number.\n *\n *  @_docloc: api/providers/abstract-provider\n */ class PollingBlockSubscriber {\n    #provider;\n    #poller;\n    #interval;\n    // The most recent block we have scanned for events. The value -2\n    // indicates we still need to fetch an initial block number\n    #blockNumber;\n    /**\n     *  Create a new **PollingBlockSubscriber** attached to %%provider%%.\n     */ constructor(provider){\n        this.#provider = provider;\n        this.#poller = null;\n        this.#interval = 4000;\n        this.#blockNumber = -2;\n    }\n    /**\n     *  The polling interval.\n     */ get pollingInterval() {\n        return this.#interval;\n    }\n    set pollingInterval(value) {\n        this.#interval = value;\n    }\n    async #poll() {\n        try {\n            const blockNumber = await this.#provider.getBlockNumber();\n            // Bootstrap poll to setup our initial block number\n            if (this.#blockNumber === -2) {\n                this.#blockNumber = blockNumber;\n                return;\n            }\n            // @TODO: Put a cap on the maximum number of events per loop?\n            if (blockNumber !== this.#blockNumber) {\n                for(let b = this.#blockNumber + 1; b <= blockNumber; b++){\n                    // We have been stopped\n                    if (this.#poller == null) {\n                        return;\n                    }\n                    await this.#provider.emit(\"block\", b);\n                }\n                this.#blockNumber = blockNumber;\n            }\n        } catch (error) {\n        // @TODO: Minor bump, add an \"error\" event to let subscribers\n        //        know things went awry.\n        //console.log(error);\n        }\n        // We have been stopped\n        if (this.#poller == null) {\n            return;\n        }\n        this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);\n    }\n    start() {\n        if (this.#poller) {\n            return;\n        }\n        this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);\n        this.#poll();\n    }\n    stop() {\n        if (!this.#poller) {\n            return;\n        }\n        this.#provider._clearTimeout(this.#poller);\n        this.#poller = null;\n    }\n    pause(dropWhilePaused) {\n        this.stop();\n        if (dropWhilePaused) {\n            this.#blockNumber = -2;\n        }\n    }\n    resume() {\n        this.start();\n    }\n}\nexports.PollingBlockSubscriber = PollingBlockSubscriber;\n/**\n *  An **OnBlockSubscriber** can be sub-classed, with a [[_poll]]\n *  implmentation which will be called on every new block.\n *\n *  @_docloc: api/providers/abstract-provider\n */ class OnBlockSubscriber {\n    #provider;\n    #poll;\n    #running;\n    /**\n     *  Create a new **OnBlockSubscriber** attached to %%provider%%.\n     */ constructor(provider){\n        this.#provider = provider;\n        this.#running = false;\n        this.#poll = (blockNumber)=>{\n            this._poll(blockNumber, this.#provider);\n        };\n    }\n    /**\n     *  Called on every new block.\n     */ async _poll(blockNumber, provider) {\n        throw new Error(\"sub-classes must override this\");\n    }\n    start() {\n        if (this.#running) {\n            return;\n        }\n        this.#running = true;\n        this.#poll(-2);\n        this.#provider.on(\"block\", this.#poll);\n    }\n    stop() {\n        if (!this.#running) {\n            return;\n        }\n        this.#running = false;\n        this.#provider.off(\"block\", this.#poll);\n    }\n    pause(dropWhilePaused) {\n        this.stop();\n    }\n    resume() {\n        this.start();\n    }\n}\nexports.OnBlockSubscriber = OnBlockSubscriber;\n/**\n *  @_ignore:\n *\n *  @_docloc: api/providers/abstract-provider\n */ class PollingOrphanSubscriber extends OnBlockSubscriber {\n    #filter;\n    constructor(provider, filter){\n        super(provider);\n        this.#filter = copy(filter);\n    }\n    async _poll(blockNumber, provider) {\n        throw new Error(\"@TODO\");\n        console.log(this.#filter);\n    }\n}\nexports.PollingOrphanSubscriber = PollingOrphanSubscriber;\n/**\n *  A **PollingTransactionSubscriber** will poll for a given transaction\n *  hash for its receipt.\n *\n *  @_docloc: api/providers/abstract-provider\n */ class PollingTransactionSubscriber extends OnBlockSubscriber {\n    #hash;\n    /**\n     *  Create a new **PollingTransactionSubscriber** attached to\n     *  %%provider%%, listening for %%hash%%.\n     */ constructor(provider, hash){\n        super(provider);\n        this.#hash = hash;\n    }\n    async _poll(blockNumber, provider) {\n        const tx = await provider.getTransactionReceipt(this.#hash);\n        if (tx) {\n            provider.emit(this.#hash, tx);\n        }\n    }\n}\nexports.PollingTransactionSubscriber = PollingTransactionSubscriber;\n/**\n *  A **PollingEventSubscriber** will poll for a given filter for its logs.\n *\n *  @_docloc: api/providers/abstract-provider\n */ class PollingEventSubscriber {\n    #provider;\n    #filter;\n    #poller;\n    #running;\n    // The most recent block we have scanned for events. The value -2\n    // indicates we still need to fetch an initial block number\n    #blockNumber;\n    /**\n     *  Create a new **PollingTransactionSubscriber** attached to\n     *  %%provider%%, listening for %%filter%%.\n     */ constructor(provider, filter){\n        this.#provider = provider;\n        this.#filter = copy(filter);\n        this.#poller = this.#poll.bind(this);\n        this.#running = false;\n        this.#blockNumber = -2;\n    }\n    async #poll(blockNumber) {\n        // The initial block hasn't been determined yet\n        if (this.#blockNumber === -2) {\n            return;\n        }\n        const filter = copy(this.#filter);\n        filter.fromBlock = this.#blockNumber + 1;\n        filter.toBlock = blockNumber;\n        const logs = await this.#provider.getLogs(filter);\n        // No logs could just mean the node has not indexed them yet,\n        // so we keep a sliding window of 60 blocks to keep scanning\n        if (logs.length === 0) {\n            if (this.#blockNumber < blockNumber - 60) {\n                this.#blockNumber = blockNumber - 60;\n            }\n            return;\n        }\n        for (const log of logs){\n            this.#provider.emit(this.#filter, log);\n            // Only advance the block number when logs were found to\n            // account for networks (like BNB and Polygon) which may\n            // sacrifice event consistency for block event speed\n            this.#blockNumber = log.blockNumber;\n        }\n    }\n    start() {\n        if (this.#running) {\n            return;\n        }\n        this.#running = true;\n        if (this.#blockNumber === -2) {\n            this.#provider.getBlockNumber().then((blockNumber)=>{\n                this.#blockNumber = blockNumber;\n            });\n        }\n        this.#provider.on(\"block\", this.#poller);\n    }\n    stop() {\n        if (!this.#running) {\n            return;\n        }\n        this.#running = false;\n        this.#provider.off(\"block\", this.#poller);\n    }\n    pause(dropWhilePaused) {\n        this.stop();\n        if (dropWhilePaused) {\n            this.#blockNumber = -2;\n        }\n    }\n    resume() {\n        this.start();\n    }\n}\nexports.PollingEventSubscriber = PollingEventSubscriber; //# sourceMappingURL=subscriber-polling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/subscriber-polling.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/providers/ws.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/providers/ws.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WebSocket = void 0;\nvar ws_1 = __webpack_require__(/*! ws */ \"(rsc)/./node_modules/ethers/node_modules/ws/index.js\");\nObject.defineProperty(exports, \"WebSocket\", ({\n    enumerable: true,\n    get: function() {\n        return ws_1.WebSocket;\n    }\n})); //# sourceMappingURL=ws.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy9wcm92aWRlcnMvd3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHLEtBQUs7QUFDekIsSUFBSUcsT0FBT0MsbUJBQU9BLENBQUMsZ0VBQUk7QUFDdkJOLDZDQUE0QztJQUFFTyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSCxLQUFLRCxTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUMsRUFDOUcsOEJBQThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvcHJvdmlkZXJzL3dzLmpzPzY0ZjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldlYlNvY2tldCA9IHZvaWQgMDtcbnZhciB3c18xID0gcmVxdWlyZShcIndzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV2ViU29ja2V0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3c18xLldlYlNvY2tldDsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIldlYlNvY2tldCIsIndzXzEiLCJyZXF1aXJlIiwiZW51bWVyYWJsZSIsImdldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/providers/ws.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/transaction/accesslist.js":
/*!********************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/transaction/accesslist.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.accessListify = void 0;\nconst index_js_1 = __webpack_require__(/*! ../address/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nfunction accessSetify(addr, storageKeys) {\n    return {\n        address: (0, index_js_1.getAddress)(addr),\n        storageKeys: storageKeys.map((storageKey, index)=>{\n            (0, index_js_2.assertArgument)((0, index_js_2.isHexString)(storageKey, 32), \"invalid slot\", `storageKeys[${index}]`, storageKey);\n            return storageKey.toLowerCase();\n        })\n    };\n}\n/**\n *  Returns a [[AccessList]] from any ethers-supported access-list structure.\n */ function accessListify(value) {\n    if (Array.isArray(value)) {\n        return value.map((set, index)=>{\n            if (Array.isArray(set)) {\n                (0, index_js_2.assertArgument)(set.length === 2, \"invalid slot set\", `value[${index}]`, set);\n                return accessSetify(set[0], set[1]);\n            }\n            (0, index_js_2.assertArgument)(set != null && typeof set === \"object\", \"invalid address-slot set\", \"value\", value);\n            return accessSetify(set.address, set.storageKeys);\n        });\n    }\n    (0, index_js_2.assertArgument)(value != null && typeof value === \"object\", \"invalid access list\", \"value\", value);\n    const result = Object.keys(value).map((addr)=>{\n        const storageKeys = value[addr].reduce((accum, storageKey)=>{\n            accum[storageKey] = true;\n            return accum;\n        }, {});\n        return accessSetify(addr, Object.keys(storageKeys).sort());\n    });\n    result.sort((a, b)=>a.address.localeCompare(b.address));\n    return result;\n}\nexports.accessListify = accessListify; //# sourceMappingURL=accesslist.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy90cmFuc2FjdGlvbi9hY2Nlc3NsaXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBRyxLQUFLO0FBQzdCLE1BQU1HLGFBQWFDLG1CQUFPQSxDQUFDLHNGQUFxQjtBQUNoRCxNQUFNQyxhQUFhRCxtQkFBT0EsQ0FBQyxrRkFBbUI7QUFDOUMsU0FBU0UsYUFBYUMsSUFBSSxFQUFFQyxXQUFXO0lBQ25DLE9BQU87UUFDSEMsU0FBUyxDQUFDLEdBQUdOLFdBQVdPLFVBQVUsRUFBRUg7UUFDcENDLGFBQWFBLFlBQVlHLEdBQUcsQ0FBQyxDQUFDQyxZQUFZQztZQUNyQyxJQUFHUixXQUFXUyxjQUFjLEVBQUUsQ0FBQyxHQUFHVCxXQUFXVSxXQUFXLEVBQUVILFlBQVksS0FBSyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUVDLE1BQU0sQ0FBQyxDQUFDLEVBQUVEO1lBQ3JILE9BQU9BLFdBQVdJLFdBQVc7UUFDakM7SUFDSjtBQUNKO0FBQ0E7O0NBRUMsR0FDRCxTQUFTZCxjQUFjRCxLQUFLO0lBQ3hCLElBQUlnQixNQUFNQyxPQUFPLENBQUNqQixRQUFRO1FBQ3RCLE9BQU9BLE1BQU1VLEdBQUcsQ0FBQyxDQUFDUSxLQUFLTjtZQUNuQixJQUFJSSxNQUFNQyxPQUFPLENBQUNDLE1BQU07Z0JBQ25CLElBQUdkLFdBQVdTLGNBQWMsRUFBRUssSUFBSUMsTUFBTSxLQUFLLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxFQUFFUCxNQUFNLENBQUMsQ0FBQyxFQUFFTTtnQkFDeEYsT0FBT2IsYUFBYWEsR0FBRyxDQUFDLEVBQUUsRUFBRUEsR0FBRyxDQUFDLEVBQUU7WUFDdEM7WUFDQyxJQUFHZCxXQUFXUyxjQUFjLEVBQUVLLE9BQU8sUUFBUSxPQUFRQSxRQUFTLFVBQVUsNEJBQTRCLFNBQVNsQjtZQUM5RyxPQUFPSyxhQUFhYSxJQUFJVixPQUFPLEVBQUVVLElBQUlYLFdBQVc7UUFDcEQ7SUFDSjtJQUNDLElBQUdILFdBQVdTLGNBQWMsRUFBRWIsU0FBUyxRQUFRLE9BQVFBLFVBQVcsVUFBVSx1QkFBdUIsU0FBU0E7SUFDN0csTUFBTW9CLFNBQVN2QixPQUFPd0IsSUFBSSxDQUFDckIsT0FBT1UsR0FBRyxDQUFDLENBQUNKO1FBQ25DLE1BQU1DLGNBQWNQLEtBQUssQ0FBQ00sS0FBSyxDQUFDZ0IsTUFBTSxDQUFDLENBQUNDLE9BQU9aO1lBQzNDWSxLQUFLLENBQUNaLFdBQVcsR0FBRztZQUNwQixPQUFPWTtRQUNYLEdBQUcsQ0FBQztRQUNKLE9BQU9sQixhQUFhQyxNQUFNVCxPQUFPd0IsSUFBSSxDQUFDZCxhQUFhaUIsSUFBSTtJQUMzRDtJQUNBSixPQUFPSSxJQUFJLENBQUMsQ0FBQ0MsR0FBR0MsSUFBT0QsRUFBRWpCLE9BQU8sQ0FBQ21CLGFBQWEsQ0FBQ0QsRUFBRWxCLE9BQU87SUFDeEQsT0FBT1k7QUFDWDtBQUNBckIscUJBQXFCLEdBQUdFLGVBQ3hCLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL3RyYW5zYWN0aW9uL2FjY2Vzc2xpc3QuanM/YTU0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYWNjZXNzTGlzdGlmeSA9IHZvaWQgMDtcbmNvbnN0IGluZGV4X2pzXzEgPSByZXF1aXJlKFwiLi4vYWRkcmVzcy9pbmRleC5qc1wiKTtcbmNvbnN0IGluZGV4X2pzXzIgPSByZXF1aXJlKFwiLi4vdXRpbHMvaW5kZXguanNcIik7XG5mdW5jdGlvbiBhY2Nlc3NTZXRpZnkoYWRkciwgc3RvcmFnZUtleXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRyZXNzOiAoMCwgaW5kZXhfanNfMS5nZXRBZGRyZXNzKShhZGRyKSxcbiAgICAgICAgc3RvcmFnZUtleXM6IHN0b3JhZ2VLZXlzLm1hcCgoc3RvcmFnZUtleSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICgwLCBpbmRleF9qc18yLmFzc2VydEFyZ3VtZW50KSgoMCwgaW5kZXhfanNfMi5pc0hleFN0cmluZykoc3RvcmFnZUtleSwgMzIpLCBcImludmFsaWQgc2xvdFwiLCBgc3RvcmFnZUtleXNbJHtpbmRleH1dYCwgc3RvcmFnZUtleSk7XG4gICAgICAgICAgICByZXR1cm4gc3RvcmFnZUtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9KVxuICAgIH07XG59XG4vKipcbiAqICBSZXR1cm5zIGEgW1tBY2Nlc3NMaXN0XV0gZnJvbSBhbnkgZXRoZXJzLXN1cHBvcnRlZCBhY2Nlc3MtbGlzdCBzdHJ1Y3R1cmUuXG4gKi9cbmZ1bmN0aW9uIGFjY2Vzc0xpc3RpZnkodmFsdWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLm1hcCgoc2V0LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2V0KSkge1xuICAgICAgICAgICAgICAgICgwLCBpbmRleF9qc18yLmFzc2VydEFyZ3VtZW50KShzZXQubGVuZ3RoID09PSAyLCBcImludmFsaWQgc2xvdCBzZXRcIiwgYHZhbHVlWyR7aW5kZXh9XWAsIHNldCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY2Vzc1NldGlmeShzZXRbMF0sIHNldFsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoMCwgaW5kZXhfanNfMi5hc3NlcnRBcmd1bWVudCkoc2V0ICE9IG51bGwgJiYgdHlwZW9mIChzZXQpID09PSBcIm9iamVjdFwiLCBcImludmFsaWQgYWRkcmVzcy1zbG90IHNldFwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBhY2Nlc3NTZXRpZnkoc2V0LmFkZHJlc3MsIHNldC5zdG9yYWdlS2V5cyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAoMCwgaW5kZXhfanNfMi5hc3NlcnRBcmd1bWVudCkodmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgKHZhbHVlKSA9PT0gXCJvYmplY3RcIiwgXCJpbnZhbGlkIGFjY2VzcyBsaXN0XCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5tYXAoKGFkZHIpID0+IHtcbiAgICAgICAgY29uc3Qgc3RvcmFnZUtleXMgPSB2YWx1ZVthZGRyXS5yZWR1Y2UoKGFjY3VtLCBzdG9yYWdlS2V5KSA9PiB7XG4gICAgICAgICAgICBhY2N1bVtzdG9yYWdlS2V5XSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gYWNjdW07XG4gICAgICAgIH0sIHt9KTtcbiAgICAgICAgcmV0dXJuIGFjY2Vzc1NldGlmeShhZGRyLCBPYmplY3Qua2V5cyhzdG9yYWdlS2V5cykuc29ydCgpKTtcbiAgICB9KTtcbiAgICByZXN1bHQuc29ydCgoYSwgYikgPT4gKGEuYWRkcmVzcy5sb2NhbGVDb21wYXJlKGIuYWRkcmVzcykpKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5hY2Nlc3NMaXN0aWZ5ID0gYWNjZXNzTGlzdGlmeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjY2Vzc2xpc3QuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYWNjZXNzTGlzdGlmeSIsImluZGV4X2pzXzEiLCJyZXF1aXJlIiwiaW5kZXhfanNfMiIsImFjY2Vzc1NldGlmeSIsImFkZHIiLCJzdG9yYWdlS2V5cyIsImFkZHJlc3MiLCJnZXRBZGRyZXNzIiwibWFwIiwic3RvcmFnZUtleSIsImluZGV4IiwiYXNzZXJ0QXJndW1lbnQiLCJpc0hleFN0cmluZyIsInRvTG93ZXJDYXNlIiwiQXJyYXkiLCJpc0FycmF5Iiwic2V0IiwibGVuZ3RoIiwicmVzdWx0Iiwia2V5cyIsInJlZHVjZSIsImFjY3VtIiwic29ydCIsImEiLCJiIiwibG9jYWxlQ29tcGFyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/transaction/accesslist.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/transaction/address.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/transaction/address.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.recoverAddress = exports.computeAddress = void 0;\nconst index_js_1 = __webpack_require__(/*! ../address/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../crypto/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/index.js\");\n/**\n *  Returns the address for the %%key%%.\n *\n *  The key may be any standard form of public key or a private key.\n */ function computeAddress(key) {\n    let pubkey;\n    if (typeof key === \"string\") {\n        pubkey = index_js_2.SigningKey.computePublicKey(key, false);\n    } else {\n        pubkey = key.publicKey;\n    }\n    return (0, index_js_1.getAddress)((0, index_js_2.keccak256)(\"0x\" + pubkey.substring(4)).substring(26));\n}\nexports.computeAddress = computeAddress;\n/**\n *  Returns the recovered address for the private key that was\n *  used to sign %%digest%% that resulted in %%signature%%.\n */ function recoverAddress(digest, signature) {\n    return computeAddress(index_js_2.SigningKey.recoverPublicKey(digest, signature));\n}\nexports.recoverAddress = recoverAddress; //# sourceMappingURL=address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy90cmFuc2FjdGlvbi9hZGRyZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxzQkFBc0IsR0FBR0Esc0JBQXNCLEdBQUcsS0FBSztBQUN2RCxNQUFNSSxhQUFhQyxtQkFBT0EsQ0FBQyxzRkFBcUI7QUFDaEQsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUMsb0ZBQW9CO0FBQy9DOzs7O0NBSUMsR0FDRCxTQUFTRixlQUFlSSxHQUFHO0lBQ3ZCLElBQUlDO0lBQ0osSUFBSSxPQUFRRCxRQUFTLFVBQVU7UUFDM0JDLFNBQVNGLFdBQVdHLFVBQVUsQ0FBQ0MsZ0JBQWdCLENBQUNILEtBQUs7SUFDekQsT0FDSztRQUNEQyxTQUFTRCxJQUFJSSxTQUFTO0lBQzFCO0lBQ0EsT0FBTyxDQUFDLEdBQUdQLFdBQVdRLFVBQVUsRUFBRSxDQUFDLEdBQUdOLFdBQVdPLFNBQVMsRUFBRSxPQUFPTCxPQUFPTSxTQUFTLENBQUMsSUFBSUEsU0FBUyxDQUFDO0FBQ3RHO0FBQ0FkLHNCQUFzQixHQUFHRztBQUN6Qjs7O0NBR0MsR0FDRCxTQUFTRCxlQUFlYSxNQUFNLEVBQUVDLFNBQVM7SUFDckMsT0FBT2IsZUFBZUcsV0FBV0csVUFBVSxDQUFDUSxnQkFBZ0IsQ0FBQ0YsUUFBUUM7QUFDekU7QUFDQWhCLHNCQUFzQixHQUFHRSxnQkFDekIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvdHJhbnNhY3Rpb24vYWRkcmVzcy5qcz82MjRlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWNvdmVyQWRkcmVzcyA9IGV4cG9ydHMuY29tcHV0ZUFkZHJlc3MgPSB2b2lkIDA7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4uL2FkZHJlc3MvaW5kZXguanNcIik7XG5jb25zdCBpbmRleF9qc18yID0gcmVxdWlyZShcIi4uL2NyeXB0by9pbmRleC5qc1wiKTtcbi8qKlxuICogIFJldHVybnMgdGhlIGFkZHJlc3MgZm9yIHRoZSAlJWtleSUlLlxuICpcbiAqICBUaGUga2V5IG1heSBiZSBhbnkgc3RhbmRhcmQgZm9ybSBvZiBwdWJsaWMga2V5IG9yIGEgcHJpdmF0ZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVBZGRyZXNzKGtleSkge1xuICAgIGxldCBwdWJrZXk7XG4gICAgaWYgKHR5cGVvZiAoa2V5KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBwdWJrZXkgPSBpbmRleF9qc18yLlNpZ25pbmdLZXkuY29tcHV0ZVB1YmxpY0tleShrZXksIGZhbHNlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHB1YmtleSA9IGtleS5wdWJsaWNLZXk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgaW5kZXhfanNfMS5nZXRBZGRyZXNzKSgoMCwgaW5kZXhfanNfMi5rZWNjYWsyNTYpKFwiMHhcIiArIHB1YmtleS5zdWJzdHJpbmcoNCkpLnN1YnN0cmluZygyNikpO1xufVxuZXhwb3J0cy5jb21wdXRlQWRkcmVzcyA9IGNvbXB1dGVBZGRyZXNzO1xuLyoqXG4gKiAgUmV0dXJucyB0aGUgcmVjb3ZlcmVkIGFkZHJlc3MgZm9yIHRoZSBwcml2YXRlIGtleSB0aGF0IHdhc1xuICogIHVzZWQgdG8gc2lnbiAlJWRpZ2VzdCUlIHRoYXQgcmVzdWx0ZWQgaW4gJSVzaWduYXR1cmUlJS5cbiAqL1xuZnVuY3Rpb24gcmVjb3ZlckFkZHJlc3MoZGlnZXN0LCBzaWduYXR1cmUpIHtcbiAgICByZXR1cm4gY29tcHV0ZUFkZHJlc3MoaW5kZXhfanNfMi5TaWduaW5nS2V5LnJlY292ZXJQdWJsaWNLZXkoZGlnZXN0LCBzaWduYXR1cmUpKTtcbn1cbmV4cG9ydHMucmVjb3ZlckFkZHJlc3MgPSByZWNvdmVyQWRkcmVzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZHJlc3MuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVjb3ZlckFkZHJlc3MiLCJjb21wdXRlQWRkcmVzcyIsImluZGV4X2pzXzEiLCJyZXF1aXJlIiwiaW5kZXhfanNfMiIsImtleSIsInB1YmtleSIsIlNpZ25pbmdLZXkiLCJjb21wdXRlUHVibGljS2V5IiwicHVibGljS2V5IiwiZ2V0QWRkcmVzcyIsImtlY2NhazI1NiIsInN1YnN0cmluZyIsImRpZ2VzdCIsInNpZ25hdHVyZSIsInJlY292ZXJQdWJsaWNLZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/transaction/address.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/transaction/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/transaction/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  Each state-changing operation on Ethereum requires a transaction.\n *\n *  @_section api/transaction:Transactions  [about-transactions]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Transaction = exports.recoverAddress = exports.computeAddress = exports.accessListify = void 0;\nnull;\nvar accesslist_js_1 = __webpack_require__(/*! ./accesslist.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/transaction/accesslist.js\");\nObject.defineProperty(exports, \"accessListify\", ({\n    enumerable: true,\n    get: function() {\n        return accesslist_js_1.accessListify;\n    }\n}));\nvar address_js_1 = __webpack_require__(/*! ./address.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/transaction/address.js\");\nObject.defineProperty(exports, \"computeAddress\", ({\n    enumerable: true,\n    get: function() {\n        return address_js_1.computeAddress;\n    }\n}));\nObject.defineProperty(exports, \"recoverAddress\", ({\n    enumerable: true,\n    get: function() {\n        return address_js_1.recoverAddress;\n    }\n}));\nvar transaction_js_1 = __webpack_require__(/*! ./transaction.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/transaction/transaction.js\");\nObject.defineProperty(exports, \"Transaction\", ({\n    enumerable: true,\n    get: function() {\n        return transaction_js_1.Transaction;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy90cmFuc2FjdGlvbi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7O0NBSUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1CQUFtQixHQUFHQSxzQkFBc0IsR0FBR0Esc0JBQXNCLEdBQUdBLHFCQUFxQixHQUFHLEtBQUs7QUFDckc7QUFDQSxJQUFJTSxrQkFBa0JDLG1CQUFPQSxDQUFDLDJGQUFpQjtBQUMvQ1QsaURBQWdEO0lBQUVVLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILGdCQUFnQkQsYUFBYTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2pJLElBQUlLLGVBQWVILG1CQUFPQSxDQUFDLHFGQUFjO0FBQ3pDVCxrREFBaUQ7SUFBRVUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsYUFBYU4sY0FBYztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2hJTixrREFBaUQ7SUFBRVUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsYUFBYVAsY0FBYztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2hJLElBQUlRLG1CQUFtQkosbUJBQU9BLENBQUMsNkZBQWtCO0FBQ2pEVCwrQ0FBOEM7SUFBRVUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsaUJBQWlCVCxXQUFXO0lBQUU7QUFBRSxDQUFDLEVBQUMsRUFDOUgsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvdHJhbnNhY3Rpb24vaW5kZXguanM/MDRmZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogIEVhY2ggc3RhdGUtY2hhbmdpbmcgb3BlcmF0aW9uIG9uIEV0aGVyZXVtIHJlcXVpcmVzIGEgdHJhbnNhY3Rpb24uXG4gKlxuICogIEBfc2VjdGlvbiBhcGkvdHJhbnNhY3Rpb246VHJhbnNhY3Rpb25zICBbYWJvdXQtdHJhbnNhY3Rpb25zXVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRyYW5zYWN0aW9uID0gZXhwb3J0cy5yZWNvdmVyQWRkcmVzcyA9IGV4cG9ydHMuY29tcHV0ZUFkZHJlc3MgPSBleHBvcnRzLmFjY2Vzc0xpc3RpZnkgPSB2b2lkIDA7XG5udWxsO1xudmFyIGFjY2Vzc2xpc3RfanNfMSA9IHJlcXVpcmUoXCIuL2FjY2Vzc2xpc3QuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhY2Nlc3NMaXN0aWZ5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhY2Nlc3NsaXN0X2pzXzEuYWNjZXNzTGlzdGlmeTsgfSB9KTtcbnZhciBhZGRyZXNzX2pzXzEgPSByZXF1aXJlKFwiLi9hZGRyZXNzLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29tcHV0ZUFkZHJlc3NcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFkZHJlc3NfanNfMS5jb21wdXRlQWRkcmVzczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlY292ZXJBZGRyZXNzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhZGRyZXNzX2pzXzEucmVjb3ZlckFkZHJlc3M7IH0gfSk7XG52YXIgdHJhbnNhY3Rpb25fanNfMSA9IHJlcXVpcmUoXCIuL3RyYW5zYWN0aW9uLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVHJhbnNhY3Rpb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRyYW5zYWN0aW9uX2pzXzEuVHJhbnNhY3Rpb247IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJUcmFuc2FjdGlvbiIsInJlY292ZXJBZGRyZXNzIiwiY29tcHV0ZUFkZHJlc3MiLCJhY2Nlc3NMaXN0aWZ5IiwiYWNjZXNzbGlzdF9qc18xIiwicmVxdWlyZSIsImVudW1lcmFibGUiLCJnZXQiLCJhZGRyZXNzX2pzXzEiLCJ0cmFuc2FjdGlvbl9qc18xIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/transaction/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/transaction/transaction.js":
/*!*********************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/transaction/transaction.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Transaction = void 0;\nconst index_js_1 = __webpack_require__(/*! ../address/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../crypto/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/index.js\");\nconst index_js_3 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst accesslist_js_1 = __webpack_require__(/*! ./accesslist.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/transaction/accesslist.js\");\nconst address_js_1 = __webpack_require__(/*! ./address.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/transaction/address.js\");\nconst BN_0 = BigInt(0);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst BN_MAX_UINT = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction handleAddress(value) {\n    if (value === \"0x\") {\n        return null;\n    }\n    return (0, index_js_1.getAddress)(value);\n}\nfunction handleAccessList(value, param) {\n    try {\n        return (0, accesslist_js_1.accessListify)(value);\n    } catch (error) {\n        (0, index_js_3.assertArgument)(false, error.message, param, value);\n    }\n}\nfunction handleNumber(_value, param) {\n    if (_value === \"0x\") {\n        return 0;\n    }\n    return (0, index_js_3.getNumber)(_value, param);\n}\nfunction handleUint(_value, param) {\n    if (_value === \"0x\") {\n        return BN_0;\n    }\n    const value = (0, index_js_3.getBigInt)(_value, param);\n    (0, index_js_3.assertArgument)(value <= BN_MAX_UINT, \"value exceeds uint size\", param, value);\n    return value;\n}\nfunction formatNumber(_value, name) {\n    const value = (0, index_js_3.getBigInt)(_value, \"value\");\n    const result = (0, index_js_3.toBeArray)(value);\n    (0, index_js_3.assertArgument)(result.length <= 32, `value too large`, `tx.${name}`, value);\n    return result;\n}\nfunction formatAccessList(value) {\n    return (0, accesslist_js_1.accessListify)(value).map((set)=>[\n            set.address,\n            set.storageKeys\n        ]);\n}\nfunction _parseLegacy(data) {\n    const fields = (0, index_js_3.decodeRlp)(data);\n    (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), \"invalid field count for legacy transaction\", \"data\", data);\n    const tx = {\n        type: 0,\n        nonce: handleNumber(fields[0], \"nonce\"),\n        gasPrice: handleUint(fields[1], \"gasPrice\"),\n        gasLimit: handleUint(fields[2], \"gasLimit\"),\n        to: handleAddress(fields[3]),\n        value: handleUint(fields[4], \"value\"),\n        data: (0, index_js_3.hexlify)(fields[5]),\n        chainId: BN_0\n    };\n    // Legacy unsigned transaction\n    if (fields.length === 6) {\n        return tx;\n    }\n    const v = handleUint(fields[6], \"v\");\n    const r = handleUint(fields[7], \"r\");\n    const s = handleUint(fields[8], \"s\");\n    if (r === BN_0 && s === BN_0) {\n        // EIP-155 unsigned transaction\n        tx.chainId = v;\n    } else {\n        // Compute the EIP-155 chain ID (or 0 for legacy)\n        let chainId = (v - BN_35) / BN_2;\n        if (chainId < BN_0) {\n            chainId = BN_0;\n        }\n        tx.chainId = chainId;\n        // Signed Legacy Transaction\n        (0, index_js_3.assertArgument)(chainId !== BN_0 || v === BN_27 || v === BN_28, \"non-canonical legacy v\", \"v\", fields[6]);\n        tx.signature = index_js_2.Signature.from({\n            r: (0, index_js_3.zeroPadValue)(fields[7], 32),\n            s: (0, index_js_3.zeroPadValue)(fields[8], 32),\n            v\n        });\n        tx.hash = (0, index_js_2.keccak256)(data);\n    }\n    return tx;\n}\nfunction _serializeLegacy(tx, sig) {\n    const fields = [\n        formatNumber(tx.nonce || 0, \"nonce\"),\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\n        formatNumber(tx.gasLimit || 0, \"gasLimit\"),\n        tx.to != null ? (0, index_js_1.getAddress)(tx.to) : \"0x\",\n        formatNumber(tx.value || 0, \"value\"),\n        tx.data || \"0x\"\n    ];\n    let chainId = BN_0;\n    if (tx.chainId != BN_0) {\n        // A chainId was provided; if non-zero we'll use EIP-155\n        chainId = (0, index_js_3.getBigInt)(tx.chainId, \"tx.chainId\");\n        // We have a chainId in the tx and an EIP-155 v in the signature,\n        // make sure they agree with each other\n        (0, index_js_3.assertArgument)(!sig || sig.networkV == null || sig.legacyChainId === chainId, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n    } else if (tx.signature) {\n        // No explicit chainId, but EIP-155 have a derived implicit chainId\n        const legacy = tx.signature.legacyChainId;\n        if (legacy != null) {\n            chainId = legacy;\n        }\n    }\n    // Requesting an unsigned transaction\n    if (!sig) {\n        // We have an EIP-155 transaction (chainId was specified and non-zero)\n        if (chainId !== BN_0) {\n            fields.push((0, index_js_3.toBeArray)(chainId));\n            fields.push(\"0x\");\n            fields.push(\"0x\");\n        }\n        return (0, index_js_3.encodeRlp)(fields);\n    }\n    // @TODO: We should probably check that tx.signature, chainId, and sig\n    //        match but that logic could break existing code, so schedule\n    //        this for the next major bump.\n    // Compute the EIP-155 v\n    let v = BigInt(27 + sig.yParity);\n    if (chainId !== BN_0) {\n        v = index_js_2.Signature.getChainIdV(chainId, sig.v);\n    } else if (BigInt(sig.v) !== v) {\n        (0, index_js_3.assertArgument)(false, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n    }\n    // Add the signature\n    fields.push((0, index_js_3.toBeArray)(v));\n    fields.push((0, index_js_3.toBeArray)(sig.r));\n    fields.push((0, index_js_3.toBeArray)(sig.s));\n    return (0, index_js_3.encodeRlp)(fields);\n}\nfunction _parseEipSignature(tx, fields) {\n    let yParity;\n    try {\n        yParity = handleNumber(fields[0], \"yParity\");\n        if (yParity !== 0 && yParity !== 1) {\n            throw new Error(\"bad yParity\");\n        }\n    } catch (error) {\n        (0, index_js_3.assertArgument)(false, \"invalid yParity\", \"yParity\", fields[0]);\n    }\n    const r = (0, index_js_3.zeroPadValue)(fields[1], 32);\n    const s = (0, index_js_3.zeroPadValue)(fields[2], 32);\n    const signature = index_js_2.Signature.from({\n        r,\n        s,\n        yParity\n    });\n    tx.signature = signature;\n}\nfunction _parseEip1559(data) {\n    const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));\n    (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), \"invalid field count for transaction type: 2\", \"data\", (0, index_js_3.hexlify)(data));\n    const maxPriorityFeePerGas = handleUint(fields[2], \"maxPriorityFeePerGas\");\n    const maxFeePerGas = handleUint(fields[3], \"maxFeePerGas\");\n    const tx = {\n        type: 2,\n        chainId: handleUint(fields[0], \"chainId\"),\n        nonce: handleNumber(fields[1], \"nonce\"),\n        maxPriorityFeePerGas: maxPriorityFeePerGas,\n        maxFeePerGas: maxFeePerGas,\n        gasPrice: null,\n        gasLimit: handleUint(fields[4], \"gasLimit\"),\n        to: handleAddress(fields[5]),\n        value: handleUint(fields[6], \"value\"),\n        data: (0, index_js_3.hexlify)(fields[7]),\n        accessList: handleAccessList(fields[8], \"accessList\")\n    };\n    // Unsigned EIP-1559 Transaction\n    if (fields.length === 9) {\n        return tx;\n    }\n    tx.hash = (0, index_js_2.keccak256)(data);\n    _parseEipSignature(tx, fields.slice(9));\n    return tx;\n}\nfunction _serializeEip1559(tx, sig) {\n    const fields = [\n        formatNumber(tx.chainId || 0, \"chainId\"),\n        formatNumber(tx.nonce || 0, \"nonce\"),\n        formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n        formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"),\n        formatNumber(tx.gasLimit || 0, \"gasLimit\"),\n        tx.to != null ? (0, index_js_1.getAddress)(tx.to) : \"0x\",\n        formatNumber(tx.value || 0, \"value\"),\n        tx.data || \"0x\",\n        formatAccessList(tx.accessList || [])\n    ];\n    if (sig) {\n        fields.push(formatNumber(sig.yParity, \"yParity\"));\n        fields.push((0, index_js_3.toBeArray)(sig.r));\n        fields.push((0, index_js_3.toBeArray)(sig.s));\n    }\n    return (0, index_js_3.concat)([\n        \"0x02\",\n        (0, index_js_3.encodeRlp)(fields)\n    ]);\n}\nfunction _parseEip2930(data) {\n    const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));\n    (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), \"invalid field count for transaction type: 1\", \"data\", (0, index_js_3.hexlify)(data));\n    const tx = {\n        type: 1,\n        chainId: handleUint(fields[0], \"chainId\"),\n        nonce: handleNumber(fields[1], \"nonce\"),\n        gasPrice: handleUint(fields[2], \"gasPrice\"),\n        gasLimit: handleUint(fields[3], \"gasLimit\"),\n        to: handleAddress(fields[4]),\n        value: handleUint(fields[5], \"value\"),\n        data: (0, index_js_3.hexlify)(fields[6]),\n        accessList: handleAccessList(fields[7], \"accessList\")\n    };\n    // Unsigned EIP-2930 Transaction\n    if (fields.length === 8) {\n        return tx;\n    }\n    tx.hash = (0, index_js_2.keccak256)(data);\n    _parseEipSignature(tx, fields.slice(8));\n    return tx;\n}\nfunction _serializeEip2930(tx, sig) {\n    const fields = [\n        formatNumber(tx.chainId || 0, \"chainId\"),\n        formatNumber(tx.nonce || 0, \"nonce\"),\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\n        formatNumber(tx.gasLimit || 0, \"gasLimit\"),\n        tx.to != null ? (0, index_js_1.getAddress)(tx.to) : \"0x\",\n        formatNumber(tx.value || 0, \"value\"),\n        tx.data || \"0x\",\n        formatAccessList(tx.accessList || [])\n    ];\n    if (sig) {\n        fields.push(formatNumber(sig.yParity, \"recoveryParam\"));\n        fields.push((0, index_js_3.toBeArray)(sig.r));\n        fields.push((0, index_js_3.toBeArray)(sig.s));\n    }\n    return (0, index_js_3.concat)([\n        \"0x01\",\n        (0, index_js_3.encodeRlp)(fields)\n    ]);\n}\n/**\n *  A **Transaction** describes an operation to be executed on\n *  Ethereum by an Externally Owned Account (EOA). It includes\n *  who (the [[to]] address), what (the [[data]]) and how much (the\n *  [[value]] in ether) the operation should entail.\n *\n *  @example:\n *    tx = new Transaction()\n *    //_result:\n *\n *    tx.data = \"0x1234\";\n *    //_result:\n */ class Transaction {\n    #type;\n    #to;\n    #data;\n    #nonce;\n    #gasLimit;\n    #gasPrice;\n    #maxPriorityFeePerGas;\n    #maxFeePerGas;\n    #value;\n    #chainId;\n    #sig;\n    #accessList;\n    /**\n     *  The transaction type.\n     *\n     *  If null, the type will be automatically inferred based on\n     *  explicit properties.\n     */ get type() {\n        return this.#type;\n    }\n    set type(value) {\n        switch(value){\n            case null:\n                this.#type = null;\n                break;\n            case 0:\n            case \"legacy\":\n                this.#type = 0;\n                break;\n            case 1:\n            case \"berlin\":\n            case \"eip-2930\":\n                this.#type = 1;\n                break;\n            case 2:\n            case \"london\":\n            case \"eip-1559\":\n                this.#type = 2;\n                break;\n            default:\n                (0, index_js_3.assertArgument)(false, \"unsupported transaction type\", \"type\", value);\n        }\n    }\n    /**\n     *  The name of the transaction type.\n     */ get typeName() {\n        switch(this.type){\n            case 0:\n                return \"legacy\";\n            case 1:\n                return \"eip-2930\";\n            case 2:\n                return \"eip-1559\";\n        }\n        return null;\n    }\n    /**\n     *  The ``to`` address for the transaction or ``null`` if the\n     *  transaction is an ``init`` transaction.\n     */ get to() {\n        return this.#to;\n    }\n    set to(value) {\n        this.#to = value == null ? null : (0, index_js_1.getAddress)(value);\n    }\n    /**\n     *  The transaction nonce.\n     */ get nonce() {\n        return this.#nonce;\n    }\n    set nonce(value) {\n        this.#nonce = (0, index_js_3.getNumber)(value, \"value\");\n    }\n    /**\n     *  The gas limit.\n     */ get gasLimit() {\n        return this.#gasLimit;\n    }\n    set gasLimit(value) {\n        this.#gasLimit = (0, index_js_3.getBigInt)(value);\n    }\n    /**\n     *  The gas price.\n     *\n     *  On legacy networks this defines the fee that will be paid. On\n     *  EIP-1559 networks, this should be ``null``.\n     */ get gasPrice() {\n        const value = this.#gasPrice;\n        if (value == null && (this.type === 0 || this.type === 1)) {\n            return BN_0;\n        }\n        return value;\n    }\n    set gasPrice(value) {\n        this.#gasPrice = value == null ? null : (0, index_js_3.getBigInt)(value, \"gasPrice\");\n    }\n    /**\n     *  The maximum priority fee per unit of gas to pay. On legacy\n     *  networks this should be ``null``.\n     */ get maxPriorityFeePerGas() {\n        const value = this.#maxPriorityFeePerGas;\n        if (value == null) {\n            if (this.type === 2) {\n                return BN_0;\n            }\n            return null;\n        }\n        return value;\n    }\n    set maxPriorityFeePerGas(value) {\n        this.#maxPriorityFeePerGas = value == null ? null : (0, index_js_3.getBigInt)(value, \"maxPriorityFeePerGas\");\n    }\n    /**\n     *  The maximum total fee per unit of gas to pay. On legacy\n     *  networks this should be ``null``.\n     */ get maxFeePerGas() {\n        const value = this.#maxFeePerGas;\n        if (value == null) {\n            if (this.type === 2) {\n                return BN_0;\n            }\n            return null;\n        }\n        return value;\n    }\n    set maxFeePerGas(value) {\n        this.#maxFeePerGas = value == null ? null : (0, index_js_3.getBigInt)(value, \"maxFeePerGas\");\n    }\n    /**\n     *  The transaction data. For ``init`` transactions this is the\n     *  deployment code.\n     */ get data() {\n        return this.#data;\n    }\n    set data(value) {\n        this.#data = (0, index_js_3.hexlify)(value);\n    }\n    /**\n     *  The amount of ether (in wei) to send in this transactions.\n     */ get value() {\n        return this.#value;\n    }\n    set value(value) {\n        this.#value = (0, index_js_3.getBigInt)(value, \"value\");\n    }\n    /**\n     *  The chain ID this transaction is valid on.\n     */ get chainId() {\n        return this.#chainId;\n    }\n    set chainId(value) {\n        this.#chainId = (0, index_js_3.getBigInt)(value);\n    }\n    /**\n     *  If signed, the signature for this transaction.\n     */ get signature() {\n        return this.#sig || null;\n    }\n    set signature(value) {\n        this.#sig = value == null ? null : index_js_2.Signature.from(value);\n    }\n    /**\n     *  The access list.\n     *\n     *  An access list permits discounted (but pre-paid) access to\n     *  bytecode and state variable access within contract execution.\n     */ get accessList() {\n        const value = this.#accessList || null;\n        if (value == null) {\n            if (this.type === 1 || this.type === 2) {\n                return [];\n            }\n            return null;\n        }\n        return value;\n    }\n    set accessList(value) {\n        this.#accessList = value == null ? null : (0, accesslist_js_1.accessListify)(value);\n    }\n    /**\n     *  Creates a new Transaction with default values.\n     */ constructor(){\n        this.#type = null;\n        this.#to = null;\n        this.#nonce = 0;\n        this.#gasLimit = BigInt(0);\n        this.#gasPrice = null;\n        this.#maxPriorityFeePerGas = null;\n        this.#maxFeePerGas = null;\n        this.#data = \"0x\";\n        this.#value = BigInt(0);\n        this.#chainId = BigInt(0);\n        this.#sig = null;\n        this.#accessList = null;\n    }\n    /**\n     *  The transaction hash, if signed. Otherwise, ``null``.\n     */ get hash() {\n        if (this.signature == null) {\n            return null;\n        }\n        return (0, index_js_2.keccak256)(this.serialized);\n    }\n    /**\n     *  The pre-image hash of this transaction.\n     *\n     *  This is the digest that a [[Signer]] must sign to authorize\n     *  this transaction.\n     */ get unsignedHash() {\n        return (0, index_js_2.keccak256)(this.unsignedSerialized);\n    }\n    /**\n     *  The sending address, if signed. Otherwise, ``null``.\n     */ get from() {\n        if (this.signature == null) {\n            return null;\n        }\n        return (0, address_js_1.recoverAddress)(this.unsignedHash, this.signature);\n    }\n    /**\n     *  The public key of the sender, if signed. Otherwise, ``null``.\n     */ get fromPublicKey() {\n        if (this.signature == null) {\n            return null;\n        }\n        return index_js_2.SigningKey.recoverPublicKey(this.unsignedHash, this.signature);\n    }\n    /**\n     *  Returns true if signed.\n     *\n     *  This provides a Type Guard that properties requiring a signed\n     *  transaction are non-null.\n     */ isSigned() {\n        //isSigned(): this is SignedTransaction {\n        return this.signature != null;\n    }\n    /**\n     *  The serialized transaction.\n     *\n     *  This throws if the transaction is unsigned. For the pre-image,\n     *  use [[unsignedSerialized]].\n     */ get serialized() {\n        (0, index_js_3.assert)(this.signature != null, \"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized\", \"UNSUPPORTED_OPERATION\", {\n            operation: \".serialized\"\n        });\n        switch(this.inferType()){\n            case 0:\n                return _serializeLegacy(this, this.signature);\n            case 1:\n                return _serializeEip2930(this, this.signature);\n            case 2:\n                return _serializeEip1559(this, this.signature);\n        }\n        (0, index_js_3.assert)(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n            operation: \".serialized\"\n        });\n    }\n    /**\n     *  The transaction pre-image.\n     *\n     *  The hash of this is the digest which needs to be signed to\n     *  authorize this transaction.\n     */ get unsignedSerialized() {\n        switch(this.inferType()){\n            case 0:\n                return _serializeLegacy(this);\n            case 1:\n                return _serializeEip2930(this);\n            case 2:\n                return _serializeEip1559(this);\n        }\n        (0, index_js_3.assert)(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n            operation: \".unsignedSerialized\"\n        });\n    }\n    /**\n     *  Return the most \"likely\" type; currently the highest\n     *  supported transaction type.\n     */ inferType() {\n        return this.inferTypes().pop();\n    }\n    /**\n     *  Validates the explicit properties and returns a list of compatible\n     *  transaction types.\n     */ inferTypes() {\n        // Checks that there are no conflicting properties set\n        const hasGasPrice = this.gasPrice != null;\n        const hasFee = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null;\n        const hasAccessList = this.accessList != null;\n        //if (hasGasPrice && hasFee) {\n        //    throw new Error(\"transaction cannot have gasPrice and maxFeePerGas\");\n        //}\n        if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {\n            (0, index_js_3.assert)(this.maxFeePerGas >= this.maxPriorityFeePerGas, \"priorityFee cannot be more than maxFee\", \"BAD_DATA\", {\n                value: this\n            });\n        }\n        //if (this.type === 2 && hasGasPrice) {\n        //    throw new Error(\"eip-1559 transaction cannot have gasPrice\");\n        //}\n        (0, index_js_3.assert)(!hasFee || this.type !== 0 && this.type !== 1, \"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas\", \"BAD_DATA\", {\n            value: this\n        });\n        (0, index_js_3.assert)(this.type !== 0 || !hasAccessList, \"legacy transaction cannot have accessList\", \"BAD_DATA\", {\n            value: this\n        });\n        const types = [];\n        // Explicit type\n        if (this.type != null) {\n            types.push(this.type);\n        } else {\n            if (hasFee) {\n                types.push(2);\n            } else if (hasGasPrice) {\n                types.push(1);\n                if (!hasAccessList) {\n                    types.push(0);\n                }\n            } else if (hasAccessList) {\n                types.push(1);\n                types.push(2);\n            } else {\n                types.push(0);\n                types.push(1);\n                types.push(2);\n            }\n        }\n        types.sort();\n        return types;\n    }\n    /**\n     *  Returns true if this transaction is a legacy transaction (i.e.\n     *  ``type === 0``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */ isLegacy() {\n        return this.type === 0;\n    }\n    /**\n     *  Returns true if this transaction is berlin hardform transaction (i.e.\n     *  ``type === 1``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */ isBerlin() {\n        return this.type === 1;\n    }\n    /**\n     *  Returns true if this transaction is london hardform transaction (i.e.\n     *  ``type === 2``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */ isLondon() {\n        return this.type === 2;\n    }\n    /**\n     *  Create a copy of this transaciton.\n     */ clone() {\n        return Transaction.from(this);\n    }\n    /**\n     *  Return a JSON-friendly object.\n     */ toJSON() {\n        const s = (v)=>{\n            if (v == null) {\n                return null;\n            }\n            return v.toString();\n        };\n        return {\n            type: this.type,\n            to: this.to,\n            //            from: this.from,\n            data: this.data,\n            nonce: this.nonce,\n            gasLimit: s(this.gasLimit),\n            gasPrice: s(this.gasPrice),\n            maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),\n            maxFeePerGas: s(this.maxFeePerGas),\n            value: s(this.value),\n            chainId: s(this.chainId),\n            sig: this.signature ? this.signature.toJSON() : null,\n            accessList: this.accessList\n        };\n    }\n    /**\n     *  Create a **Transaction** from a serialized transaction or a\n     *  Transaction-like object.\n     */ static from(tx) {\n        if (tx == null) {\n            return new Transaction();\n        }\n        if (typeof tx === \"string\") {\n            const payload = (0, index_js_3.getBytes)(tx);\n            if (payload[0] >= 0x7f) {\n                return Transaction.from(_parseLegacy(payload));\n            }\n            switch(payload[0]){\n                case 1:\n                    return Transaction.from(_parseEip2930(payload));\n                case 2:\n                    return Transaction.from(_parseEip1559(payload));\n            }\n            (0, index_js_3.assert)(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"from\"\n            });\n        }\n        const result = new Transaction();\n        if (tx.type != null) {\n            result.type = tx.type;\n        }\n        if (tx.to != null) {\n            result.to = tx.to;\n        }\n        if (tx.nonce != null) {\n            result.nonce = tx.nonce;\n        }\n        if (tx.gasLimit != null) {\n            result.gasLimit = tx.gasLimit;\n        }\n        if (tx.gasPrice != null) {\n            result.gasPrice = tx.gasPrice;\n        }\n        if (tx.maxPriorityFeePerGas != null) {\n            result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;\n        }\n        if (tx.maxFeePerGas != null) {\n            result.maxFeePerGas = tx.maxFeePerGas;\n        }\n        if (tx.data != null) {\n            result.data = tx.data;\n        }\n        if (tx.value != null) {\n            result.value = tx.value;\n        }\n        if (tx.chainId != null) {\n            result.chainId = tx.chainId;\n        }\n        if (tx.signature != null) {\n            result.signature = index_js_2.Signature.from(tx.signature);\n        }\n        if (tx.accessList != null) {\n            result.accessList = tx.accessList;\n        }\n        if (tx.hash != null) {\n            (0, index_js_3.assertArgument)(result.isSigned(), \"unsigned transaction cannot define hash\", \"tx\", tx);\n            (0, index_js_3.assertArgument)(result.hash === tx.hash, \"hash mismatch\", \"tx\", tx);\n        }\n        if (tx.from != null) {\n            (0, index_js_3.assertArgument)(result.isSigned(), \"unsigned transaction cannot define from\", \"tx\", tx);\n            (0, index_js_3.assertArgument)(result.from.toLowerCase() === (tx.from || \"\").toLowerCase(), \"from mismatch\", \"tx\", tx);\n        }\n        return result;\n    }\n}\nexports.Transaction = Transaction; //# sourceMappingURL=transaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy90cmFuc2FjdGlvbi90cmFuc2FjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUJBQW1CLEdBQUcsS0FBSztBQUMzQixNQUFNRyxhQUFhQyxtQkFBT0EsQ0FBQyxzRkFBcUI7QUFDaEQsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUMsb0ZBQW9CO0FBQy9DLE1BQU1FLGFBQWFGLG1CQUFPQSxDQUFDLGtGQUFtQjtBQUM5QyxNQUFNRyxrQkFBa0JILG1CQUFPQSxDQUFDLDJGQUFpQjtBQUNqRCxNQUFNSSxlQUFlSixtQkFBT0EsQ0FBQyxxRkFBYztBQUMzQyxNQUFNSyxPQUFPQyxPQUFPO0FBQ3BCLE1BQU1DLE9BQU9ELE9BQU87QUFDcEIsTUFBTUUsUUFBUUYsT0FBTztBQUNyQixNQUFNRyxRQUFRSCxPQUFPO0FBQ3JCLE1BQU1JLFFBQVFKLE9BQU87QUFDckIsTUFBTUssY0FBY0wsT0FBTztBQUMzQixTQUFTTSxjQUFjZixLQUFLO0lBQ3hCLElBQUlBLFVBQVUsTUFBTTtRQUNoQixPQUFPO0lBQ1g7SUFDQSxPQUFPLENBQUMsR0FBR0UsV0FBV2MsVUFBVSxFQUFFaEI7QUFDdEM7QUFDQSxTQUFTaUIsaUJBQWlCakIsS0FBSyxFQUFFa0IsS0FBSztJQUNsQyxJQUFJO1FBQ0EsT0FBTyxDQUFDLEdBQUdaLGdCQUFnQmEsYUFBYSxFQUFFbkI7SUFDOUMsRUFDQSxPQUFPb0IsT0FBTztRQUNULElBQUdmLFdBQVdnQixjQUFjLEVBQUUsT0FBT0QsTUFBTUUsT0FBTyxFQUFFSixPQUFPbEI7SUFDaEU7QUFDSjtBQUNBLFNBQVN1QixhQUFhQyxNQUFNLEVBQUVOLEtBQUs7SUFDL0IsSUFBSU0sV0FBVyxNQUFNO1FBQ2pCLE9BQU87SUFDWDtJQUNBLE9BQU8sQ0FBQyxHQUFHbkIsV0FBV29CLFNBQVMsRUFBRUQsUUFBUU47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QyxVQUFVO1FBQ3JDO1FBQ0EsSUFBSWpDLEdBQUdlLElBQUksSUFBSSxNQUFNO1lBQ2hCLElBQUd0RCxXQUFXZ0IsY0FBYyxFQUFFUyxPQUFPNkQsUUFBUSxJQUFJLDJDQUEyQyxNQUFNL0M7WUFDbEcsSUFBR3ZDLFdBQVdnQixjQUFjLEVBQUVTLE9BQU82QixJQUFJLEtBQUtmLEdBQUdlLElBQUksRUFBRSxpQkFBaUIsTUFBTWY7UUFDbkY7UUFDQSxJQUFJQSxHQUFHYSxJQUFJLElBQUksTUFBTTtZQUNoQixJQUFHcEQsV0FBV2dCLGNBQWMsRUFBRVMsT0FBTzZELFFBQVEsSUFBSSwyQ0FBMkMsTUFBTS9DO1lBQ2xHLElBQUd2QyxXQUFXZ0IsY0FBYyxFQUFFUyxPQUFPMkIsSUFBSSxDQUFDb0QsV0FBVyxPQUFPLENBQUNqRSxHQUFHYSxJQUFJLElBQUksRUFBQyxFQUFHb0QsV0FBVyxJQUFJLGlCQUFpQixNQUFNakU7UUFDdkg7UUFDQSxPQUFPZDtJQUNYO0FBQ0o7QUFDQS9CLG1CQUFtQixHQUFHRSxhQUN0Qix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy90cmFuc2FjdGlvbi90cmFuc2FjdGlvbi5qcz9lZDFjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UcmFuc2FjdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGluZGV4X2pzXzEgPSByZXF1aXJlKFwiLi4vYWRkcmVzcy9pbmRleC5qc1wiKTtcbmNvbnN0IGluZGV4X2pzXzIgPSByZXF1aXJlKFwiLi4vY3J5cHRvL2luZGV4LmpzXCIpO1xuY29uc3QgaW5kZXhfanNfMyA9IHJlcXVpcmUoXCIuLi91dGlscy9pbmRleC5qc1wiKTtcbmNvbnN0IGFjY2Vzc2xpc3RfanNfMSA9IHJlcXVpcmUoXCIuL2FjY2Vzc2xpc3QuanNcIik7XG5jb25zdCBhZGRyZXNzX2pzXzEgPSByZXF1aXJlKFwiLi9hZGRyZXNzLmpzXCIpO1xuY29uc3QgQk5fMCA9IEJpZ0ludCgwKTtcbmNvbnN0IEJOXzIgPSBCaWdJbnQoMik7XG5jb25zdCBCTl8yNyA9IEJpZ0ludCgyNyk7XG5jb25zdCBCTl8yOCA9IEJpZ0ludCgyOCk7XG5jb25zdCBCTl8zNSA9IEJpZ0ludCgzNSk7XG5jb25zdCBCTl9NQVhfVUlOVCA9IEJpZ0ludChcIjB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlwiKTtcbmZ1bmN0aW9uIGhhbmRsZUFkZHJlc3ModmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IFwiMHhcIikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBpbmRleF9qc18xLmdldEFkZHJlc3MpKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGhhbmRsZUFjY2Vzc0xpc3QodmFsdWUsIHBhcmFtKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuICgwLCBhY2Nlc3NsaXN0X2pzXzEuYWNjZXNzTGlzdGlmeSkodmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgKDAsIGluZGV4X2pzXzMuYXNzZXJ0QXJndW1lbnQpKGZhbHNlLCBlcnJvci5tZXNzYWdlLCBwYXJhbSwgdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZU51bWJlcihfdmFsdWUsIHBhcmFtKSB7XG4gICAgaWYgKF92YWx1ZSA9PT0gXCIweFwiKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIGluZGV4X2pzXzMuZ2V0TnVtYmVyKShfdmFsdWUsIHBhcmFtKTtcbn1cbmZ1bmN0aW9uIGhhbmRsZVVpbnQoX3ZhbHVlLCBwYXJhbSkge1xuICAgIGlmIChfdmFsdWUgPT09IFwiMHhcIikge1xuICAgICAgICByZXR1cm4gQk5fMDtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSAoMCwgaW5kZXhfanNfMy5nZXRCaWdJbnQpKF92YWx1ZSwgcGFyYW0pO1xuICAgICgwLCBpbmRleF9qc18zLmFzc2VydEFyZ3VtZW50KSh2YWx1ZSA8PSBCTl9NQVhfVUlOVCwgXCJ2YWx1ZSBleGNlZWRzIHVpbnQgc2l6ZVwiLCBwYXJhbSwgdmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGZvcm1hdE51bWJlcihfdmFsdWUsIG5hbWUpIHtcbiAgICBjb25zdCB2YWx1ZSA9ICgwLCBpbmRleF9qc18zLmdldEJpZ0ludCkoX3ZhbHVlLCBcInZhbHVlXCIpO1xuICAgIGNvbnN0IHJlc3VsdCA9ICgwLCBpbmRleF9qc18zLnRvQmVBcnJheSkodmFsdWUpO1xuICAgICgwLCBpbmRleF9qc18zLmFzc2VydEFyZ3VtZW50KShyZXN1bHQubGVuZ3RoIDw9IDMyLCBgdmFsdWUgdG9vIGxhcmdlYCwgYHR4LiR7bmFtZX1gLCB2YWx1ZSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGZvcm1hdEFjY2Vzc0xpc3QodmFsdWUpIHtcbiAgICByZXR1cm4gKDAsIGFjY2Vzc2xpc3RfanNfMS5hY2Nlc3NMaXN0aWZ5KSh2YWx1ZSkubWFwKChzZXQpID0+IFtzZXQuYWRkcmVzcywgc2V0LnN0b3JhZ2VLZXlzXSk7XG59XG5mdW5jdGlvbiBfcGFyc2VMZWdhY3koZGF0YSkge1xuICAgIGNvbnN0IGZpZWxkcyA9ICgwLCBpbmRleF9qc18zLmRlY29kZVJscCkoZGF0YSk7XG4gICAgKDAsIGluZGV4X2pzXzMuYXNzZXJ0QXJndW1lbnQpKEFycmF5LmlzQXJyYXkoZmllbGRzKSAmJiAoZmllbGRzLmxlbmd0aCA9PT0gOSB8fCBmaWVsZHMubGVuZ3RoID09PSA2KSwgXCJpbnZhbGlkIGZpZWxkIGNvdW50IGZvciBsZWdhY3kgdHJhbnNhY3Rpb25cIiwgXCJkYXRhXCIsIGRhdGEpO1xuICAgIGNvbnN0IHR4ID0ge1xuICAgICAgICB0eXBlOiAwLFxuICAgICAgICBub25jZTogaGFuZGxlTnVtYmVyKGZpZWxkc1swXSwgXCJub25jZVwiKSxcbiAgICAgICAgZ2FzUHJpY2U6IGhhbmRsZVVpbnQoZmllbGRzWzFdLCBcImdhc1ByaWNlXCIpLFxuICAgICAgICBnYXNMaW1pdDogaGFuZGxlVWludChmaWVsZHNbMl0sIFwiZ2FzTGltaXRcIiksXG4gICAgICAgIHRvOiBoYW5kbGVBZGRyZXNzKGZpZWxkc1szXSksXG4gICAgICAgIHZhbHVlOiBoYW5kbGVVaW50KGZpZWxkc1s0XSwgXCJ2YWx1ZVwiKSxcbiAgICAgICAgZGF0YTogKDAsIGluZGV4X2pzXzMuaGV4bGlmeSkoZmllbGRzWzVdKSxcbiAgICAgICAgY2hhaW5JZDogQk5fMFxuICAgIH07XG4gICAgLy8gTGVnYWN5IHVuc2lnbmVkIHRyYW5zYWN0aW9uXG4gICAgaWYgKGZpZWxkcy5sZW5ndGggPT09IDYpIHtcbiAgICAgICAgcmV0dXJuIHR4O1xuICAgIH1cbiAgICBjb25zdCB2ID0gaGFuZGxlVWludChmaWVsZHNbNl0sIFwidlwiKTtcbiAgICBjb25zdCByID0gaGFuZGxlVWludChmaWVsZHNbN10sIFwiclwiKTtcbiAgICBjb25zdCBzID0gaGFuZGxlVWludChmaWVsZHNbOF0sIFwic1wiKTtcbiAgICBpZiAociA9PT0gQk5fMCAmJiBzID09PSBCTl8wKSB7XG4gICAgICAgIC8vIEVJUC0xNTUgdW5zaWduZWQgdHJhbnNhY3Rpb25cbiAgICAgICAgdHguY2hhaW5JZCA9IHY7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBDb21wdXRlIHRoZSBFSVAtMTU1IGNoYWluIElEIChvciAwIGZvciBsZWdhY3kpXG4gICAgICAgIGxldCBjaGFpbklkID0gKHYgLSBCTl8zNSkgLyBCTl8yO1xuICAgICAgICBpZiAoY2hhaW5JZCA8IEJOXzApIHtcbiAgICAgICAgICAgIGNoYWluSWQgPSBCTl8wO1xuICAgICAgICB9XG4gICAgICAgIHR4LmNoYWluSWQgPSBjaGFpbklkO1xuICAgICAgICAvLyBTaWduZWQgTGVnYWN5IFRyYW5zYWN0aW9uXG4gICAgICAgICgwLCBpbmRleF9qc18zLmFzc2VydEFyZ3VtZW50KShjaGFpbklkICE9PSBCTl8wIHx8ICh2ID09PSBCTl8yNyB8fCB2ID09PSBCTl8yOCksIFwibm9uLWNhbm9uaWNhbCBsZWdhY3kgdlwiLCBcInZcIiwgZmllbGRzWzZdKTtcbiAgICAgICAgdHguc2lnbmF0dXJlID0gaW5kZXhfanNfMi5TaWduYXR1cmUuZnJvbSh7XG4gICAgICAgICAgICByOiAoMCwgaW5kZXhfanNfMy56ZXJvUGFkVmFsdWUpKGZpZWxkc1s3XSwgMzIpLFxuICAgICAgICAgICAgczogKDAsIGluZGV4X2pzXzMuemVyb1BhZFZhbHVlKShmaWVsZHNbOF0sIDMyKSxcbiAgICAgICAgICAgIHZcbiAgICAgICAgfSk7XG4gICAgICAgIHR4Lmhhc2ggPSAoMCwgaW5kZXhfanNfMi5rZWNjYWsyNTYpKGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gdHg7XG59XG5mdW5jdGlvbiBfc2VyaWFsaXplTGVnYWN5KHR4LCBzaWcpIHtcbiAgICBjb25zdCBmaWVsZHMgPSBbXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5ub25jZSB8fCAwLCBcIm5vbmNlXCIpLFxuICAgICAgICBmb3JtYXROdW1iZXIodHguZ2FzUHJpY2UgfHwgMCwgXCJnYXNQcmljZVwiKSxcbiAgICAgICAgZm9ybWF0TnVtYmVyKHR4Lmdhc0xpbWl0IHx8IDAsIFwiZ2FzTGltaXRcIiksXG4gICAgICAgICgodHgudG8gIT0gbnVsbCkgPyAoMCwgaW5kZXhfanNfMS5nZXRBZGRyZXNzKSh0eC50bykgOiBcIjB4XCIpLFxuICAgICAgICBmb3JtYXROdW1iZXIodHgudmFsdWUgfHwgMCwgXCJ2YWx1ZVwiKSxcbiAgICAgICAgKHR4LmRhdGEgfHwgXCIweFwiKSxcbiAgICBdO1xuICAgIGxldCBjaGFpbklkID0gQk5fMDtcbiAgICBpZiAodHguY2hhaW5JZCAhPSBCTl8wKSB7XG4gICAgICAgIC8vIEEgY2hhaW5JZCB3YXMgcHJvdmlkZWQ7IGlmIG5vbi16ZXJvIHdlJ2xsIHVzZSBFSVAtMTU1XG4gICAgICAgIGNoYWluSWQgPSAoMCwgaW5kZXhfanNfMy5nZXRCaWdJbnQpKHR4LmNoYWluSWQsIFwidHguY2hhaW5JZFwiKTtcbiAgICAgICAgLy8gV2UgaGF2ZSBhIGNoYWluSWQgaW4gdGhlIHR4IGFuZCBhbiBFSVAtMTU1IHYgaW4gdGhlIHNpZ25hdHVyZSxcbiAgICAgICAgLy8gbWFrZSBzdXJlIHRoZXkgYWdyZWUgd2l0aCBlYWNoIG90aGVyXG4gICAgICAgICgwLCBpbmRleF9qc18zLmFzc2VydEFyZ3VtZW50KSghc2lnIHx8IHNpZy5uZXR3b3JrViA9PSBudWxsIHx8IHNpZy5sZWdhY3lDaGFpbklkID09PSBjaGFpbklkLCBcInR4LmNoYWluSWQvc2lnLnYgbWlzbWF0Y2hcIiwgXCJzaWdcIiwgc2lnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHguc2lnbmF0dXJlKSB7XG4gICAgICAgIC8vIE5vIGV4cGxpY2l0IGNoYWluSWQsIGJ1dCBFSVAtMTU1IGhhdmUgYSBkZXJpdmVkIGltcGxpY2l0IGNoYWluSWRcbiAgICAgICAgY29uc3QgbGVnYWN5ID0gdHguc2lnbmF0dXJlLmxlZ2FjeUNoYWluSWQ7XG4gICAgICAgIGlmIChsZWdhY3kgIT0gbnVsbCkge1xuICAgICAgICAgICAgY2hhaW5JZCA9IGxlZ2FjeTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBSZXF1ZXN0aW5nIGFuIHVuc2lnbmVkIHRyYW5zYWN0aW9uXG4gICAgaWYgKCFzaWcpIHtcbiAgICAgICAgLy8gV2UgaGF2ZSBhbiBFSVAtMTU1IHRyYW5zYWN0aW9uIChjaGFpbklkIHdhcyBzcGVjaWZpZWQgYW5kIG5vbi16ZXJvKVxuICAgICAgICBpZiAoY2hhaW5JZCAhPT0gQk5fMCkge1xuICAgICAgICAgICAgZmllbGRzLnB1c2goKDAsIGluZGV4X2pzXzMudG9CZUFycmF5KShjaGFpbklkKSk7XG4gICAgICAgICAgICBmaWVsZHMucHVzaChcIjB4XCIpO1xuICAgICAgICAgICAgZmllbGRzLnB1c2goXCIweFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKDAsIGluZGV4X2pzXzMuZW5jb2RlUmxwKShmaWVsZHMpO1xuICAgIH1cbiAgICAvLyBAVE9ETzogV2Ugc2hvdWxkIHByb2JhYmx5IGNoZWNrIHRoYXQgdHguc2lnbmF0dXJlLCBjaGFpbklkLCBhbmQgc2lnXG4gICAgLy8gICAgICAgIG1hdGNoIGJ1dCB0aGF0IGxvZ2ljIGNvdWxkIGJyZWFrIGV4aXN0aW5nIGNvZGUsIHNvIHNjaGVkdWxlXG4gICAgLy8gICAgICAgIHRoaXMgZm9yIHRoZSBuZXh0IG1ham9yIGJ1bXAuXG4gICAgLy8gQ29tcHV0ZSB0aGUgRUlQLTE1NSB2XG4gICAgbGV0IHYgPSBCaWdJbnQoMjcgKyBzaWcueVBhcml0eSk7XG4gICAgaWYgKGNoYWluSWQgIT09IEJOXzApIHtcbiAgICAgICAgdiA9IGluZGV4X2pzXzIuU2lnbmF0dXJlLmdldENoYWluSWRWKGNoYWluSWQsIHNpZy52KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoQmlnSW50KHNpZy52KSAhPT0gdikge1xuICAgICAgICAoMCwgaW5kZXhfanNfMy5hc3NlcnRBcmd1bWVudCkoZmFsc2UsIFwidHguY2hhaW5JZC9zaWcudiBtaXNtYXRjaFwiLCBcInNpZ1wiLCBzaWcpO1xuICAgIH1cbiAgICAvLyBBZGQgdGhlIHNpZ25hdHVyZVxuICAgIGZpZWxkcy5wdXNoKCgwLCBpbmRleF9qc18zLnRvQmVBcnJheSkodikpO1xuICAgIGZpZWxkcy5wdXNoKCgwLCBpbmRleF9qc18zLnRvQmVBcnJheSkoc2lnLnIpKTtcbiAgICBmaWVsZHMucHVzaCgoMCwgaW5kZXhfanNfMy50b0JlQXJyYXkpKHNpZy5zKSk7XG4gICAgcmV0dXJuICgwLCBpbmRleF9qc18zLmVuY29kZVJscCkoZmllbGRzKTtcbn1cbmZ1bmN0aW9uIF9wYXJzZUVpcFNpZ25hdHVyZSh0eCwgZmllbGRzKSB7XG4gICAgbGV0IHlQYXJpdHk7XG4gICAgdHJ5IHtcbiAgICAgICAgeVBhcml0eSA9IGhhbmRsZU51bWJlcihmaWVsZHNbMF0sIFwieVBhcml0eVwiKTtcbiAgICAgICAgaWYgKHlQYXJpdHkgIT09IDAgJiYgeVBhcml0eSAhPT0gMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYmFkIHlQYXJpdHlcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICgwLCBpbmRleF9qc18zLmFzc2VydEFyZ3VtZW50KShmYWxzZSwgXCJpbnZhbGlkIHlQYXJpdHlcIiwgXCJ5UGFyaXR5XCIsIGZpZWxkc1swXSk7XG4gICAgfVxuICAgIGNvbnN0IHIgPSAoMCwgaW5kZXhfanNfMy56ZXJvUGFkVmFsdWUpKGZpZWxkc1sxXSwgMzIpO1xuICAgIGNvbnN0IHMgPSAoMCwgaW5kZXhfanNfMy56ZXJvUGFkVmFsdWUpKGZpZWxkc1syXSwgMzIpO1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IGluZGV4X2pzXzIuU2lnbmF0dXJlLmZyb20oeyByLCBzLCB5UGFyaXR5IH0pO1xuICAgIHR4LnNpZ25hdHVyZSA9IHNpZ25hdHVyZTtcbn1cbmZ1bmN0aW9uIF9wYXJzZUVpcDE1NTkoZGF0YSkge1xuICAgIGNvbnN0IGZpZWxkcyA9ICgwLCBpbmRleF9qc18zLmRlY29kZVJscCkoKDAsIGluZGV4X2pzXzMuZ2V0Qnl0ZXMpKGRhdGEpLnNsaWNlKDEpKTtcbiAgICAoMCwgaW5kZXhfanNfMy5hc3NlcnRBcmd1bWVudCkoQXJyYXkuaXNBcnJheShmaWVsZHMpICYmIChmaWVsZHMubGVuZ3RoID09PSA5IHx8IGZpZWxkcy5sZW5ndGggPT09IDEyKSwgXCJpbnZhbGlkIGZpZWxkIGNvdW50IGZvciB0cmFuc2FjdGlvbiB0eXBlOiAyXCIsIFwiZGF0YVwiLCAoMCwgaW5kZXhfanNfMy5oZXhsaWZ5KShkYXRhKSk7XG4gICAgY29uc3QgbWF4UHJpb3JpdHlGZWVQZXJHYXMgPSBoYW5kbGVVaW50KGZpZWxkc1syXSwgXCJtYXhQcmlvcml0eUZlZVBlckdhc1wiKTtcbiAgICBjb25zdCBtYXhGZWVQZXJHYXMgPSBoYW5kbGVVaW50KGZpZWxkc1szXSwgXCJtYXhGZWVQZXJHYXNcIik7XG4gICAgY29uc3QgdHggPSB7XG4gICAgICAgIHR5cGU6IDIsXG4gICAgICAgIGNoYWluSWQ6IGhhbmRsZVVpbnQoZmllbGRzWzBdLCBcImNoYWluSWRcIiksXG4gICAgICAgIG5vbmNlOiBoYW5kbGVOdW1iZXIoZmllbGRzWzFdLCBcIm5vbmNlXCIpLFxuICAgICAgICBtYXhQcmlvcml0eUZlZVBlckdhczogbWF4UHJpb3JpdHlGZWVQZXJHYXMsXG4gICAgICAgIG1heEZlZVBlckdhczogbWF4RmVlUGVyR2FzLFxuICAgICAgICBnYXNQcmljZTogbnVsbCxcbiAgICAgICAgZ2FzTGltaXQ6IGhhbmRsZVVpbnQoZmllbGRzWzRdLCBcImdhc0xpbWl0XCIpLFxuICAgICAgICB0bzogaGFuZGxlQWRkcmVzcyhmaWVsZHNbNV0pLFxuICAgICAgICB2YWx1ZTogaGFuZGxlVWludChmaWVsZHNbNl0sIFwidmFsdWVcIiksXG4gICAgICAgIGRhdGE6ICgwLCBpbmRleF9qc18zLmhleGxpZnkpKGZpZWxkc1s3XSksXG4gICAgICAgIGFjY2Vzc0xpc3Q6IGhhbmRsZUFjY2Vzc0xpc3QoZmllbGRzWzhdLCBcImFjY2Vzc0xpc3RcIiksXG4gICAgfTtcbiAgICAvLyBVbnNpZ25lZCBFSVAtMTU1OSBUcmFuc2FjdGlvblxuICAgIGlmIChmaWVsZHMubGVuZ3RoID09PSA5KSB7XG4gICAgICAgIHJldHVybiB0eDtcbiAgICB9XG4gICAgdHguaGFzaCA9ICgwLCBpbmRleF9qc18yLmtlY2NhazI1NikoZGF0YSk7XG4gICAgX3BhcnNlRWlwU2lnbmF0dXJlKHR4LCBmaWVsZHMuc2xpY2UoOSkpO1xuICAgIHJldHVybiB0eDtcbn1cbmZ1bmN0aW9uIF9zZXJpYWxpemVFaXAxNTU5KHR4LCBzaWcpIHtcbiAgICBjb25zdCBmaWVsZHMgPSBbXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5jaGFpbklkIHx8IDAsIFwiY2hhaW5JZFwiKSxcbiAgICAgICAgZm9ybWF0TnVtYmVyKHR4Lm5vbmNlIHx8IDAsIFwibm9uY2VcIiksXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5tYXhQcmlvcml0eUZlZVBlckdhcyB8fCAwLCBcIm1heFByaW9yaXR5RmVlUGVyR2FzXCIpLFxuICAgICAgICBmb3JtYXROdW1iZXIodHgubWF4RmVlUGVyR2FzIHx8IDAsIFwibWF4RmVlUGVyR2FzXCIpLFxuICAgICAgICBmb3JtYXROdW1iZXIodHguZ2FzTGltaXQgfHwgMCwgXCJnYXNMaW1pdFwiKSxcbiAgICAgICAgKCh0eC50byAhPSBudWxsKSA/ICgwLCBpbmRleF9qc18xLmdldEFkZHJlc3MpKHR4LnRvKSA6IFwiMHhcIiksXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC52YWx1ZSB8fCAwLCBcInZhbHVlXCIpLFxuICAgICAgICAodHguZGF0YSB8fCBcIjB4XCIpLFxuICAgICAgICAoZm9ybWF0QWNjZXNzTGlzdCh0eC5hY2Nlc3NMaXN0IHx8IFtdKSlcbiAgICBdO1xuICAgIGlmIChzaWcpIHtcbiAgICAgICAgZmllbGRzLnB1c2goZm9ybWF0TnVtYmVyKHNpZy55UGFyaXR5LCBcInlQYXJpdHlcIikpO1xuICAgICAgICBmaWVsZHMucHVzaCgoMCwgaW5kZXhfanNfMy50b0JlQXJyYXkpKHNpZy5yKSk7XG4gICAgICAgIGZpZWxkcy5wdXNoKCgwLCBpbmRleF9qc18zLnRvQmVBcnJheSkoc2lnLnMpKTtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBpbmRleF9qc18zLmNvbmNhdCkoW1wiMHgwMlwiLCAoMCwgaW5kZXhfanNfMy5lbmNvZGVSbHApKGZpZWxkcyldKTtcbn1cbmZ1bmN0aW9uIF9wYXJzZUVpcDI5MzAoZGF0YSkge1xuICAgIGNvbnN0IGZpZWxkcyA9ICgwLCBpbmRleF9qc18zLmRlY29kZVJscCkoKDAsIGluZGV4X2pzXzMuZ2V0Qnl0ZXMpKGRhdGEpLnNsaWNlKDEpKTtcbiAgICAoMCwgaW5kZXhfanNfMy5hc3NlcnRBcmd1bWVudCkoQXJyYXkuaXNBcnJheShmaWVsZHMpICYmIChmaWVsZHMubGVuZ3RoID09PSA4IHx8IGZpZWxkcy5sZW5ndGggPT09IDExKSwgXCJpbnZhbGlkIGZpZWxkIGNvdW50IGZvciB0cmFuc2FjdGlvbiB0eXBlOiAxXCIsIFwiZGF0YVwiLCAoMCwgaW5kZXhfanNfMy5oZXhsaWZ5KShkYXRhKSk7XG4gICAgY29uc3QgdHggPSB7XG4gICAgICAgIHR5cGU6IDEsXG4gICAgICAgIGNoYWluSWQ6IGhhbmRsZVVpbnQoZmllbGRzWzBdLCBcImNoYWluSWRcIiksXG4gICAgICAgIG5vbmNlOiBoYW5kbGVOdW1iZXIoZmllbGRzWzFdLCBcIm5vbmNlXCIpLFxuICAgICAgICBnYXNQcmljZTogaGFuZGxlVWludChmaWVsZHNbMl0sIFwiZ2FzUHJpY2VcIiksXG4gICAgICAgIGdhc0xpbWl0OiBoYW5kbGVVaW50KGZpZWxkc1szXSwgXCJnYXNMaW1pdFwiKSxcbiAgICAgICAgdG86IGhhbmRsZUFkZHJlc3MoZmllbGRzWzRdKSxcbiAgICAgICAgdmFsdWU6IGhhbmRsZVVpbnQoZmllbGRzWzVdLCBcInZhbHVlXCIpLFxuICAgICAgICBkYXRhOiAoMCwgaW5kZXhfanNfMy5oZXhsaWZ5KShmaWVsZHNbNl0pLFxuICAgICAgICBhY2Nlc3NMaXN0OiBoYW5kbGVBY2Nlc3NMaXN0KGZpZWxkc1s3XSwgXCJhY2Nlc3NMaXN0XCIpXG4gICAgfTtcbiAgICAvLyBVbnNpZ25lZCBFSVAtMjkzMCBUcmFuc2FjdGlvblxuICAgIGlmIChmaWVsZHMubGVuZ3RoID09PSA4KSB7XG4gICAgICAgIHJldHVybiB0eDtcbiAgICB9XG4gICAgdHguaGFzaCA9ICgwLCBpbmRleF9qc18yLmtlY2NhazI1NikoZGF0YSk7XG4gICAgX3BhcnNlRWlwU2lnbmF0dXJlKHR4LCBmaWVsZHMuc2xpY2UoOCkpO1xuICAgIHJldHVybiB0eDtcbn1cbmZ1bmN0aW9uIF9zZXJpYWxpemVFaXAyOTMwKHR4LCBzaWcpIHtcbiAgICBjb25zdCBmaWVsZHMgPSBbXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5jaGFpbklkIHx8IDAsIFwiY2hhaW5JZFwiKSxcbiAgICAgICAgZm9ybWF0TnVtYmVyKHR4Lm5vbmNlIHx8IDAsIFwibm9uY2VcIiksXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5nYXNQcmljZSB8fCAwLCBcImdhc1ByaWNlXCIpLFxuICAgICAgICBmb3JtYXROdW1iZXIodHguZ2FzTGltaXQgfHwgMCwgXCJnYXNMaW1pdFwiKSxcbiAgICAgICAgKCh0eC50byAhPSBudWxsKSA/ICgwLCBpbmRleF9qc18xLmdldEFkZHJlc3MpKHR4LnRvKSA6IFwiMHhcIiksXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC52YWx1ZSB8fCAwLCBcInZhbHVlXCIpLFxuICAgICAgICAodHguZGF0YSB8fCBcIjB4XCIpLFxuICAgICAgICAoZm9ybWF0QWNjZXNzTGlzdCh0eC5hY2Nlc3NMaXN0IHx8IFtdKSlcbiAgICBdO1xuICAgIGlmIChzaWcpIHtcbiAgICAgICAgZmllbGRzLnB1c2goZm9ybWF0TnVtYmVyKHNpZy55UGFyaXR5LCBcInJlY292ZXJ5UGFyYW1cIikpO1xuICAgICAgICBmaWVsZHMucHVzaCgoMCwgaW5kZXhfanNfMy50b0JlQXJyYXkpKHNpZy5yKSk7XG4gICAgICAgIGZpZWxkcy5wdXNoKCgwLCBpbmRleF9qc18zLnRvQmVBcnJheSkoc2lnLnMpKTtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBpbmRleF9qc18zLmNvbmNhdCkoW1wiMHgwMVwiLCAoMCwgaW5kZXhfanNfMy5lbmNvZGVSbHApKGZpZWxkcyldKTtcbn1cbi8qKlxuICogIEEgKipUcmFuc2FjdGlvbioqIGRlc2NyaWJlcyBhbiBvcGVyYXRpb24gdG8gYmUgZXhlY3V0ZWQgb25cbiAqICBFdGhlcmV1bSBieSBhbiBFeHRlcm5hbGx5IE93bmVkIEFjY291bnQgKEVPQSkuIEl0IGluY2x1ZGVzXG4gKiAgd2hvICh0aGUgW1t0b11dIGFkZHJlc3MpLCB3aGF0ICh0aGUgW1tkYXRhXV0pIGFuZCBob3cgbXVjaCAodGhlXG4gKiAgW1t2YWx1ZV1dIGluIGV0aGVyKSB0aGUgb3BlcmF0aW9uIHNob3VsZCBlbnRhaWwuXG4gKlxuICogIEBleGFtcGxlOlxuICogICAgdHggPSBuZXcgVHJhbnNhY3Rpb24oKVxuICogICAgLy9fcmVzdWx0OlxuICpcbiAqICAgIHR4LmRhdGEgPSBcIjB4MTIzNFwiO1xuICogICAgLy9fcmVzdWx0OlxuICovXG5jbGFzcyBUcmFuc2FjdGlvbiB7XG4gICAgI3R5cGU7XG4gICAgI3RvO1xuICAgICNkYXRhO1xuICAgICNub25jZTtcbiAgICAjZ2FzTGltaXQ7XG4gICAgI2dhc1ByaWNlO1xuICAgICNtYXhQcmlvcml0eUZlZVBlckdhcztcbiAgICAjbWF4RmVlUGVyR2FzO1xuICAgICN2YWx1ZTtcbiAgICAjY2hhaW5JZDtcbiAgICAjc2lnO1xuICAgICNhY2Nlc3NMaXN0O1xuICAgIC8qKlxuICAgICAqICBUaGUgdHJhbnNhY3Rpb24gdHlwZS5cbiAgICAgKlxuICAgICAqICBJZiBudWxsLCB0aGUgdHlwZSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgaW5mZXJyZWQgYmFzZWQgb25cbiAgICAgKiAgZXhwbGljaXQgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBnZXQgdHlwZSgpIHsgcmV0dXJuIHRoaXMuI3R5cGU7IH1cbiAgICBzZXQgdHlwZSh2YWx1ZSkge1xuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgICAgICAgdGhpcy4jdHlwZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYXNlIFwibGVnYWN5XCI6XG4gICAgICAgICAgICAgICAgdGhpcy4jdHlwZSA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYXNlIFwiYmVybGluXCI6XG4gICAgICAgICAgICBjYXNlIFwiZWlwLTI5MzBcIjpcbiAgICAgICAgICAgICAgICB0aGlzLiN0eXBlID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhc2UgXCJsb25kb25cIjpcbiAgICAgICAgICAgIGNhc2UgXCJlaXAtMTU1OVwiOlxuICAgICAgICAgICAgICAgIHRoaXMuI3R5cGUgPSAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAoMCwgaW5kZXhfanNfMy5hc3NlcnRBcmd1bWVudCkoZmFsc2UsIFwidW5zdXBwb3J0ZWQgdHJhbnNhY3Rpb24gdHlwZVwiLCBcInR5cGVcIiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgbmFtZSBvZiB0aGUgdHJhbnNhY3Rpb24gdHlwZS5cbiAgICAgKi9cbiAgICBnZXQgdHlwZU5hbWUoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBcImxlZ2FjeVwiO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gXCJlaXAtMjkzMFwiO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gXCJlaXAtMTU1OVwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIGBgdG9gYCBhZGRyZXNzIGZvciB0aGUgdHJhbnNhY3Rpb24gb3IgYGBudWxsYGAgaWYgdGhlXG4gICAgICogIHRyYW5zYWN0aW9uIGlzIGFuIGBgaW5pdGBgIHRyYW5zYWN0aW9uLlxuICAgICAqL1xuICAgIGdldCB0bygpIHsgcmV0dXJuIHRoaXMuI3RvOyB9XG4gICAgc2V0IHRvKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuI3RvID0gKHZhbHVlID09IG51bGwpID8gbnVsbCA6ICgwLCBpbmRleF9qc18xLmdldEFkZHJlc3MpKHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSB0cmFuc2FjdGlvbiBub25jZS5cbiAgICAgKi9cbiAgICBnZXQgbm9uY2UoKSB7IHJldHVybiB0aGlzLiNub25jZTsgfVxuICAgIHNldCBub25jZSh2YWx1ZSkgeyB0aGlzLiNub25jZSA9ICgwLCBpbmRleF9qc18zLmdldE51bWJlcikodmFsdWUsIFwidmFsdWVcIik7IH1cbiAgICAvKipcbiAgICAgKiAgVGhlIGdhcyBsaW1pdC5cbiAgICAgKi9cbiAgICBnZXQgZ2FzTGltaXQoKSB7IHJldHVybiB0aGlzLiNnYXNMaW1pdDsgfVxuICAgIHNldCBnYXNMaW1pdCh2YWx1ZSkgeyB0aGlzLiNnYXNMaW1pdCA9ICgwLCBpbmRleF9qc18zLmdldEJpZ0ludCkodmFsdWUpOyB9XG4gICAgLyoqXG4gICAgICogIFRoZSBnYXMgcHJpY2UuXG4gICAgICpcbiAgICAgKiAgT24gbGVnYWN5IG5ldHdvcmtzIHRoaXMgZGVmaW5lcyB0aGUgZmVlIHRoYXQgd2lsbCBiZSBwYWlkLiBPblxuICAgICAqICBFSVAtMTU1OSBuZXR3b3JrcywgdGhpcyBzaG91bGQgYmUgYGBudWxsYGAuXG4gICAgICovXG4gICAgZ2V0IGdhc1ByaWNlKCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuI2dhc1ByaWNlO1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiAodGhpcy50eXBlID09PSAwIHx8IHRoaXMudHlwZSA9PT0gMSkpIHtcbiAgICAgICAgICAgIHJldHVybiBCTl8wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IGdhc1ByaWNlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuI2dhc1ByaWNlID0gKHZhbHVlID09IG51bGwpID8gbnVsbCA6ICgwLCBpbmRleF9qc18zLmdldEJpZ0ludCkodmFsdWUsIFwiZ2FzUHJpY2VcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgbWF4aW11bSBwcmlvcml0eSBmZWUgcGVyIHVuaXQgb2YgZ2FzIHRvIHBheS4gT24gbGVnYWN5XG4gICAgICogIG5ldHdvcmtzIHRoaXMgc2hvdWxkIGJlIGBgbnVsbGBgLlxuICAgICAqL1xuICAgIGdldCBtYXhQcmlvcml0eUZlZVBlckdhcygpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLiNtYXhQcmlvcml0eUZlZVBlckdhcztcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQk5fMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IG1heFByaW9yaXR5RmVlUGVyR2FzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuI21heFByaW9yaXR5RmVlUGVyR2FzID0gKHZhbHVlID09IG51bGwpID8gbnVsbCA6ICgwLCBpbmRleF9qc18zLmdldEJpZ0ludCkodmFsdWUsIFwibWF4UHJpb3JpdHlGZWVQZXJHYXNcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgbWF4aW11bSB0b3RhbCBmZWUgcGVyIHVuaXQgb2YgZ2FzIHRvIHBheS4gT24gbGVnYWN5XG4gICAgICogIG5ldHdvcmtzIHRoaXMgc2hvdWxkIGJlIGBgbnVsbGBgLlxuICAgICAqL1xuICAgIGdldCBtYXhGZWVQZXJHYXMoKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy4jbWF4RmVlUGVyR2FzO1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBCTl8wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBzZXQgbWF4RmVlUGVyR2FzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuI21heEZlZVBlckdhcyA9ICh2YWx1ZSA9PSBudWxsKSA/IG51bGwgOiAoMCwgaW5kZXhfanNfMy5nZXRCaWdJbnQpKHZhbHVlLCBcIm1heEZlZVBlckdhc1wiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSB0cmFuc2FjdGlvbiBkYXRhLiBGb3IgYGBpbml0YGAgdHJhbnNhY3Rpb25zIHRoaXMgaXMgdGhlXG4gICAgICogIGRlcGxveW1lbnQgY29kZS5cbiAgICAgKi9cbiAgICBnZXQgZGF0YSgpIHsgcmV0dXJuIHRoaXMuI2RhdGE7IH1cbiAgICBzZXQgZGF0YSh2YWx1ZSkgeyB0aGlzLiNkYXRhID0gKDAsIGluZGV4X2pzXzMuaGV4bGlmeSkodmFsdWUpOyB9XG4gICAgLyoqXG4gICAgICogIFRoZSBhbW91bnQgb2YgZXRoZXIgKGluIHdlaSkgdG8gc2VuZCBpbiB0aGlzIHRyYW5zYWN0aW9ucy5cbiAgICAgKi9cbiAgICBnZXQgdmFsdWUoKSB7IHJldHVybiB0aGlzLiN2YWx1ZTsgfVxuICAgIHNldCB2YWx1ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLiN2YWx1ZSA9ICgwLCBpbmRleF9qc18zLmdldEJpZ0ludCkodmFsdWUsIFwidmFsdWVcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgY2hhaW4gSUQgdGhpcyB0cmFuc2FjdGlvbiBpcyB2YWxpZCBvbi5cbiAgICAgKi9cbiAgICBnZXQgY2hhaW5JZCgpIHsgcmV0dXJuIHRoaXMuI2NoYWluSWQ7IH1cbiAgICBzZXQgY2hhaW5JZCh2YWx1ZSkgeyB0aGlzLiNjaGFpbklkID0gKDAsIGluZGV4X2pzXzMuZ2V0QmlnSW50KSh2YWx1ZSk7IH1cbiAgICAvKipcbiAgICAgKiAgSWYgc2lnbmVkLCB0aGUgc2lnbmF0dXJlIGZvciB0aGlzIHRyYW5zYWN0aW9uLlxuICAgICAqL1xuICAgIGdldCBzaWduYXR1cmUoKSB7IHJldHVybiB0aGlzLiNzaWcgfHwgbnVsbDsgfVxuICAgIHNldCBzaWduYXR1cmUodmFsdWUpIHtcbiAgICAgICAgdGhpcy4jc2lnID0gKHZhbHVlID09IG51bGwpID8gbnVsbCA6IGluZGV4X2pzXzIuU2lnbmF0dXJlLmZyb20odmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIGFjY2VzcyBsaXN0LlxuICAgICAqXG4gICAgICogIEFuIGFjY2VzcyBsaXN0IHBlcm1pdHMgZGlzY291bnRlZCAoYnV0IHByZS1wYWlkKSBhY2Nlc3MgdG9cbiAgICAgKiAgYnl0ZWNvZGUgYW5kIHN0YXRlIHZhcmlhYmxlIGFjY2VzcyB3aXRoaW4gY29udHJhY3QgZXhlY3V0aW9uLlxuICAgICAqL1xuICAgIGdldCBhY2Nlc3NMaXN0KCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuI2FjY2Vzc0xpc3QgfHwgbnVsbDtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT09IDEgfHwgdGhpcy50eXBlID09PSAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBzZXQgYWNjZXNzTGlzdCh2YWx1ZSkge1xuICAgICAgICB0aGlzLiNhY2Nlc3NMaXN0ID0gKHZhbHVlID09IG51bGwpID8gbnVsbCA6ICgwLCBhY2Nlc3NsaXN0X2pzXzEuYWNjZXNzTGlzdGlmeSkodmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyBUcmFuc2FjdGlvbiB3aXRoIGRlZmF1bHQgdmFsdWVzLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLiN0eXBlID0gbnVsbDtcbiAgICAgICAgdGhpcy4jdG8gPSBudWxsO1xuICAgICAgICB0aGlzLiNub25jZSA9IDA7XG4gICAgICAgIHRoaXMuI2dhc0xpbWl0ID0gQmlnSW50KDApO1xuICAgICAgICB0aGlzLiNnYXNQcmljZSA9IG51bGw7XG4gICAgICAgIHRoaXMuI21heFByaW9yaXR5RmVlUGVyR2FzID0gbnVsbDtcbiAgICAgICAgdGhpcy4jbWF4RmVlUGVyR2FzID0gbnVsbDtcbiAgICAgICAgdGhpcy4jZGF0YSA9IFwiMHhcIjtcbiAgICAgICAgdGhpcy4jdmFsdWUgPSBCaWdJbnQoMCk7XG4gICAgICAgIHRoaXMuI2NoYWluSWQgPSBCaWdJbnQoMCk7XG4gICAgICAgIHRoaXMuI3NpZyA9IG51bGw7XG4gICAgICAgIHRoaXMuI2FjY2Vzc0xpc3QgPSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIHRyYW5zYWN0aW9uIGhhc2gsIGlmIHNpZ25lZC4gT3RoZXJ3aXNlLCBgYG51bGxgYC5cbiAgICAgKi9cbiAgICBnZXQgaGFzaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2lnbmF0dXJlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoMCwgaW5kZXhfanNfMi5rZWNjYWsyNTYpKHRoaXMuc2VyaWFsaXplZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgcHJlLWltYWdlIGhhc2ggb2YgdGhpcyB0cmFuc2FjdGlvbi5cbiAgICAgKlxuICAgICAqICBUaGlzIGlzIHRoZSBkaWdlc3QgdGhhdCBhIFtbU2lnbmVyXV0gbXVzdCBzaWduIHRvIGF1dGhvcml6ZVxuICAgICAqICB0aGlzIHRyYW5zYWN0aW9uLlxuICAgICAqL1xuICAgIGdldCB1bnNpZ25lZEhhc2goKSB7XG4gICAgICAgIHJldHVybiAoMCwgaW5kZXhfanNfMi5rZWNjYWsyNTYpKHRoaXMudW5zaWduZWRTZXJpYWxpemVkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBzZW5kaW5nIGFkZHJlc3MsIGlmIHNpZ25lZC4gT3RoZXJ3aXNlLCBgYG51bGxgYC5cbiAgICAgKi9cbiAgICBnZXQgZnJvbSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2lnbmF0dXJlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoMCwgYWRkcmVzc19qc18xLnJlY292ZXJBZGRyZXNzKSh0aGlzLnVuc2lnbmVkSGFzaCwgdGhpcy5zaWduYXR1cmUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIHB1YmxpYyBrZXkgb2YgdGhlIHNlbmRlciwgaWYgc2lnbmVkLiBPdGhlcndpc2UsIGBgbnVsbGBgLlxuICAgICAqL1xuICAgIGdldCBmcm9tUHVibGljS2V5KCkge1xuICAgICAgICBpZiAodGhpcy5zaWduYXR1cmUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluZGV4X2pzXzIuU2lnbmluZ0tleS5yZWNvdmVyUHVibGljS2V5KHRoaXMudW5zaWduZWRIYXNoLCB0aGlzLnNpZ25hdHVyZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRydWUgaWYgc2lnbmVkLlxuICAgICAqXG4gICAgICogIFRoaXMgcHJvdmlkZXMgYSBUeXBlIEd1YXJkIHRoYXQgcHJvcGVydGllcyByZXF1aXJpbmcgYSBzaWduZWRcbiAgICAgKiAgdHJhbnNhY3Rpb24gYXJlIG5vbi1udWxsLlxuICAgICAqL1xuICAgIGlzU2lnbmVkKCkge1xuICAgICAgICAvL2lzU2lnbmVkKCk6IHRoaXMgaXMgU2lnbmVkVHJhbnNhY3Rpb24ge1xuICAgICAgICByZXR1cm4gdGhpcy5zaWduYXR1cmUgIT0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBzZXJpYWxpemVkIHRyYW5zYWN0aW9uLlxuICAgICAqXG4gICAgICogIFRoaXMgdGhyb3dzIGlmIHRoZSB0cmFuc2FjdGlvbiBpcyB1bnNpZ25lZC4gRm9yIHRoZSBwcmUtaW1hZ2UsXG4gICAgICogIHVzZSBbW3Vuc2lnbmVkU2VyaWFsaXplZF1dLlxuICAgICAqL1xuICAgIGdldCBzZXJpYWxpemVkKCkge1xuICAgICAgICAoMCwgaW5kZXhfanNfMy5hc3NlcnQpKHRoaXMuc2lnbmF0dXJlICE9IG51bGwsIFwiY2Fubm90IHNlcmlhbGl6ZSB1bnNpZ25lZCB0cmFuc2FjdGlvbjsgbWF5YmUgeW91IG1lYW50IC51bnNpZ25lZFNlcmlhbGl6ZWRcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwgeyBvcGVyYXRpb246IFwiLnNlcmlhbGl6ZWRcIiB9KTtcbiAgICAgICAgc3dpdGNoICh0aGlzLmluZmVyVHlwZSgpKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zZXJpYWxpemVMZWdhY3kodGhpcywgdGhpcy5zaWduYXR1cmUpO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBfc2VyaWFsaXplRWlwMjkzMCh0aGlzLCB0aGlzLnNpZ25hdHVyZSk7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zZXJpYWxpemVFaXAxNTU5KHRoaXMsIHRoaXMuc2lnbmF0dXJlKTtcbiAgICAgICAgfVxuICAgICAgICAoMCwgaW5kZXhfanNfMy5hc3NlcnQpKGZhbHNlLCBcInVuc3VwcG9ydGVkIHRyYW5zYWN0aW9uIHR5cGVcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwgeyBvcGVyYXRpb246IFwiLnNlcmlhbGl6ZWRcIiB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSB0cmFuc2FjdGlvbiBwcmUtaW1hZ2UuXG4gICAgICpcbiAgICAgKiAgVGhlIGhhc2ggb2YgdGhpcyBpcyB0aGUgZGlnZXN0IHdoaWNoIG5lZWRzIHRvIGJlIHNpZ25lZCB0b1xuICAgICAqICBhdXRob3JpemUgdGhpcyB0cmFuc2FjdGlvbi5cbiAgICAgKi9cbiAgICBnZXQgdW5zaWduZWRTZXJpYWxpemVkKCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuaW5mZXJUeXBlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gX3NlcmlhbGl6ZUxlZ2FjeSh0aGlzKTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gX3NlcmlhbGl6ZUVpcDI5MzAodGhpcyk7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zZXJpYWxpemVFaXAxNTU5KHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgICgwLCBpbmRleF9qc18zLmFzc2VydCkoZmFsc2UsIFwidW5zdXBwb3J0ZWQgdHJhbnNhY3Rpb24gdHlwZVwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbjogXCIudW5zaWduZWRTZXJpYWxpemVkXCIgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gdGhlIG1vc3QgXCJsaWtlbHlcIiB0eXBlOyBjdXJyZW50bHkgdGhlIGhpZ2hlc3RcbiAgICAgKiAgc3VwcG9ydGVkIHRyYW5zYWN0aW9uIHR5cGUuXG4gICAgICovXG4gICAgaW5mZXJUeXBlKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuaW5mZXJUeXBlcygpLnBvcCgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFZhbGlkYXRlcyB0aGUgZXhwbGljaXQgcHJvcGVydGllcyBhbmQgcmV0dXJucyBhIGxpc3Qgb2YgY29tcGF0aWJsZVxuICAgICAqICB0cmFuc2FjdGlvbiB0eXBlcy5cbiAgICAgKi9cbiAgICBpbmZlclR5cGVzKCkge1xuICAgICAgICAvLyBDaGVja3MgdGhhdCB0aGVyZSBhcmUgbm8gY29uZmxpY3RpbmcgcHJvcGVydGllcyBzZXRcbiAgICAgICAgY29uc3QgaGFzR2FzUHJpY2UgPSB0aGlzLmdhc1ByaWNlICE9IG51bGw7XG4gICAgICAgIGNvbnN0IGhhc0ZlZSA9ICh0aGlzLm1heEZlZVBlckdhcyAhPSBudWxsIHx8IHRoaXMubWF4UHJpb3JpdHlGZWVQZXJHYXMgIT0gbnVsbCk7XG4gICAgICAgIGNvbnN0IGhhc0FjY2Vzc0xpc3QgPSAodGhpcy5hY2Nlc3NMaXN0ICE9IG51bGwpO1xuICAgICAgICAvL2lmIChoYXNHYXNQcmljZSAmJiBoYXNGZWUpIHtcbiAgICAgICAgLy8gICAgdGhyb3cgbmV3IEVycm9yKFwidHJhbnNhY3Rpb24gY2Fubm90IGhhdmUgZ2FzUHJpY2UgYW5kIG1heEZlZVBlckdhc1wiKTtcbiAgICAgICAgLy99XG4gICAgICAgIGlmICh0aGlzLm1heEZlZVBlckdhcyAhPSBudWxsICYmIHRoaXMubWF4UHJpb3JpdHlGZWVQZXJHYXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgKDAsIGluZGV4X2pzXzMuYXNzZXJ0KSh0aGlzLm1heEZlZVBlckdhcyA+PSB0aGlzLm1heFByaW9yaXR5RmVlUGVyR2FzLCBcInByaW9yaXR5RmVlIGNhbm5vdCBiZSBtb3JlIHRoYW4gbWF4RmVlXCIsIFwiQkFEX0RBVEFcIiwgeyB2YWx1ZTogdGhpcyB9KTtcbiAgICAgICAgfVxuICAgICAgICAvL2lmICh0aGlzLnR5cGUgPT09IDIgJiYgaGFzR2FzUHJpY2UpIHtcbiAgICAgICAgLy8gICAgdGhyb3cgbmV3IEVycm9yKFwiZWlwLTE1NTkgdHJhbnNhY3Rpb24gY2Fubm90IGhhdmUgZ2FzUHJpY2VcIik7XG4gICAgICAgIC8vfVxuICAgICAgICAoMCwgaW5kZXhfanNfMy5hc3NlcnQpKCFoYXNGZWUgfHwgKHRoaXMudHlwZSAhPT0gMCAmJiB0aGlzLnR5cGUgIT09IDEpLCBcInRyYW5zYWN0aW9uIHR5cGUgY2Fubm90IGhhdmUgbWF4RmVlUGVyR2FzIG9yIG1heFByaW9yaXR5RmVlUGVyR2FzXCIsIFwiQkFEX0RBVEFcIiwgeyB2YWx1ZTogdGhpcyB9KTtcbiAgICAgICAgKDAsIGluZGV4X2pzXzMuYXNzZXJ0KSh0aGlzLnR5cGUgIT09IDAgfHwgIWhhc0FjY2Vzc0xpc3QsIFwibGVnYWN5IHRyYW5zYWN0aW9uIGNhbm5vdCBoYXZlIGFjY2Vzc0xpc3RcIiwgXCJCQURfREFUQVwiLCB7IHZhbHVlOiB0aGlzIH0pO1xuICAgICAgICBjb25zdCB0eXBlcyA9IFtdO1xuICAgICAgICAvLyBFeHBsaWNpdCB0eXBlXG4gICAgICAgIGlmICh0aGlzLnR5cGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdHlwZXMucHVzaCh0aGlzLnR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGhhc0ZlZSkge1xuICAgICAgICAgICAgICAgIHR5cGVzLnB1c2goMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChoYXNHYXNQcmljZSkge1xuICAgICAgICAgICAgICAgIHR5cGVzLnB1c2goMSk7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNBY2Nlc3NMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVzLnB1c2goMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaGFzQWNjZXNzTGlzdCkge1xuICAgICAgICAgICAgICAgIHR5cGVzLnB1c2goMSk7XG4gICAgICAgICAgICAgICAgdHlwZXMucHVzaCgyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHR5cGVzLnB1c2goMCk7XG4gICAgICAgICAgICAgICAgdHlwZXMucHVzaCgxKTtcbiAgICAgICAgICAgICAgICB0eXBlcy5wdXNoKDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHR5cGVzLnNvcnQoKTtcbiAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0cnVlIGlmIHRoaXMgdHJhbnNhY3Rpb24gaXMgYSBsZWdhY3kgdHJhbnNhY3Rpb24gKGkuZS5cbiAgICAgKiAgYGB0eXBlID09PSAwYGApLlxuICAgICAqXG4gICAgICogIFRoaXMgcHJvdmlkZXMgYSBUeXBlIEd1YXJkIHRoYXQgdGhlIHJlbGF0ZWQgcHJvcGVydGllcyBhcmVcbiAgICAgKiAgbm9uLW51bGwuXG4gICAgICovXG4gICAgaXNMZWdhY3koKSB7XG4gICAgICAgIHJldHVybiAodGhpcy50eXBlID09PSAwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdHJ1ZSBpZiB0aGlzIHRyYW5zYWN0aW9uIGlzIGJlcmxpbiBoYXJkZm9ybSB0cmFuc2FjdGlvbiAoaS5lLlxuICAgICAqICBgYHR5cGUgPT09IDFgYCkuXG4gICAgICpcbiAgICAgKiAgVGhpcyBwcm92aWRlcyBhIFR5cGUgR3VhcmQgdGhhdCB0aGUgcmVsYXRlZCBwcm9wZXJ0aWVzIGFyZVxuICAgICAqICBub24tbnVsbC5cbiAgICAgKi9cbiAgICBpc0JlcmxpbigpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnR5cGUgPT09IDEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0cnVlIGlmIHRoaXMgdHJhbnNhY3Rpb24gaXMgbG9uZG9uIGhhcmRmb3JtIHRyYW5zYWN0aW9uIChpLmUuXG4gICAgICogIGBgdHlwZSA9PT0gMmBgKS5cbiAgICAgKlxuICAgICAqICBUaGlzIHByb3ZpZGVzIGEgVHlwZSBHdWFyZCB0aGF0IHRoZSByZWxhdGVkIHByb3BlcnRpZXMgYXJlXG4gICAgICogIG5vbi1udWxsLlxuICAgICAqL1xuICAgIGlzTG9uZG9uKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMudHlwZSA9PT0gMik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBDcmVhdGUgYSBjb3B5IG9mIHRoaXMgdHJhbnNhY2l0b24uXG4gICAgICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBUcmFuc2FjdGlvbi5mcm9tKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgSlNPTi1mcmllbmRseSBvYmplY3QuXG4gICAgICovXG4gICAgdG9KU09OKCkge1xuICAgICAgICBjb25zdCBzID0gKHYpID0+IHtcbiAgICAgICAgICAgIGlmICh2ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2LnRvU3RyaW5nKCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICB0bzogdGhpcy50byxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgZnJvbTogdGhpcy5mcm9tLFxuICAgICAgICAgICAgZGF0YTogdGhpcy5kYXRhLFxuICAgICAgICAgICAgbm9uY2U6IHRoaXMubm9uY2UsXG4gICAgICAgICAgICBnYXNMaW1pdDogcyh0aGlzLmdhc0xpbWl0KSxcbiAgICAgICAgICAgIGdhc1ByaWNlOiBzKHRoaXMuZ2FzUHJpY2UpLFxuICAgICAgICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IHModGhpcy5tYXhQcmlvcml0eUZlZVBlckdhcyksXG4gICAgICAgICAgICBtYXhGZWVQZXJHYXM6IHModGhpcy5tYXhGZWVQZXJHYXMpLFxuICAgICAgICAgICAgdmFsdWU6IHModGhpcy52YWx1ZSksXG4gICAgICAgICAgICBjaGFpbklkOiBzKHRoaXMuY2hhaW5JZCksXG4gICAgICAgICAgICBzaWc6IHRoaXMuc2lnbmF0dXJlID8gdGhpcy5zaWduYXR1cmUudG9KU09OKCkgOiBudWxsLFxuICAgICAgICAgICAgYWNjZXNzTGlzdDogdGhpcy5hY2Nlc3NMaXN0XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBDcmVhdGUgYSAqKlRyYW5zYWN0aW9uKiogZnJvbSBhIHNlcmlhbGl6ZWQgdHJhbnNhY3Rpb24gb3IgYVxuICAgICAqICBUcmFuc2FjdGlvbi1saWtlIG9iamVjdC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbSh0eCkge1xuICAgICAgICBpZiAodHggPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgKHR4KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9ICgwLCBpbmRleF9qc18zLmdldEJ5dGVzKSh0eCk7XG4gICAgICAgICAgICBpZiAocGF5bG9hZFswXSA+PSAweDdmKSB7IC8vIEBUT0RPOiA+IHZzID49ID8/XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRyYW5zYWN0aW9uLmZyb20oX3BhcnNlTGVnYWN5KHBheWxvYWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAocGF5bG9hZFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFRyYW5zYWN0aW9uLmZyb20oX3BhcnNlRWlwMjkzMChwYXlsb2FkKSk7XG4gICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gVHJhbnNhY3Rpb24uZnJvbShfcGFyc2VFaXAxNTU5KHBheWxvYWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICgwLCBpbmRleF9qc18zLmFzc2VydCkoZmFsc2UsIFwidW5zdXBwb3J0ZWQgdHJhbnNhY3Rpb24gdHlwZVwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbjogXCJmcm9tXCIgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFRyYW5zYWN0aW9uKCk7XG4gICAgICAgIGlmICh0eC50eXBlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC50eXBlID0gdHgudHlwZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHgudG8gIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0LnRvID0gdHgudG87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR4Lm5vbmNlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC5ub25jZSA9IHR4Lm5vbmNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eC5nYXNMaW1pdCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQuZ2FzTGltaXQgPSB0eC5nYXNMaW1pdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHguZ2FzUHJpY2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0Lmdhc1ByaWNlID0gdHguZ2FzUHJpY2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR4Lm1heFByaW9yaXR5RmVlUGVyR2FzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC5tYXhQcmlvcml0eUZlZVBlckdhcyA9IHR4Lm1heFByaW9yaXR5RmVlUGVyR2FzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eC5tYXhGZWVQZXJHYXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0Lm1heEZlZVBlckdhcyA9IHR4Lm1heEZlZVBlckdhcztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHguZGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQuZGF0YSA9IHR4LmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR4LnZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHR4LnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eC5jaGFpbklkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC5jaGFpbklkID0gdHguY2hhaW5JZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHguc2lnbmF0dXJlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC5zaWduYXR1cmUgPSBpbmRleF9qc18yLlNpZ25hdHVyZS5mcm9tKHR4LnNpZ25hdHVyZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR4LmFjY2Vzc0xpc3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0LmFjY2Vzc0xpc3QgPSB0eC5hY2Nlc3NMaXN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eC5oYXNoICE9IG51bGwpIHtcbiAgICAgICAgICAgICgwLCBpbmRleF9qc18zLmFzc2VydEFyZ3VtZW50KShyZXN1bHQuaXNTaWduZWQoKSwgXCJ1bnNpZ25lZCB0cmFuc2FjdGlvbiBjYW5ub3QgZGVmaW5lIGhhc2hcIiwgXCJ0eFwiLCB0eCk7XG4gICAgICAgICAgICAoMCwgaW5kZXhfanNfMy5hc3NlcnRBcmd1bWVudCkocmVzdWx0Lmhhc2ggPT09IHR4Lmhhc2gsIFwiaGFzaCBtaXNtYXRjaFwiLCBcInR4XCIsIHR4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHguZnJvbSAhPSBudWxsKSB7XG4gICAgICAgICAgICAoMCwgaW5kZXhfanNfMy5hc3NlcnRBcmd1bWVudCkocmVzdWx0LmlzU2lnbmVkKCksIFwidW5zaWduZWQgdHJhbnNhY3Rpb24gY2Fubm90IGRlZmluZSBmcm9tXCIsIFwidHhcIiwgdHgpO1xuICAgICAgICAgICAgKDAsIGluZGV4X2pzXzMuYXNzZXJ0QXJndW1lbnQpKHJlc3VsdC5mcm9tLnRvTG93ZXJDYXNlKCkgPT09ICh0eC5mcm9tIHx8IFwiXCIpLnRvTG93ZXJDYXNlKCksIFwiZnJvbSBtaXNtYXRjaFwiLCBcInR4XCIsIHR4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbmV4cG9ydHMuVHJhbnNhY3Rpb24gPSBUcmFuc2FjdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zYWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlRyYW5zYWN0aW9uIiwiaW5kZXhfanNfMSIsInJlcXVpcmUiLCJpbmRleF9qc18yIiwiaW5kZXhfanNfMyIsImFjY2Vzc2xpc3RfanNfMSIsImFkZHJlc3NfanNfMSIsIkJOXzAiLCJCaWdJbnQiLCJCTl8yIiwiQk5fMjciLCJCTl8yOCIsIkJOXzM1IiwiQk5fTUFYX1VJTlQiLCJoYW5kbGVBZGRyZXNzIiwiZ2V0QWRkcmVzcyIsImhhbmRsZUFjY2Vzc0xpc3QiLCJwYXJhbSIsImFjY2Vzc0xpc3RpZnkiLCJlcnJvciIsImFzc2VydEFyZ3VtZW50IiwibWVzc2FnZSIsImhhbmRsZU51bWJlciIsIl92YWx1ZSIsImdldE51bWJlciIsImhhbmRsZVVpbnQiLCJnZXRCaWdJbnQiLCJmb3JtYXROdW1iZXIiLCJuYW1lIiwicmVzdWx0IiwidG9CZUFycmF5IiwibGVuZ3RoIiwiZm9ybWF0QWNjZXNzTGlzdCIsIm1hcCIsInNldCIsImFkZHJlc3MiLCJzdG9yYWdlS2V5cyIsIl9wYXJzZUxlZ2FjeSIsImRhdGEiLCJmaWVsZHMiLCJkZWNvZGVSbHAiLCJBcnJheSIsImlzQXJyYXkiLCJ0eCIsInR5cGUiLCJub25jZSIsImdhc1ByaWNlIiwiZ2FzTGltaXQiLCJ0byIsImhleGxpZnkiLCJjaGFpbklkIiwidiIsInIiLCJzIiwic2lnbmF0dXJlIiwiU2lnbmF0dXJlIiwiZnJvbSIsInplcm9QYWRWYWx1ZSIsImhhc2giLCJrZWNjYWsyNTYiLCJfc2VyaWFsaXplTGVnYWN5Iiwic2lnIiwibmV0d29ya1YiLCJsZWdhY3lDaGFpbklkIiwibGVnYWN5IiwicHVzaCIsImVuY29kZVJscCIsInlQYXJpdHkiLCJnZXRDaGFpbklkViIsIl9wYXJzZUVpcFNpZ25hdHVyZSIsIkVycm9yIiwiX3BhcnNlRWlwMTU1OSIsImdldEJ5dGVzIiwic2xpY2UiLCJtYXhQcmlvcml0eUZlZVBlckdhcyIsIm1heEZlZVBlckdhcyIsImFjY2Vzc0xpc3QiLCJfc2VyaWFsaXplRWlwMTU1OSIsImNvbmNhdCIsIl9wYXJzZUVpcDI5MzAiLCJfc2VyaWFsaXplRWlwMjkzMCIsInR5cGVOYW1lIiwiY29uc3RydWN0b3IiLCJzZXJpYWxpemVkIiwidW5zaWduZWRIYXNoIiwidW5zaWduZWRTZXJpYWxpemVkIiwicmVjb3ZlckFkZHJlc3MiLCJmcm9tUHVibGljS2V5IiwiU2lnbmluZ0tleSIsInJlY292ZXJQdWJsaWNLZXkiLCJpc1NpZ25lZCIsImFzc2VydCIsIm9wZXJhdGlvbiIsImluZmVyVHlwZSIsImluZmVyVHlwZXMiLCJwb3AiLCJoYXNHYXNQcmljZSIsImhhc0ZlZSIsImhhc0FjY2Vzc0xpc3QiLCJ0eXBlcyIsInNvcnQiLCJpc0xlZ2FjeSIsImlzQmVybGluIiwiaXNMb25kb24iLCJjbG9uZSIsInRvSlNPTiIsInRvU3RyaW5nIiwicGF5bG9hZCIsInRvTG93ZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/transaction/transaction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/utils/base58.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/utils/base58.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  The [Base58 Encoding](link-base58) scheme allows a **numeric** value\n *  to be encoded as a compact string using a radix of 58 using only\n *  alpha-numeric characters. Confusingly similar characters are omitted\n *  (i.e. ``\"l0O\"``).\n *\n *  Note that Base58 encodes a **numeric** value, not arbitrary bytes,\n *  since any zero-bytes on the left would get removed. To mitigate this\n *  issue most schemes that use Base58 choose specific high-order values\n *  to ensure non-zero prefixes.\n *\n *  @_subsection: api/utils:Base58 Encoding [about-base58]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decodeBase58 = exports.encodeBase58 = void 0;\nconst data_js_1 = __webpack_require__(/*! ./data.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/data.js\");\nconst errors_js_1 = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/errors.js\");\nconst maths_js_1 = __webpack_require__(/*! ./maths.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/maths.js\");\nconst Alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nlet Lookup = null;\nfunction getAlpha(letter) {\n    if (Lookup == null) {\n        Lookup = {};\n        for(let i = 0; i < Alphabet.length; i++){\n            Lookup[Alphabet[i]] = BigInt(i);\n        }\n    }\n    const result = Lookup[letter];\n    (0, errors_js_1.assertArgument)(result != null, `invalid base58 value`, \"letter\", letter);\n    return result;\n}\nconst BN_0 = BigInt(0);\nconst BN_58 = BigInt(58);\n/**\n *  Encode %%value%% as a Base58-encoded string.\n */ function encodeBase58(_value) {\n    let value = (0, maths_js_1.toBigInt)((0, data_js_1.getBytes)(_value));\n    let result = \"\";\n    while(value){\n        result = Alphabet[Number(value % BN_58)] + result;\n        value /= BN_58;\n    }\n    return result;\n}\nexports.encodeBase58 = encodeBase58;\n/**\n *  Decode the Base58-encoded %%value%%.\n */ function decodeBase58(value) {\n    let result = BN_0;\n    for(let i = 0; i < value.length; i++){\n        result *= BN_58;\n        result += getAlpha(value[i]);\n    }\n    return result;\n}\nexports.decodeBase58 = decodeBase58; //# sourceMappingURL=base58.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy91dGlscy9iYXNlNTguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7O0NBWUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHQSxvQkFBb0IsR0FBRyxLQUFLO0FBQ25ELE1BQU1JLFlBQVlDLG1CQUFPQSxDQUFDLHlFQUFXO0FBQ3JDLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLDZFQUFhO0FBQ3pDLE1BQU1FLGFBQWFGLG1CQUFPQSxDQUFDLDJFQUFZO0FBQ3ZDLE1BQU1HLFdBQVc7QUFDakIsSUFBSUMsU0FBUztBQUNiLFNBQVNDLFNBQVNDLE1BQU07SUFDcEIsSUFBSUYsVUFBVSxNQUFNO1FBQ2hCQSxTQUFTLENBQUM7UUFDVixJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUosU0FBU0ssTUFBTSxFQUFFRCxJQUFLO1lBQ3RDSCxNQUFNLENBQUNELFFBQVEsQ0FBQ0ksRUFBRSxDQUFDLEdBQUdFLE9BQU9GO1FBQ2pDO0lBQ0o7SUFDQSxNQUFNRyxTQUFTTixNQUFNLENBQUNFLE9BQU87SUFDNUIsSUFBR0wsWUFBWVUsY0FBYyxFQUFFRCxVQUFVLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLFVBQVVKO0lBQ2xGLE9BQU9JO0FBQ1g7QUFDQSxNQUFNRSxPQUFPSCxPQUFPO0FBQ3BCLE1BQU1JLFFBQVFKLE9BQU87QUFDckI7O0NBRUMsR0FDRCxTQUFTWCxhQUFhZ0IsTUFBTTtJQUN4QixJQUFJbEIsUUFBUSxDQUFDLEdBQUdNLFdBQVdhLFFBQVEsRUFBRSxDQUFDLEdBQUdoQixVQUFVaUIsUUFBUSxFQUFFRjtJQUM3RCxJQUFJSixTQUFTO0lBQ2IsTUFBT2QsTUFBTztRQUNWYyxTQUFTUCxRQUFRLENBQUNjLE9BQU9yQixRQUFRaUIsT0FBTyxHQUFHSDtRQUMzQ2QsU0FBU2lCO0lBQ2I7SUFDQSxPQUFPSDtBQUNYO0FBQ0FmLG9CQUFvQixHQUFHRztBQUN2Qjs7Q0FFQyxHQUNELFNBQVNELGFBQWFELEtBQUs7SUFDdkIsSUFBSWMsU0FBU0U7SUFDYixJQUFLLElBQUlMLElBQUksR0FBR0EsSUFBSVgsTUFBTVksTUFBTSxFQUFFRCxJQUFLO1FBQ25DRyxVQUFVRztRQUNWSCxVQUFVTCxTQUFTVCxLQUFLLENBQUNXLEVBQUU7SUFDL0I7SUFDQSxPQUFPRztBQUNYO0FBQ0FmLG9CQUFvQixHQUFHRSxjQUN2QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy91dGlscy9iYXNlNTguanM/YjdmZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogIFRoZSBbQmFzZTU4IEVuY29kaW5nXShsaW5rLWJhc2U1OCkgc2NoZW1lIGFsbG93cyBhICoqbnVtZXJpYyoqIHZhbHVlXG4gKiAgdG8gYmUgZW5jb2RlZCBhcyBhIGNvbXBhY3Qgc3RyaW5nIHVzaW5nIGEgcmFkaXggb2YgNTggdXNpbmcgb25seVxuICogIGFscGhhLW51bWVyaWMgY2hhcmFjdGVycy4gQ29uZnVzaW5nbHkgc2ltaWxhciBjaGFyYWN0ZXJzIGFyZSBvbWl0dGVkXG4gKiAgKGkuZS4gYGBcImwwT1wiYGApLlxuICpcbiAqICBOb3RlIHRoYXQgQmFzZTU4IGVuY29kZXMgYSAqKm51bWVyaWMqKiB2YWx1ZSwgbm90IGFyYml0cmFyeSBieXRlcyxcbiAqICBzaW5jZSBhbnkgemVyby1ieXRlcyBvbiB0aGUgbGVmdCB3b3VsZCBnZXQgcmVtb3ZlZC4gVG8gbWl0aWdhdGUgdGhpc1xuICogIGlzc3VlIG1vc3Qgc2NoZW1lcyB0aGF0IHVzZSBCYXNlNTggY2hvb3NlIHNwZWNpZmljIGhpZ2gtb3JkZXIgdmFsdWVzXG4gKiAgdG8gZW5zdXJlIG5vbi16ZXJvIHByZWZpeGVzLlxuICpcbiAqICBAX3N1YnNlY3Rpb246IGFwaS91dGlsczpCYXNlNTggRW5jb2RpbmcgW2Fib3V0LWJhc2U1OF1cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvZGVCYXNlNTggPSBleHBvcnRzLmVuY29kZUJhc2U1OCA9IHZvaWQgMDtcbmNvbnN0IGRhdGFfanNfMSA9IHJlcXVpcmUoXCIuL2RhdGEuanNcIik7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuL2Vycm9ycy5qc1wiKTtcbmNvbnN0IG1hdGhzX2pzXzEgPSByZXF1aXJlKFwiLi9tYXRocy5qc1wiKTtcbmNvbnN0IEFscGhhYmV0ID0gXCIxMjM0NTY3ODlBQkNERUZHSEpLTE1OUFFSU1RVVldYWVphYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6XCI7XG5sZXQgTG9va3VwID0gbnVsbDtcbmZ1bmN0aW9uIGdldEFscGhhKGxldHRlcikge1xuICAgIGlmIChMb29rdXAgPT0gbnVsbCkge1xuICAgICAgICBMb29rdXAgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBBbHBoYWJldC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgTG9va3VwW0FscGhhYmV0W2ldXSA9IEJpZ0ludChpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBMb29rdXBbbGV0dGVyXTtcbiAgICAoMCwgZXJyb3JzX2pzXzEuYXNzZXJ0QXJndW1lbnQpKHJlc3VsdCAhPSBudWxsLCBgaW52YWxpZCBiYXNlNTggdmFsdWVgLCBcImxldHRlclwiLCBsZXR0ZXIpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5jb25zdCBCTl8wID0gQmlnSW50KDApO1xuY29uc3QgQk5fNTggPSBCaWdJbnQoNTgpO1xuLyoqXG4gKiAgRW5jb2RlICUldmFsdWUlJSBhcyBhIEJhc2U1OC1lbmNvZGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQmFzZTU4KF92YWx1ZSkge1xuICAgIGxldCB2YWx1ZSA9ICgwLCBtYXRoc19qc18xLnRvQmlnSW50KSgoMCwgZGF0YV9qc18xLmdldEJ5dGVzKShfdmFsdWUpKTtcbiAgICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgICB3aGlsZSAodmFsdWUpIHtcbiAgICAgICAgcmVzdWx0ID0gQWxwaGFiZXRbTnVtYmVyKHZhbHVlICUgQk5fNTgpXSArIHJlc3VsdDtcbiAgICAgICAgdmFsdWUgLz0gQk5fNTg7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmVuY29kZUJhc2U1OCA9IGVuY29kZUJhc2U1ODtcbi8qKlxuICogIERlY29kZSB0aGUgQmFzZTU4LWVuY29kZWQgJSV2YWx1ZSUlLlxuICovXG5mdW5jdGlvbiBkZWNvZGVCYXNlNTgodmFsdWUpIHtcbiAgICBsZXQgcmVzdWx0ID0gQk5fMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCAqPSBCTl81ODtcbiAgICAgICAgcmVzdWx0ICs9IGdldEFscGhhKHZhbHVlW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuZGVjb2RlQmFzZTU4ID0gZGVjb2RlQmFzZTU4O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZTU4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlY29kZUJhc2U1OCIsImVuY29kZUJhc2U1OCIsImRhdGFfanNfMSIsInJlcXVpcmUiLCJlcnJvcnNfanNfMSIsIm1hdGhzX2pzXzEiLCJBbHBoYWJldCIsIkxvb2t1cCIsImdldEFscGhhIiwibGV0dGVyIiwiaSIsImxlbmd0aCIsIkJpZ0ludCIsInJlc3VsdCIsImFzc2VydEFyZ3VtZW50IiwiQk5fMCIsIkJOXzU4IiwiX3ZhbHVlIiwidG9CaWdJbnQiLCJnZXRCeXRlcyIsIk51bWJlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/utils/base58.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/utils/base64.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/utils/base64.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.encodeBase64 = exports.decodeBase64 = void 0;\n/**\n *  [Base64 encoding](link-wiki-base64) using 6-bit words to encode\n *  arbitrary bytes into a string using 65 printable symbols, the\n *  upper-case and lower-case alphabet, the digits ``0`` through ``9``,\n *  ``\"+\"`` and ``\"/\"`` with the ``\"=\"`` used for padding.\n *\n *  @_subsection: api/utils:Base64 Encoding  [about-base64]\n */ const data_js_1 = __webpack_require__(/*! ./data.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/data.js\");\n/**\n *  Decodes the base-64 encoded %%value%%.\n *\n *  @example:\n *    // The decoded value is always binary data...\n *    result = decodeBase64(\"SGVsbG8gV29ybGQhIQ==\")\n *    //_result:\n *\n *    // ...use toUtf8String to convert it to a string.\n *    toUtf8String(result)\n *    //_result:\n *\n *    // Decoding binary data\n *    decodeBase64(\"EjQ=\")\n *    //_result:\n */ function decodeBase64(value) {\n    return (0, data_js_1.getBytesCopy)(Buffer.from(value, \"base64\"));\n}\nexports.decodeBase64 = decodeBase64;\n;\n/**\n *  Encodes %%data%% as a base-64 encoded string.\n *\n *  @example:\n *    // Encoding binary data as a hexstring\n *    encodeBase64(\"0x1234\")\n *    //_result:\n *\n *    // Encoding binary data as a Uint8Array\n *    encodeBase64(new Uint8Array([ 0x12, 0x34 ]))\n *    //_result:\n *\n *    // The input MUST be data...\n *    encodeBase64(\"Hello World!!\")\n *    //_error:\n *\n *    // ...use toUtf8Bytes for this.\n *    encodeBase64(toUtf8Bytes(\"Hello World!!\"))\n *    //_result:\n */ function encodeBase64(data) {\n    return Buffer.from((0, data_js_1.getBytes)(data)).toString(\"base64\");\n}\nexports.encodeBase64 = encodeBase64; //# sourceMappingURL=base64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy91dGlscy9iYXNlNjQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHQSxvQkFBb0IsR0FBRyxLQUFLO0FBQ25EOzs7Ozs7O0NBT0MsR0FDRCxNQUFNSSxZQUFZQyxtQkFBT0EsQ0FBQyx5RUFBVztBQUNyQzs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDRCxTQUFTRixhQUFhRixLQUFLO0lBQ3ZCLE9BQU8sQ0FBQyxHQUFHRyxVQUFVRSxZQUFZLEVBQUVDLE9BQU9DLElBQUksQ0FBQ1AsT0FBTztBQUMxRDtBQUNBRCxvQkFBb0IsR0FBR0c7O0FBRXZCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBbUJDLEdBQ0QsU0FBU0QsYUFBYU8sSUFBSTtJQUN0QixPQUFPRixPQUFPQyxJQUFJLENBQUMsQ0FBQyxHQUFHSixVQUFVTSxRQUFRLEVBQUVELE9BQU9FLFFBQVEsQ0FBQztBQUMvRDtBQUNBWCxvQkFBb0IsR0FBR0UsY0FDdkIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvdXRpbHMvYmFzZTY0LmpzPzZmMGIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVuY29kZUJhc2U2NCA9IGV4cG9ydHMuZGVjb2RlQmFzZTY0ID0gdm9pZCAwO1xuLyoqXG4gKiAgW0Jhc2U2NCBlbmNvZGluZ10obGluay13aWtpLWJhc2U2NCkgdXNpbmcgNi1iaXQgd29yZHMgdG8gZW5jb2RlXG4gKiAgYXJiaXRyYXJ5IGJ5dGVzIGludG8gYSBzdHJpbmcgdXNpbmcgNjUgcHJpbnRhYmxlIHN5bWJvbHMsIHRoZVxuICogIHVwcGVyLWNhc2UgYW5kIGxvd2VyLWNhc2UgYWxwaGFiZXQsIHRoZSBkaWdpdHMgYGAwYGAgdGhyb3VnaCBgYDlgYCxcbiAqICBgYFwiK1wiYGAgYW5kIGBgXCIvXCJgYCB3aXRoIHRoZSBgYFwiPVwiYGAgdXNlZCBmb3IgcGFkZGluZy5cbiAqXG4gKiAgQF9zdWJzZWN0aW9uOiBhcGkvdXRpbHM6QmFzZTY0IEVuY29kaW5nICBbYWJvdXQtYmFzZTY0XVxuICovXG5jb25zdCBkYXRhX2pzXzEgPSByZXF1aXJlKFwiLi9kYXRhLmpzXCIpO1xuLyoqXG4gKiAgRGVjb2RlcyB0aGUgYmFzZS02NCBlbmNvZGVkICUldmFsdWUlJS5cbiAqXG4gKiAgQGV4YW1wbGU6XG4gKiAgICAvLyBUaGUgZGVjb2RlZCB2YWx1ZSBpcyBhbHdheXMgYmluYXJ5IGRhdGEuLi5cbiAqICAgIHJlc3VsdCA9IGRlY29kZUJhc2U2NChcIlNHVnNiRzhnVjI5eWJHUWhJUT09XCIpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAgLy8gLi4udXNlIHRvVXRmOFN0cmluZyB0byBjb252ZXJ0IGl0IHRvIGEgc3RyaW5nLlxuICogICAgdG9VdGY4U3RyaW5nKHJlc3VsdClcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBEZWNvZGluZyBiaW5hcnkgZGF0YVxuICogICAgZGVjb2RlQmFzZTY0KFwiRWpRPVwiKVxuICogICAgLy9fcmVzdWx0OlxuICovXG5mdW5jdGlvbiBkZWNvZGVCYXNlNjQodmFsdWUpIHtcbiAgICByZXR1cm4gKDAsIGRhdGFfanNfMS5nZXRCeXRlc0NvcHkpKEJ1ZmZlci5mcm9tKHZhbHVlLCBcImJhc2U2NFwiKSk7XG59XG5leHBvcnRzLmRlY29kZUJhc2U2NCA9IGRlY29kZUJhc2U2NDtcbjtcbi8qKlxuICogIEVuY29kZXMgJSVkYXRhJSUgYXMgYSBiYXNlLTY0IGVuY29kZWQgc3RyaW5nLlxuICpcbiAqICBAZXhhbXBsZTpcbiAqICAgIC8vIEVuY29kaW5nIGJpbmFyeSBkYXRhIGFzIGEgaGV4c3RyaW5nXG4gKiAgICBlbmNvZGVCYXNlNjQoXCIweDEyMzRcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBFbmNvZGluZyBiaW5hcnkgZGF0YSBhcyBhIFVpbnQ4QXJyYXlcbiAqICAgIGVuY29kZUJhc2U2NChuZXcgVWludDhBcnJheShbIDB4MTIsIDB4MzQgXSkpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAgLy8gVGhlIGlucHV0IE1VU1QgYmUgZGF0YS4uLlxuICogICAgZW5jb2RlQmFzZTY0KFwiSGVsbG8gV29ybGQhIVwiKVxuICogICAgLy9fZXJyb3I6XG4gKlxuICogICAgLy8gLi4udXNlIHRvVXRmOEJ5dGVzIGZvciB0aGlzLlxuICogICAgZW5jb2RlQmFzZTY0KHRvVXRmOEJ5dGVzKFwiSGVsbG8gV29ybGQhIVwiKSlcbiAqICAgIC8vX3Jlc3VsdDpcbiAqL1xuZnVuY3Rpb24gZW5jb2RlQmFzZTY0KGRhdGEpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oKDAsIGRhdGFfanNfMS5nZXRCeXRlcykoZGF0YSkpLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xufVxuZXhwb3J0cy5lbmNvZGVCYXNlNjQgPSBlbmNvZGVCYXNlNjQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlNjQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW5jb2RlQmFzZTY0IiwiZGVjb2RlQmFzZTY0IiwiZGF0YV9qc18xIiwicmVxdWlyZSIsImdldEJ5dGVzQ29weSIsIkJ1ZmZlciIsImZyb20iLCJkYXRhIiwiZ2V0Qnl0ZXMiLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/utils/base64.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/utils/data.js":
/*!********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/utils/data.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.zeroPadBytes = exports.zeroPadValue = exports.stripZerosLeft = exports.dataSlice = exports.dataLength = exports.concat = exports.hexlify = exports.isBytesLike = exports.isHexString = exports.getBytesCopy = exports.getBytes = void 0;\n/**\n *  Some data helpers.\n *\n *\n *  @_subsection api/utils:Data Helpers  [about-data]\n */ const errors_js_1 = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/errors.js\");\nfunction _getBytes(value, name, copy) {\n    if (value instanceof Uint8Array) {\n        if (copy) {\n            return new Uint8Array(value);\n        }\n        return value;\n    }\n    if (typeof value === \"string\" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {\n        const result = new Uint8Array((value.length - 2) / 2);\n        let offset = 2;\n        for(let i = 0; i < result.length; i++){\n            result[i] = parseInt(value.substring(offset, offset + 2), 16);\n            offset += 2;\n        }\n        return result;\n    }\n    (0, errors_js_1.assertArgument)(false, \"invalid BytesLike value\", name || \"value\", value);\n}\n/**\n *  Get a typed Uint8Array for %%value%%. If already a Uint8Array\n *  the original %%value%% is returned; if a copy is required use\n *  [[getBytesCopy]].\n *\n *  @see: getBytesCopy\n */ function getBytes(value, name) {\n    return _getBytes(value, name, false);\n}\nexports.getBytes = getBytes;\n/**\n *  Get a typed Uint8Array for %%value%%, creating a copy if necessary\n *  to prevent any modifications of the returned value from being\n *  reflected elsewhere.\n *\n *  @see: getBytes\n */ function getBytesCopy(value, name) {\n    return _getBytes(value, name, true);\n}\nexports.getBytesCopy = getBytesCopy;\n/**\n *  Returns true if %%value%% is a valid [[HexString]].\n *\n *  If %%length%% is ``true`` or a //number//, it also checks that\n *  %%value%% is a valid [[DataHexString]] of %%length%% (if a //number//)\n *  bytes of data (e.g. ``0x1234`` is 2 bytes).\n */ function isHexString(value, length) {\n    if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (typeof length === \"number\" && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    if (length === true && value.length % 2 !== 0) {\n        return false;\n    }\n    return true;\n}\nexports.isHexString = isHexString;\n/**\n *  Returns true if %%value%% is a valid representation of arbitrary\n *  data (i.e. a valid [[DataHexString]] or a Uint8Array).\n */ function isBytesLike(value) {\n    return isHexString(value, true) || value instanceof Uint8Array;\n}\nexports.isBytesLike = isBytesLike;\nconst HexCharacters = \"0123456789abcdef\";\n/**\n *  Returns a [[DataHexString]] representation of %%data%%.\n */ function hexlify(data) {\n    const bytes = getBytes(data);\n    let result = \"0x\";\n    for(let i = 0; i < bytes.length; i++){\n        const v = bytes[i];\n        result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n    return result;\n}\nexports.hexlify = hexlify;\n/**\n *  Returns a [[DataHexString]] by concatenating all values\n *  within %%data%%.\n */ function concat(datas) {\n    return \"0x\" + datas.map((d)=>hexlify(d).substring(2)).join(\"\");\n}\nexports.concat = concat;\n/**\n *  Returns the length of %%data%%, in bytes.\n */ function dataLength(data) {\n    if (isHexString(data, true)) {\n        return (data.length - 2) / 2;\n    }\n    return getBytes(data).length;\n}\nexports.dataLength = dataLength;\n/**\n *  Returns a [[DataHexString]] by slicing %%data%% from the %%start%%\n *  offset to the %%end%% offset.\n *\n *  By default %%start%% is 0 and %%end%% is the length of %%data%%.\n */ function dataSlice(data, start, end) {\n    const bytes = getBytes(data);\n    if (end != null && end > bytes.length) {\n        (0, errors_js_1.assert)(false, \"cannot slice beyond data bounds\", \"BUFFER_OVERRUN\", {\n            buffer: bytes,\n            length: bytes.length,\n            offset: end\n        });\n    }\n    return hexlify(bytes.slice(start == null ? 0 : start, end == null ? bytes.length : end));\n}\nexports.dataSlice = dataSlice;\n/**\n *  Return the [[DataHexString]] result by stripping all **leading**\n ** zero bytes from %%data%%.\n */ function stripZerosLeft(data) {\n    let bytes = hexlify(data).substring(2);\n    while(bytes.startsWith(\"00\")){\n        bytes = bytes.substring(2);\n    }\n    return \"0x\" + bytes;\n}\nexports.stripZerosLeft = stripZerosLeft;\nfunction zeroPad(data, length, left) {\n    const bytes = getBytes(data);\n    (0, errors_js_1.assert)(length >= bytes.length, \"padding exceeds data length\", \"BUFFER_OVERRUN\", {\n        buffer: new Uint8Array(bytes),\n        length: length,\n        offset: length + 1\n    });\n    const result = new Uint8Array(length);\n    result.fill(0);\n    if (left) {\n        result.set(bytes, length - bytes.length);\n    } else {\n        result.set(bytes, 0);\n    }\n    return hexlify(result);\n}\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **left**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **values** are in Solidity\n *  (e.g. ``uint128``).\n */ function zeroPadValue(data, length) {\n    return zeroPad(data, length, true);\n}\nexports.zeroPadValue = zeroPadValue;\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **right**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **bytes** are in Solidity\n *  (e.g. ``bytes16``).\n */ function zeroPadBytes(data, length) {\n    return zeroPad(data, length, false);\n}\nexports.zeroPadBytes = zeroPadBytes; //# sourceMappingURL=data.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/utils/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/utils/errors.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/utils/errors.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  All errors in ethers include properties to ensure they are both\n *  human-readable (i.e. ``.message``) and machine-readable (i.e. ``.code``).\n *\n *  The [[isError]] function can be used to check the error ``code`` and\n *  provide a type guard for the properties present on that error interface.\n *\n *  @_section: api/utils/errors:Errors  [about-errors]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.assertPrivate = exports.assertNormalize = exports.assertArgumentCount = exports.assertArgument = exports.assert = exports.makeError = exports.isCallException = exports.isError = void 0;\nconst _version_js_1 = __webpack_require__(/*! ../_version.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/_version.js\");\nconst properties_js_1 = __webpack_require__(/*! ./properties.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/properties.js\");\nfunction stringify(value) {\n    if (value == null) {\n        return \"null\";\n    }\n    if (Array.isArray(value)) {\n        return \"[ \" + value.map(stringify).join(\", \") + \" ]\";\n    }\n    if (value instanceof Uint8Array) {\n        const HEX = \"0123456789abcdef\";\n        let result = \"0x\";\n        for(let i = 0; i < value.length; i++){\n            result += HEX[value[i] >> 4];\n            result += HEX[value[i] & 0xf];\n        }\n        return result;\n    }\n    if (typeof value === \"object\" && typeof value.toJSON === \"function\") {\n        return stringify(value.toJSON());\n    }\n    switch(typeof value){\n        case \"boolean\":\n        case \"symbol\":\n            return value.toString();\n        case \"bigint\":\n            return BigInt(value).toString();\n        case \"number\":\n            return value.toString();\n        case \"string\":\n            return JSON.stringify(value);\n        case \"object\":\n            {\n                const keys = Object.keys(value);\n                keys.sort();\n                return \"{ \" + keys.map((k)=>`${stringify(k)}: ${stringify(value[k])}`).join(\", \") + \" }\";\n            }\n    }\n    return `[ COULD NOT SERIALIZE ]`;\n}\n/**\n *  Returns true if the %%error%% matches an error thrown by ethers\n *  that matches the error %%code%%.\n *\n *  In TypeScript envornoments, this can be used to check that %%error%%\n *  matches an EthersError type, which means the expected properties will\n *  be set.\n *\n *  @See [ErrorCodes](api:ErrorCode)\n *  @example\n *    try {\n *      // code....\n *    } catch (e) {\n *      if (isError(e, \"CALL_EXCEPTION\")) {\n *          // The Type Guard has validated this object\n *          console.log(e.data);\n *      }\n *    }\n */ function isError(error, code) {\n    return error && error.code === code;\n}\nexports.isError = isError;\n/**\n *  Returns true if %%error%% is a [[CallExceptionError].\n */ function isCallException(error) {\n    return isError(error, \"CALL_EXCEPTION\");\n}\nexports.isCallException = isCallException;\n/**\n *  Returns a new Error configured to the format ethers emits errors, with\n *  the %%message%%, [[api:ErrorCode]] %%code%% and additioanl properties\n *  for the corresponding EthersError.\n *\n *  Each error in ethers includes the version of ethers, a\n *  machine-readable [[ErrorCode]], and depneding on %%code%%, additional\n *  required properties. The error message will also include the %%meeage%%,\n *  ethers version, %%code%% and all aditional properties, serialized.\n */ function makeError(message, code, info) {\n    let shortMessage = message;\n    {\n        const details = [];\n        if (info) {\n            if (\"message\" in info || \"code\" in info || \"name\" in info) {\n                throw new Error(`value will overwrite populated values: ${stringify(info)}`);\n            }\n            for(const key in info){\n                if (key === \"shortMessage\") {\n                    continue;\n                }\n                const value = info[key];\n                //                try {\n                details.push(key + \"=\" + stringify(value));\n            //                } catch (error: any) {\n            //                console.log(\"MMM\", error.message);\n            //                    details.push(key + \"=[could not serialize object]\");\n            //                }\n            }\n        }\n        details.push(`code=${code}`);\n        details.push(`version=${_version_js_1.version}`);\n        if (details.length) {\n            message += \" (\" + details.join(\", \") + \")\";\n        }\n    }\n    let error;\n    switch(code){\n        case \"INVALID_ARGUMENT\":\n            error = new TypeError(message);\n            break;\n        case \"NUMERIC_FAULT\":\n        case \"BUFFER_OVERRUN\":\n            error = new RangeError(message);\n            break;\n        default:\n            error = new Error(message);\n    }\n    (0, properties_js_1.defineProperties)(error, {\n        code\n    });\n    if (info) {\n        Object.assign(error, info);\n    }\n    if (error.shortMessage == null) {\n        (0, properties_js_1.defineProperties)(error, {\n            shortMessage\n        });\n    }\n    return error;\n}\nexports.makeError = makeError;\n/**\n *  Throws an EthersError with %%message%%, %%code%% and additional error\n *  %%info%% when %%check%% is falsish..\n *\n *  @see [[api:makeError]]\n */ function assert(check, message, code, info) {\n    if (!check) {\n        throw makeError(message, code, info);\n    }\n}\nexports.assert = assert;\n/**\n *  A simple helper to simply ensuring provided arguments match expected\n *  constraints, throwing if not.\n *\n *  In TypeScript environments, the %%check%% has been asserted true, so\n *  any further code does not need additional compile-time checks.\n */ function assertArgument(check, message, name, value) {\n    assert(check, message, \"INVALID_ARGUMENT\", {\n        argument: name,\n        value: value\n    });\n}\nexports.assertArgument = assertArgument;\nfunction assertArgumentCount(count, expectedCount, message) {\n    if (message == null) {\n        message = \"\";\n    }\n    if (message) {\n        message = \": \" + message;\n    }\n    assert(count >= expectedCount, \"missing arguemnt\" + message, \"MISSING_ARGUMENT\", {\n        count: count,\n        expectedCount: expectedCount\n    });\n    assert(count <= expectedCount, \"too many arguemnts\" + message, \"UNEXPECTED_ARGUMENT\", {\n        count: count,\n        expectedCount: expectedCount\n    });\n}\nexports.assertArgumentCount = assertArgumentCount;\nconst _normalizeForms = [\n    \"NFD\",\n    \"NFC\",\n    \"NFKD\",\n    \"NFKC\"\n].reduce((accum, form)=>{\n    try {\n        // General test for normalize\n        /* c8 ignore start */ if (\"test\".normalize(form) !== \"test\") {\n            throw new Error(\"bad\");\n        }\n        ;\n        /* c8 ignore stop */ if (form === \"NFD\") {\n            const check = String.fromCharCode(0xe9).normalize(\"NFD\");\n            const expected = String.fromCharCode(0x65, 0x0301);\n            /* c8 ignore start */ if (check !== expected) {\n                throw new Error(\"broken\");\n            }\n        /* c8 ignore stop */ }\n        accum.push(form);\n    } catch (error) {}\n    return accum;\n}, []);\n/**\n *  Throws if the normalization %%form%% is not supported.\n */ function assertNormalize(form) {\n    assert(_normalizeForms.indexOf(form) >= 0, \"platform missing String.prototype.normalize\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"String.prototype.normalize\",\n        info: {\n            form\n        }\n    });\n}\nexports.assertNormalize = assertNormalize;\n/**\n *  Many classes use file-scoped values to guard the constructor,\n *  making it effectively private. This facilitates that pattern\n *  by ensuring the %%givenGaurd%% matches the file-scoped %%guard%%,\n *  throwing if not, indicating the %%className%% if provided.\n */ function assertPrivate(givenGuard, guard, className) {\n    if (className == null) {\n        className = \"\";\n    }\n    if (givenGuard !== guard) {\n        let method = className, operation = \"new\";\n        if (className) {\n            method += \".\";\n            operation += \" \" + className;\n        }\n        assert(false, `private constructor; use ${method}from* methods`, \"UNSUPPORTED_OPERATION\", {\n            operation\n        });\n    }\n}\nexports.assertPrivate = assertPrivate; //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/utils/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/utils/events.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/utils/events.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.EventPayload = void 0;\n/**\n *  Events allow for applications to use the observer pattern, which\n *  allows subscribing and publishing events, outside the normal\n *  execution paths.\n *\n *  @_section api/utils/events:Events  [about-events]\n */ const properties_js_1 = __webpack_require__(/*! ./properties.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/properties.js\");\n/**\n *  When an [[EventEmitterable]] triggers a [[Listener]], the\n *  callback always ahas one additional argument passed, which is\n *  an **EventPayload**.\n */ class EventPayload {\n    #listener;\n    /**\n     *  Create a new **EventPayload** for %%emitter%% with\n     *  the %%listener%% and for %%filter%%.\n     */ constructor(emitter, listener, filter){\n        this.#listener = listener;\n        (0, properties_js_1.defineProperties)(this, {\n            emitter,\n            filter\n        });\n    }\n    /**\n     *  Unregister the triggered listener for future events.\n     */ async removeListener() {\n        if (this.#listener == null) {\n            return;\n        }\n        await this.emitter.off(this.filter, this.#listener);\n    }\n}\nexports.EventPayload = EventPayload; //# sourceMappingURL=events.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy91dGlscy9ldmVudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHLEtBQUs7QUFDNUI7Ozs7OztDQU1DLEdBQ0QsTUFBTUcsa0JBQWtCQyxtQkFBT0EsQ0FBQyxxRkFBaUI7QUFDakQ7Ozs7Q0FJQyxHQUNELE1BQU1GO0lBU0YsQ0FBQ0csUUFBUSxDQUFDO0lBQ1Y7OztLQUdDLEdBQ0RDLFlBQVlDLE9BQU8sRUFBRUYsUUFBUSxFQUFFRyxNQUFNLENBQUU7UUFDbkMsSUFBSSxDQUFDLENBQUNILFFBQVEsR0FBR0E7UUFDaEIsSUFBR0YsZ0JBQWdCTSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUU7WUFBRUY7WUFBU0M7UUFBTztJQUNsRTtJQUNBOztLQUVDLEdBQ0QsTUFBTUUsaUJBQWlCO1FBQ25CLElBQUksSUFBSSxDQUFDLENBQUNMLFFBQVEsSUFBSSxNQUFNO1lBQ3hCO1FBQ0o7UUFDQSxNQUFNLElBQUksQ0FBQ0UsT0FBTyxDQUFDSSxHQUFHLENBQUMsSUFBSSxDQUFDSCxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUNILFFBQVE7SUFDdEQ7QUFDSjtBQUNBTCxvQkFBb0IsR0FBR0UsY0FDdkIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvdXRpbHMvZXZlbnRzLmpzPzliMmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV2ZW50UGF5bG9hZCA9IHZvaWQgMDtcbi8qKlxuICogIEV2ZW50cyBhbGxvdyBmb3IgYXBwbGljYXRpb25zIHRvIHVzZSB0aGUgb2JzZXJ2ZXIgcGF0dGVybiwgd2hpY2hcbiAqICBhbGxvd3Mgc3Vic2NyaWJpbmcgYW5kIHB1Ymxpc2hpbmcgZXZlbnRzLCBvdXRzaWRlIHRoZSBub3JtYWxcbiAqICBleGVjdXRpb24gcGF0aHMuXG4gKlxuICogIEBfc2VjdGlvbiBhcGkvdXRpbHMvZXZlbnRzOkV2ZW50cyAgW2Fib3V0LWV2ZW50c11cbiAqL1xuY29uc3QgcHJvcGVydGllc19qc18xID0gcmVxdWlyZShcIi4vcHJvcGVydGllcy5qc1wiKTtcbi8qKlxuICogIFdoZW4gYW4gW1tFdmVudEVtaXR0ZXJhYmxlXV0gdHJpZ2dlcnMgYSBbW0xpc3RlbmVyXV0sIHRoZVxuICogIGNhbGxiYWNrIGFsd2F5cyBhaGFzIG9uZSBhZGRpdGlvbmFsIGFyZ3VtZW50IHBhc3NlZCwgd2hpY2ggaXNcbiAqICBhbiAqKkV2ZW50UGF5bG9hZCoqLlxuICovXG5jbGFzcyBFdmVudFBheWxvYWQge1xuICAgIC8qKlxuICAgICAqICBUaGUgZXZlbnQgZmlsdGVyLlxuICAgICAqL1xuICAgIGZpbHRlcjtcbiAgICAvKipcbiAgICAgKiAgVGhlICoqRXZlbnRFbWl0dGVyYWJsZSoqLlxuICAgICAqL1xuICAgIGVtaXR0ZXI7XG4gICAgI2xpc3RlbmVyO1xuICAgIC8qKlxuICAgICAqICBDcmVhdGUgYSBuZXcgKipFdmVudFBheWxvYWQqKiBmb3IgJSVlbWl0dGVyJSUgd2l0aFxuICAgICAqICB0aGUgJSVsaXN0ZW5lciUlIGFuZCBmb3IgJSVmaWx0ZXIlJS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlbWl0dGVyLCBsaXN0ZW5lciwgZmlsdGVyKSB7XG4gICAgICAgIHRoaXMuI2xpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgICAgICgwLCBwcm9wZXJ0aWVzX2pzXzEuZGVmaW5lUHJvcGVydGllcykodGhpcywgeyBlbWl0dGVyLCBmaWx0ZXIgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBVbnJlZ2lzdGVyIHRoZSB0cmlnZ2VyZWQgbGlzdGVuZXIgZm9yIGZ1dHVyZSBldmVudHMuXG4gICAgICovXG4gICAgYXN5bmMgcmVtb3ZlTGlzdGVuZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLiNsaXN0ZW5lciA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy5lbWl0dGVyLm9mZih0aGlzLmZpbHRlciwgdGhpcy4jbGlzdGVuZXIpO1xuICAgIH1cbn1cbmV4cG9ydHMuRXZlbnRQYXlsb2FkID0gRXZlbnRQYXlsb2FkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkV2ZW50UGF5bG9hZCIsInByb3BlcnRpZXNfanNfMSIsInJlcXVpcmUiLCJsaXN0ZW5lciIsImNvbnN0cnVjdG9yIiwiZW1pdHRlciIsImZpbHRlciIsImRlZmluZVByb3BlcnRpZXMiLCJyZW1vdmVMaXN0ZW5lciIsIm9mZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/utils/events.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/utils/fetch.js":
/*!*********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/utils/fetch.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FetchResponse = exports.FetchRequest = exports.FetchCancelSignal = void 0;\n/**\n *  Fetching content from the web is environment-specific, so Ethers\n *  provides an abstraction the each environment can implement to provide\n *  this service.\n *\n *  On [Node.js](link-node), the ``http`` and ``https`` libs are used to\n *  create a request object, register event listeners and process data\n *  and populate the [[FetchResponse]].\n *\n *  In a browser, the [DOM fetch](link-js-fetch) is used, and the resulting\n *  ``Promise`` is waited on to retreive the payload.\n *\n *  The [[FetchRequest]] is responsible for handling many common situations,\n *  such as redirects, server throttling, authentcation, etc.\n *\n *  It also handles common gateways, such as IPFS and data URIs.\n *\n *  @_section api/utils/fetching:Fetching Web Content  [about-fetch]\n */ const base64_js_1 = __webpack_require__(/*! ./base64.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/base64.js\");\nconst data_js_1 = __webpack_require__(/*! ./data.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/data.js\");\nconst errors_js_1 = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/errors.js\");\nconst properties_js_1 = __webpack_require__(/*! ./properties.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/properties.js\");\nconst utf8_js_1 = __webpack_require__(/*! ./utf8.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/utf8.js\");\nconst geturl_js_1 = __webpack_require__(/*! ./geturl.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/geturl.js\");\nconst MAX_ATTEMPTS = 12;\nconst SLOT_INTERVAL = 250;\n// The global FetchGetUrlFunc implementation.\nlet defaultGetUrlFunc = (0, geturl_js_1.createGetUrl)();\nconst reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\nconst reIpfs = new RegExp(\"^ipfs://(ipfs/)?(.*)$\", \"i\");\n// If locked, new Gateways cannot be added\nlet locked = false;\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\nasync function dataGatewayFunc(url, signal) {\n    try {\n        const match = url.match(reData);\n        if (!match) {\n            throw new Error(\"invalid data\");\n        }\n        return new FetchResponse(200, \"OK\", {\n            \"content-type\": match[1] || \"text/plain\"\n        }, match[2] ? (0, base64_js_1.decodeBase64)(match[3]) : unpercent(match[3]));\n    } catch (error) {\n        return new FetchResponse(599, \"BAD REQUEST (invalid data: URI)\", {}, null, new FetchRequest(url));\n    }\n}\n/**\n *  Returns a [[FetchGatewayFunc]] for fetching content from a standard\n *  IPFS gateway hosted at %%baseUrl%%.\n */ function getIpfsGatewayFunc(baseUrl) {\n    async function gatewayIpfs(url, signal) {\n        try {\n            const match = url.match(reIpfs);\n            if (!match) {\n                throw new Error(\"invalid link\");\n            }\n            return new FetchRequest(`${baseUrl}${match[2]}`);\n        } catch (error) {\n            return new FetchResponse(599, \"BAD REQUEST (invalid IPFS URI)\", {}, null, new FetchRequest(url));\n        }\n    }\n    return gatewayIpfs;\n}\nconst Gateways = {\n    \"data\": dataGatewayFunc,\n    \"ipfs\": getIpfsGatewayFunc(\"https://gateway.ipfs.io/ipfs/\")\n};\nconst fetchSignals = new WeakMap();\n/**\n *  @_ignore\n */ class FetchCancelSignal {\n    #listeners;\n    #cancelled;\n    constructor(request){\n        this.#listeners = [];\n        this.#cancelled = false;\n        fetchSignals.set(request, ()=>{\n            if (this.#cancelled) {\n                return;\n            }\n            this.#cancelled = true;\n            for (const listener of this.#listeners){\n                setTimeout(()=>{\n                    listener();\n                }, 0);\n            }\n            this.#listeners = [];\n        });\n    }\n    addListener(listener) {\n        (0, errors_js_1.assert)(!this.#cancelled, \"singal already cancelled\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fetchCancelSignal.addCancelListener\"\n        });\n        this.#listeners.push(listener);\n    }\n    get cancelled() {\n        return this.#cancelled;\n    }\n    checkSignal() {\n        (0, errors_js_1.assert)(!this.cancelled, \"cancelled\", \"CANCELLED\", {});\n    }\n}\nexports.FetchCancelSignal = FetchCancelSignal;\n// Check the signal, throwing if it is cancelled\nfunction checkSignal(signal) {\n    if (signal == null) {\n        throw new Error(\"missing signal; should not happen\");\n    }\n    signal.checkSignal();\n    return signal;\n}\n/**\n *  Represents a request for a resource using a URI.\n *\n *  By default, the supported schemes are ``HTTP``, ``HTTPS``, ``data:``,\n *  and ``IPFS:``.\n *\n *  Additional schemes can be added globally using [[registerGateway]].\n *\n *  @example:\n *    req = new FetchRequest(\"https://www.ricmoo.com\")\n *    resp = await req.send()\n *    resp.body.length\n *    //_result:\n */ class FetchRequest {\n    #allowInsecure;\n    #gzip;\n    #headers;\n    #method;\n    #timeout;\n    #url;\n    #body;\n    #bodyType;\n    #creds;\n    // Hooks\n    #preflight;\n    #process;\n    #retry;\n    #signal;\n    #throttle;\n    #getUrlFunc;\n    /**\n     *  The fetch URI to requrest.\n     */ get url() {\n        return this.#url;\n    }\n    set url(url) {\n        this.#url = String(url);\n    }\n    /**\n     *  The fetch body, if any, to send as the request body. //(default: null)//\n     *\n     *  When setting a body, the intrinsic ``Content-Type`` is automatically\n     *  set and will be used if **not overridden** by setting a custom\n     *  header.\n     *\n     *  If %%body%% is null, the body is cleared (along with the\n     *  intrinsic ``Content-Type``) and the .\n     *\n     *  If %%body%% is a string, the intrincis ``Content-Type`` is set to\n     *  ``text/plain``.\n     *\n     *  If %%body%% is a Uint8Array, the intrincis ``Content-Type`` is set to\n     *  ``application/octet-stream``.\n     *\n     *  If %%body%% is any other object, the intrincis ``Content-Type`` is\n     *  set to ``application/json``.\n     */ get body() {\n        if (this.#body == null) {\n            return null;\n        }\n        return new Uint8Array(this.#body);\n    }\n    set body(body) {\n        if (body == null) {\n            this.#body = undefined;\n            this.#bodyType = undefined;\n        } else if (typeof body === \"string\") {\n            this.#body = (0, utf8_js_1.toUtf8Bytes)(body);\n            this.#bodyType = \"text/plain\";\n        } else if (body instanceof Uint8Array) {\n            this.#body = body;\n            this.#bodyType = \"application/octet-stream\";\n        } else if (typeof body === \"object\") {\n            this.#body = (0, utf8_js_1.toUtf8Bytes)(JSON.stringify(body));\n            this.#bodyType = \"application/json\";\n        } else {\n            throw new Error(\"invalid body\");\n        }\n    }\n    /**\n     *  Returns true if the request has a body.\n     */ hasBody() {\n        return this.#body != null;\n    }\n    /**\n     *  The HTTP method to use when requesting the URI. If no method\n     *  has been explicitly set, then ``GET`` is used if the body is\n     *  null and ``POST`` otherwise.\n     */ get method() {\n        if (this.#method) {\n            return this.#method;\n        }\n        if (this.hasBody()) {\n            return \"POST\";\n        }\n        return \"GET\";\n    }\n    set method(method) {\n        if (method == null) {\n            method = \"\";\n        }\n        this.#method = String(method).toUpperCase();\n    }\n    /**\n     *  The headers that will be used when requesting the URI. All\n     *  keys are lower-case.\n     *\n     *  This object is a copy, so any chnages will **NOT** be reflected\n     *  in the ``FetchRequest``.\n     *\n     *  To set a header entry, use the ``setHeader`` method.\n     */ get headers() {\n        const headers = Object.assign({}, this.#headers);\n        if (this.#creds) {\n            headers[\"authorization\"] = `Basic ${(0, base64_js_1.encodeBase64)((0, utf8_js_1.toUtf8Bytes)(this.#creds))}`;\n        }\n        ;\n        if (this.allowGzip) {\n            headers[\"accept-encoding\"] = \"gzip\";\n        }\n        if (headers[\"content-type\"] == null && this.#bodyType) {\n            headers[\"content-type\"] = this.#bodyType;\n        }\n        if (this.body) {\n            headers[\"content-length\"] = String(this.body.length);\n        }\n        return headers;\n    }\n    /**\n     *  Get the header for %%key%%, ignoring case.\n     */ getHeader(key) {\n        return this.headers[key.toLowerCase()];\n    }\n    /**\n     *  Set the header for %%key%% to %%value%%. All values are coerced\n     *  to a string.\n     */ setHeader(key, value) {\n        this.#headers[String(key).toLowerCase()] = String(value);\n    }\n    /**\n     *  Clear all headers, resetting all intrinsic headers.\n     */ clearHeaders() {\n        this.#headers = {};\n    }\n    [Symbol.iterator]() {\n        const headers = this.headers;\n        const keys = Object.keys(headers);\n        let index = 0;\n        return {\n            next: ()=>{\n                if (index < keys.length) {\n                    const key = keys[index++];\n                    return {\n                        value: [\n                            key,\n                            headers[key]\n                        ],\n                        done: false\n                    };\n                }\n                return {\n                    value: undefined,\n                    done: true\n                };\n            }\n        };\n    }\n    /**\n     *  The value that will be sent for the ``Authorization`` header.\n     *\n     *  To set the credentials, use the ``setCredentials`` method.\n     */ get credentials() {\n        return this.#creds || null;\n    }\n    /**\n     *  Sets an ``Authorization`` for %%username%% with %%password%%.\n     */ setCredentials(username, password) {\n        (0, errors_js_1.assertArgument)(!username.match(/:/), \"invalid basic authentication username\", \"username\", \"[REDACTED]\");\n        this.#creds = `${username}:${password}`;\n    }\n    /**\n     *  Enable and request gzip-encoded responses. The response will\n     *  automatically be decompressed. //(default: true)//\n     */ get allowGzip() {\n        return this.#gzip;\n    }\n    set allowGzip(value) {\n        this.#gzip = !!value;\n    }\n    /**\n     *  Allow ``Authentication`` credentials to be sent over insecure\n     *  channels. //(default: false)//\n     */ get allowInsecureAuthentication() {\n        return !!this.#allowInsecure;\n    }\n    set allowInsecureAuthentication(value) {\n        this.#allowInsecure = !!value;\n    }\n    /**\n     *  The timeout (in milliseconds) to wait for a complere response.\n     *  //(default: 5 minutes)//\n     */ get timeout() {\n        return this.#timeout;\n    }\n    set timeout(timeout) {\n        (0, errors_js_1.assertArgument)(timeout >= 0, \"timeout must be non-zero\", \"timeout\", timeout);\n        this.#timeout = timeout;\n    }\n    /**\n     *  This function is called prior to each request, for example\n     *  during a redirection or retry in case of server throttling.\n     *\n     *  This offers an opportunity to populate headers or update\n     *  content before sending a request.\n     */ get preflightFunc() {\n        return this.#preflight || null;\n    }\n    set preflightFunc(preflight) {\n        this.#preflight = preflight;\n    }\n    /**\n     *  This function is called after each response, offering an\n     *  opportunity to provide client-level throttling or updating\n     *  response data.\n     *\n     *  Any error thrown in this causes the ``send()`` to throw.\n     *\n     *  To schedule a retry attempt (assuming the maximum retry limit\n     *  has not been reached), use [[response.throwThrottleError]].\n     */ get processFunc() {\n        return this.#process || null;\n    }\n    set processFunc(process) {\n        this.#process = process;\n    }\n    /**\n     *  This function is called on each retry attempt.\n     */ get retryFunc() {\n        return this.#retry || null;\n    }\n    set retryFunc(retry) {\n        this.#retry = retry;\n    }\n    /**\n     *  This function is called to fetch content from HTTP and\n     *  HTTPS URLs and is platform specific (e.g. nodejs vs\n     *  browsers).\n     *\n     *  This is by default the currently registered global getUrl\n     *  function, which can be changed using [[registerGetUrl]].\n     *  If this has been set, setting is to ``null`` will cause\n     *  this FetchRequest (and any future clones) to revert back to\n     *  using the currently registered global getUrl function.\n     *\n     *  Setting this is generally not necessary, but may be useful\n     *  for developers that wish to intercept requests or to\n     *  configurege a proxy or other agent.\n     */ get getUrlFunc() {\n        return this.#getUrlFunc || defaultGetUrlFunc;\n    }\n    set getUrlFunc(value) {\n        this.#getUrlFunc = value;\n    }\n    /**\n     *  Create a new FetchRequest instance with default values.\n     *\n     *  Once created, each property may be set before issuing a\n     *  ``.send()`` to make the request.\n     */ constructor(url){\n        this.#url = String(url);\n        this.#allowInsecure = false;\n        this.#gzip = true;\n        this.#headers = {};\n        this.#method = \"\";\n        this.#timeout = 300000;\n        this.#throttle = {\n            slotInterval: SLOT_INTERVAL,\n            maxAttempts: MAX_ATTEMPTS\n        };\n        this.#getUrlFunc = null;\n    }\n    toString() {\n        return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#body ? (0, data_js_1.hexlify)(this.#body) : \"null\"}>`;\n    }\n    /**\n     *  Update the throttle parameters used to determine maximum\n     *  attempts and exponential-backoff properties.\n     */ setThrottleParams(params) {\n        if (params.slotInterval != null) {\n            this.#throttle.slotInterval = params.slotInterval;\n        }\n        if (params.maxAttempts != null) {\n            this.#throttle.maxAttempts = params.maxAttempts;\n        }\n    }\n    async #send(attempt, expires, delay, _request, _response) {\n        if (attempt >= this.#throttle.maxAttempts) {\n            return _response.makeServerError(\"exceeded maximum retry limit\");\n        }\n        (0, errors_js_1.assert)(getTime() <= expires, \"timeout\", \"TIMEOUT\", {\n            operation: \"request.send\",\n            reason: \"timeout\",\n            request: _request\n        });\n        if (delay > 0) {\n            await wait(delay);\n        }\n        let req = this.clone();\n        const scheme = (req.url.split(\":\")[0] || \"\").toLowerCase();\n        // Process any Gateways\n        if (scheme in Gateways) {\n            const result = await Gateways[scheme](req.url, checkSignal(_request.#signal));\n            if (result instanceof FetchResponse) {\n                let response = result;\n                if (this.processFunc) {\n                    checkSignal(_request.#signal);\n                    try {\n                        response = await this.processFunc(req, response);\n                    } catch (error) {\n                        // Something went wrong during processing; throw a 5xx server error\n                        if (error.throttle == null || typeof error.stall !== \"number\") {\n                            response.makeServerError(\"error in post-processing function\", error).assertOk();\n                        }\n                    // Ignore throttling\n                    }\n                }\n                return response;\n            }\n            req = result;\n        }\n        // We have a preflight function; update the request\n        if (this.preflightFunc) {\n            req = await this.preflightFunc(req);\n        }\n        const resp = await this.getUrlFunc(req, checkSignal(_request.#signal));\n        let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);\n        if (response.statusCode === 301 || response.statusCode === 302) {\n            // Redirect\n            try {\n                const location = response.headers.location || \"\";\n                return req.redirect(location).#send(attempt + 1, expires, 0, _request, response);\n            } catch (error) {}\n            // Things won't get any better on another attempt; abort\n            return response;\n        } else if (response.statusCode === 429) {\n            // Throttle\n            if (this.retryFunc == null || await this.retryFunc(req, response, attempt)) {\n                const retryAfter = response.headers[\"retry-after\"];\n                let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n                if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                    delay = parseInt(retryAfter);\n                }\n                return req.clone().#send(attempt + 1, expires, delay, _request, response);\n            }\n        }\n        if (this.processFunc) {\n            checkSignal(_request.#signal);\n            try {\n                response = await this.processFunc(req, response);\n            } catch (error) {\n                // Something went wrong during processing; throw a 5xx server error\n                if (error.throttle == null || typeof error.stall !== \"number\") {\n                    response.makeServerError(\"error in post-processing function\", error).assertOk();\n                }\n                // Throttle\n                let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n                ;\n                if (error.stall >= 0) {\n                    delay = error.stall;\n                }\n                return req.clone().#send(attempt + 1, expires, delay, _request, response);\n            }\n        }\n        return response;\n    }\n    /**\n     *  Resolves to the response by sending the request.\n     */ send() {\n        (0, errors_js_1.assert)(this.#signal == null, \"request already sent\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fetchRequest.send\"\n        });\n        this.#signal = new FetchCancelSignal(this);\n        return this.#send(0, getTime() + this.timeout, 0, this, new FetchResponse(0, \"\", {}, null, this));\n    }\n    /**\n     *  Cancels the inflight response, causing a ``CANCELLED``\n     *  error to be rejected from the [[send]].\n     */ cancel() {\n        (0, errors_js_1.assert)(this.#signal != null, \"request has not been sent\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fetchRequest.cancel\"\n        });\n        const signal = fetchSignals.get(this);\n        if (!signal) {\n            throw new Error(\"missing signal; should not happen\");\n        }\n        signal();\n    }\n    /**\n     *  Returns a new [[FetchRequest]] that represents the redirection\n     *  to %%location%%.\n     */ redirect(location) {\n        // Redirection; for now we only support absolute locataions\n        const current = this.url.split(\":\")[0].toLowerCase();\n        const target = location.split(\":\")[0].toLowerCase();\n        // Don't allow redirecting:\n        // - non-GET requests\n        // - downgrading the security (e.g. https => http)\n        // - to non-HTTP (or non-HTTPS) protocols [this could be relaxed?]\n        (0, errors_js_1.assert)(this.method === \"GET\" && (current !== \"https\" || target !== \"http\") && location.match(/^https?:/), `unsupported redirect`, \"UNSUPPORTED_OPERATION\", {\n            operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`\n        });\n        // Create a copy of this request, with a new URL\n        const req = new FetchRequest(location);\n        req.method = \"GET\";\n        req.allowGzip = this.allowGzip;\n        req.timeout = this.timeout;\n        req.#headers = Object.assign({}, this.#headers);\n        if (this.#body) {\n            req.#body = new Uint8Array(this.#body);\n        }\n        req.#bodyType = this.#bodyType;\n        // Do not forward credentials unless on the same domain; only absolute\n        //req.allowInsecure = false;\n        // paths are currently supported; may want a way to specify to forward?\n        //setStore(req.#props, \"creds\", getStore(this.#pros, \"creds\"));\n        return req;\n    }\n    /**\n     *  Create a new copy of this request.\n     */ clone() {\n        const clone = new FetchRequest(this.url);\n        // Preserve \"default method\" (i.e. null)\n        clone.#method = this.#method;\n        // Preserve \"default body\" with type, copying the Uint8Array is present\n        if (this.#body) {\n            clone.#body = this.#body;\n        }\n        clone.#bodyType = this.#bodyType;\n        // Preserve \"default headers\"\n        clone.#headers = Object.assign({}, this.#headers);\n        // Credentials is readonly, so we copy internally\n        clone.#creds = this.#creds;\n        if (this.allowGzip) {\n            clone.allowGzip = true;\n        }\n        clone.timeout = this.timeout;\n        if (this.allowInsecureAuthentication) {\n            clone.allowInsecureAuthentication = true;\n        }\n        clone.#preflight = this.#preflight;\n        clone.#process = this.#process;\n        clone.#retry = this.#retry;\n        clone.#getUrlFunc = this.#getUrlFunc;\n        return clone;\n    }\n    /**\n     *  Locks all static configuration for gateways and FetchGetUrlFunc\n     *  registration.\n     */ static lockConfig() {\n        locked = true;\n    }\n    /**\n     *  Get the current Gateway function for %%scheme%%.\n     */ static getGateway(scheme) {\n        return Gateways[scheme.toLowerCase()] || null;\n    }\n    /**\n     *  Use the %%func%% when fetching URIs using %%scheme%%.\n     *\n     *  This method affects all requests globally.\n     *\n     *  If [[lockConfig]] has been called, no change is made and this\n     *  throws.\n     */ static registerGateway(scheme, func) {\n        scheme = scheme.toLowerCase();\n        if (scheme === \"http\" || scheme === \"https\") {\n            throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);\n        }\n        if (locked) {\n            throw new Error(\"gateways locked\");\n        }\n        Gateways[scheme] = func;\n    }\n    /**\n     *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.\n     *\n     *  This method affects all requests globally.\n     *\n     *  If [[lockConfig]] has been called, no change is made and this\n     *  throws.\n     */ static registerGetUrl(getUrl) {\n        if (locked) {\n            throw new Error(\"gateways locked\");\n        }\n        defaultGetUrlFunc = getUrl;\n    }\n    /**\n     *  Creates a getUrl function that fetches content from HTTP and\n     *  HTTPS URLs.\n     *\n     *  The available %%options%% are dependent on the platform\n     *  implementation of the default getUrl function.\n     *\n     *  This is not generally something that is needed, but is useful\n     *  when trying to customize simple behaviour when fetching HTTP\n     *  content.\n     */ static createGetUrlFunc(options) {\n        return (0, geturl_js_1.createGetUrl)(options);\n    }\n    /**\n     *  Creates a function that can \"fetch\" data URIs.\n     *\n     *  Note that this is automatically done internally to support\n     *  data URIs, so it is not necessary to register it.\n     *\n     *  This is not generally something that is needed, but may\n     *  be useful in a wrapper to perfom custom data URI functionality.\n     */ static createDataGateway() {\n        return dataGatewayFunc;\n    }\n    /**\n     *  Creates a function that will fetch IPFS (unvalidated) from\n     *  a custom gateway baseUrl.\n     *\n     *  The default IPFS gateway used internally is\n     *  ``\"https:/\\/gateway.ipfs.io/ipfs/\"``.\n     */ static createIpfsGatewayFunc(baseUrl) {\n        return getIpfsGatewayFunc(baseUrl);\n    }\n}\nexports.FetchRequest = FetchRequest;\n;\n/**\n *  The response for a FetchREquest.\n */ class FetchResponse {\n    #statusCode;\n    #statusMessage;\n    #headers;\n    #body;\n    #request;\n    #error;\n    toString() {\n        return `<FetchResponse status=${this.statusCode} body=${this.#body ? (0, data_js_1.hexlify)(this.#body) : \"null\"}>`;\n    }\n    /**\n     *  The response status code.\n     */ get statusCode() {\n        return this.#statusCode;\n    }\n    /**\n     *  The response status message.\n     */ get statusMessage() {\n        return this.#statusMessage;\n    }\n    /**\n     *  The response headers. All keys are lower-case.\n     */ get headers() {\n        return Object.assign({}, this.#headers);\n    }\n    /**\n     *  The response body, or ``null`` if there was no body.\n     */ get body() {\n        return this.#body == null ? null : new Uint8Array(this.#body);\n    }\n    /**\n     *  The response body as a UTF-8 encoded string, or the empty\n     *  string (i.e. ``\"\"``) if there was no body.\n     *\n     *  An error is thrown if the body is invalid UTF-8 data.\n     */ get bodyText() {\n        try {\n            return this.#body == null ? \"\" : (0, utf8_js_1.toUtf8String)(this.#body);\n        } catch (error) {\n            (0, errors_js_1.assert)(false, \"response body is not valid UTF-8 data\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"bodyText\",\n                info: {\n                    response: this\n                }\n            });\n        }\n    }\n    /**\n     *  The response body, decoded as JSON.\n     *\n     *  An error is thrown if the body is invalid JSON-encoded data\n     *  or if there was no body.\n     */ get bodyJson() {\n        try {\n            return JSON.parse(this.bodyText);\n        } catch (error) {\n            (0, errors_js_1.assert)(false, \"response body is not valid JSON\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"bodyJson\",\n                info: {\n                    response: this\n                }\n            });\n        }\n    }\n    [Symbol.iterator]() {\n        const headers = this.headers;\n        const keys = Object.keys(headers);\n        let index = 0;\n        return {\n            next: ()=>{\n                if (index < keys.length) {\n                    const key = keys[index++];\n                    return {\n                        value: [\n                            key,\n                            headers[key]\n                        ],\n                        done: false\n                    };\n                }\n                return {\n                    value: undefined,\n                    done: true\n                };\n            }\n        };\n    }\n    constructor(statusCode, statusMessage, headers, body, request){\n        this.#statusCode = statusCode;\n        this.#statusMessage = statusMessage;\n        this.#headers = Object.keys(headers).reduce((accum, k)=>{\n            accum[k.toLowerCase()] = String(headers[k]);\n            return accum;\n        }, {});\n        this.#body = body == null ? null : new Uint8Array(body);\n        this.#request = request || null;\n        this.#error = {\n            message: \"\"\n        };\n    }\n    /**\n     *  Return a Response with matching headers and body, but with\n     *  an error status code (i.e. 599) and %%message%% with an\n     *  optional %%error%%.\n     */ makeServerError(message, error) {\n        let statusMessage;\n        if (!message) {\n            message = `${this.statusCode} ${this.statusMessage}`;\n            statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;\n        } else {\n            statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;\n        }\n        const response = new FetchResponse(599, statusMessage, this.headers, this.body, this.#request || undefined);\n        response.#error = {\n            message,\n            error\n        };\n        return response;\n    }\n    /**\n     *  If called within a [request.processFunc](FetchRequest-processFunc)\n     *  call, causes the request to retry as if throttled for %%stall%%\n     *  milliseconds.\n     */ throwThrottleError(message, stall) {\n        if (stall == null) {\n            stall = -1;\n        } else {\n            (0, errors_js_1.assertArgument)(Number.isInteger(stall) && stall >= 0, \"invalid stall timeout\", \"stall\", stall);\n        }\n        const error = new Error(message || \"throttling requests\");\n        (0, properties_js_1.defineProperties)(error, {\n            stall,\n            throttle: true\n        });\n        throw error;\n    }\n    /**\n     *  Get the header value for %%key%%, ignoring case.\n     */ getHeader(key) {\n        return this.headers[key.toLowerCase()];\n    }\n    /**\n     *  Returns true of the response has a body.\n     */ hasBody() {\n        return this.#body != null;\n    }\n    /**\n     *  The request made for this response.\n     */ get request() {\n        return this.#request;\n    }\n    /**\n     *  Returns true if this response was a success statusCode.\n     */ ok() {\n        return this.#error.message === \"\" && this.statusCode >= 200 && this.statusCode < 300;\n    }\n    /**\n     *  Throws a ``SERVER_ERROR`` if this response is not ok.\n     */ assertOk() {\n        if (this.ok()) {\n            return;\n        }\n        let { message, error } = this.#error;\n        if (message === \"\") {\n            message = `server response ${this.statusCode} ${this.statusMessage}`;\n        }\n        (0, errors_js_1.assert)(false, message, \"SERVER_ERROR\", {\n            request: this.request || \"unknown request\",\n            response: this,\n            error\n        });\n    }\n}\nexports.FetchResponse = FetchResponse;\nfunction getTime() {\n    return new Date().getTime();\n}\nfunction unpercent(value) {\n    return (0, utf8_js_1.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code)=>{\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\nfunction wait(delay) {\n    return new Promise((resolve)=>setTimeout(resolve, delay));\n} //# sourceMappingURL=fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/utils/fetch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/utils/fixednumber.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/utils/fixednumber.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FixedNumber = void 0;\n/**\n *  The **FixedNumber** class permits using values with decimal places,\n *  using fixed-pont math.\n *\n *  Fixed-point math is still based on integers under-the-hood, but uses an\n *  internal offset to store fractional components below, and each operation\n *  corrects for this after each operation.\n *\n *  @_section: api/utils/fixed-point-math:Fixed-Point Maths  [about-fixed-point-math]\n */ const data_js_1 = __webpack_require__(/*! ./data.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/data.js\");\nconst errors_js_1 = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/errors.js\");\nconst maths_js_1 = __webpack_require__(/*! ./maths.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/maths.js\");\nconst properties_js_1 = __webpack_require__(/*! ./properties.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/properties.js\");\nconst BN_N1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_5 = BigInt(5);\nconst _guard = {};\n// Constant to pull zeros from for multipliers\nlet Zeros = \"0000\";\nwhile(Zeros.length < 80){\n    Zeros += Zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getTens(decimals) {\n    let result = Zeros;\n    while(result.length < decimals){\n        result += result;\n    }\n    return BigInt(\"1\" + result.substring(0, decimals));\n}\nfunction checkValue(val, format, safeOp) {\n    const width = BigInt(format.width);\n    if (format.signed) {\n        const limit = BN_1 << width - BN_1;\n        (0, errors_js_1.assert)(safeOp == null || val >= -limit && val < limit, \"overflow\", \"NUMERIC_FAULT\", {\n            operation: safeOp,\n            fault: \"overflow\",\n            value: val\n        });\n        if (val > BN_0) {\n            val = (0, maths_js_1.fromTwos)((0, maths_js_1.mask)(val, width), width);\n        } else {\n            val = -(0, maths_js_1.fromTwos)((0, maths_js_1.mask)(-val, width), width);\n        }\n    } else {\n        const limit = BN_1 << width;\n        (0, errors_js_1.assert)(safeOp == null || val >= 0 && val < limit, \"overflow\", \"NUMERIC_FAULT\", {\n            operation: safeOp,\n            fault: \"overflow\",\n            value: val\n        });\n        val = (val % limit + limit) % limit & limit - BN_1;\n    }\n    return val;\n}\nfunction getFormat(value) {\n    if (typeof value === \"number\") {\n        value = `fixed128x${value}`;\n    }\n    let signed = true;\n    let width = 128;\n    let decimals = 18;\n    if (typeof value === \"string\") {\n        // Parse the format string\n        if (value === \"fixed\") {\n        // defaults...\n        } else if (value === \"ufixed\") {\n            signed = false;\n        } else {\n            const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n            (0, errors_js_1.assertArgument)(match, \"invalid fixed format\", \"format\", value);\n            signed = match[1] !== \"u\";\n            width = parseInt(match[2]);\n            decimals = parseInt(match[3]);\n        }\n    } else if (value) {\n        // Extract the values from the object\n        const v = value;\n        const check = (key, type, defaultValue)=>{\n            if (v[key] == null) {\n                return defaultValue;\n            }\n            (0, errors_js_1.assertArgument)(typeof v[key] === type, \"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, v[key]);\n            return v[key];\n        };\n        signed = check(\"signed\", \"boolean\", signed);\n        width = check(\"width\", \"number\", width);\n        decimals = check(\"decimals\", \"number\", decimals);\n    }\n    (0, errors_js_1.assertArgument)(width % 8 === 0, \"invalid FixedNumber width (not byte aligned)\", \"format.width\", width);\n    (0, errors_js_1.assertArgument)(decimals <= 80, \"invalid FixedNumber decimals (too large)\", \"format.decimals\", decimals);\n    const name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n    return {\n        signed,\n        width,\n        decimals,\n        name\n    };\n}\nfunction toString(val, decimals) {\n    let negative = \"\";\n    if (val < BN_0) {\n        negative = \"-\";\n        val *= BN_N1;\n    }\n    let str = val.toString();\n    // No decimal point for whole values\n    if (decimals === 0) {\n        return negative + str;\n    }\n    // Pad out to the whole component (including a whole digit)\n    while(str.length <= decimals){\n        str = Zeros + str;\n    }\n    // Insert the decimal point\n    const index = str.length - decimals;\n    str = str.substring(0, index) + \".\" + str.substring(index);\n    // Trim the whole component (leaving at least one 0)\n    while(str[0] === \"0\" && str[1] !== \".\"){\n        str = str.substring(1);\n    }\n    // Trim the decimal component (leaving at least one 0)\n    while(str[str.length - 1] === \"0\" && str[str.length - 2] !== \".\"){\n        str = str.substring(0, str.length - 1);\n    }\n    return negative + str;\n}\n/**\n *  A FixedNumber represents a value over its [[FixedFormat]]\n *  arithmetic field.\n *\n *  A FixedNumber can be used to perform math, losslessly, on\n *  values which have decmial places.\n *\n *  A FixedNumber has a fixed bit-width to store values in, and stores all\n *  values internally by multiplying the value by 10 raised to the power of\n *  %%decimals%%.\n *\n *  If operations are performed that cause a value to grow too high (close to\n *  positive infinity) or too low (close to negative infinity), the value\n *  is said to //overflow//.\n *\n *  For example, an 8-bit signed value, with 0 decimals may only be within\n *  the range ``-128`` to ``127``; so ``-128 - 1`` will overflow and become\n *  ``127``. Likewise, ``127 + 1`` will overflow and become ``-127``.\n *\n *  Many operation have a normal and //unsafe// variant. The normal variant\n *  will throw a [[NumericFaultError]] on any overflow, while the //unsafe//\n *  variant will silently allow overflow, corrupting its value value.\n *\n *  If operations are performed that cause a value to become too small\n *  (close to zero), the value loses precison and is said to //underflow//.\n *\n *  For example, an value with 1 decimal place may store a number as small\n *  as ``0.1``, but the value of ``0.1 / 2`` is ``0.05``, which cannot fit\n *  into 1 decimal place, so underflow occurs which means precision is lost\n *  and the value becomes ``0``.\n *\n *  Some operations have a normal and //signalling// variant. The normal\n *  variant will silently ignore underflow, while the //signalling// variant\n *  will thow a [[NumericFaultError]] on underflow.\n */ class FixedNumber {\n    #format;\n    // The actual value (accounting for decimals)\n    #val;\n    // A base-10 value to multiple values by to maintain the magnitude\n    #tens;\n    // Use this when changing this file to get some typing info,\n    // but then switch to any to mask the internal type\n    //constructor(guard: any, value: bigint, format: _FixedFormat) {\n    /**\n     *  @private\n     */ constructor(guard, value, format){\n        (0, errors_js_1.assertPrivate)(guard, _guard, \"FixedNumber\");\n        this.#val = value;\n        this.#format = format;\n        const _value = toString(value, format.decimals);\n        (0, properties_js_1.defineProperties)(this, {\n            format: format.name,\n            _value\n        });\n        this.#tens = getTens(format.decimals);\n    }\n    /**\n     *  If true, negative values are permitted, otherwise only\n     *  positive values and zero are allowed.\n     */ get signed() {\n        return this.#format.signed;\n    }\n    /**\n     *  The number of bits available to store the value.\n     */ get width() {\n        return this.#format.width;\n    }\n    /**\n     *  The number of decimal places in the fixed-point arithment field.\n     */ get decimals() {\n        return this.#format.decimals;\n    }\n    /**\n     *  The value as an integer, based on the smallest unit the\n     *  [[decimals]] allow.\n     */ get value() {\n        return this.#val;\n    }\n    #checkFormat(other) {\n        (0, errors_js_1.assertArgument)(this.format === other.format, \"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n    }\n    #checkValue(val, safeOp) {\n        /*\n                const width = BigInt(this.width);\n                if (this.signed) {\n                    const limit = (BN_1 << (width - BN_1));\n                    assert(safeOp == null || (val >= -limit  && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\n                        operation: <string>safeOp, fault: \"overflow\", value: val\n                    });\n        \n                    if (val > BN_0) {\n                        val = fromTwos(mask(val, width), width);\n                    } else {\n                        val = -fromTwos(mask(-val, width), width);\n                    }\n        \n                } else {\n                    const masked = mask(val, width);\n                    assert(safeOp == null || (val >= 0 && val === masked), \"overflow\", \"NUMERIC_FAULT\", {\n                        operation: <string>safeOp, fault: \"overflow\", value: val\n                    });\n                    val = masked;\n                }\n        */ val = checkValue(val, this.#format, safeOp);\n        return new FixedNumber(_guard, val, this.#format);\n    }\n    #add(o, safeOp) {\n        this.#checkFormat(o);\n        return this.#checkValue(this.#val + o.#val, safeOp);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% added\n     *  to %%other%%, ignoring overflow.\n     */ addUnsafe(other) {\n        return this.#add(other);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% added\n     *  to %%other%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs.\n     */ add(other) {\n        return this.#add(other, \"add\");\n    }\n    #sub(o, safeOp) {\n        this.#checkFormat(o);\n        return this.#checkValue(this.#val - o.#val, safeOp);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\n     *  from %%this%%, ignoring overflow.\n     */ subUnsafe(other) {\n        return this.#sub(other);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\n     *  from %%this%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs.\n     */ sub(other) {\n        return this.#sub(other, \"sub\");\n    }\n    #mul(o, safeOp) {\n        this.#checkFormat(o);\n        return this.#checkValue(this.#val * o.#val / this.#tens, safeOp);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n     *  by %%other%%, ignoring overflow and underflow (precision loss).\n     */ mulUnsafe(other) {\n        return this.#mul(other);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n     *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs.\n     */ mul(other) {\n        return this.#mul(other, \"mul\");\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n     *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs or if underflow (precision loss) occurs.\n     */ mulSignal(other) {\n        this.#checkFormat(other);\n        const value = this.#val * other.#val;\n        (0, errors_js_1.assert)(value % this.#tens === BN_0, \"precision lost during signalling mul\", \"NUMERIC_FAULT\", {\n            operation: \"mulSignal\",\n            fault: \"underflow\",\n            value: this\n        });\n        return this.#checkValue(value / this.#tens, \"mulSignal\");\n    }\n    #div(o, safeOp) {\n        (0, errors_js_1.assert)(o.#val !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n            operation: \"div\",\n            fault: \"divide-by-zero\",\n            value: this\n        });\n        this.#checkFormat(o);\n        return this.#checkValue(this.#val * this.#tens / o.#val, safeOp);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n     *  by %%other%%, ignoring underflow (precision loss). A\n     *  [[NumericFaultError]] is thrown if overflow occurs.\n     */ divUnsafe(other) {\n        return this.#div(other);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n     *  by %%other%%, ignoring underflow (precision loss). A\n     *  [[NumericFaultError]] is thrown if overflow occurs.\n     */ div(other) {\n        return this.#div(other, \"div\");\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n     *  by %%other%%. A [[NumericFaultError]] is thrown if underflow\n     *  (precision loss) occurs.\n     */ divSignal(other) {\n        (0, errors_js_1.assert)(other.#val !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n            operation: \"div\",\n            fault: \"divide-by-zero\",\n            value: this\n        });\n        this.#checkFormat(other);\n        const value = this.#val * this.#tens;\n        (0, errors_js_1.assert)(value % other.#val === BN_0, \"precision lost during signalling div\", \"NUMERIC_FAULT\", {\n            operation: \"divSignal\",\n            fault: \"underflow\",\n            value: this\n        });\n        return this.#checkValue(value / other.#val, \"divSignal\");\n    }\n    /**\n     *  Returns a comparison result between %%this%% and %%other%%.\n     *\n     *  This is suitable for use in sorting, where ``-1`` implies %%this%%\n     *  is smaller, ``1`` implies %%this%% is larger and ``0`` implies\n     *  both are equal.\n     */ cmp(other) {\n        let a = this.value, b = other.value;\n        // Coerce a and b to the same magnitude\n        const delta = this.decimals - other.decimals;\n        if (delta > 0) {\n            b *= getTens(delta);\n        } else if (delta < 0) {\n            a *= getTens(-delta);\n        }\n        // Comnpare\n        if (a < b) {\n            return -1;\n        }\n        if (a > b) {\n            return 1;\n        }\n        return 0;\n    }\n    /**\n     *  Returns true if %%other%% is equal to %%this%%.\n     */ eq(other) {\n        return this.cmp(other) === 0;\n    }\n    /**\n     *  Returns true if %%other%% is less than to %%this%%.\n     */ lt(other) {\n        return this.cmp(other) < 0;\n    }\n    /**\n     *  Returns true if %%other%% is less than or equal to %%this%%.\n     */ lte(other) {\n        return this.cmp(other) <= 0;\n    }\n    /**\n     *  Returns true if %%other%% is greater than to %%this%%.\n     */ gt(other) {\n        return this.cmp(other) > 0;\n    }\n    /**\n     *  Returns true if %%other%% is greater than or equal to %%this%%.\n     */ gte(other) {\n        return this.cmp(other) >= 0;\n    }\n    /**\n     *  Returns a new [[FixedNumber]] which is the largest **integer**\n     *  that is less than or equal to %%this%%.\n     *\n     *  The decimal component of the result will always be ``0``.\n     */ floor() {\n        let val = this.#val;\n        if (this.#val < BN_0) {\n            val -= this.#tens - BN_1;\n        }\n        val = this.#val / this.#tens * this.#tens;\n        return this.#checkValue(val, \"floor\");\n    }\n    /**\n     *  Returns a new [[FixedNumber]] which is the smallest **integer**\n     *  that is greater than or equal to %%this%%.\n     *\n     *  The decimal component of the result will always be ``0``.\n     */ ceiling() {\n        let val = this.#val;\n        if (this.#val > BN_0) {\n            val += this.#tens - BN_1;\n        }\n        val = this.#val / this.#tens * this.#tens;\n        return this.#checkValue(val, \"ceiling\");\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the decimal component\n     *  rounded up on ties at %%decimals%% places.\n     */ round(decimals) {\n        if (decimals == null) {\n            decimals = 0;\n        }\n        // Not enough precision to not already be rounded\n        if (decimals >= this.decimals) {\n            return this;\n        }\n        const delta = this.decimals - decimals;\n        const bump = BN_5 * getTens(delta - 1);\n        let value = this.value + bump;\n        const tens = getTens(delta);\n        value = value / tens * tens;\n        checkValue(value, this.#format, \"round\");\n        return new FixedNumber(_guard, value, this.#format);\n    }\n    /**\n     *  Returns true if %%this%% is equal to ``0``.\n     */ isZero() {\n        return this.#val === BN_0;\n    }\n    /**\n     *  Returns true if %%this%% is less than ``0``.\n     */ isNegative() {\n        return this.#val < BN_0;\n    }\n    /**\n     *  Returns the string representation of %%this%%.\n     */ toString() {\n        return this._value;\n    }\n    /**\n     *  Returns a float approximation.\n     *\n     *  Due to IEEE 754 precission (or lack thereof), this function\n     *  can only return an approximation and most values will contain\n     *  rounding errors.\n     */ toUnsafeFloat() {\n        return parseFloat(this.toString());\n    }\n    /**\n     *  Return a new [[FixedNumber]] with the same value but has had\n     *  its field set to %%format%%.\n     *\n     *  This will throw if the value cannot fit into %%format%%.\n     */ toFormat(format) {\n        return FixedNumber.fromString(this.toString(), format);\n    }\n    /**\n     *  Creates a new [[FixedNumber]] for %%value%% divided by\n     *  %%decimal%% places with %%format%%.\n     *\n     *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted\n     *  for %%decimals%%) cannot fit in %%format%%, either due to overflow\n     *  or underflow (precision loss).\n     */ static fromValue(_value, _decimals, _format) {\n        const decimals = _decimals == null ? 0 : (0, maths_js_1.getNumber)(_decimals);\n        const format = getFormat(_format);\n        let value = (0, maths_js_1.getBigInt)(_value, \"value\");\n        const delta = decimals - format.decimals;\n        if (delta > 0) {\n            const tens = getTens(delta);\n            (0, errors_js_1.assert)(value % tens === BN_0, \"value loses precision for format\", \"NUMERIC_FAULT\", {\n                operation: \"fromValue\",\n                fault: \"underflow\",\n                value: _value\n            });\n            value /= tens;\n        } else if (delta < 0) {\n            value *= getTens(-delta);\n        }\n        checkValue(value, format, \"fromValue\");\n        return new FixedNumber(_guard, value, format);\n    }\n    /**\n     *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.\n     *\n     *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\n     *  in %%format%%, either due to overflow or underflow (precision loss).\n     */ static fromString(_value, _format) {\n        const match = _value.match(/^(-?)([0-9]*)\\.?([0-9]*)$/);\n        (0, errors_js_1.assertArgument)(match && match[2].length + match[3].length > 0, \"invalid FixedNumber string value\", \"value\", _value);\n        const format = getFormat(_format);\n        let whole = match[2] || \"0\", decimal = match[3] || \"\";\n        // Pad out the decimals\n        while(decimal.length < format.decimals){\n            decimal += Zeros;\n        }\n        // Check precision is safe\n        (0, errors_js_1.assert)(decimal.substring(format.decimals).match(/^0*$/), \"too many decimals for format\", \"NUMERIC_FAULT\", {\n            operation: \"fromString\",\n            fault: \"underflow\",\n            value: _value\n        });\n        // Remove extra padding\n        decimal = decimal.substring(0, format.decimals);\n        const value = BigInt(match[1] + whole + decimal);\n        checkValue(value, format, \"fromString\");\n        return new FixedNumber(_guard, value, format);\n    }\n    /**\n     *  Creates a new [[FixedNumber]] with the big-endian representation\n     *  %%value%% with %%format%%.\n     *\n     *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\n     *  in %%format%% due to overflow.\n     */ static fromBytes(_value, _format) {\n        let value = (0, maths_js_1.toBigInt)((0, data_js_1.getBytes)(_value, \"value\"));\n        const format = getFormat(_format);\n        if (format.signed) {\n            value = (0, maths_js_1.fromTwos)(value, format.width);\n        }\n        checkValue(value, format, \"fromBytes\");\n        return new FixedNumber(_guard, value, format);\n    }\n}\nexports.FixedNumber = FixedNumber; //const f1 = FixedNumber.fromString(\"12.56\", \"fixed16x2\");\n //const f2 = FixedNumber.fromString(\"0.3\", \"fixed16x2\");\n //console.log(f1.divSignal(f2));\n //const BUMP = FixedNumber.from(\"0.5\");\n //# sourceMappingURL=fixednumber.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/utils/fixednumber.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/utils/geturl.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/utils/geturl.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getUrl = exports.createGetUrl = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/ethers/node_modules/tslib/tslib.es6.js\");\nconst http_1 = tslib_1.__importDefault(__webpack_require__(/*! http */ \"http\"));\nconst https_1 = tslib_1.__importDefault(__webpack_require__(/*! https */ \"https\"));\nconst zlib_1 = __webpack_require__(/*! zlib */ \"zlib\");\nconst errors_js_1 = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/errors.js\");\nconst data_js_1 = __webpack_require__(/*! ./data.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/data.js\");\n/**\n *  @_ignore:\n */ function createGetUrl(options) {\n    async function getUrl(req, signal) {\n        const protocol = req.url.split(\":\")[0].toLowerCase();\n        (0, errors_js_1.assert)(protocol === \"http\" || protocol === \"https\", `unsupported protocol ${protocol}`, \"UNSUPPORTED_OPERATION\", {\n            info: {\n                protocol\n            },\n            operation: \"request\"\n        });\n        (0, errors_js_1.assert)(protocol === \"https\" || !req.credentials || req.allowInsecureAuthentication, \"insecure authorized connections unsupported\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"request\"\n        });\n        const method = req.method;\n        const headers = Object.assign({}, req.headers);\n        const reqOptions = {\n            method,\n            headers\n        };\n        if (options) {\n            if (options.agent) {\n                reqOptions.agent = options.agent;\n            }\n        }\n        const request = (protocol === \"http\" ? http_1.default : https_1.default).request(req.url, reqOptions);\n        request.setTimeout(req.timeout);\n        const body = req.body;\n        if (body) {\n            request.write(Buffer.from(body));\n        }\n        request.end();\n        return new Promise((resolve, reject)=>{\n            // @TODO: Node 15 added AbortSignal; once we drop support for\n            // Node14, we can add that in here too\n            request.once(\"response\", (resp)=>{\n                const statusCode = resp.statusCode || 0;\n                const statusMessage = resp.statusMessage || \"\";\n                const headers = Object.keys(resp.headers || {}).reduce((accum, name)=>{\n                    let value = resp.headers[name] || \"\";\n                    if (Array.isArray(value)) {\n                        value = value.join(\", \");\n                    }\n                    accum[name] = value;\n                    return accum;\n                }, {});\n                let body = null;\n                //resp.setEncoding(\"utf8\");\n                resp.on(\"data\", (chunk)=>{\n                    if (signal) {\n                        try {\n                            signal.checkSignal();\n                        } catch (error) {\n                            return reject(error);\n                        }\n                    }\n                    if (body == null) {\n                        body = chunk;\n                    } else {\n                        const newBody = new Uint8Array(body.length + chunk.length);\n                        newBody.set(body, 0);\n                        newBody.set(chunk, body.length);\n                        body = newBody;\n                    }\n                });\n                resp.on(\"end\", ()=>{\n                    if (headers[\"content-encoding\"] === \"gzip\" && body) {\n                        body = (0, data_js_1.getBytes)((0, zlib_1.gunzipSync)(body));\n                    }\n                    resolve({\n                        statusCode,\n                        statusMessage,\n                        headers,\n                        body\n                    });\n                });\n                resp.on(\"error\", (error)=>{\n                    //@TODO: Should this just return nornal response with a server error?\n                    error.response = {\n                        statusCode,\n                        statusMessage,\n                        headers,\n                        body\n                    };\n                    reject(error);\n                });\n            });\n            request.on(\"error\", (error)=>{\n                reject(error);\n            });\n        });\n    }\n    return getUrl;\n}\nexports.createGetUrl = createGetUrl;\n// @TODO: remove in v7; provided for backwards compat\nconst defaultGetUrl = createGetUrl({});\n/**\n *  @_ignore:\n */ async function getUrl(req, signal) {\n    return defaultGetUrl(req, signal);\n}\nexports.getUrl = getUrl; //# sourceMappingURL=geturl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/utils/geturl.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/utils/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  There are many simple utilities required to interact with\n *  Ethereum and to simplify the library, without increasing\n *  the library dependencies for simple functions.\n *\n *  @_section api/utils:Utilities  [about-utils]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.encodeRlp = exports.decodeRlp = exports.defineProperties = exports.resolveProperties = exports.toQuantity = exports.toBeArray = exports.toBeHex = exports.toNumber = exports.toBigInt = exports.getUint = exports.getNumber = exports.getBigInt = exports.mask = exports.toTwos = exports.fromTwos = exports.FixedNumber = exports.FetchCancelSignal = exports.FetchResponse = exports.FetchRequest = exports.EventPayload = exports.makeError = exports.assertNormalize = exports.assertPrivate = exports.assertArgumentCount = exports.assertArgument = exports.assert = exports.isError = exports.isCallException = exports.zeroPadBytes = exports.zeroPadValue = exports.stripZerosLeft = exports.dataSlice = exports.dataLength = exports.concat = exports.hexlify = exports.isBytesLike = exports.isHexString = exports.getBytesCopy = exports.getBytes = exports.encodeBase64 = exports.decodeBase64 = exports.encodeBase58 = exports.decodeBase58 = void 0;\nexports.uuidV4 = exports.Utf8ErrorFuncs = void 0;\nvar base58_js_1 = __webpack_require__(/*! ./base58.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/base58.js\");\nObject.defineProperty(exports, \"decodeBase58\", ({\n    enumerable: true,\n    get: function() {\n        return base58_js_1.decodeBase58;\n    }\n}));\nObject.defineProperty(exports, \"encodeBase58\", ({\n    enumerable: true,\n    get: function() {\n        return base58_js_1.encodeBase58;\n    }\n}));\nvar base64_js_1 = __webpack_require__(/*! ./base64.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/base64.js\");\nObject.defineProperty(exports, \"decodeBase64\", ({\n    enumerable: true,\n    get: function() {\n        return base64_js_1.decodeBase64;\n    }\n}));\nObject.defineProperty(exports, \"encodeBase64\", ({\n    enumerable: true,\n    get: function() {\n        return base64_js_1.encodeBase64;\n    }\n}));\nvar data_js_1 = __webpack_require__(/*! ./data.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/data.js\");\nObject.defineProperty(exports, \"getBytes\", ({\n    enumerable: true,\n    get: function() {\n        return data_js_1.getBytes;\n    }\n}));\nObject.defineProperty(exports, \"getBytesCopy\", ({\n    enumerable: true,\n    get: function() {\n        return data_js_1.getBytesCopy;\n    }\n}));\nObject.defineProperty(exports, \"isHexString\", ({\n    enumerable: true,\n    get: function() {\n        return data_js_1.isHexString;\n    }\n}));\nObject.defineProperty(exports, \"isBytesLike\", ({\n    enumerable: true,\n    get: function() {\n        return data_js_1.isBytesLike;\n    }\n}));\nObject.defineProperty(exports, \"hexlify\", ({\n    enumerable: true,\n    get: function() {\n        return data_js_1.hexlify;\n    }\n}));\nObject.defineProperty(exports, \"concat\", ({\n    enumerable: true,\n    get: function() {\n        return data_js_1.concat;\n    }\n}));\nObject.defineProperty(exports, \"dataLength\", ({\n    enumerable: true,\n    get: function() {\n        return data_js_1.dataLength;\n    }\n}));\nObject.defineProperty(exports, \"dataSlice\", ({\n    enumerable: true,\n    get: function() {\n        return data_js_1.dataSlice;\n    }\n}));\nObject.defineProperty(exports, \"stripZerosLeft\", ({\n    enumerable: true,\n    get: function() {\n        return data_js_1.stripZerosLeft;\n    }\n}));\nObject.defineProperty(exports, \"zeroPadValue\", ({\n    enumerable: true,\n    get: function() {\n        return data_js_1.zeroPadValue;\n    }\n}));\nObject.defineProperty(exports, \"zeroPadBytes\", ({\n    enumerable: true,\n    get: function() {\n        return data_js_1.zeroPadBytes;\n    }\n}));\nvar errors_js_1 = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/errors.js\");\nObject.defineProperty(exports, \"isCallException\", ({\n    enumerable: true,\n    get: function() {\n        return errors_js_1.isCallException;\n    }\n}));\nObject.defineProperty(exports, \"isError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_js_1.isError;\n    }\n}));\nObject.defineProperty(exports, \"assert\", ({\n    enumerable: true,\n    get: function() {\n        return errors_js_1.assert;\n    }\n}));\nObject.defineProperty(exports, \"assertArgument\", ({\n    enumerable: true,\n    get: function() {\n        return errors_js_1.assertArgument;\n    }\n}));\nObject.defineProperty(exports, \"assertArgumentCount\", ({\n    enumerable: true,\n    get: function() {\n        return errors_js_1.assertArgumentCount;\n    }\n}));\nObject.defineProperty(exports, \"assertPrivate\", ({\n    enumerable: true,\n    get: function() {\n        return errors_js_1.assertPrivate;\n    }\n}));\nObject.defineProperty(exports, \"assertNormalize\", ({\n    enumerable: true,\n    get: function() {\n        return errors_js_1.assertNormalize;\n    }\n}));\nObject.defineProperty(exports, \"makeError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_js_1.makeError;\n    }\n}));\nvar events_js_1 = __webpack_require__(/*! ./events.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/events.js\");\nObject.defineProperty(exports, \"EventPayload\", ({\n    enumerable: true,\n    get: function() {\n        return events_js_1.EventPayload;\n    }\n}));\nvar fetch_js_1 = __webpack_require__(/*! ./fetch.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/fetch.js\");\nObject.defineProperty(exports, \"FetchRequest\", ({\n    enumerable: true,\n    get: function() {\n        return fetch_js_1.FetchRequest;\n    }\n}));\nObject.defineProperty(exports, \"FetchResponse\", ({\n    enumerable: true,\n    get: function() {\n        return fetch_js_1.FetchResponse;\n    }\n}));\nObject.defineProperty(exports, \"FetchCancelSignal\", ({\n    enumerable: true,\n    get: function() {\n        return fetch_js_1.FetchCancelSignal;\n    }\n}));\nvar fixednumber_js_1 = __webpack_require__(/*! ./fixednumber.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/fixednumber.js\");\nObject.defineProperty(exports, \"FixedNumber\", ({\n    enumerable: true,\n    get: function() {\n        return fixednumber_js_1.FixedNumber;\n    }\n}));\nvar maths_js_1 = __webpack_require__(/*! ./maths.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/maths.js\");\nObject.defineProperty(exports, \"fromTwos\", ({\n    enumerable: true,\n    get: function() {\n        return maths_js_1.fromTwos;\n    }\n}));\nObject.defineProperty(exports, \"toTwos\", ({\n    enumerable: true,\n    get: function() {\n        return maths_js_1.toTwos;\n    }\n}));\nObject.defineProperty(exports, \"mask\", ({\n    enumerable: true,\n    get: function() {\n        return maths_js_1.mask;\n    }\n}));\nObject.defineProperty(exports, \"getBigInt\", ({\n    enumerable: true,\n    get: function() {\n        return maths_js_1.getBigInt;\n    }\n}));\nObject.defineProperty(exports, \"getNumber\", ({\n    enumerable: true,\n    get: function() {\n        return maths_js_1.getNumber;\n    }\n}));\nObject.defineProperty(exports, \"getUint\", ({\n    enumerable: true,\n    get: function() {\n        return maths_js_1.getUint;\n    }\n}));\nObject.defineProperty(exports, \"toBigInt\", ({\n    enumerable: true,\n    get: function() {\n        return maths_js_1.toBigInt;\n    }\n}));\nObject.defineProperty(exports, \"toNumber\", ({\n    enumerable: true,\n    get: function() {\n        return maths_js_1.toNumber;\n    }\n}));\nObject.defineProperty(exports, \"toBeHex\", ({\n    enumerable: true,\n    get: function() {\n        return maths_js_1.toBeHex;\n    }\n}));\nObject.defineProperty(exports, \"toBeArray\", ({\n    enumerable: true,\n    get: function() {\n        return maths_js_1.toBeArray;\n    }\n}));\nObject.defineProperty(exports, \"toQuantity\", ({\n    enumerable: true,\n    get: function() {\n        return maths_js_1.toQuantity;\n    }\n}));\nvar properties_js_1 = __webpack_require__(/*! ./properties.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/properties.js\");\nObject.defineProperty(exports, \"resolveProperties\", ({\n    enumerable: true,\n    get: function() {\n        return properties_js_1.resolveProperties;\n    }\n}));\nObject.defineProperty(exports, \"defineProperties\", ({\n    enumerable: true,\n    get: function() {\n        return properties_js_1.defineProperties;\n    }\n}));\nvar rlp_decode_js_1 = __webpack_require__(/*! ./rlp-decode.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/rlp-decode.js\");\nObject.defineProperty(exports, \"decodeRlp\", ({\n    enumerable: true,\n    get: function() {\n        return rlp_decode_js_1.decodeRlp;\n    }\n}));\nvar rlp_encode_js_1 = __webpack_require__(/*! ./rlp-encode.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/rlp-encode.js\");\nObject.defineProperty(exports, \"encodeRlp\", ({\n    enumerable: true,\n    get: function() {\n        return rlp_encode_js_1.encodeRlp;\n    }\n}));\nvar units_js_1 = __webpack_require__(/*! ./units.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/units.js\");\nObject.defineProperty(exports, \"formatEther\", ({\n    enumerable: true,\n    get: function() {\n        return units_js_1.formatEther;\n    }\n}));\nObject.defineProperty(exports, \"parseEther\", ({\n    enumerable: true,\n    get: function() {\n        return units_js_1.parseEther;\n    }\n}));\nObject.defineProperty(exports, \"formatUnits\", ({\n    enumerable: true,\n    get: function() {\n        return units_js_1.formatUnits;\n    }\n}));\nObject.defineProperty(exports, \"parseUnits\", ({\n    enumerable: true,\n    get: function() {\n        return units_js_1.parseUnits;\n    }\n}));\nvar utf8_js_1 = __webpack_require__(/*! ./utf8.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/utf8.js\");\nObject.defineProperty(exports, \"toUtf8Bytes\", ({\n    enumerable: true,\n    get: function() {\n        return utf8_js_1.toUtf8Bytes;\n    }\n}));\nObject.defineProperty(exports, \"toUtf8CodePoints\", ({\n    enumerable: true,\n    get: function() {\n        return utf8_js_1.toUtf8CodePoints;\n    }\n}));\nObject.defineProperty(exports, \"toUtf8String\", ({\n    enumerable: true,\n    get: function() {\n        return utf8_js_1.toUtf8String;\n    }\n}));\nObject.defineProperty(exports, \"Utf8ErrorFuncs\", ({\n    enumerable: true,\n    get: function() {\n        return utf8_js_1.Utf8ErrorFuncs;\n    }\n}));\nvar uuid_js_1 = __webpack_require__(/*! ./uuid.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/uuid.js\");\nObject.defineProperty(exports, \"uuidV4\", ({\n    enumerable: true,\n    get: function() {\n        return uuid_js_1.uuidV4;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/utils/maths.js":
/*!*********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/utils/maths.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.toQuantity = exports.toBeArray = exports.toBeHex = exports.toNumber = exports.getNumber = exports.toBigInt = exports.getUint = exports.getBigInt = exports.mask = exports.toTwos = exports.fromTwos = void 0;\n/**\n *  Some mathematic operations.\n *\n *  @_subsection: api/utils:Math Helpers  [about-maths]\n */ const data_js_1 = __webpack_require__(/*! ./data.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/data.js\");\nconst errors_js_1 = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/errors.js\");\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\n//const BN_Max256 = (BN_1 << BigInt(256)) - BN_1;\n// IEEE 754 support 53-bits of mantissa\nconst maxValue = 0x1fffffffffffff;\n/**\n *  Convert %%value%% from a twos-compliment representation of %%width%%\n *  bits to its value.\n *\n *  If the highest bit is ``1``, the result will be negative.\n */ function fromTwos(_value, _width) {\n    const value = getUint(_value, \"value\");\n    const width = BigInt(getNumber(_width, \"width\"));\n    (0, errors_js_1.assert)(value >> width === BN_0, \"overflow\", \"NUMERIC_FAULT\", {\n        operation: \"fromTwos\",\n        fault: \"overflow\",\n        value: _value\n    });\n    // Top bit set; treat as a negative value\n    if (value >> width - BN_1) {\n        const mask = (BN_1 << width) - BN_1;\n        return -((~value & mask) + BN_1);\n    }\n    return value;\n}\nexports.fromTwos = fromTwos;\n/**\n *  Convert %%value%% to a twos-compliment representation of\n *  %%width%% bits.\n *\n *  The result will always be positive.\n */ function toTwos(_value, _width) {\n    let value = getBigInt(_value, \"value\");\n    const width = BigInt(getNumber(_width, \"width\"));\n    const limit = BN_1 << width - BN_1;\n    if (value < BN_0) {\n        value = -value;\n        (0, errors_js_1.assert)(value <= limit, \"too low\", \"NUMERIC_FAULT\", {\n            operation: \"toTwos\",\n            fault: \"overflow\",\n            value: _value\n        });\n        const mask = (BN_1 << width) - BN_1;\n        return (~value & mask) + BN_1;\n    } else {\n        (0, errors_js_1.assert)(value < limit, \"too high\", \"NUMERIC_FAULT\", {\n            operation: \"toTwos\",\n            fault: \"overflow\",\n            value: _value\n        });\n    }\n    return value;\n}\nexports.toTwos = toTwos;\n/**\n *  Mask %%value%% with a bitmask of %%bits%% ones.\n */ function mask(_value, _bits) {\n    const value = getUint(_value, \"value\");\n    const bits = BigInt(getNumber(_bits, \"bits\"));\n    return value & (BN_1 << bits) - BN_1;\n}\nexports.mask = mask;\n/**\n *  Gets a BigInt from %%value%%. If it is an invalid value for\n *  a BigInt, then an ArgumentError will be thrown for %%name%%.\n */ function getBigInt(value, name) {\n    switch(typeof value){\n        case \"bigint\":\n            return value;\n        case \"number\":\n            (0, errors_js_1.assertArgument)(Number.isInteger(value), \"underflow\", name || \"value\", value);\n            (0, errors_js_1.assertArgument)(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return BigInt(value);\n        case \"string\":\n            try {\n                if (value === \"\") {\n                    throw new Error(\"empty string\");\n                }\n                if (value[0] === \"-\" && value[1] !== \"-\") {\n                    return -BigInt(value.substring(1));\n                }\n                return BigInt(value);\n            } catch (e) {\n                (0, errors_js_1.assertArgument)(false, `invalid BigNumberish string: ${e.message}`, name || \"value\", value);\n            }\n    }\n    (0, errors_js_1.assertArgument)(false, \"invalid BigNumberish value\", name || \"value\", value);\n}\nexports.getBigInt = getBigInt;\n/**\n *  Returns %%value%% as a bigint, validating it is valid as a bigint\n *  value and that it is positive.\n */ function getUint(value, name) {\n    const result = getBigInt(value, name);\n    (0, errors_js_1.assert)(result >= BN_0, \"unsigned value cannot be negative\", \"NUMERIC_FAULT\", {\n        fault: \"overflow\",\n        operation: \"getUint\",\n        value\n    });\n    return result;\n}\nexports.getUint = getUint;\nconst Nibbles = \"0123456789abcdef\";\n/*\n * Converts %%value%% to a BigInt. If %%value%% is a Uint8Array, it\n * is treated as Big Endian data.\n */ function toBigInt(value) {\n    if (value instanceof Uint8Array) {\n        let result = \"0x0\";\n        for (const v of value){\n            result += Nibbles[v >> 4];\n            result += Nibbles[v & 0x0f];\n        }\n        return BigInt(result);\n    }\n    return getBigInt(value);\n}\nexports.toBigInt = toBigInt;\n/**\n *  Gets a //number// from %%value%%. If it is an invalid value for\n *  a //number//, then an ArgumentError will be thrown for %%name%%.\n */ function getNumber(value, name) {\n    switch(typeof value){\n        case \"bigint\":\n            (0, errors_js_1.assertArgument)(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return Number(value);\n        case \"number\":\n            (0, errors_js_1.assertArgument)(Number.isInteger(value), \"underflow\", name || \"value\", value);\n            (0, errors_js_1.assertArgument)(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return value;\n        case \"string\":\n            try {\n                if (value === \"\") {\n                    throw new Error(\"empty string\");\n                }\n                return getNumber(BigInt(value), name);\n            } catch (e) {\n                (0, errors_js_1.assertArgument)(false, `invalid numeric string: ${e.message}`, name || \"value\", value);\n            }\n    }\n    (0, errors_js_1.assertArgument)(false, \"invalid numeric value\", name || \"value\", value);\n}\nexports.getNumber = getNumber;\n/**\n *  Converts %%value%% to a number. If %%value%% is a Uint8Array, it\n *  is treated as Big Endian data. Throws if the value is not safe.\n */ function toNumber(value) {\n    return getNumber(toBigInt(value));\n}\nexports.toNumber = toNumber;\n/**\n *  Converts %%value%% to a Big Endian hexstring, optionally padded to\n *  %%width%% bytes.\n */ function toBeHex(_value, _width) {\n    const value = getUint(_value, \"value\");\n    let result = value.toString(16);\n    if (_width == null) {\n        // Ensure the value is of even length\n        if (result.length % 2) {\n            result = \"0\" + result;\n        }\n    } else {\n        const width = getNumber(_width, \"width\");\n        (0, errors_js_1.assert)(width * 2 >= result.length, `value exceeds width (${width} bits)`, \"NUMERIC_FAULT\", {\n            operation: \"toBeHex\",\n            fault: \"overflow\",\n            value: _value\n        });\n        // Pad the value to the required width\n        while(result.length < width * 2){\n            result = \"0\" + result;\n        }\n    }\n    return \"0x\" + result;\n}\nexports.toBeHex = toBeHex;\n/**\n *  Converts %%value%% to a Big Endian Uint8Array.\n */ function toBeArray(_value) {\n    const value = getUint(_value, \"value\");\n    if (value === BN_0) {\n        return new Uint8Array([]);\n    }\n    let hex = value.toString(16);\n    if (hex.length % 2) {\n        hex = \"0\" + hex;\n    }\n    const result = new Uint8Array(hex.length / 2);\n    for(let i = 0; i < result.length; i++){\n        const offset = i * 2;\n        result[i] = parseInt(hex.substring(offset, offset + 2), 16);\n    }\n    return result;\n}\nexports.toBeArray = toBeArray;\n/**\n *  Returns a [[HexString]] for %%value%% safe to use as a //Quantity//.\n *\n *  A //Quantity// does not have and leading 0 values unless the value is\n *  the literal value `0x0`. This is most commonly used for JSSON-RPC\n *  numeric values.\n */ function toQuantity(value) {\n    let result = (0, data_js_1.hexlify)((0, data_js_1.isBytesLike)(value) ? value : toBeArray(value)).substring(2);\n    while(result.startsWith(\"0\")){\n        result = result.substring(1);\n    }\n    if (result === \"\") {\n        result = \"0\";\n    }\n    return \"0x\" + result;\n}\nexports.toQuantity = toQuantity; //# sourceMappingURL=maths.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy91dGlscy9tYXRocy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsa0JBQWtCLEdBQUdBLGlCQUFpQixHQUFHQSxlQUFlLEdBQUdBLGdCQUFnQixHQUFHQSxpQkFBaUIsR0FBR0EsZ0JBQWdCLEdBQUdBLGVBQWUsR0FBR0EsaUJBQWlCLEdBQUdBLFlBQVksR0FBR0EsY0FBYyxHQUFHQSxnQkFBZ0IsR0FBRyxLQUFLO0FBQ25OOzs7O0NBSUMsR0FDRCxNQUFNYSxZQUFZQyxtQkFBT0EsQ0FBQyx5RUFBVztBQUNyQyxNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQyw2RUFBYTtBQUN6QyxNQUFNRSxPQUFPQyxPQUFPO0FBQ3BCLE1BQU1DLE9BQU9ELE9BQU87QUFDcEIsaURBQWlEO0FBQ2pELHVDQUF1QztBQUN2QyxNQUFNRSxXQUFXO0FBQ2pCOzs7OztDQUtDLEdBQ0QsU0FBU1AsU0FBU1EsTUFBTSxFQUFFQyxNQUFNO0lBQzVCLE1BQU1wQixRQUFRTyxRQUFRWSxRQUFRO0lBQzlCLE1BQU1FLFFBQVFMLE9BQU9YLFVBQVVlLFFBQVE7SUFDdEMsSUFBR04sWUFBWVEsTUFBTSxFQUFFLFNBQVVELFVBQVdOLE1BQU0sWUFBWSxpQkFBaUI7UUFDNUVRLFdBQVc7UUFBWUMsT0FBTztRQUFZeEIsT0FBT21CO0lBQ3JEO0lBQ0EseUNBQXlDO0lBQ3pDLElBQUluQixTQUFVcUIsUUFBUUosTUFBTztRQUN6QixNQUFNUixPQUFPLENBQUNRLFFBQVFJLEtBQUksSUFBS0o7UUFDL0IsT0FBTyxDQUFFLEVBQUMsQ0FBRWpCLFFBQVNTLElBQUcsSUFBS1EsSUFBRztJQUNwQztJQUNBLE9BQU9qQjtBQUNYO0FBQ0FELGdCQUFnQixHQUFHWTtBQUNuQjs7Ozs7Q0FLQyxHQUNELFNBQVNELE9BQU9TLE1BQU0sRUFBRUMsTUFBTTtJQUMxQixJQUFJ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LFFBQVFpQyxTQUFTLENBQUM7SUFDNUcsTUFBT0csT0FBT1ksVUFBVSxDQUFDLEtBQU07UUFDM0JaLFNBQVNBLE9BQU9ILFNBQVMsQ0FBQztJQUM5QjtJQUNBLElBQUlHLFdBQVcsSUFBSTtRQUNmQSxTQUFTO0lBQ2I7SUFDQSxPQUFPLE9BQU9BO0FBQ2xCO0FBQ0FyQyxrQkFBa0IsR0FBR0UsWUFDckIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvdXRpbHMvbWF0aHMuanM/MDUwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudG9RdWFudGl0eSA9IGV4cG9ydHMudG9CZUFycmF5ID0gZXhwb3J0cy50b0JlSGV4ID0gZXhwb3J0cy50b051bWJlciA9IGV4cG9ydHMuZ2V0TnVtYmVyID0gZXhwb3J0cy50b0JpZ0ludCA9IGV4cG9ydHMuZ2V0VWludCA9IGV4cG9ydHMuZ2V0QmlnSW50ID0gZXhwb3J0cy5tYXNrID0gZXhwb3J0cy50b1R3b3MgPSBleHBvcnRzLmZyb21Ud29zID0gdm9pZCAwO1xuLyoqXG4gKiAgU29tZSBtYXRoZW1hdGljIG9wZXJhdGlvbnMuXG4gKlxuICogIEBfc3Vic2VjdGlvbjogYXBpL3V0aWxzOk1hdGggSGVscGVycyAgW2Fib3V0LW1hdGhzXVxuICovXG5jb25zdCBkYXRhX2pzXzEgPSByZXF1aXJlKFwiLi9kYXRhLmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi9lcnJvcnMuanNcIik7XG5jb25zdCBCTl8wID0gQmlnSW50KDApO1xuY29uc3QgQk5fMSA9IEJpZ0ludCgxKTtcbi8vY29uc3QgQk5fTWF4MjU2ID0gKEJOXzEgPDwgQmlnSW50KDI1NikpIC0gQk5fMTtcbi8vIElFRUUgNzU0IHN1cHBvcnQgNTMtYml0cyBvZiBtYW50aXNzYVxuY29uc3QgbWF4VmFsdWUgPSAweDFmZmZmZmZmZmZmZmZmO1xuLyoqXG4gKiAgQ29udmVydCAlJXZhbHVlJSUgZnJvbSBhIHR3b3MtY29tcGxpbWVudCByZXByZXNlbnRhdGlvbiBvZiAlJXdpZHRoJSVcbiAqICBiaXRzIHRvIGl0cyB2YWx1ZS5cbiAqXG4gKiAgSWYgdGhlIGhpZ2hlc3QgYml0IGlzIGBgMWBgLCB0aGUgcmVzdWx0IHdpbGwgYmUgbmVnYXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGZyb21Ud29zKF92YWx1ZSwgX3dpZHRoKSB7XG4gICAgY29uc3QgdmFsdWUgPSBnZXRVaW50KF92YWx1ZSwgXCJ2YWx1ZVwiKTtcbiAgICBjb25zdCB3aWR0aCA9IEJpZ0ludChnZXROdW1iZXIoX3dpZHRoLCBcIndpZHRoXCIpKTtcbiAgICAoMCwgZXJyb3JzX2pzXzEuYXNzZXJ0KSgodmFsdWUgPj4gd2lkdGgpID09PSBCTl8wLCBcIm92ZXJmbG93XCIsIFwiTlVNRVJJQ19GQVVMVFwiLCB7XG4gICAgICAgIG9wZXJhdGlvbjogXCJmcm9tVHdvc1wiLCBmYXVsdDogXCJvdmVyZmxvd1wiLCB2YWx1ZTogX3ZhbHVlXG4gICAgfSk7XG4gICAgLy8gVG9wIGJpdCBzZXQ7IHRyZWF0IGFzIGEgbmVnYXRpdmUgdmFsdWVcbiAgICBpZiAodmFsdWUgPj4gKHdpZHRoIC0gQk5fMSkpIHtcbiAgICAgICAgY29uc3QgbWFzayA9IChCTl8xIDw8IHdpZHRoKSAtIEJOXzE7XG4gICAgICAgIHJldHVybiAtKCgofnZhbHVlKSAmIG1hc2spICsgQk5fMSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmV4cG9ydHMuZnJvbVR3b3MgPSBmcm9tVHdvcztcbi8qKlxuICogIENvbnZlcnQgJSV2YWx1ZSUlIHRvIGEgdHdvcy1jb21wbGltZW50IHJlcHJlc2VudGF0aW9uIG9mXG4gKiAgJSV3aWR0aCUlIGJpdHMuXG4gKlxuICogIFRoZSByZXN1bHQgd2lsbCBhbHdheXMgYmUgcG9zaXRpdmUuXG4gKi9cbmZ1bmN0aW9uIHRvVHdvcyhfdmFsdWUsIF93aWR0aCkge1xuICAgIGxldCB2YWx1ZSA9IGdldEJpZ0ludChfdmFsdWUsIFwidmFsdWVcIik7XG4gICAgY29uc3Qgd2lkdGggPSBCaWdJbnQoZ2V0TnVtYmVyKF93aWR0aCwgXCJ3aWR0aFwiKSk7XG4gICAgY29uc3QgbGltaXQgPSAoQk5fMSA8PCAod2lkdGggLSBCTl8xKSk7XG4gICAgaWYgKHZhbHVlIDwgQk5fMCkge1xuICAgICAgICB2YWx1ZSA9IC12YWx1ZTtcbiAgICAgICAgKDAsIGVycm9yc19qc18xLmFzc2VydCkodmFsdWUgPD0gbGltaXQsIFwidG9vIGxvd1wiLCBcIk5VTUVSSUNfRkFVTFRcIiwge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiBcInRvVHdvc1wiLCBmYXVsdDogXCJvdmVyZmxvd1wiLCB2YWx1ZTogX3ZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBtYXNrID0gKEJOXzEgPDwgd2lkdGgpIC0gQk5fMTtcbiAgICAgICAgcmV0dXJuICgofnZhbHVlKSAmIG1hc2spICsgQk5fMTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgICgwLCBlcnJvcnNfanNfMS5hc3NlcnQpKHZhbHVlIDwgbGltaXQsIFwidG9vIGhpZ2hcIiwgXCJOVU1FUklDX0ZBVUxUXCIsIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogXCJ0b1R3b3NcIiwgZmF1bHQ6IFwib3ZlcmZsb3dcIiwgdmFsdWU6IF92YWx1ZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZXhwb3J0cy50b1R3b3MgPSB0b1R3b3M7XG4vKipcbiAqICBNYXNrICUldmFsdWUlJSB3aXRoIGEgYml0bWFzayBvZiAlJWJpdHMlJSBvbmVzLlxuICovXG5mdW5jdGlvbiBtYXNrKF92YWx1ZSwgX2JpdHMpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGdldFVpbnQoX3ZhbHVlLCBcInZhbHVlXCIpO1xuICAgIGNvbnN0IGJpdHMgPSBCaWdJbnQoZ2V0TnVtYmVyKF9iaXRzLCBcImJpdHNcIikpO1xuICAgIHJldHVybiB2YWx1ZSAmICgoQk5fMSA8PCBiaXRzKSAtIEJOXzEpO1xufVxuZXhwb3J0cy5tYXNrID0gbWFzaztcbi8qKlxuICogIEdldHMgYSBCaWdJbnQgZnJvbSAlJXZhbHVlJSUuIElmIGl0IGlzIGFuIGludmFsaWQgdmFsdWUgZm9yXG4gKiAgYSBCaWdJbnQsIHRoZW4gYW4gQXJndW1lbnRFcnJvciB3aWxsIGJlIHRocm93biBmb3IgJSVuYW1lJSUuXG4gKi9cbmZ1bmN0aW9uIGdldEJpZ0ludCh2YWx1ZSwgbmFtZSkge1xuICAgIHN3aXRjaCAodHlwZW9mICh2YWx1ZSkpIHtcbiAgICAgICAgY2FzZSBcImJpZ2ludFwiOiByZXR1cm4gdmFsdWU7XG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgICgwLCBlcnJvcnNfanNfMS5hc3NlcnRBcmd1bWVudCkoTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSksIFwidW5kZXJmbG93XCIsIG5hbWUgfHwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICAoMCwgZXJyb3JzX2pzXzEuYXNzZXJ0QXJndW1lbnQpKHZhbHVlID49IC1tYXhWYWx1ZSAmJiB2YWx1ZSA8PSBtYXhWYWx1ZSwgXCJvdmVyZmxvd1wiLCBuYW1lIHx8IFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIEJpZ0ludCh2YWx1ZSk7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImVtcHR5IHN0cmluZ1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlWzBdID09PSBcIi1cIiAmJiB2YWx1ZVsxXSAhPT0gXCItXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC1CaWdJbnQodmFsdWUuc3Vic3RyaW5nKDEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJpZ0ludCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICgwLCBlcnJvcnNfanNfMS5hc3NlcnRBcmd1bWVudCkoZmFsc2UsIGBpbnZhbGlkIEJpZ051bWJlcmlzaCBzdHJpbmc6ICR7ZS5tZXNzYWdlfWAsIG5hbWUgfHwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgfVxuICAgICgwLCBlcnJvcnNfanNfMS5hc3NlcnRBcmd1bWVudCkoZmFsc2UsIFwiaW52YWxpZCBCaWdOdW1iZXJpc2ggdmFsdWVcIiwgbmFtZSB8fCBcInZhbHVlXCIsIHZhbHVlKTtcbn1cbmV4cG9ydHMuZ2V0QmlnSW50ID0gZ2V0QmlnSW50O1xuLyoqXG4gKiAgUmV0dXJucyAlJXZhbHVlJSUgYXMgYSBiaWdpbnQsIHZhbGlkYXRpbmcgaXQgaXMgdmFsaWQgYXMgYSBiaWdpbnRcbiAqICB2YWx1ZSBhbmQgdGhhdCBpdCBpcyBwb3NpdGl2ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VWludCh2YWx1ZSwgbmFtZSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGdldEJpZ0ludCh2YWx1ZSwgbmFtZSk7XG4gICAgKDAsIGVycm9yc19qc18xLmFzc2VydCkocmVzdWx0ID49IEJOXzAsIFwidW5zaWduZWQgdmFsdWUgY2Fubm90IGJlIG5lZ2F0aXZlXCIsIFwiTlVNRVJJQ19GQVVMVFwiLCB7XG4gICAgICAgIGZhdWx0OiBcIm92ZXJmbG93XCIsIG9wZXJhdGlvbjogXCJnZXRVaW50XCIsIHZhbHVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuZ2V0VWludCA9IGdldFVpbnQ7XG5jb25zdCBOaWJibGVzID0gXCIwMTIzNDU2Nzg5YWJjZGVmXCI7XG4vKlxuICogQ29udmVydHMgJSV2YWx1ZSUlIHRvIGEgQmlnSW50LiBJZiAlJXZhbHVlJSUgaXMgYSBVaW50OEFycmF5LCBpdFxuICogaXMgdHJlYXRlZCBhcyBCaWcgRW5kaWFuIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIHRvQmlnSW50KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gXCIweDBcIjtcbiAgICAgICAgZm9yIChjb25zdCB2IG9mIHZhbHVlKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gTmliYmxlc1t2ID4+IDRdO1xuICAgICAgICAgICAgcmVzdWx0ICs9IE5pYmJsZXNbdiAmIDB4MGZdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBCaWdJbnQocmVzdWx0KTtcbiAgICB9XG4gICAgcmV0dXJuIGdldEJpZ0ludCh2YWx1ZSk7XG59XG5leHBvcnRzLnRvQmlnSW50ID0gdG9CaWdJbnQ7XG4vKipcbiAqICBHZXRzIGEgLy9udW1iZXIvLyBmcm9tICUldmFsdWUlJS4gSWYgaXQgaXMgYW4gaW52YWxpZCB2YWx1ZSBmb3JcbiAqICBhIC8vbnVtYmVyLy8sIHRoZW4gYW4gQXJndW1lbnRFcnJvciB3aWxsIGJlIHRocm93biBmb3IgJSVuYW1lJSUuXG4gKi9cbmZ1bmN0aW9uIGdldE51bWJlcih2YWx1ZSwgbmFtZSkge1xuICAgIHN3aXRjaCAodHlwZW9mICh2YWx1ZSkpIHtcbiAgICAgICAgY2FzZSBcImJpZ2ludFwiOlxuICAgICAgICAgICAgKDAsIGVycm9yc19qc18xLmFzc2VydEFyZ3VtZW50KSh2YWx1ZSA+PSAtbWF4VmFsdWUgJiYgdmFsdWUgPD0gbWF4VmFsdWUsIFwib3ZlcmZsb3dcIiwgbmFtZSB8fCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIodmFsdWUpO1xuICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICAoMCwgZXJyb3JzX2pzXzEuYXNzZXJ0QXJndW1lbnQpKE51bWJlci5pc0ludGVnZXIodmFsdWUpLCBcInVuZGVyZmxvd1wiLCBuYW1lIHx8IFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgKDAsIGVycm9yc19qc18xLmFzc2VydEFyZ3VtZW50KSh2YWx1ZSA+PSAtbWF4VmFsdWUgJiYgdmFsdWUgPD0gbWF4VmFsdWUsIFwib3ZlcmZsb3dcIiwgbmFtZSB8fCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZW1wdHkgc3RyaW5nXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TnVtYmVyKEJpZ0ludCh2YWx1ZSksIG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAoMCwgZXJyb3JzX2pzXzEuYXNzZXJ0QXJndW1lbnQpKGZhbHNlLCBgaW52YWxpZCBudW1lcmljIHN0cmluZzogJHtlLm1lc3NhZ2V9YCwgbmFtZSB8fCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICB9XG4gICAgKDAsIGVycm9yc19qc18xLmFzc2VydEFyZ3VtZW50KShmYWxzZSwgXCJpbnZhbGlkIG51bWVyaWMgdmFsdWVcIiwgbmFtZSB8fCBcInZhbHVlXCIsIHZhbHVlKTtcbn1cbmV4cG9ydHMuZ2V0TnVtYmVyID0gZ2V0TnVtYmVyO1xuLyoqXG4gKiAgQ29udmVydHMgJSV2YWx1ZSUlIHRvIGEgbnVtYmVyLiBJZiAlJXZhbHVlJSUgaXMgYSBVaW50OEFycmF5LCBpdFxuICogIGlzIHRyZWF0ZWQgYXMgQmlnIEVuZGlhbiBkYXRhLiBUaHJvd3MgaWYgdGhlIHZhbHVlIGlzIG5vdCBzYWZlLlxuICovXG5mdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiBnZXROdW1iZXIodG9CaWdJbnQodmFsdWUpKTtcbn1cbmV4cG9ydHMudG9OdW1iZXIgPSB0b051bWJlcjtcbi8qKlxuICogIENvbnZlcnRzICUldmFsdWUlJSB0byBhIEJpZyBFbmRpYW4gaGV4c3RyaW5nLCBvcHRpb25hbGx5IHBhZGRlZCB0b1xuICogICUld2lkdGglJSBieXRlcy5cbiAqL1xuZnVuY3Rpb24gdG9CZUhleChfdmFsdWUsIF93aWR0aCkge1xuICAgIGNvbnN0IHZhbHVlID0gZ2V0VWludChfdmFsdWUsIFwidmFsdWVcIik7XG4gICAgbGV0IHJlc3VsdCA9IHZhbHVlLnRvU3RyaW5nKDE2KTtcbiAgICBpZiAoX3dpZHRoID09IG51bGwpIHtcbiAgICAgICAgLy8gRW5zdXJlIHRoZSB2YWx1ZSBpcyBvZiBldmVuIGxlbmd0aFxuICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCAlIDIpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IFwiMFwiICsgcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCB3aWR0aCA9IGdldE51bWJlcihfd2lkdGgsIFwid2lkdGhcIik7XG4gICAgICAgICgwLCBlcnJvcnNfanNfMS5hc3NlcnQpKHdpZHRoICogMiA+PSByZXN1bHQubGVuZ3RoLCBgdmFsdWUgZXhjZWVkcyB3aWR0aCAoJHt3aWR0aH0gYml0cylgLCBcIk5VTUVSSUNfRkFVTFRcIiwge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiBcInRvQmVIZXhcIixcbiAgICAgICAgICAgIGZhdWx0OiBcIm92ZXJmbG93XCIsXG4gICAgICAgICAgICB2YWx1ZTogX3ZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBQYWQgdGhlIHZhbHVlIHRvIHRoZSByZXF1aXJlZCB3aWR0aFxuICAgICAgICB3aGlsZSAocmVzdWx0Lmxlbmd0aCA8ICh3aWR0aCAqIDIpKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBcIjBcIiArIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gXCIweFwiICsgcmVzdWx0O1xufVxuZXhwb3J0cy50b0JlSGV4ID0gdG9CZUhleDtcbi8qKlxuICogIENvbnZlcnRzICUldmFsdWUlJSB0byBhIEJpZyBFbmRpYW4gVWludDhBcnJheS5cbiAqL1xuZnVuY3Rpb24gdG9CZUFycmF5KF92YWx1ZSkge1xuICAgIGNvbnN0IHZhbHVlID0gZ2V0VWludChfdmFsdWUsIFwidmFsdWVcIik7XG4gICAgaWYgKHZhbHVlID09PSBCTl8wKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbXSk7XG4gICAgfVxuICAgIGxldCBoZXggPSB2YWx1ZS50b1N0cmluZygxNik7XG4gICAgaWYgKGhleC5sZW5ndGggJSAyKSB7XG4gICAgICAgIGhleCA9IFwiMFwiICsgaGV4O1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhBcnJheShoZXgubGVuZ3RoIC8gMik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gaSAqIDI7XG4gICAgICAgIHJlc3VsdFtpXSA9IHBhcnNlSW50KGhleC5zdWJzdHJpbmcob2Zmc2V0LCBvZmZzZXQgKyAyKSwgMTYpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy50b0JlQXJyYXkgPSB0b0JlQXJyYXk7XG4vKipcbiAqICBSZXR1cm5zIGEgW1tIZXhTdHJpbmddXSBmb3IgJSV2YWx1ZSUlIHNhZmUgdG8gdXNlIGFzIGEgLy9RdWFudGl0eS8vLlxuICpcbiAqICBBIC8vUXVhbnRpdHkvLyBkb2VzIG5vdCBoYXZlIGFuZCBsZWFkaW5nIDAgdmFsdWVzIHVubGVzcyB0aGUgdmFsdWUgaXNcbiAqICB0aGUgbGl0ZXJhbCB2YWx1ZSBgMHgwYC4gVGhpcyBpcyBtb3N0IGNvbW1vbmx5IHVzZWQgZm9yIEpTU09OLVJQQ1xuICogIG51bWVyaWMgdmFsdWVzLlxuICovXG5mdW5jdGlvbiB0b1F1YW50aXR5KHZhbHVlKSB7XG4gICAgbGV0IHJlc3VsdCA9ICgwLCBkYXRhX2pzXzEuaGV4bGlmeSkoKDAsIGRhdGFfanNfMS5pc0J5dGVzTGlrZSkodmFsdWUpID8gdmFsdWUgOiB0b0JlQXJyYXkodmFsdWUpKS5zdWJzdHJpbmcoMik7XG4gICAgd2hpbGUgKHJlc3VsdC5zdGFydHNXaXRoKFwiMFwiKSkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuc3Vic3RyaW5nKDEpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0ID09PSBcIlwiKSB7XG4gICAgICAgIHJlc3VsdCA9IFwiMFwiO1xuICAgIH1cbiAgICByZXR1cm4gXCIweFwiICsgcmVzdWx0O1xufVxuZXhwb3J0cy50b1F1YW50aXR5ID0gdG9RdWFudGl0eTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hdGhzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvUXVhbnRpdHkiLCJ0b0JlQXJyYXkiLCJ0b0JlSGV4IiwidG9OdW1iZXIiLCJnZXROdW1iZXIiLCJ0b0JpZ0ludCIsImdldFVpbnQiLCJnZXRCaWdJbnQiLCJtYXNrIiwidG9Ud29zIiwiZnJvbVR3b3MiLCJkYXRhX2pzXzEiLCJyZXF1aXJlIiwiZXJyb3JzX2pzXzEiLCJCTl8wIiwiQmlnSW50IiwiQk5fMSIsIm1heFZhbHVlIiwiX3ZhbHVlIiwiX3dpZHRoIiwid2lkdGgiLCJhc3NlcnQiLCJvcGVyYXRpb24iLCJmYXVsdCIsImxpbWl0IiwiX2JpdHMiLCJiaXRzIiwibmFtZSIsImFzc2VydEFyZ3VtZW50IiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiRXJyb3IiLCJzdWJzdHJpbmciLCJlIiwibWVzc2FnZSIsInJlc3VsdCIsIk5pYmJsZXMiLCJVaW50OEFycmF5IiwidiIsInRvU3RyaW5nIiwibGVuZ3RoIiwiaGV4IiwiaSIsIm9mZnNldCIsInBhcnNlSW50IiwiaGV4bGlmeSIsImlzQnl0ZXNMaWtlIiwic3RhcnRzV2l0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/utils/maths.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/utils/properties.js":
/*!**************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/utils/properties.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n *  Property helper functions.\n *\n *  @_subsection api/utils:Properties  [about-properties]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.defineProperties = exports.resolveProperties = void 0;\nfunction checkType(value, type, name) {\n    const types = type.split(\"|\").map((t)=>t.trim());\n    for(let i = 0; i < types.length; i++){\n        switch(type){\n            case \"any\":\n                return;\n            case \"bigint\":\n            case \"boolean\":\n            case \"number\":\n            case \"string\":\n                if (typeof value === type) {\n                    return;\n                }\n        }\n    }\n    const error = new Error(`invalid value for type ${type}`);\n    error.code = \"INVALID_ARGUMENT\";\n    error.argument = `value.${name}`;\n    error.value = value;\n    throw error;\n}\n/**\n *  Resolves to a new object that is a copy of %%value%%, but with all\n *  values resolved.\n */ async function resolveProperties(value) {\n    const keys = Object.keys(value);\n    const results = await Promise.all(keys.map((k)=>Promise.resolve(value[k])));\n    return results.reduce((accum, v, index)=>{\n        accum[keys[index]] = v;\n        return accum;\n    }, {});\n}\nexports.resolveProperties = resolveProperties;\n/**\n *  Assigns the %%values%% to %%target%% as read-only values.\n *\n *  It %%types%% is specified, the values are checked.\n */ function defineProperties(target, values, types) {\n    for(let key in values){\n        let value = values[key];\n        const type = types ? types[key] : null;\n        if (type) {\n            checkType(value, type, key);\n        }\n        Object.defineProperty(target, key, {\n            enumerable: true,\n            value,\n            writable: false\n        });\n    }\n}\nexports.defineProperties = defineProperties; //# sourceMappingURL=properties.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy91dGlscy9wcm9wZXJ0aWVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Q0FJQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsd0JBQXdCLEdBQUdBLHlCQUF5QixHQUFHLEtBQUs7QUFDNUQsU0FBU0ksVUFBVUgsS0FBSyxFQUFFSSxJQUFJLEVBQUVDLElBQUk7SUFDaEMsTUFBTUMsUUFBUUYsS0FBS0csS0FBSyxDQUFDLEtBQUtDLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRUMsSUFBSTtJQUM3QyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUwsTUFBTU0sTUFBTSxFQUFFRCxJQUFLO1FBQ25DLE9BQVFQO1lBQ0osS0FBSztnQkFDRDtZQUNKLEtBQUs7WUFDTCxLQUFLO1lBQ0wsS0FBSztZQUNMLEtBQUs7Z0JBQ0QsSUFBSSxPQUFRSixVQUFXSSxNQUFNO29CQUN6QjtnQkFDSjtRQUNSO0lBQ0o7SUFDQSxNQUFNUyxRQUFRLElBQUlDLE1BQU0sQ0FBQyx1QkFBdUIsRUFBRVYsS0FBSyxDQUFDO0lBQ3hEUyxNQUFNRSxJQUFJLEdBQUc7SUFDYkYsTUFBTUcsUUFBUSxHQUFHLENBQUMsTUFBTSxFQUFFWCxLQUFLLENBQUM7SUFDaENRLE1BQU1iLEtBQUssR0FBR0E7SUFDZCxNQUFNYTtBQUNWO0FBQ0E7OztDQUdDLEdBQ0QsZUFBZVgsa0JBQWtCRixLQUFLO0lBQ2xDLE1BQU1pQixPQUFPcEIsT0FBT29CLElBQUksQ0FBQ2pCO0lBQ3pCLE1BQU1rQixVQUFVLE1BQU1DLFFBQVFDLEdBQUcsQ0FBQ0gsS0FBS1QsR0FBRyxDQUFDLENBQUNhLElBQU1GLFFBQVFHLE9BQU8sQ0FBQ3RCLEtBQUssQ0FBQ3FCLEVBQUU7SUFDMUUsT0FBT0gsUUFBUUssTUFBTSxDQUFDLENBQUNDLE9BQU9DLEdBQUdDO1FBQzdCRixLQUFLLENBQUNQLElBQUksQ0FBQ1MsTUFBTSxDQUFDLEdBQUdEO1FBQ3JCLE9BQU9EO0lBQ1gsR0FBRyxDQUFDO0FBQ1I7QUFDQXpCLHlCQUF5QixHQUFHRztBQUM1Qjs7OztDQUlDLEdBQ0QsU0FBU0QsaUJBQWlCMEIsTUFBTSxFQUFFQyxNQUFNLEVBQUV0QixLQUFLO0lBQzNDLElBQUssSUFBSXVCLE9BQU9ELE9BQVE7UUFDcEIsSUFBSTVCLFFBQVE0QixNQUFNLENBQUNDLElBQUk7UUFDdkIsTUFBTXpCLE9BQVFFLFFBQVFBLEtBQUssQ0FBQ3VCLElBQUksR0FBRztRQUNuQyxJQUFJekIsTUFBTTtZQUNORCxVQUFVSCxPQUFPSSxNQUFNeUI7UUFDM0I7UUFDQWhDLE9BQU9DLGNBQWMsQ0FBQzZCLFFBQVFFLEtBQUs7WUFBRUMsWUFBWTtZQUFNOUI7WUFBTytCLFVBQVU7UUFBTTtJQUNsRjtBQUNKO0FBQ0FoQyx3QkFBd0IsR0FBR0Usa0JBQzNCLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL3V0aWxzL3Byb3BlcnRpZXMuanM/YTk4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogIFByb3BlcnR5IGhlbHBlciBmdW5jdGlvbnMuXG4gKlxuICogIEBfc3Vic2VjdGlvbiBhcGkvdXRpbHM6UHJvcGVydGllcyAgW2Fib3V0LXByb3BlcnRpZXNdXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmaW5lUHJvcGVydGllcyA9IGV4cG9ydHMucmVzb2x2ZVByb3BlcnRpZXMgPSB2b2lkIDA7XG5mdW5jdGlvbiBjaGVja1R5cGUodmFsdWUsIHR5cGUsIG5hbWUpIHtcbiAgICBjb25zdCB0eXBlcyA9IHR5cGUuc3BsaXQoXCJ8XCIpLm1hcCh0ID0+IHQudHJpbSgpKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImFueVwiOlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSB0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYGludmFsaWQgdmFsdWUgZm9yIHR5cGUgJHt0eXBlfWApO1xuICAgIGVycm9yLmNvZGUgPSBcIklOVkFMSURfQVJHVU1FTlRcIjtcbiAgICBlcnJvci5hcmd1bWVudCA9IGB2YWx1ZS4ke25hbWV9YDtcbiAgICBlcnJvci52YWx1ZSA9IHZhbHVlO1xuICAgIHRocm93IGVycm9yO1xufVxuLyoqXG4gKiAgUmVzb2x2ZXMgdG8gYSBuZXcgb2JqZWN0IHRoYXQgaXMgYSBjb3B5IG9mICUldmFsdWUlJSwgYnV0IHdpdGggYWxsXG4gKiAgdmFsdWVzIHJlc29sdmVkLlxuICovXG5hc3luYyBmdW5jdGlvbiByZXNvbHZlUHJvcGVydGllcyh2YWx1ZSkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKGtleXMubWFwKChrKSA9PiBQcm9taXNlLnJlc29sdmUodmFsdWVba10pKSk7XG4gICAgcmV0dXJuIHJlc3VsdHMucmVkdWNlKChhY2N1bSwgdiwgaW5kZXgpID0+IHtcbiAgICAgICAgYWNjdW1ba2V5c1tpbmRleF1dID0gdjtcbiAgICAgICAgcmV0dXJuIGFjY3VtO1xuICAgIH0sIHt9KTtcbn1cbmV4cG9ydHMucmVzb2x2ZVByb3BlcnRpZXMgPSByZXNvbHZlUHJvcGVydGllcztcbi8qKlxuICogIEFzc2lnbnMgdGhlICUldmFsdWVzJSUgdG8gJSV0YXJnZXQlJSBhcyByZWFkLW9ubHkgdmFsdWVzLlxuICpcbiAqICBJdCAlJXR5cGVzJSUgaXMgc3BlY2lmaWVkLCB0aGUgdmFsdWVzIGFyZSBjaGVja2VkLlxuICovXG5mdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgdmFsdWVzLCB0eXBlcykge1xuICAgIGZvciAobGV0IGtleSBpbiB2YWx1ZXMpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gdmFsdWVzW2tleV07XG4gICAgICAgIGNvbnN0IHR5cGUgPSAodHlwZXMgPyB0eXBlc1trZXldIDogbnVsbCk7XG4gICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgICBjaGVja1R5cGUodmFsdWUsIHR5cGUsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlLCB3cml0YWJsZTogZmFsc2UgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZpbmVQcm9wZXJ0aWVzID0gZGVmaW5lUHJvcGVydGllcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3BlcnRpZXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmaW5lUHJvcGVydGllcyIsInJlc29sdmVQcm9wZXJ0aWVzIiwiY2hlY2tUeXBlIiwidHlwZSIsIm5hbWUiLCJ0eXBlcyIsInNwbGl0IiwibWFwIiwidCIsInRyaW0iLCJpIiwibGVuZ3RoIiwiZXJyb3IiLCJFcnJvciIsImNvZGUiLCJhcmd1bWVudCIsImtleXMiLCJyZXN1bHRzIiwiUHJvbWlzZSIsImFsbCIsImsiLCJyZXNvbHZlIiwicmVkdWNlIiwiYWNjdW0iLCJ2IiwiaW5kZXgiLCJ0YXJnZXQiLCJ2YWx1ZXMiLCJrZXkiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/utils/properties.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/utils/rlp-decode.js":
/*!**************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/utils/rlp-decode.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n//See: https://github.com/ethereum/wiki/wiki/RLP\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decodeRlp = void 0;\nconst data_js_1 = __webpack_require__(/*! ./data.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/data.js\");\nconst errors_js_1 = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/errors.js\");\nconst data_js_2 = __webpack_require__(/*! ./data.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/data.js\");\nfunction hexlifyByte(value) {\n    let result = value.toString(16);\n    while(result.length < 2){\n        result = \"0\" + result;\n    }\n    return \"0x\" + result;\n}\nfunction unarrayifyInteger(data, offset, length) {\n    let result = 0;\n    for(let i = 0; i < length; i++){\n        result = result * 256 + data[offset + i];\n    }\n    return result;\n}\nfunction _decodeChildren(data, offset, childOffset, length) {\n    const result = [];\n    while(childOffset < offset + 1 + length){\n        const decoded = _decode(data, childOffset);\n        result.push(decoded.result);\n        childOffset += decoded.consumed;\n        (0, errors_js_1.assert)(childOffset <= offset + 1 + length, \"child data too short\", \"BUFFER_OVERRUN\", {\n            buffer: data,\n            length,\n            offset\n        });\n    }\n    return {\n        consumed: 1 + length,\n        result: result\n    };\n}\n// returns { consumed: number, result: Object }\nfunction _decode(data, offset) {\n    (0, errors_js_1.assert)(data.length !== 0, \"data too short\", \"BUFFER_OVERRUN\", {\n        buffer: data,\n        length: 0,\n        offset: 1\n    });\n    const checkOffset = (offset)=>{\n        (0, errors_js_1.assert)(offset <= data.length, \"data short segment too short\", \"BUFFER_OVERRUN\", {\n            buffer: data,\n            length: data.length,\n            offset\n        });\n    };\n    // Array with extra length prefix\n    if (data[offset] >= 0xf8) {\n        const lengthLength = data[offset] - 0xf7;\n        checkOffset(offset + 1 + lengthLength);\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        checkOffset(offset + 1 + lengthLength + length);\n        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);\n    } else if (data[offset] >= 0xc0) {\n        const length = data[offset] - 0xc0;\n        checkOffset(offset + 1 + length);\n        return _decodeChildren(data, offset, offset + 1, length);\n    } else if (data[offset] >= 0xb8) {\n        const lengthLength = data[offset] - 0xb7;\n        checkOffset(offset + 1 + lengthLength);\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        checkOffset(offset + 1 + lengthLength + length);\n        const result = (0, data_js_1.hexlify)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));\n        return {\n            consumed: 1 + lengthLength + length,\n            result: result\n        };\n    } else if (data[offset] >= 0x80) {\n        const length = data[offset] - 0x80;\n        checkOffset(offset + 1 + length);\n        const result = (0, data_js_1.hexlify)(data.slice(offset + 1, offset + 1 + length));\n        return {\n            consumed: 1 + length,\n            result: result\n        };\n    }\n    return {\n        consumed: 1,\n        result: hexlifyByte(data[offset])\n    };\n}\n/**\n *  Decodes %%data%% into the structured data it represents.\n */ function decodeRlp(_data) {\n    const data = (0, data_js_2.getBytes)(_data, \"data\");\n    const decoded = _decode(data, 0);\n    (0, errors_js_1.assertArgument)(decoded.consumed === data.length, \"unexpected junk after rlp payload\", \"data\", _data);\n    return decoded.result;\n}\nexports.decodeRlp = decodeRlp; //# sourceMappingURL=rlp-decode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/utils/rlp-decode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/utils/rlp-encode.js":
/*!**************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/utils/rlp-encode.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n//See: https://github.com/ethereum/wiki/wiki/RLP\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.encodeRlp = void 0;\nconst data_js_1 = __webpack_require__(/*! ./data.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/data.js\");\nfunction arrayifyInteger(value) {\n    const result = [];\n    while(value){\n        result.unshift(value & 0xff);\n        value >>= 8;\n    }\n    return result;\n}\nfunction _encode(object) {\n    if (Array.isArray(object)) {\n        let payload = [];\n        object.forEach(function(child) {\n            payload = payload.concat(_encode(child));\n        });\n        if (payload.length <= 55) {\n            payload.unshift(0xc0 + payload.length);\n            return payload;\n        }\n        const length = arrayifyInteger(payload.length);\n        length.unshift(0xf7 + length.length);\n        return length.concat(payload);\n    }\n    const data = Array.prototype.slice.call((0, data_js_1.getBytes)(object, \"object\"));\n    if (data.length === 1 && data[0] <= 0x7f) {\n        return data;\n    } else if (data.length <= 55) {\n        data.unshift(0x80 + data.length);\n        return data;\n    }\n    const length = arrayifyInteger(data.length);\n    length.unshift(0xb7 + length.length);\n    return length.concat(data);\n}\nconst nibbles = \"0123456789abcdef\";\n/**\n *  Encodes %%object%% as an RLP-encoded [[DataHexString]].\n */ function encodeRlp(object) {\n    let result = \"0x\";\n    for (const v of _encode(object)){\n        result += nibbles[v >> 4];\n        result += nibbles[v & 0xf];\n    }\n    return result;\n}\nexports.encodeRlp = encodeRlp; //# sourceMappingURL=rlp-encode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy91dGlscy9ybHAtZW5jb2RlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsZ0RBQWdEO0FBQ2hEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUcsS0FBSztBQUN6QixNQUFNRyxZQUFZQyxtQkFBT0EsQ0FBQyx5RUFBVztBQUNyQyxTQUFTQyxnQkFBZ0JKLEtBQUs7SUFDMUIsTUFBTUssU0FBUyxFQUFFO0lBQ2pCLE1BQU9MLE1BQU87UUFDVkssT0FBT0MsT0FBTyxDQUFDTixRQUFRO1FBQ3ZCQSxVQUFVO0lBQ2Q7SUFDQSxPQUFPSztBQUNYO0FBQ0EsU0FBU0UsUUFBUUMsTUFBTTtJQUNuQixJQUFJQyxNQUFNQyxPQUFPLENBQUNGLFNBQVM7UUFDdkIsSUFBSUcsVUFBVSxFQUFFO1FBQ2hCSCxPQUFPSSxPQUFPLENBQUMsU0FBVUMsS0FBSztZQUMxQkYsVUFBVUEsUUFBUUcsTUFBTSxDQUFDUCxRQUFRTTtRQUNyQztRQUNBLElBQUlGLFFBQVFJLE1BQU0sSUFBSSxJQUFJO1lBQ3RCSixRQUFRTCxPQUFPLENBQUMsT0FBT0ssUUFBUUksTUFBTTtZQUNyQyxPQUFPSjtRQUNYO1FBQ0EsTUFBTUksU0FBU1gsZ0JBQWdCTyxRQUFRSSxNQUFNO1FBQzdDQSxPQUFPVCxPQUFPLENBQUMsT0FBT1MsT0FBT0EsTUFBTTtRQUNuQyxPQUFPQSxPQUFPRCxNQUFNLENBQUNIO0lBQ3pCO0lBQ0EsTUFBTUssT0FBT1AsTUFBTVEsU0FBUyxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQyxDQUFDLEdBQUdqQixVQUFVa0IsUUFBUSxFQUFFWixRQUFRO0lBQ3hFLElBQUlRLEtBQUtELE1BQU0sS0FBSyxLQUFLQyxJQUFJLENBQUMsRUFBRSxJQUFJLE1BQU07UUFDdEMsT0FBT0E7SUFDWCxPQUNLLElBQUlBLEtBQUtELE1BQU0sSUFBSSxJQUFJO1FBQ3hCQyxLQUFLVixPQUFPLENBQUMsT0FBT1UsS0FBS0QsTUFBTTtRQUMvQixPQUFPQztJQUNYO0lBQ0EsTUFBTUQsU0FBU1gsZ0JBQWdCWSxLQUFLRCxNQUFNO0lBQzFDQSxPQUFPVCxPQUFPLENBQUMsT0FBT1MsT0FBT0EsTUFBTTtJQUNuQyxPQUFPQSxPQUFPRCxNQUFNLENBQUNFO0FBQ3pCO0FBQ0EsTUFBTUssVUFBVTtBQUNoQjs7Q0FFQyxHQUNELFNBQVNwQixVQUFVTyxNQUFNO0lBQ3JCLElBQUlILFNBQVM7SUFDYixLQUFLLE1BQU1pQixLQUFLZixRQUFRQyxRQUFTO1FBQzdCSCxVQUFVZ0IsT0FBTyxDQUFDQyxLQUFLLEVBQUU7UUFDekJqQixVQUFVZ0IsT0FBTyxDQUFDQyxJQUFJLElBQUk7SUFDOUI7SUFDQSxPQUFPakI7QUFDWDtBQUNBTixpQkFBaUIsR0FBR0UsV0FDcEIsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvdXRpbHMvcmxwLWVuY29kZS5qcz9mODI2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy9TZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS93aWtpL3dpa2kvUkxQXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVuY29kZVJscCA9IHZvaWQgMDtcbmNvbnN0IGRhdGFfanNfMSA9IHJlcXVpcmUoXCIuL2RhdGEuanNcIik7XG5mdW5jdGlvbiBhcnJheWlmeUludGVnZXIodmFsdWUpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICB3aGlsZSAodmFsdWUpIHtcbiAgICAgICAgcmVzdWx0LnVuc2hpZnQodmFsdWUgJiAweGZmKTtcbiAgICAgICAgdmFsdWUgPj49IDg7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBfZW5jb2RlKG9iamVjdCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICAgICAgbGV0IHBheWxvYWQgPSBbXTtcbiAgICAgICAgb2JqZWN0LmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICBwYXlsb2FkID0gcGF5bG9hZC5jb25jYXQoX2VuY29kZShjaGlsZCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHBheWxvYWQubGVuZ3RoIDw9IDU1KSB7XG4gICAgICAgICAgICBwYXlsb2FkLnVuc2hpZnQoMHhjMCArIHBheWxvYWQubGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5aWZ5SW50ZWdlcihwYXlsb2FkLmxlbmd0aCk7XG4gICAgICAgIGxlbmd0aC51bnNoaWZ0KDB4ZjcgKyBsZW5ndGgubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIGxlbmd0aC5jb25jYXQocGF5bG9hZCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCgoMCwgZGF0YV9qc18xLmdldEJ5dGVzKShvYmplY3QsIFwib2JqZWN0XCIpKTtcbiAgICBpZiAoZGF0YS5sZW5ndGggPT09IDEgJiYgZGF0YVswXSA8PSAweDdmKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBlbHNlIGlmIChkYXRhLmxlbmd0aCA8PSA1NSkge1xuICAgICAgICBkYXRhLnVuc2hpZnQoMHg4MCArIGRhdGEubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5aWZ5SW50ZWdlcihkYXRhLmxlbmd0aCk7XG4gICAgbGVuZ3RoLnVuc2hpZnQoMHhiNyArIGxlbmd0aC5sZW5ndGgpO1xuICAgIHJldHVybiBsZW5ndGguY29uY2F0KGRhdGEpO1xufVxuY29uc3QgbmliYmxlcyA9IFwiMDEyMzQ1Njc4OWFiY2RlZlwiO1xuLyoqXG4gKiAgRW5jb2RlcyAlJW9iamVjdCUlIGFzIGFuIFJMUC1lbmNvZGVkIFtbRGF0YUhleFN0cmluZ11dLlxuICovXG5mdW5jdGlvbiBlbmNvZGVSbHAob2JqZWN0KSB7XG4gICAgbGV0IHJlc3VsdCA9IFwiMHhcIjtcbiAgICBmb3IgKGNvbnN0IHYgb2YgX2VuY29kZShvYmplY3QpKSB7XG4gICAgICAgIHJlc3VsdCArPSBuaWJibGVzW3YgPj4gNF07XG4gICAgICAgIHJlc3VsdCArPSBuaWJibGVzW3YgJiAweGZdO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5lbmNvZGVSbHAgPSBlbmNvZGVSbHA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ybHAtZW5jb2RlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVuY29kZVJscCIsImRhdGFfanNfMSIsInJlcXVpcmUiLCJhcnJheWlmeUludGVnZXIiLCJyZXN1bHQiLCJ1bnNoaWZ0IiwiX2VuY29kZSIsIm9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsInBheWxvYWQiLCJmb3JFYWNoIiwiY2hpbGQiLCJjb25jYXQiLCJsZW5ndGgiLCJkYXRhIiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiZ2V0Qnl0ZXMiLCJuaWJibGVzIiwidiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/utils/rlp-encode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/utils/units.js":
/*!*********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/utils/units.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseEther = exports.formatEther = exports.parseUnits = exports.formatUnits = void 0;\n/**\n *  Most interactions with Ethereum requires integer values, which use\n *  the smallest magnitude unit.\n *\n *  For example, imagine dealing with dollars and cents. Since dollars\n *  are divisible, non-integer values are possible, such as ``$10.77``.\n *  By using the smallest indivisible unit (i.e. cents), the value can\n *  be kept as the integer ``1077``.\n *\n *  When receiving decimal input from the user (as a decimal string),\n *  the value should be converted to an integer and when showing a user\n *  a value, the integer value should be converted to a decimal string.\n *\n *  This creates a clear distinction, between values to be used by code\n *  (integers) and values used for display logic to users (decimals).\n *\n *  The native unit in Ethereum, //ether// is divisible to 18 decimal places,\n *  where each individual unit is called a //wei//.\n *\n *  @_subsection api/utils:Unit Conversion  [about-units]\n */ const errors_js_1 = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/errors.js\");\nconst fixednumber_js_1 = __webpack_require__(/*! ./fixednumber.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/fixednumber.js\");\nconst maths_js_1 = __webpack_require__(/*! ./maths.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/maths.js\");\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\"\n];\n/**\n *  Converts %%value%% into a //decimal string//, assuming %%unit%% decimal\n *  places. The %%unit%% may be the number of decimal places or the name of\n *  a unit (e.g. ``\"gwei\"`` for 9 decimal places).\n *\n */ function formatUnits(value, unit) {\n    let decimals = 18;\n    if (typeof unit === \"string\") {\n        const index = names.indexOf(unit);\n        (0, errors_js_1.assertArgument)(index >= 0, \"invalid unit\", \"unit\", unit);\n        decimals = 3 * index;\n    } else if (unit != null) {\n        decimals = (0, maths_js_1.getNumber)(unit, \"unit\");\n    }\n    return fixednumber_js_1.FixedNumber.fromValue(value, decimals, {\n        decimals,\n        width: 512\n    }).toString();\n}\nexports.formatUnits = formatUnits;\n/**\n *  Converts the //decimal string// %%value%% to a BigInt, assuming\n *  %%unit%% decimal places. The %%unit%% may the number of decimal places\n *  or the name of a unit (e.g. ``\"gwei\"`` for 9 decimal places).\n */ function parseUnits(value, unit) {\n    (0, errors_js_1.assertArgument)(typeof value === \"string\", \"value must be a string\", \"value\", value);\n    let decimals = 18;\n    if (typeof unit === \"string\") {\n        const index = names.indexOf(unit);\n        (0, errors_js_1.assertArgument)(index >= 0, \"invalid unit\", \"unit\", unit);\n        decimals = 3 * index;\n    } else if (unit != null) {\n        decimals = (0, maths_js_1.getNumber)(unit, \"unit\");\n    }\n    return fixednumber_js_1.FixedNumber.fromString(value, {\n        decimals,\n        width: 512\n    }).value;\n}\nexports.parseUnits = parseUnits;\n/**\n *  Converts %%value%% into a //decimal string// using 18 decimal places.\n */ function formatEther(wei) {\n    return formatUnits(wei, 18);\n}\nexports.formatEther = formatEther;\n/**\n *  Converts the //decimal string// %%ether%% to a BigInt, using 18\n *  decimal places.\n */ function parseEther(ether) {\n    return parseUnits(ether, 18);\n}\nexports.parseEther = parseEther; //# sourceMappingURL=units.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy91dGlscy91bml0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsa0JBQWtCLEdBQUdBLG1CQUFtQixHQUFHQSxrQkFBa0IsR0FBR0EsbUJBQW1CLEdBQUcsS0FBSztBQUMzRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FvQkMsR0FDRCxNQUFNTSxjQUFjQyxtQkFBT0EsQ0FBQyw2RUFBYTtBQUN6QyxNQUFNQyxtQkFBbUJELG1CQUFPQSxDQUFDLHVGQUFrQjtBQUNuRCxNQUFNRSxhQUFhRixtQkFBT0EsQ0FBQywyRUFBWTtBQUN2QyxNQUFNRyxRQUFRO0lBQ1Y7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDSDtBQUNEOzs7OztDQUtDLEdBQ0QsU0FBU0wsWUFBWUosS0FBSyxFQUFFVSxJQUFJO0lBQzVCLElBQUlDLFdBQVc7SUFDZixJQUFJLE9BQVFELFNBQVUsVUFBVTtRQUM1QixNQUFNRSxRQUFRSCxNQUFNSSxPQUFPLENBQUNIO1FBQzNCLElBQUdMLFlBQVlTLGNBQWMsRUFBRUYsU0FBUyxHQUFHLGdCQUFnQixRQUFRRjtRQUNwRUMsV0FBVyxJQUFJQztJQUNuQixPQUNLLElBQUlGLFFBQVEsTUFBTTtRQUNuQkMsV0FBVyxDQUFDLEdBQUdILFdBQVdPLFNBQVMsRUFBRUwsTUFBTTtJQUMvQztJQUNBLE9BQU9ILGlCQUFpQlMsV0FBVyxDQUFDQyxTQUFTLENBQUNqQixPQUFPVyxVQUFVO1FBQUVBO1FBQVVPLE9BQU87SUFBSSxHQUFHQyxRQUFRO0FBQ3JHO0FBQ0FwQixtQkFBbUIsR0FBR0s7QUFDdEI7Ozs7Q0FJQyxHQUNELFNBQVNELFdBQVdILEtBQUssRUFBRVUsSUFBSTtJQUMxQixJQUFHTCxZQUFZUyxjQUFjLEVBQUUsT0FBUWQsVUFBVyxVQUFVLDBCQUEwQixTQUFTQTtJQUNoRyxJQUFJVyxXQUFXO0lBQ2YsSUFBSSxPQUFRRCxTQUFVLFVBQVU7UUFDNUIsTUFBTUUsUUFBUUgsTUFBTUksT0FBTyxDQUFDSDtRQUMzQixJQUFHTCxZQUFZUyxjQUFjLEVBQUVGLFNBQVMsR0FBRyxnQkFBZ0IsUUFBUUY7UUFDcEVDLFdBQVcsSUFBSUM7SUFDbkIsT0FDSyxJQUFJRixRQUFRLE1BQU07UUFDbkJDLFdBQVcsQ0FBQyxHQUFHSCxXQUFXTyxTQUFTLEVBQUVMLE1BQU07SUFDL0M7SUFDQSxPQUFPSCxpQkFBaUJTLFdBQVcsQ0FBQ0ksVUFBVSxDQUFDcEIsT0FBTztRQUFFVztRQUFVTyxPQUFPO0lBQUksR0FBR2xCLEtBQUs7QUFDekY7QUFDQUQsa0JBQWtCLEdBQUdJO0FBQ3JCOztDQUVDLEdBQ0QsU0FBU0QsWUFBWW1CLEdBQUc7SUFDcEIsT0FBT2pCLFlBQVlpQixLQUFLO0FBQzVCO0FBQ0F0QixtQkFBbUIsR0FBR0c7QUFDdEI7OztDQUdDLEdBQ0QsU0FBU0QsV0FBV3FCLEtBQUs7SUFDckIsT0FBT25CLFdBQVdtQixPQUFPO0FBQzdCO0FBQ0F2QixrQkFBa0IsR0FBR0UsWUFDckIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvdXRpbHMvdW5pdHMuanM/ZjAzZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFyc2VFdGhlciA9IGV4cG9ydHMuZm9ybWF0RXRoZXIgPSBleHBvcnRzLnBhcnNlVW5pdHMgPSBleHBvcnRzLmZvcm1hdFVuaXRzID0gdm9pZCAwO1xuLyoqXG4gKiAgTW9zdCBpbnRlcmFjdGlvbnMgd2l0aCBFdGhlcmV1bSByZXF1aXJlcyBpbnRlZ2VyIHZhbHVlcywgd2hpY2ggdXNlXG4gKiAgdGhlIHNtYWxsZXN0IG1hZ25pdHVkZSB1bml0LlxuICpcbiAqICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBkZWFsaW5nIHdpdGggZG9sbGFycyBhbmQgY2VudHMuIFNpbmNlIGRvbGxhcnNcbiAqICBhcmUgZGl2aXNpYmxlLCBub24taW50ZWdlciB2YWx1ZXMgYXJlIHBvc3NpYmxlLCBzdWNoIGFzIGBgJDEwLjc3YGAuXG4gKiAgQnkgdXNpbmcgdGhlIHNtYWxsZXN0IGluZGl2aXNpYmxlIHVuaXQgKGkuZS4gY2VudHMpLCB0aGUgdmFsdWUgY2FuXG4gKiAgYmUga2VwdCBhcyB0aGUgaW50ZWdlciBgYDEwNzdgYC5cbiAqXG4gKiAgV2hlbiByZWNlaXZpbmcgZGVjaW1hbCBpbnB1dCBmcm9tIHRoZSB1c2VyIChhcyBhIGRlY2ltYWwgc3RyaW5nKSxcbiAqICB0aGUgdmFsdWUgc2hvdWxkIGJlIGNvbnZlcnRlZCB0byBhbiBpbnRlZ2VyIGFuZCB3aGVuIHNob3dpbmcgYSB1c2VyXG4gKiAgYSB2YWx1ZSwgdGhlIGludGVnZXIgdmFsdWUgc2hvdWxkIGJlIGNvbnZlcnRlZCB0byBhIGRlY2ltYWwgc3RyaW5nLlxuICpcbiAqICBUaGlzIGNyZWF0ZXMgYSBjbGVhciBkaXN0aW5jdGlvbiwgYmV0d2VlbiB2YWx1ZXMgdG8gYmUgdXNlZCBieSBjb2RlXG4gKiAgKGludGVnZXJzKSBhbmQgdmFsdWVzIHVzZWQgZm9yIGRpc3BsYXkgbG9naWMgdG8gdXNlcnMgKGRlY2ltYWxzKS5cbiAqXG4gKiAgVGhlIG5hdGl2ZSB1bml0IGluIEV0aGVyZXVtLCAvL2V0aGVyLy8gaXMgZGl2aXNpYmxlIHRvIDE4IGRlY2ltYWwgcGxhY2VzLFxuICogIHdoZXJlIGVhY2ggaW5kaXZpZHVhbCB1bml0IGlzIGNhbGxlZCBhIC8vd2VpLy8uXG4gKlxuICogIEBfc3Vic2VjdGlvbiBhcGkvdXRpbHM6VW5pdCBDb252ZXJzaW9uICBbYWJvdXQtdW5pdHNdXG4gKi9cbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4vZXJyb3JzLmpzXCIpO1xuY29uc3QgZml4ZWRudW1iZXJfanNfMSA9IHJlcXVpcmUoXCIuL2ZpeGVkbnVtYmVyLmpzXCIpO1xuY29uc3QgbWF0aHNfanNfMSA9IHJlcXVpcmUoXCIuL21hdGhzLmpzXCIpO1xuY29uc3QgbmFtZXMgPSBbXG4gICAgXCJ3ZWlcIixcbiAgICBcImt3ZWlcIixcbiAgICBcIm13ZWlcIixcbiAgICBcImd3ZWlcIixcbiAgICBcInN6YWJvXCIsXG4gICAgXCJmaW5uZXlcIixcbiAgICBcImV0aGVyXCIsXG5dO1xuLyoqXG4gKiAgQ29udmVydHMgJSV2YWx1ZSUlIGludG8gYSAvL2RlY2ltYWwgc3RyaW5nLy8sIGFzc3VtaW5nICUldW5pdCUlIGRlY2ltYWxcbiAqICBwbGFjZXMuIFRoZSAlJXVuaXQlJSBtYXkgYmUgdGhlIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyBvciB0aGUgbmFtZSBvZlxuICogIGEgdW5pdCAoZS5nLiBgYFwiZ3dlaVwiYGAgZm9yIDkgZGVjaW1hbCBwbGFjZXMpLlxuICpcbiAqL1xuZnVuY3Rpb24gZm9ybWF0VW5pdHModmFsdWUsIHVuaXQpIHtcbiAgICBsZXQgZGVjaW1hbHMgPSAxODtcbiAgICBpZiAodHlwZW9mICh1bml0KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBpbmRleCA9IG5hbWVzLmluZGV4T2YodW5pdCk7XG4gICAgICAgICgwLCBlcnJvcnNfanNfMS5hc3NlcnRBcmd1bWVudCkoaW5kZXggPj0gMCwgXCJpbnZhbGlkIHVuaXRcIiwgXCJ1bml0XCIsIHVuaXQpO1xuICAgICAgICBkZWNpbWFscyA9IDMgKiBpbmRleDtcbiAgICB9XG4gICAgZWxzZSBpZiAodW5pdCAhPSBudWxsKSB7XG4gICAgICAgIGRlY2ltYWxzID0gKDAsIG1hdGhzX2pzXzEuZ2V0TnVtYmVyKSh1bml0LCBcInVuaXRcIik7XG4gICAgfVxuICAgIHJldHVybiBmaXhlZG51bWJlcl9qc18xLkZpeGVkTnVtYmVyLmZyb21WYWx1ZSh2YWx1ZSwgZGVjaW1hbHMsIHsgZGVjaW1hbHMsIHdpZHRoOiA1MTIgfSkudG9TdHJpbmcoKTtcbn1cbmV4cG9ydHMuZm9ybWF0VW5pdHMgPSBmb3JtYXRVbml0cztcbi8qKlxuICogIENvbnZlcnRzIHRoZSAvL2RlY2ltYWwgc3RyaW5nLy8gJSV2YWx1ZSUlIHRvIGEgQmlnSW50LCBhc3N1bWluZ1xuICogICUldW5pdCUlIGRlY2ltYWwgcGxhY2VzLiBUaGUgJSV1bml0JSUgbWF5IHRoZSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXNcbiAqICBvciB0aGUgbmFtZSBvZiBhIHVuaXQgKGUuZy4gYGBcImd3ZWlcImBgIGZvciA5IGRlY2ltYWwgcGxhY2VzKS5cbiAqL1xuZnVuY3Rpb24gcGFyc2VVbml0cyh2YWx1ZSwgdW5pdCkge1xuICAgICgwLCBlcnJvcnNfanNfMS5hc3NlcnRBcmd1bWVudCkodHlwZW9mICh2YWx1ZSkgPT09IFwic3RyaW5nXCIsIFwidmFsdWUgbXVzdCBiZSBhIHN0cmluZ1wiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICBsZXQgZGVjaW1hbHMgPSAxODtcbiAgICBpZiAodHlwZW9mICh1bml0KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBpbmRleCA9IG5hbWVzLmluZGV4T2YodW5pdCk7XG4gICAgICAgICgwLCBlcnJvcnNfanNfMS5hc3NlcnRBcmd1bWVudCkoaW5kZXggPj0gMCwgXCJpbnZhbGlkIHVuaXRcIiwgXCJ1bml0XCIsIHVuaXQpO1xuICAgICAgICBkZWNpbWFscyA9IDMgKiBpbmRleDtcbiAgICB9XG4gICAgZWxzZSBpZiAodW5pdCAhPSBudWxsKSB7XG4gICAgICAgIGRlY2ltYWxzID0gKDAsIG1hdGhzX2pzXzEuZ2V0TnVtYmVyKSh1bml0LCBcInVuaXRcIik7XG4gICAgfVxuICAgIHJldHVybiBmaXhlZG51bWJlcl9qc18xLkZpeGVkTnVtYmVyLmZyb21TdHJpbmcodmFsdWUsIHsgZGVjaW1hbHMsIHdpZHRoOiA1MTIgfSkudmFsdWU7XG59XG5leHBvcnRzLnBhcnNlVW5pdHMgPSBwYXJzZVVuaXRzO1xuLyoqXG4gKiAgQ29udmVydHMgJSV2YWx1ZSUlIGludG8gYSAvL2RlY2ltYWwgc3RyaW5nLy8gdXNpbmcgMTggZGVjaW1hbCBwbGFjZXMuXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdEV0aGVyKHdlaSkge1xuICAgIHJldHVybiBmb3JtYXRVbml0cyh3ZWksIDE4KTtcbn1cbmV4cG9ydHMuZm9ybWF0RXRoZXIgPSBmb3JtYXRFdGhlcjtcbi8qKlxuICogIENvbnZlcnRzIHRoZSAvL2RlY2ltYWwgc3RyaW5nLy8gJSVldGhlciUlIHRvIGEgQmlnSW50LCB1c2luZyAxOFxuICogIGRlY2ltYWwgcGxhY2VzLlxuICovXG5mdW5jdGlvbiBwYXJzZUV0aGVyKGV0aGVyKSB7XG4gICAgcmV0dXJuIHBhcnNlVW5pdHMoZXRoZXIsIDE4KTtcbn1cbmV4cG9ydHMucGFyc2VFdGhlciA9IHBhcnNlRXRoZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bml0cy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwYXJzZUV0aGVyIiwiZm9ybWF0RXRoZXIiLCJwYXJzZVVuaXRzIiwiZm9ybWF0VW5pdHMiLCJlcnJvcnNfanNfMSIsInJlcXVpcmUiLCJmaXhlZG51bWJlcl9qc18xIiwibWF0aHNfanNfMSIsIm5hbWVzIiwidW5pdCIsImRlY2ltYWxzIiwiaW5kZXgiLCJpbmRleE9mIiwiYXNzZXJ0QXJndW1lbnQiLCJnZXROdW1iZXIiLCJGaXhlZE51bWJlciIsImZyb21WYWx1ZSIsIndpZHRoIiwidG9TdHJpbmciLCJmcm9tU3RyaW5nIiwid2VpIiwiZXRoZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/utils/units.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/utils/utf8.js":
/*!********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/utils/utf8.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.toUtf8CodePoints = exports.toUtf8String = exports.toUtf8Bytes = exports.Utf8ErrorFuncs = void 0;\n/**\n *  Using strings in Ethereum (or any security-basd system) requires\n *  additional care. These utilities attempt to mitigate some of the\n *  safety issues as well as provide the ability to recover and analyse\n *  strings.\n *\n *  @_subsection api/utils:Strings and UTF-8  [about-strings]\n */ const data_js_1 = __webpack_require__(/*! ./data.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/data.js\");\nconst errors_js_1 = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/errors.js\");\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n    (0, errors_js_1.assertArgument)(false, `invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\n}\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n    if (reason === \"BAD_PREFIX\" || reason === \"UNEXPECTED_CONTINUE\") {\n        let i = 0;\n        for(let o = offset + 1; o < bytes.length; o++){\n            if (bytes[o] >> 6 !== 0x02) {\n                break;\n            }\n            i++;\n        }\n        return i;\n    }\n    // This byte runs us past the end of the string, so just jump to the end\n    // (but the first byte was read already read and therefore skipped)\n    if (reason === \"OVERRUN\") {\n        return bytes.length - offset - 1;\n    }\n    // Nothing to skip\n    return 0;\n}\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n    if (reason === \"OVERLONG\") {\n        (0, errors_js_1.assertArgument)(typeof badCodepoint === \"number\", \"invalid bad code point for replacement\", \"badCodepoint\", badCodepoint);\n        output.push(badCodepoint);\n        return 0;\n    }\n    // Put the replacement character into the output\n    output.push(0xfffd);\n    // Otherwise, process as if ignoring errors\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n/**\n *  A handful of popular, built-in UTF-8 error handling strategies.\n *\n *  **``\"error\"``** - throws on ANY illegal UTF-8 sequence or\n *  non-canonical (overlong) codepoints (this is the default)\n *\n *  **``\"ignore\"``** - silently drops any illegal UTF-8 sequence\n *  and accepts non-canonical (overlong) codepoints\n *\n *  **``\"replace\"``** - replace any illegal UTF-8 sequence with the\n *  UTF-8 replacement character (i.e. ``\"\\\\ufffd\"``) and accepts\n *  non-canonical (overlong) codepoints\n *\n *  @returns: Record<\"error\" | \"ignore\" | \"replace\", Utf8ErrorFunc>\n */ exports.Utf8ErrorFuncs = Object.freeze({\n    error: errorFunc,\n    ignore: ignoreFunc,\n    replace: replaceFunc\n});\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(_bytes, onError) {\n    if (onError == null) {\n        onError = exports.Utf8ErrorFuncs.error;\n    }\n    const bytes = (0, data_js_1.getBytes)(_bytes, \"bytes\");\n    const result = [];\n    let i = 0;\n    // Invalid bytes are ignored\n    while(i < bytes.length){\n        const c = bytes[i++];\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result.push(c);\n            continue;\n        }\n        // Multibyte; how many bytes left for this character?\n        let extraLength = null;\n        let overlongMask = null;\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n        // 1110 xxxx 10xx xxxx 10xx xxxx\n        } else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n        // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        } else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n        } else {\n            if ((c & 0xc0) === 0x80) {\n                i += onError(\"UNEXPECTED_CONTINUE\", i - 1, bytes, result);\n            } else {\n                i += onError(\"BAD_PREFIX\", i - 1, bytes, result);\n            }\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i - 1 + extraLength >= bytes.length) {\n            i += onError(\"OVERRUN\", i - 1, bytes, result);\n            continue;\n        }\n        // Remove the length prefix from the char\n        let res = c & (1 << 8 - extraLength - 1) - 1;\n        for(let j = 0; j < extraLength; j++){\n            let nextChar = bytes[i];\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                i += onError(\"MISSING_CONTINUE\", i, bytes, result);\n                res = null;\n                break;\n            }\n            ;\n            res = res << 6 | nextChar & 0x3f;\n            i++;\n        }\n        // See above loop for invalid continuation byte\n        if (res === null) {\n            continue;\n        }\n        // Maximum code point\n        if (res > 0x10ffff) {\n            i += onError(\"OUT_OF_RANGE\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            i += onError(\"UTF16_SURROGATE\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Check for overlong sequences (more bytes than needed)\n        if (res <= overlongMask) {\n            i += onError(\"OVERLONG\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        result.push(res);\n    }\n    return result;\n}\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n/**\n *  Returns the UTF-8 byte representation of %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */ function toUtf8Bytes(str, form) {\n    if (form != null) {\n        (0, errors_js_1.assertNormalize)(form);\n        str = str.normalize(form);\n    }\n    let result = [];\n    for(let i = 0; i < str.length; i++){\n        const c = str.charCodeAt(i);\n        if (c < 0x80) {\n            result.push(c);\n        } else if (c < 0x800) {\n            result.push(c >> 6 | 0xc0);\n            result.push(c & 0x3f | 0x80);\n        } else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            const c2 = str.charCodeAt(i);\n            (0, errors_js_1.assertArgument)(i < str.length && (c2 & 0xfc00) === 0xdc00, \"invalid surrogate pair\", \"str\", str);\n            // Surrogate Pair\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push(pair >> 18 | 0xf0);\n            result.push(pair >> 12 & 0x3f | 0x80);\n            result.push(pair >> 6 & 0x3f | 0x80);\n            result.push(pair & 0x3f | 0x80);\n        } else {\n            result.push(c >> 12 | 0xe0);\n            result.push(c >> 6 & 0x3f | 0x80);\n            result.push(c & 0x3f | 0x80);\n        }\n    }\n    return new Uint8Array(result);\n}\nexports.toUtf8Bytes = toUtf8Bytes;\n;\n//export \nfunction _toUtf8String(codePoints) {\n    return codePoints.map((codePoint)=>{\n        if (codePoint <= 0xffff) {\n            return String.fromCharCode(codePoint);\n        }\n        codePoint -= 0x10000;\n        return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);\n    }).join(\"\");\n}\n/**\n *  Returns the string represented by the UTF-8 data %%bytes%%.\n *\n *  When %%onError%% function is specified, it is called on UTF-8\n *  errors allowing recovery using the [[Utf8ErrorFunc]] API.\n *  (default: [error](Utf8ErrorFuncs))\n */ function toUtf8String(bytes, onError) {\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\nexports.toUtf8String = toUtf8String;\n/**\n *  Returns the UTF-8 code-points for %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */ function toUtf8CodePoints(str, form) {\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\n}\nexports.toUtf8CodePoints = toUtf8CodePoints; //# sourceMappingURL=utf8.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/utils/utf8.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/utils/uuid.js":
/*!********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/utils/uuid.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.uuidV4 = void 0;\n/**\n *  Explain UUID and link to RFC here.\n *\n *  @_subsection: api/utils:UUID  [about-uuid]\n */ const data_js_1 = __webpack_require__(/*! ./data.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/data.js\");\n/**\n *  Returns the version 4 [[link-uuid]] for the %%randomBytes%%.\n *\n *  @see: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\n */ function uuidV4(randomBytes) {\n    const bytes = (0, data_js_1.getBytes)(randomBytes, \"randomBytes\");\n    // Section: 4.1.3:\n    // - time_hi_and_version[12:16] = 0b0100\n    bytes[6] = bytes[6] & 0x0f | 0x40;\n    // Section 4.4\n    // - clock_seq_hi_and_reserved[6] = 0b0\n    // - clock_seq_hi_and_reserved[7] = 0b1\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n    const value = (0, data_js_1.hexlify)(bytes);\n    return [\n        value.substring(2, 10),\n        value.substring(10, 14),\n        value.substring(14, 18),\n        value.substring(18, 22),\n        value.substring(22, 34)\n    ].join(\"-\");\n}\nexports.uuidV4 = uuidV4; //# sourceMappingURL=uuid.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy91dGlscy91dWlkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUcsS0FBSztBQUN0Qjs7OztDQUlDLEdBQ0QsTUFBTUcsWUFBWUMsbUJBQU9BLENBQUMseUVBQVc7QUFDckM7Ozs7Q0FJQyxHQUNELFNBQVNGLE9BQU9HLFdBQVc7SUFDdkIsTUFBTUMsUUFBUSxDQUFDLEdBQUdILFVBQVVJLFFBQVEsRUFBRUYsYUFBYTtJQUNuRCxrQkFBa0I7SUFDbEIsd0NBQXdDO0lBQ3hDQyxLQUFLLENBQUMsRUFBRSxHQUFHLEtBQU0sQ0FBQyxFQUFFLEdBQUcsT0FBUTtJQUMvQixjQUFjO0lBQ2QsdUNBQXVDO0lBQ3ZDLHVDQUF1QztJQUN2Q0EsS0FBSyxDQUFDLEVBQUUsR0FBRyxLQUFNLENBQUMsRUFBRSxHQUFHLE9BQVE7SUFDL0IsTUFBTUwsUUFBUSxDQUFDLEdBQUdFLFVBQVVLLE9BQU8sRUFBRUY7SUFDckMsT0FBTztRQUNITCxNQUFNUSxTQUFTLENBQUMsR0FBRztRQUNuQlIsTUFBTVEsU0FBUyxDQUFDLElBQUk7UUFDcEJSLE1BQU1RLFNBQVMsQ0FBQyxJQUFJO1FBQ3BCUixNQUFNUSxTQUFTLENBQUMsSUFBSTtRQUNwQlIsTUFBTVEsU0FBUyxDQUFDLElBQUk7S0FDdkIsQ0FBQ0MsSUFBSSxDQUFDO0FBQ1g7QUFDQVYsY0FBYyxHQUFHRSxRQUNqQixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy91dGlscy91dWlkLmpzPzMyZjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnV1aWRWNCA9IHZvaWQgMDtcbi8qKlxuICogIEV4cGxhaW4gVVVJRCBhbmQgbGluayB0byBSRkMgaGVyZS5cbiAqXG4gKiAgQF9zdWJzZWN0aW9uOiBhcGkvdXRpbHM6VVVJRCAgW2Fib3V0LXV1aWRdXG4gKi9cbmNvbnN0IGRhdGFfanNfMSA9IHJlcXVpcmUoXCIuL2RhdGEuanNcIik7XG4vKipcbiAqICBSZXR1cm5zIHRoZSB2ZXJzaW9uIDQgW1tsaW5rLXV1aWRdXSBmb3IgdGhlICUlcmFuZG9tQnl0ZXMlJS5cbiAqXG4gKiAgQHNlZTogaHR0cHM6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzQxMjIudHh0IChTZWN0aW9uIDQuNClcbiAqL1xuZnVuY3Rpb24gdXVpZFY0KHJhbmRvbUJ5dGVzKSB7XG4gICAgY29uc3QgYnl0ZXMgPSAoMCwgZGF0YV9qc18xLmdldEJ5dGVzKShyYW5kb21CeXRlcywgXCJyYW5kb21CeXRlc1wiKTtcbiAgICAvLyBTZWN0aW9uOiA0LjEuMzpcbiAgICAvLyAtIHRpbWVfaGlfYW5kX3ZlcnNpb25bMTI6MTZdID0gMGIwMTAwXG4gICAgYnl0ZXNbNl0gPSAoYnl0ZXNbNl0gJiAweDBmKSB8IDB4NDA7XG4gICAgLy8gU2VjdGlvbiA0LjRcbiAgICAvLyAtIGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRbNl0gPSAwYjBcbiAgICAvLyAtIGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRbN10gPSAwYjFcbiAgICBieXRlc1s4XSA9IChieXRlc1s4XSAmIDB4M2YpIHwgMHg4MDtcbiAgICBjb25zdCB2YWx1ZSA9ICgwLCBkYXRhX2pzXzEuaGV4bGlmeSkoYnl0ZXMpO1xuICAgIHJldHVybiBbXG4gICAgICAgIHZhbHVlLnN1YnN0cmluZygyLCAxMCksXG4gICAgICAgIHZhbHVlLnN1YnN0cmluZygxMCwgMTQpLFxuICAgICAgICB2YWx1ZS5zdWJzdHJpbmcoMTQsIDE4KSxcbiAgICAgICAgdmFsdWUuc3Vic3RyaW5nKDE4LCAyMiksXG4gICAgICAgIHZhbHVlLnN1YnN0cmluZygyMiwgMzQpLFxuICAgIF0uam9pbihcIi1cIik7XG59XG5leHBvcnRzLnV1aWRWNCA9IHV1aWRWNDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV1aWQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidXVpZFY0IiwiZGF0YV9qc18xIiwicmVxdWlyZSIsInJhbmRvbUJ5dGVzIiwiYnl0ZXMiLCJnZXRCeXRlcyIsImhleGxpZnkiLCJzdWJzdHJpbmciLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/utils/uuid.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wallet/base-wallet.js":
/*!****************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wallet/base-wallet.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BaseWallet = void 0;\nconst index_js_1 = __webpack_require__(/*! ../address/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../hash/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/hash/index.js\");\nconst index_js_3 = __webpack_require__(/*! ../providers/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/index.js\");\nconst index_js_4 = __webpack_require__(/*! ../transaction/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/transaction/index.js\");\nconst index_js_5 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\n/**\n *  The **BaseWallet** is a stream-lined implementation of a\n *  [[Signer]] that operates with a private key.\n *\n *  It is preferred to use the [[Wallet]] class, as it offers\n *  additional functionality and simplifies loading a variety\n *  of JSON formats, Mnemonic Phrases, etc.\n *\n *  This class may be of use for those attempting to implement\n *  a minimal Signer.\n */ class BaseWallet extends index_js_3.AbstractSigner {\n    #signingKey;\n    /**\n     *  Creates a new BaseWallet for %%privateKey%%, optionally\n     *  connected to %%provider%%.\n     *\n     *  If %%provider%% is not specified, only offline methods can\n     *  be used.\n     */ constructor(privateKey, provider){\n        super(provider);\n        (0, index_js_5.assertArgument)(privateKey && typeof privateKey.sign === \"function\", \"invalid private key\", \"privateKey\", \"[ REDACTED ]\");\n        this.#signingKey = privateKey;\n        const address = (0, index_js_4.computeAddress)(this.signingKey.publicKey);\n        (0, index_js_5.defineProperties)(this, {\n            address\n        });\n    }\n    // Store private values behind getters to reduce visibility\n    // in console.log\n    /**\n     *  The [[SigningKey]] used for signing payloads.\n     */ get signingKey() {\n        return this.#signingKey;\n    }\n    /**\n     *  The private key for this wallet.\n     */ get privateKey() {\n        return this.signingKey.privateKey;\n    }\n    async getAddress() {\n        return this.address;\n    }\n    connect(provider) {\n        return new BaseWallet(this.#signingKey, provider);\n    }\n    async signTransaction(tx) {\n        // Replace any Addressable or ENS name with an address\n        const { to, from } = await (0, index_js_5.resolveProperties)({\n            to: tx.to ? (0, index_js_1.resolveAddress)(tx.to, this.provider) : undefined,\n            from: tx.from ? (0, index_js_1.resolveAddress)(tx.from, this.provider) : undefined\n        });\n        if (to != null) {\n            tx.to = to;\n        }\n        if (from != null) {\n            tx.from = from;\n        }\n        if (tx.from != null) {\n            (0, index_js_5.assertArgument)((0, index_js_1.getAddress)(tx.from) === this.address, \"transaction from address mismatch\", \"tx.from\", tx.from);\n            delete tx.from;\n        }\n        // Build the transaction\n        const btx = index_js_4.Transaction.from(tx);\n        btx.signature = this.signingKey.sign(btx.unsignedHash);\n        return btx.serialized;\n    }\n    async signMessage(message) {\n        return this.signMessageSync(message);\n    }\n    // @TODO: Add a secialized signTx and signTyped sync that enforces\n    // all parameters are known?\n    /**\n     *  Returns the signature for %%message%% signed with this wallet.\n     */ signMessageSync(message) {\n        return this.signingKey.sign((0, index_js_2.hashMessage)(message)).serialized;\n    }\n    async signTypedData(domain, types, value) {\n        // Populate any ENS names\n        const populated = await index_js_2.TypedDataEncoder.resolveNames(domain, types, value, async (name)=>{\n            // @TODO: this should use resolveName; addresses don't\n            //        need a provider\n            (0, index_js_5.assert)(this.provider != null, \"cannot resolve ENS names without a provider\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"resolveName\",\n                info: {\n                    name\n                }\n            });\n            const address = await this.provider.resolveName(name);\n            (0, index_js_5.assert)(address != null, \"unconfigured ENS name\", \"UNCONFIGURED_NAME\", {\n                value: name\n            });\n            return address;\n        });\n        return this.signingKey.sign(index_js_2.TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;\n    }\n}\nexports.BaseWallet = BaseWallet; //# sourceMappingURL=base-wallet.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wallet/base-wallet.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wallet/hdwallet.js":
/*!*************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wallet/hdwallet.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getIndexedAccountPath = exports.getAccountPath = exports.HDNodeVoidWallet = exports.HDNodeWallet = exports.defaultPath = void 0;\n/**\n *  Explain HD Wallets..\n *\n *  @_subsection: api/wallet:HD Wallets  [hd-wallets]\n */ const index_js_1 = __webpack_require__(/*! ../crypto/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../providers/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/providers/index.js\");\nconst index_js_3 = __webpack_require__(/*! ../transaction/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/transaction/index.js\");\nconst index_js_4 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst lang_en_js_1 = __webpack_require__(/*! ../wordlists/lang-en.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-en.js\");\nconst base_wallet_js_1 = __webpack_require__(/*! ./base-wallet.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wallet/base-wallet.js\");\nconst mnemonic_js_1 = __webpack_require__(/*! ./mnemonic.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wallet/mnemonic.js\");\nconst json_keystore_js_1 = __webpack_require__(/*! ./json-keystore.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wallet/json-keystore.js\");\n/**\n *  The default derivation path for Ethereum HD Nodes. (i.e. ``\"m/44'/60'/0'/0/0\"``)\n */ exports.defaultPath = \"m/44'/60'/0'/0/0\";\n// \"Bitcoin seed\"\nconst MasterSecret = new Uint8Array([\n    66,\n    105,\n    116,\n    99,\n    111,\n    105,\n    110,\n    32,\n    115,\n    101,\n    101,\n    100\n]);\nconst HardenedBit = 0x80000000;\nconst N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\nconst Nibbles = \"0123456789abcdef\";\nfunction zpad(value, length) {\n    let result = \"\";\n    while(value){\n        result = Nibbles[value % 16] + result;\n        value = Math.trunc(value / 16);\n    }\n    while(result.length < length * 2){\n        result = \"0\" + result;\n    }\n    return \"0x\" + result;\n}\nfunction encodeBase58Check(_value) {\n    const value = (0, index_js_4.getBytes)(_value);\n    const check = (0, index_js_4.dataSlice)((0, index_js_1.sha256)((0, index_js_1.sha256)(value)), 0, 4);\n    const bytes = (0, index_js_4.concat)([\n        value,\n        check\n    ]);\n    return (0, index_js_4.encodeBase58)(bytes);\n}\nconst _guard = {};\nfunction ser_I(index, chainCode, publicKey, privateKey) {\n    const data = new Uint8Array(37);\n    if (index & HardenedBit) {\n        (0, index_js_4.assert)(privateKey != null, \"cannot derive child of neutered node\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"deriveChild\"\n        });\n        // Data = 0x00 || ser_256(k_par)\n        data.set((0, index_js_4.getBytes)(privateKey), 1);\n    } else {\n        // Data = ser_p(point(k_par))\n        data.set((0, index_js_4.getBytes)(publicKey));\n    }\n    // Data += ser_32(i)\n    for(let i = 24; i >= 0; i -= 8){\n        data[33 + (i >> 3)] = index >> 24 - i & 0xff;\n    }\n    const I = (0, index_js_4.getBytes)((0, index_js_1.computeHmac)(\"sha512\", chainCode, data));\n    return {\n        IL: I.slice(0, 32),\n        IR: I.slice(32)\n    };\n}\nfunction derivePath(node, path) {\n    const components = path.split(\"/\");\n    (0, index_js_4.assertArgument)(components.length > 0 && (components[0] === \"m\" || node.depth > 0), \"invalid path\", \"path\", path);\n    if (components[0] === \"m\") {\n        components.shift();\n    }\n    let result = node;\n    for(let i = 0; i < components.length; i++){\n        const component = components[i];\n        if (component.match(/^[0-9]+'$/)) {\n            const index = parseInt(component.substring(0, component.length - 1));\n            (0, index_js_4.assertArgument)(index < HardenedBit, \"invalid path index\", `path[${i}]`, component);\n            result = result.deriveChild(HardenedBit + index);\n        } else if (component.match(/^[0-9]+$/)) {\n            const index = parseInt(component);\n            (0, index_js_4.assertArgument)(index < HardenedBit, \"invalid path index\", `path[${i}]`, component);\n            result = result.deriveChild(index);\n        } else {\n            (0, index_js_4.assertArgument)(false, \"invalid path component\", `path[${i}]`, component);\n        }\n    }\n    return result;\n}\n/**\n *  An **HDNodeWallet** is a [[Signer]] backed by the private key derived\n *  from an HD Node using the [[link-bip-32]] stantard.\n *\n *  An HD Node forms a hierarchal structure with each HD Node having a\n *  private key and the ability to derive child HD Nodes, defined by\n *  a path indicating the index of each child.\n */ class HDNodeWallet extends base_wallet_js_1.BaseWallet {\n    /**\n     *  @private\n     */ constructor(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider){\n        super(signingKey, provider);\n        (0, index_js_4.assertPrivate)(guard, _guard, \"HDNodeWallet\");\n        (0, index_js_4.defineProperties)(this, {\n            publicKey: signingKey.compressedPublicKey\n        });\n        const fingerprint = (0, index_js_4.dataSlice)((0, index_js_1.ripemd160)((0, index_js_1.sha256)(this.publicKey)), 0, 4);\n        (0, index_js_4.defineProperties)(this, {\n            parentFingerprint,\n            fingerprint,\n            chainCode,\n            path,\n            index,\n            depth\n        });\n        (0, index_js_4.defineProperties)(this, {\n            mnemonic\n        });\n    }\n    connect(provider) {\n        return new HDNodeWallet(_guard, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);\n    }\n    #account() {\n        const account = {\n            address: this.address,\n            privateKey: this.privateKey\n        };\n        const m = this.mnemonic;\n        if (this.path && m && m.wordlist.locale === \"en\" && m.password === \"\") {\n            account.mnemonic = {\n                path: this.path,\n                locale: \"en\",\n                entropy: m.entropy\n            };\n        }\n        return account;\n    }\n    /**\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n     *  %%password%%.\n     *\n     *  If %%progressCallback%% is specified, it will receive periodic\n     *  updates as the encryption process progreses.\n     */ async encrypt(password, progressCallback) {\n        return await (0, json_keystore_js_1.encryptKeystoreJson)(this.#account(), password, {\n            progressCallback\n        });\n    }\n    /**\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n     *  %%password%%.\n     *\n     *  It is preferred to use the [async version](encrypt) instead,\n     *  which allows a [[ProgressCallback]] to keep the user informed.\n     *\n     *  This method will block the event loop (freezing all UI) until\n     *  it is complete, which may be a non-trivial duration.\n     */ encryptSync(password) {\n        return (0, json_keystore_js_1.encryptKeystoreJsonSync)(this.#account(), password);\n    }\n    /**\n     *  The extended key.\n     *\n     *  This key will begin with the prefix ``xpriv`` and can be used to\n     *  reconstruct this HD Node to derive its children.\n     */ get extendedKey() {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n        (0, index_js_4.assert)(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"extendedKey\"\n        });\n        return encodeBase58Check((0, index_js_4.concat)([\n            \"0x0488ADE4\",\n            zpad(this.depth, 1),\n            this.parentFingerprint,\n            zpad(this.index, 4),\n            this.chainCode,\n            (0, index_js_4.concat)([\n                \"0x00\",\n                this.privateKey\n            ])\n        ]));\n    }\n    /**\n     *  Returns true if this wallet has a path, providing a Type Guard\n     *  that the path is non-null.\n     */ hasPath() {\n        return this.path != null;\n    }\n    /**\n     *  Returns a neutered HD Node, which removes the private details\n     *  of an HD Node.\n     *\n     *  A neutered node has no private key, but can be used to derive\n     *  child addresses and other public data about the HD Node.\n     */ neuter() {\n        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);\n    }\n    /**\n     *  Return the child for %%index%%.\n     */ deriveChild(_index) {\n        const index = (0, index_js_4.getNumber)(_index, \"index\");\n        (0, index_js_4.assertArgument)(index <= 0xffffffff, \"invalid index\", \"index\", index);\n        // Base path\n        let path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n            if (index & HardenedBit) {\n                path += \"'\";\n            }\n        }\n        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);\n        const ki = new index_js_1.SigningKey((0, index_js_4.toBeHex)(((0, index_js_4.toBigInt)(IL) + BigInt(this.privateKey)) % N, 32));\n        return new HDNodeWallet(_guard, ki, this.fingerprint, (0, index_js_4.hexlify)(IR), path, index, this.depth + 1, this.mnemonic, this.provider);\n    }\n    /**\n     *  Return the HDNode for %%path%% from this node.\n     */ derivePath(path) {\n        return derivePath(this, path);\n    }\n    static #fromSeed(_seed, mnemonic) {\n        (0, index_js_4.assertArgument)((0, index_js_4.isBytesLike)(_seed), \"invalid seed\", \"seed\", \"[REDACTED]\");\n        const seed = (0, index_js_4.getBytes)(_seed, \"seed\");\n        (0, index_js_4.assertArgument)(seed.length >= 16 && seed.length <= 64, \"invalid seed\", \"seed\", \"[REDACTED]\");\n        const I = (0, index_js_4.getBytes)((0, index_js_1.computeHmac)(\"sha512\", MasterSecret, seed));\n        const signingKey = new index_js_1.SigningKey((0, index_js_4.hexlify)(I.slice(0, 32)));\n        return new HDNodeWallet(_guard, signingKey, \"0x00000000\", (0, index_js_4.hexlify)(I.slice(32)), \"m\", 0, 0, mnemonic, null);\n    }\n    /**\n     *  Creates a new HD Node from %%extendedKey%%.\n     *\n     *  If the %%extendedKey%% will either have a prefix or ``xpub`` or\n     *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])\n     *  or full HD Node ([[HDNodeWallet) respectively.\n     */ static fromExtendedKey(extendedKey) {\n        const bytes = (0, index_js_4.toBeArray)((0, index_js_4.decodeBase58)(extendedKey)); // @TODO: redact\n        (0, index_js_4.assertArgument)(bytes.length === 82 || encodeBase58Check(bytes.slice(0, 78)) === extendedKey, \"invalid extended key\", \"extendedKey\", \"[ REDACTED ]\");\n        const depth = bytes[4];\n        const parentFingerprint = (0, index_js_4.hexlify)(bytes.slice(5, 9));\n        const index = parseInt((0, index_js_4.hexlify)(bytes.slice(9, 13)).substring(2), 16);\n        const chainCode = (0, index_js_4.hexlify)(bytes.slice(13, 45));\n        const key = bytes.slice(45, 78);\n        switch((0, index_js_4.hexlify)(bytes.slice(0, 4))){\n            // Public Key\n            case \"0x0488b21e\":\n            case \"0x043587cf\":\n                {\n                    const publicKey = (0, index_js_4.hexlify)(key);\n                    return new HDNodeVoidWallet(_guard, (0, index_js_3.computeAddress)(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);\n                }\n            // Private Key\n            case \"0x0488ade4\":\n            case \"0x04358394 \":\n                if (key[0] !== 0) {\n                    break;\n                }\n                return new HDNodeWallet(_guard, new index_js_1.SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);\n        }\n        (0, index_js_4.assertArgument)(false, \"invalid extended key prefix\", \"extendedKey\", \"[ REDACTED ]\");\n    }\n    /**\n     *  Creates a new random HDNode.\n     */ static createRandom(password, path, wordlist) {\n        if (password == null) {\n            password = \"\";\n        }\n        if (path == null) {\n            path = exports.defaultPath;\n        }\n        if (wordlist == null) {\n            wordlist = lang_en_js_1.LangEn.wordlist();\n        }\n        const mnemonic = mnemonic_js_1.Mnemonic.fromEntropy((0, index_js_1.randomBytes)(16), password, wordlist);\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n    /**\n     *  Create an HD Node from %%mnemonic%%.\n     */ static fromMnemonic(mnemonic, path) {\n        if (!path) {\n            path = exports.defaultPath;\n        }\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n    /**\n     *  Creates an HD Node from a mnemonic %%phrase%%.\n     */ static fromPhrase(phrase, password, path, wordlist) {\n        if (password == null) {\n            password = \"\";\n        }\n        if (path == null) {\n            path = exports.defaultPath;\n        }\n        if (wordlist == null) {\n            wordlist = lang_en_js_1.LangEn.wordlist();\n        }\n        const mnemonic = mnemonic_js_1.Mnemonic.fromPhrase(phrase, password, wordlist);\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n    /**\n     *  Creates an HD Node from a %%seed%%.\n     */ static fromSeed(seed) {\n        return HDNodeWallet.#fromSeed(seed, null);\n    }\n}\nexports.HDNodeWallet = HDNodeWallet;\n/**\n *  A **HDNodeVoidWallet** cannot sign, but provides access to\n *  the children nodes of a [[link-bip-32]] HD wallet addresses.\n *\n *  The can be created by using an extended ``xpub`` key to\n *  [[HDNodeWallet_fromExtendedKey]] or by\n *  [nuetering](HDNodeWallet-neuter) a [[HDNodeWallet]].\n */ class HDNodeVoidWallet extends index_js_2.VoidSigner {\n    /**\n     *  @private\n     */ constructor(guard, address, publicKey, parentFingerprint, chainCode, path, index, depth, provider){\n        super(address, provider);\n        (0, index_js_4.assertPrivate)(guard, _guard, \"HDNodeVoidWallet\");\n        (0, index_js_4.defineProperties)(this, {\n            publicKey\n        });\n        const fingerprint = (0, index_js_4.dataSlice)((0, index_js_1.ripemd160)((0, index_js_1.sha256)(publicKey)), 0, 4);\n        (0, index_js_4.defineProperties)(this, {\n            publicKey,\n            fingerprint,\n            parentFingerprint,\n            chainCode,\n            path,\n            index,\n            depth\n        });\n    }\n    connect(provider) {\n        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);\n    }\n    /**\n     *  The extended key.\n     *\n     *  This key will begin with the prefix ``xpub`` and can be used to\n     *  reconstruct this neutered key to derive its children addresses.\n     */ get extendedKey() {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n        (0, index_js_4.assert)(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"extendedKey\"\n        });\n        return encodeBase58Check((0, index_js_4.concat)([\n            \"0x0488B21E\",\n            zpad(this.depth, 1),\n            this.parentFingerprint,\n            zpad(this.index, 4),\n            this.chainCode,\n            this.publicKey\n        ]));\n    }\n    /**\n     *  Returns true if this wallet has a path, providing a Type Guard\n     *  that the path is non-null.\n     */ hasPath() {\n        return this.path != null;\n    }\n    /**\n     *  Return the child for %%index%%.\n     */ deriveChild(_index) {\n        const index = (0, index_js_4.getNumber)(_index, \"index\");\n        (0, index_js_4.assertArgument)(index <= 0xffffffff, \"invalid index\", \"index\", index);\n        // Base path\n        let path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n            if (index & HardenedBit) {\n                path += \"'\";\n            }\n        }\n        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);\n        const Ki = index_js_1.SigningKey.addPoints(IL, this.publicKey, true);\n        const address = (0, index_js_3.computeAddress)(Ki);\n        return new HDNodeVoidWallet(_guard, address, Ki, this.fingerprint, (0, index_js_4.hexlify)(IR), path, index, this.depth + 1, this.provider);\n    }\n    /**\n     *  Return the signer for %%path%% from this node.\n     */ derivePath(path) {\n        return derivePath(this, path);\n    }\n}\nexports.HDNodeVoidWallet = HDNodeVoidWallet;\n/*\nexport class HDNodeWalletManager {\n    #root: HDNodeWallet;\n\n    constructor(phrase: string, password?: null | string, path?: null | string, locale?: null | Wordlist) {\n        if (password == null) { password = \"\"; }\n        if (path == null) { path = \"m/44'/60'/0'/0\"; }\n        if (locale == null) { locale = LangEn.wordlist(); }\n        this.#root = HDNodeWallet.fromPhrase(phrase, password, path, locale);\n    }\n\n    getSigner(index?: number): HDNodeWallet {\n        return this.#root.deriveChild((index == null) ? 0: index);\n    }\n}\n*/ /**\n *  Returns the [[link-bip-32]] path for the account at %%index%%.\n *\n *  This is the pattern used by wallets like Ledger.\n *\n *  There is also an [alternate pattern](getIndexedAccountPath) used by\n *  some software.\n */ function getAccountPath(_index) {\n    const index = (0, index_js_4.getNumber)(_index, \"index\");\n    (0, index_js_4.assertArgument)(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\n    return `m/44'/60'/${index}'/0/0`;\n}\nexports.getAccountPath = getAccountPath;\n/**\n *  Returns the path using an alternative pattern for deriving accounts,\n *  at %%index%%.\n *\n *  This derivation path uses the //index// component rather than the\n *  //account// component to derive sequential accounts.\n *\n *  This is the pattern used by wallets like MetaMask.\n */ function getIndexedAccountPath(_index) {\n    const index = (0, index_js_4.getNumber)(_index, \"index\");\n    (0, index_js_4.assertArgument)(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\n    return `m/44'/60'/0'/0/${index}`;\n}\nexports.getIndexedAccountPath = getIndexedAccountPath; //# sourceMappingURL=hdwallet.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93YWxsZXQvaGR3YWxsZXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDZCQUE2QixHQUFHQSxzQkFBc0IsR0FBR0Esd0JBQXdCLEdBQUdBLG9CQUFvQixHQUFHQSxtQkFBbUIsR0FBRyxLQUFLO0FBQ3RJOzs7O0NBSUMsR0FDRCxNQUFNTyxhQUFhQyxtQkFBT0EsQ0FBQyxvRkFBb0I7QUFDL0MsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUMsMEZBQXVCO0FBQ2xELE1BQU1FLGFBQWFGLG1CQUFPQSxDQUFDLDhGQUF5QjtBQUNwRCxNQUFNRyxhQUFhSCxtQkFBT0EsQ0FBQyxrRkFBbUI7QUFDOUMsTUFBTUksZUFBZUosbUJBQU9BLENBQUMsOEZBQXlCO0FBQ3RELE1BQU1LLG1CQUFtQkwsbUJBQU9BLENBQUMsd0ZBQWtCO0FBQ25ELE1BQU1NLGdCQUFnQk4sbUJBQU9BLENBQUMsa0ZBQWU7QUFDN0MsTUFBTU8scUJBQXFCUCxtQkFBT0EsQ0FBQyw0RkFBb0I7QUFDdkQ7O0NBRUMsR0FDRFIsbUJBQW1CLEdBQUc7QUFDdEIsaUJBQWlCO0FBQ2pCLE1BQU1nQixlQUFlLElBQUlDLFdBQVc7SUFBQztJQUFJO0lBQUs7SUFBSztJQUFJO0lBQUs7SUFBSztJQUFLO0lBQUk7SUFBSztJQUFLO0lBQUs7Q0FBSTtBQUM3RixNQUFNQyxjQUFjO0FBQ3BCLE1BQU1DLElBQUlDLE9BQU87QUFDakIsTUFBTUMsVUFBVTtBQUNoQixTQUFTQyxLQUFLckIsS0FBSyxFQUFFc0IsTUFBTTtJQUN2QixJQUFJQyxTQUFTO0lBQ2IsTUFBT3ZCLE1BQU87UUFDVnVCLFNBQVNILE9BQU8sQ0FBQ3BCLFFBQVEsR0FBRyxHQUFHdUI7UUFDL0J2QixRQUFRd0IsS0FBS0MsS0FBSyxDQUFDekIsUUFBUTtJQUMvQjtJQUNBLE1BQU91QixPQUFPRCxNQUFN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U29CO0lBQ3BHLE9BQU8sQ0FBQyxlQUFlLEVBQUVBLE1BQU0sQ0FBQztBQUNwQztBQUNBdEMsNkJBQTZCLEdBQUdFLHVCQUNoQyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93YWxsZXQvaGR3YWxsZXQuanM/M2IzOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0SW5kZXhlZEFjY291bnRQYXRoID0gZXhwb3J0cy5nZXRBY2NvdW50UGF0aCA9IGV4cG9ydHMuSEROb2RlVm9pZFdhbGxldCA9IGV4cG9ydHMuSEROb2RlV2FsbGV0ID0gZXhwb3J0cy5kZWZhdWx0UGF0aCA9IHZvaWQgMDtcbi8qKlxuICogIEV4cGxhaW4gSEQgV2FsbGV0cy4uXG4gKlxuICogIEBfc3Vic2VjdGlvbjogYXBpL3dhbGxldDpIRCBXYWxsZXRzICBbaGQtd2FsbGV0c11cbiAqL1xuY29uc3QgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuLi9jcnlwdG8vaW5kZXguanNcIik7XG5jb25zdCBpbmRleF9qc18yID0gcmVxdWlyZShcIi4uL3Byb3ZpZGVycy9pbmRleC5qc1wiKTtcbmNvbnN0IGluZGV4X2pzXzMgPSByZXF1aXJlKFwiLi4vdHJhbnNhY3Rpb24vaW5kZXguanNcIik7XG5jb25zdCBpbmRleF9qc180ID0gcmVxdWlyZShcIi4uL3V0aWxzL2luZGV4LmpzXCIpO1xuY29uc3QgbGFuZ19lbl9qc18xID0gcmVxdWlyZShcIi4uL3dvcmRsaXN0cy9sYW5nLWVuLmpzXCIpO1xuY29uc3QgYmFzZV93YWxsZXRfanNfMSA9IHJlcXVpcmUoXCIuL2Jhc2Utd2FsbGV0LmpzXCIpO1xuY29uc3QgbW5lbW9uaWNfanNfMSA9IHJlcXVpcmUoXCIuL21uZW1vbmljLmpzXCIpO1xuY29uc3QganNvbl9rZXlzdG9yZV9qc18xID0gcmVxdWlyZShcIi4vanNvbi1rZXlzdG9yZS5qc1wiKTtcbi8qKlxuICogIFRoZSBkZWZhdWx0IGRlcml2YXRpb24gcGF0aCBmb3IgRXRoZXJldW0gSEQgTm9kZXMuIChpLmUuIGBgXCJtLzQ0Jy82MCcvMCcvMC8wXCJgYClcbiAqL1xuZXhwb3J0cy5kZWZhdWx0UGF0aCA9IFwibS80NCcvNjAnLzAnLzAvMFwiO1xuLy8gXCJCaXRjb2luIHNlZWRcIlxuY29uc3QgTWFzdGVyU2VjcmV0ID0gbmV3IFVpbnQ4QXJyYXkoWzY2LCAxMDUsIDExNiwgOTksIDExMSwgMTA1LCAxMTAsIDMyLCAxMTUsIDEwMSwgMTAxLCAxMDBdKTtcbmNvbnN0IEhhcmRlbmVkQml0ID0gMHg4MDAwMDAwMDtcbmNvbnN0IE4gPSBCaWdJbnQoXCIweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlYmFhZWRjZTZhZjQ4YTAzYmJmZDI1ZThjZDAzNjQxNDFcIik7XG5jb25zdCBOaWJibGVzID0gXCIwMTIzNDU2Nzg5YWJjZGVmXCI7XG5mdW5jdGlvbiB6cGFkKHZhbHVlLCBsZW5ndGgpIHtcbiAgICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgICB3aGlsZSAodmFsdWUpIHtcbiAgICAgICAgcmVzdWx0ID0gTmliYmxlc1t2YWx1ZSAlIDE2XSArIHJlc3VsdDtcbiAgICAgICAgdmFsdWUgPSBNYXRoLnRydW5jKHZhbHVlIC8gMTYpO1xuICAgIH1cbiAgICB3aGlsZSAocmVzdWx0Lmxlbmd0aCA8IGxlbmd0aCAqIDIpIHtcbiAgICAgICAgcmVzdWx0ID0gXCIwXCIgKyByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBcIjB4XCIgKyByZXN1bHQ7XG59XG5mdW5jdGlvbiBlbmNvZGVCYXNlNThDaGVjayhfdmFsdWUpIHtcbiAgICBjb25zdCB2YWx1ZSA9ICgwLCBpbmRleF9qc180LmdldEJ5dGVzKShfdmFsdWUpO1xuICAgIGNvbnN0IGNoZWNrID0gKDAsIGluZGV4X2pzXzQuZGF0YVNsaWNlKSgoMCwgaW5kZXhfanNfMS5zaGEyNTYpKCgwLCBpbmRleF9qc18xLnNoYTI1NikodmFsdWUpKSwgMCwgNCk7XG4gICAgY29uc3QgYnl0ZXMgPSAoMCwgaW5kZXhfanNfNC5jb25jYXQpKFt2YWx1ZSwgY2hlY2tdKTtcbiAgICByZXR1cm4gKDAsIGluZGV4X2pzXzQuZW5jb2RlQmFzZTU4KShieXRlcyk7XG59XG5jb25zdCBfZ3VhcmQgPSB7fTtcbmZ1bmN0aW9uIHNlcl9JKGluZGV4LCBjaGFpbkNvZGUsIHB1YmxpY0tleSwgcHJpdmF0ZUtleSkge1xuICAgIGNvbnN0IGRhdGEgPSBuZXcgVWludDhBcnJheSgzNyk7XG4gICAgaWYgKGluZGV4ICYgSGFyZGVuZWRCaXQpIHtcbiAgICAgICAgKDAsIGluZGV4X2pzXzQuYXNzZXJ0KShwcml2YXRlS2V5ICE9IG51bGwsIFwiY2Fubm90IGRlcml2ZSBjaGlsZCBvZiBuZXV0ZXJlZCBub2RlXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogXCJkZXJpdmVDaGlsZFwiXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBEYXRhID0gMHgwMCB8fCBzZXJfMjU2KGtfcGFyKVxuICAgICAgICBkYXRhLnNldCgoMCwgaW5kZXhfanNfNC5nZXRCeXRlcykocHJpdmF0ZUtleSksIDEpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gRGF0YSA9IHNlcl9wKHBvaW50KGtfcGFyKSlcbiAgICAgICAgZGF0YS5zZXQoKDAsIGluZGV4X2pzXzQuZ2V0Qnl0ZXMpKHB1YmxpY0tleSkpO1xuICAgIH1cbiAgICAvLyBEYXRhICs9IHNlcl8zMihpKVxuICAgIGZvciAobGV0IGkgPSAyNDsgaSA+PSAwOyBpIC09IDgpIHtcbiAgICAgICAgZGF0YVszMyArIChpID4+IDMpXSA9ICgoaW5kZXggPj4gKDI0IC0gaSkpICYgMHhmZik7XG4gICAgfVxuICAgIGNvbnN0IEkgPSAoMCwgaW5kZXhfanNfNC5nZXRCeXRlcykoKDAsIGluZGV4X2pzXzEuY29tcHV0ZUhtYWMpKFwic2hhNTEyXCIsIGNoYWluQ29kZSwgZGF0YSkpO1xuICAgIHJldHVybiB7IElMOiBJLnNsaWNlKDAsIDMyKSwgSVI6IEkuc2xpY2UoMzIpIH07XG59XG5mdW5jdGlvbiBkZXJpdmVQYXRoKG5vZGUsIHBhdGgpIHtcbiAgICBjb25zdCBjb21wb25lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gICAgKDAsIGluZGV4X2pzXzQuYXNzZXJ0QXJndW1lbnQpKGNvbXBvbmVudHMubGVuZ3RoID4gMCAmJiAoY29tcG9uZW50c1swXSA9PT0gXCJtXCIgfHwgbm9kZS5kZXB0aCA+IDApLCBcImludmFsaWQgcGF0aFwiLCBcInBhdGhcIiwgcGF0aCk7XG4gICAgaWYgKGNvbXBvbmVudHNbMF0gPT09IFwibVwiKSB7XG4gICAgICAgIGNvbXBvbmVudHMuc2hpZnQoKTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IG5vZGU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb21wb25lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGNvbXBvbmVudHNbaV07XG4gICAgICAgIGlmIChjb21wb25lbnQubWF0Y2goL15bMC05XSsnJC8pKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KGNvbXBvbmVudC5zdWJzdHJpbmcoMCwgY29tcG9uZW50Lmxlbmd0aCAtIDEpKTtcbiAgICAgICAgICAgICgwLCBpbmRleF9qc180LmFzc2VydEFyZ3VtZW50KShpbmRleCA8IEhhcmRlbmVkQml0LCBcImludmFsaWQgcGF0aCBpbmRleFwiLCBgcGF0aFske2l9XWAsIGNvbXBvbmVudCk7XG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuZGVyaXZlQ2hpbGQoSGFyZGVuZWRCaXQgKyBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29tcG9uZW50Lm1hdGNoKC9eWzAtOV0rJC8pKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KGNvbXBvbmVudCk7XG4gICAgICAgICAgICAoMCwgaW5kZXhfanNfNC5hc3NlcnRBcmd1bWVudCkoaW5kZXggPCBIYXJkZW5lZEJpdCwgXCJpbnZhbGlkIHBhdGggaW5kZXhcIiwgYHBhdGhbJHtpfV1gLCBjb21wb25lbnQpO1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmRlcml2ZUNoaWxkKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICgwLCBpbmRleF9qc180LmFzc2VydEFyZ3VtZW50KShmYWxzZSwgXCJpbnZhbGlkIHBhdGggY29tcG9uZW50XCIsIGBwYXRoWyR7aX1dYCwgY29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiAgQW4gKipIRE5vZGVXYWxsZXQqKiBpcyBhIFtbU2lnbmVyXV0gYmFja2VkIGJ5IHRoZSBwcml2YXRlIGtleSBkZXJpdmVkXG4gKiAgZnJvbSBhbiBIRCBOb2RlIHVzaW5nIHRoZSBbW2xpbmstYmlwLTMyXV0gc3RhbnRhcmQuXG4gKlxuICogIEFuIEhEIE5vZGUgZm9ybXMgYSBoaWVyYXJjaGFsIHN0cnVjdHVyZSB3aXRoIGVhY2ggSEQgTm9kZSBoYXZpbmcgYVxuICogIHByaXZhdGUga2V5IGFuZCB0aGUgYWJpbGl0eSB0byBkZXJpdmUgY2hpbGQgSEQgTm9kZXMsIGRlZmluZWQgYnlcbiAqICBhIHBhdGggaW5kaWNhdGluZyB0aGUgaW5kZXggb2YgZWFjaCBjaGlsZC5cbiAqL1xuY2xhc3MgSEROb2RlV2FsbGV0IGV4dGVuZHMgYmFzZV93YWxsZXRfanNfMS5CYXNlV2FsbGV0IHtcbiAgICAvKipcbiAgICAgKiAgVGhlIGNvbXByZXNzZWQgcHVibGljIGtleS5cbiAgICAgKi9cbiAgICBwdWJsaWNLZXk7XG4gICAgLyoqXG4gICAgICogIFRoZSBmaW5nZXJwcmludC5cbiAgICAgKlxuICAgICAqICBBIGZpbmdlcnByaW50IGFsbG93cyBxdWljayBxYXkgdG8gZGV0ZWN0IHBhcmVudCBhbmQgY2hpbGQgbm9kZXMsXG4gICAgICogIGJ1dCBkZXZlbG9wZXJzIHNob3VsZCBiZSBwcmVwYXJlZCB0byBkZWFsIHdpdGggY29sbGlzaW9ucyBhcyBpdFxuICAgICAqICBpcyBvbmx5IDQgYnl0ZXMuXG4gICAgICovXG4gICAgZmluZ2VycHJpbnQ7XG4gICAgLyoqXG4gICAgICogIFRoZSBwYXJlbnQgZmluZ2VycHJpbnQuXG4gICAgICovXG4gICAgcGFyZW50RmluZ2VycHJpbnQ7XG4gICAgLyoqXG4gICAgICogIFRoZSBtbmVtb25pYyB1c2VkIHRvIGNyZWF0ZSB0aGlzIEhEIE5vZGUsIGlmIGF2YWlsYWJsZS5cbiAgICAgKlxuICAgICAqICBTb3VyY2VzIHN1Y2ggYXMgZXh0ZW5kZWQga2V5cyBkbyBub3QgZW5jb2RlIHRoZSBtbmVtb25pYywgaW5cbiAgICAgKiAgd2hpY2ggY2FzZSB0aGlzIHdpbGwgYmUgYGBudWxsYGAuXG4gICAgICovXG4gICAgbW5lbW9uaWM7XG4gICAgLyoqXG4gICAgICogIFRoZSBjaGFpbmNvZGUsIHdoaWNoIGlzIGVmZmVjdGl2ZWx5IGEgcHVibGljIGtleSB1c2VkXG4gICAgICogIHRvIGRlcml2ZSBjaGlsZHJlbi5cbiAgICAgKi9cbiAgICBjaGFpbkNvZGU7XG4gICAgLyoqXG4gICAgICogIFRoZSBkZXJpdmF0aW9uIHBhdGggb2YgdGhpcyB3YWxsZXQuXG4gICAgICpcbiAgICAgKiAgU2luY2UgZXh0ZW5kZWQga2V5cyBkbyBub3QgcHJvdmlkZXIgZnVsbCBwYXRoIGRldGFpbHMsIHRoaXNcbiAgICAgKiAgbWF5IGJlIGBgbnVsbGBgLCBpZiBpbnN0YW50aWF0ZWQgZnJvbSBhIHNvdXJjZSB0aGF0IGRvZXMgbm90XG4gICAgICogIGVub2NkZSBpdC5cbiAgICAgKi9cbiAgICBwYXRoO1xuICAgIC8qKlxuICAgICAqICBUaGUgY2hpbGQgaW5kZXggb2YgdGhpcyB3YWxsZXQuIFZhbHVlcyBvdmVyIGBgMiAqXFwqIDMxYGAgaW5kaWNhdGVcbiAgICAgKiAgdGhlIG5vZGUgaXMgaGFyZGVuZWQuXG4gICAgICovXG4gICAgaW5kZXg7XG4gICAgLyoqXG4gICAgICogIFRoZSBkZXB0aCBvZiB0aGlzIHdhbGxldCwgd2hpY2ggaXMgdGhlIG51bWJlciBvZiBjb21wb25lbnRzXG4gICAgICogIGluIGl0cyBwYXRoLlxuICAgICAqL1xuICAgIGRlcHRoO1xuICAgIC8qKlxuICAgICAqICBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGd1YXJkLCBzaWduaW5nS2V5LCBwYXJlbnRGaW5nZXJwcmludCwgY2hhaW5Db2RlLCBwYXRoLCBpbmRleCwgZGVwdGgsIG1uZW1vbmljLCBwcm92aWRlcikge1xuICAgICAgICBzdXBlcihzaWduaW5nS2V5LCBwcm92aWRlcik7XG4gICAgICAgICgwLCBpbmRleF9qc180LmFzc2VydFByaXZhdGUpKGd1YXJkLCBfZ3VhcmQsIFwiSEROb2RlV2FsbGV0XCIpO1xuICAgICAgICAoMCwgaW5kZXhfanNfNC5kZWZpbmVQcm9wZXJ0aWVzKSh0aGlzLCB7IHB1YmxpY0tleTogc2lnbmluZ0tleS5jb21wcmVzc2VkUHVibGljS2V5IH0pO1xuICAgICAgICBjb25zdCBmaW5nZXJwcmludCA9ICgwLCBpbmRleF9qc180LmRhdGFTbGljZSkoKDAsIGluZGV4X2pzXzEucmlwZW1kMTYwKSgoMCwgaW5kZXhfanNfMS5zaGEyNTYpKHRoaXMucHVibGljS2V5KSksIDAsIDQpO1xuICAgICAgICAoMCwgaW5kZXhfanNfNC5kZWZpbmVQcm9wZXJ0aWVzKSh0aGlzLCB7XG4gICAgICAgICAgICBwYXJlbnRGaW5nZXJwcmludCwgZmluZ2VycHJpbnQsXG4gICAgICAgICAgICBjaGFpbkNvZGUsIHBhdGgsIGluZGV4LCBkZXB0aFxuICAgICAgICB9KTtcbiAgICAgICAgKDAsIGluZGV4X2pzXzQuZGVmaW5lUHJvcGVydGllcykodGhpcywgeyBtbmVtb25pYyB9KTtcbiAgICB9XG4gICAgY29ubmVjdChwcm92aWRlcikge1xuICAgICAgICByZXR1cm4gbmV3IEhETm9kZVdhbGxldChfZ3VhcmQsIHRoaXMuc2lnbmluZ0tleSwgdGhpcy5wYXJlbnRGaW5nZXJwcmludCwgdGhpcy5jaGFpbkNvZGUsIHRoaXMucGF0aCwgdGhpcy5pbmRleCwgdGhpcy5kZXB0aCwgdGhpcy5tbmVtb25pYywgcHJvdmlkZXIpO1xuICAgIH1cbiAgICAjYWNjb3VudCgpIHtcbiAgICAgICAgY29uc3QgYWNjb3VudCA9IHsgYWRkcmVzczogdGhpcy5hZGRyZXNzLCBwcml2YXRlS2V5OiB0aGlzLnByaXZhdGVLZXkgfTtcbiAgICAgICAgY29uc3QgbSA9IHRoaXMubW5lbW9uaWM7XG4gICAgICAgIGlmICh0aGlzLnBhdGggJiYgbSAmJiBtLndvcmRsaXN0LmxvY2FsZSA9PT0gXCJlblwiICYmIG0ucGFzc3dvcmQgPT09IFwiXCIpIHtcbiAgICAgICAgICAgIGFjY291bnQubW5lbW9uaWMgPSB7XG4gICAgICAgICAgICAgICAgcGF0aDogdGhpcy5wYXRoLFxuICAgICAgICAgICAgICAgIGxvY2FsZTogXCJlblwiLFxuICAgICAgICAgICAgICAgIGVudHJvcHk6IG0uZW50cm9weVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjb3VudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlc29sdmVzIHRvIGEgW0pTT04gS2V5c3RvcmUgV2FsbGV0XShqc29uLXdhbGxldHMpIGVuY3J5cHRlZCB3aXRoXG4gICAgICogICUlcGFzc3dvcmQlJS5cbiAgICAgKlxuICAgICAqICBJZiAlJXByb2dyZXNzQ2FsbGJhY2slJSBpcyBzcGVjaWZpZWQsIGl0IHdpbGwgcmVjZWl2ZSBwZXJpb2RpY1xuICAgICAqICB1cGRhdGVzIGFzIHRoZSBlbmNyeXB0aW9uIHByb2Nlc3MgcHJvZ3Jlc2VzLlxuICAgICAqL1xuICAgIGFzeW5jIGVuY3J5cHQocGFzc3dvcmQsIHByb2dyZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0ICgwLCBqc29uX2tleXN0b3JlX2pzXzEuZW5jcnlwdEtleXN0b3JlSnNvbikodGhpcy4jYWNjb3VudCgpLCBwYXNzd29yZCwgeyBwcm9ncmVzc0NhbGxiYWNrIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBhIFtKU09OIEtleXN0b3JlIFdhbGxldF0oanNvbi13YWxsZXRzKSBlbmNyeXBlZCB3aXRoXG4gICAgICogICUlcGFzc3dvcmQlJS5cbiAgICAgKlxuICAgICAqICBJdCBpcyBwcmVmZXJyZWQgdG8gdXNlIHRoZSBbYXN5bmMgdmVyc2lvbl0oZW5jcnlwdCkgaW5zdGVhZCxcbiAgICAgKiAgd2hpY2ggYWxsb3dzIGEgW1tQcm9ncmVzc0NhbGxiYWNrXV0gdG8ga2VlcCB0aGUgdXNlciBpbmZvcm1lZC5cbiAgICAgKlxuICAgICAqICBUaGlzIG1ldGhvZCB3aWxsIGJsb2NrIHRoZSBldmVudCBsb29wIChmcmVlemluZyBhbGwgVUkpIHVudGlsXG4gICAgICogIGl0IGlzIGNvbXBsZXRlLCB3aGljaCBtYXkgYmUgYSBub24tdHJpdmlhbCBkdXJhdGlvbi5cbiAgICAgKi9cbiAgICBlbmNyeXB0U3luYyhwYXNzd29yZCkge1xuICAgICAgICByZXR1cm4gKDAsIGpzb25fa2V5c3RvcmVfanNfMS5lbmNyeXB0S2V5c3RvcmVKc29uU3luYykodGhpcy4jYWNjb3VudCgpLCBwYXNzd29yZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgZXh0ZW5kZWQga2V5LlxuICAgICAqXG4gICAgICogIFRoaXMga2V5IHdpbGwgYmVnaW4gd2l0aCB0aGUgcHJlZml4IGBgeHByaXZgYCBhbmQgY2FuIGJlIHVzZWQgdG9cbiAgICAgKiAgcmVjb25zdHJ1Y3QgdGhpcyBIRCBOb2RlIHRvIGRlcml2ZSBpdHMgY2hpbGRyZW4uXG4gICAgICovXG4gICAgZ2V0IGV4dGVuZGVkS2V5KCkge1xuICAgICAgICAvLyBXZSBvbmx5IHN1cHBvcnQgdGhlIG1haW5uZXQgdmFsdWVzIGZvciBub3csIGJ1dCBpZiBhbnlvbmUgbmVlZHNcbiAgICAgICAgLy8gdGVzdG5ldCB2YWx1ZXMsIGxldCBtZSBrbm93LiBJIGJlbGlldmUgY3VycmVudCBzZW50aW1lbnQgaXMgdGhhdFxuICAgICAgICAvLyB3ZSBzaG91bGQgYWx3YXlzIHVzZSBtYWlubmV0LCBhbmQgdXNlIEJJUC00NCB0byBkZXJpdmUgdGhlIG5ldHdvcmtcbiAgICAgICAgLy8gICAtIE1haW5uZXQ6IHB1YmxpYz0weDA0ODhCMjFFLCBwcml2YXRlPTB4MDQ4OEFERTRcbiAgICAgICAgLy8gICAtIFRlc3RuZXQ6IHB1YmxpYz0weDA0MzU4N0NGLCBwcml2YXRlPTB4MDQzNTgzOTRcbiAgICAgICAgKDAsIGluZGV4X2pzXzQuYXNzZXJ0KSh0aGlzLmRlcHRoIDwgMjU2LCBcIkRlcHRoIHRvbyBkZWVwXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uOiBcImV4dGVuZGVkS2V5XCIgfSk7XG4gICAgICAgIHJldHVybiBlbmNvZGVCYXNlNThDaGVjaygoMCwgaW5kZXhfanNfNC5jb25jYXQpKFtcbiAgICAgICAgICAgIFwiMHgwNDg4QURFNFwiLCB6cGFkKHRoaXMuZGVwdGgsIDEpLCB0aGlzLnBhcmVudEZpbmdlcnByaW50LFxuICAgICAgICAgICAgenBhZCh0aGlzLmluZGV4LCA0KSwgdGhpcy5jaGFpbkNvZGUsXG4gICAgICAgICAgICAoMCwgaW5kZXhfanNfNC5jb25jYXQpKFtcIjB4MDBcIiwgdGhpcy5wcml2YXRlS2V5XSlcbiAgICAgICAgXSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0cnVlIGlmIHRoaXMgd2FsbGV0IGhhcyBhIHBhdGgsIHByb3ZpZGluZyBhIFR5cGUgR3VhcmRcbiAgICAgKiAgdGhhdCB0aGUgcGF0aCBpcyBub24tbnVsbC5cbiAgICAgKi9cbiAgICBoYXNQYXRoKCkgeyByZXR1cm4gKHRoaXMucGF0aCAhPSBudWxsKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGEgbmV1dGVyZWQgSEQgTm9kZSwgd2hpY2ggcmVtb3ZlcyB0aGUgcHJpdmF0ZSBkZXRhaWxzXG4gICAgICogIG9mIGFuIEhEIE5vZGUuXG4gICAgICpcbiAgICAgKiAgQSBuZXV0ZXJlZCBub2RlIGhhcyBubyBwcml2YXRlIGtleSwgYnV0IGNhbiBiZSB1c2VkIHRvIGRlcml2ZVxuICAgICAqICBjaGlsZCBhZGRyZXNzZXMgYW5kIG90aGVyIHB1YmxpYyBkYXRhIGFib3V0IHRoZSBIRCBOb2RlLlxuICAgICAqL1xuICAgIG5ldXRlcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIRE5vZGVWb2lkV2FsbGV0KF9ndWFyZCwgdGhpcy5hZGRyZXNzLCB0aGlzLnB1YmxpY0tleSwgdGhpcy5wYXJlbnRGaW5nZXJwcmludCwgdGhpcy5jaGFpbkNvZGUsIHRoaXMucGF0aCwgdGhpcy5pbmRleCwgdGhpcy5kZXB0aCwgdGhpcy5wcm92aWRlcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gdGhlIGNoaWxkIGZvciAlJWluZGV4JSUuXG4gICAgICovXG4gICAgZGVyaXZlQ2hpbGQoX2luZGV4KSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gKDAsIGluZGV4X2pzXzQuZ2V0TnVtYmVyKShfaW5kZXgsIFwiaW5kZXhcIik7XG4gICAgICAgICgwLCBpbmRleF9qc180LmFzc2VydEFyZ3VtZW50KShpbmRleCA8PSAweGZmZmZmZmZmLCBcImludmFsaWQgaW5kZXhcIiwgXCJpbmRleFwiLCBpbmRleCk7XG4gICAgICAgIC8vIEJhc2UgcGF0aFxuICAgICAgICBsZXQgcGF0aCA9IHRoaXMucGF0aDtcbiAgICAgICAgaWYgKHBhdGgpIHtcbiAgICAgICAgICAgIHBhdGggKz0gXCIvXCIgKyAoaW5kZXggJiB+SGFyZGVuZWRCaXQpO1xuICAgICAgICAgICAgaWYgKGluZGV4ICYgSGFyZGVuZWRCaXQpIHtcbiAgICAgICAgICAgICAgICBwYXRoICs9IFwiJ1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgSVIsIElMIH0gPSBzZXJfSShpbmRleCwgdGhpcy5jaGFpbkNvZGUsIHRoaXMucHVibGljS2V5LCB0aGlzLnByaXZhdGVLZXkpO1xuICAgICAgICBjb25zdCBraSA9IG5ldyBpbmRleF9qc18xLlNpZ25pbmdLZXkoKDAsIGluZGV4X2pzXzQudG9CZUhleCkoKCgwLCBpbmRleF9qc180LnRvQmlnSW50KShJTCkgKyBCaWdJbnQodGhpcy5wcml2YXRlS2V5KSkgJSBOLCAzMikpO1xuICAgICAgICByZXR1cm4gbmV3IEhETm9kZVdhbGxldChfZ3VhcmQsIGtpLCB0aGlzLmZpbmdlcnByaW50LCAoMCwgaW5kZXhfanNfNC5oZXhsaWZ5KShJUiksIHBhdGgsIGluZGV4LCB0aGlzLmRlcHRoICsgMSwgdGhpcy5tbmVtb25pYywgdGhpcy5wcm92aWRlcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gdGhlIEhETm9kZSBmb3IgJSVwYXRoJSUgZnJvbSB0aGlzIG5vZGUuXG4gICAgICovXG4gICAgZGVyaXZlUGF0aChwYXRoKSB7XG4gICAgICAgIHJldHVybiBkZXJpdmVQYXRoKHRoaXMsIHBhdGgpO1xuICAgIH1cbiAgICBzdGF0aWMgI2Zyb21TZWVkKF9zZWVkLCBtbmVtb25pYykge1xuICAgICAgICAoMCwgaW5kZXhfanNfNC5hc3NlcnRBcmd1bWVudCkoKDAsIGluZGV4X2pzXzQuaXNCeXRlc0xpa2UpKF9zZWVkKSwgXCJpbnZhbGlkIHNlZWRcIiwgXCJzZWVkXCIsIFwiW1JFREFDVEVEXVwiKTtcbiAgICAgICAgY29uc3Qgc2VlZCA9ICgwLCBpbmRleF9qc180LmdldEJ5dGVzKShfc2VlZCwgXCJzZWVkXCIpO1xuICAgICAgICAoMCwgaW5kZXhfanNfNC5hc3NlcnRBcmd1bWVudCkoc2VlZC5sZW5ndGggPj0gMTYgJiYgc2VlZC5sZW5ndGggPD0gNjQsIFwiaW52YWxpZCBzZWVkXCIsIFwic2VlZFwiLCBcIltSRURBQ1RFRF1cIik7XG4gICAgICAgIGNvbnN0IEkgPSAoMCwgaW5kZXhfanNfNC5nZXRCeXRlcykoKDAsIGluZGV4X2pzXzEuY29tcHV0ZUhtYWMpKFwic2hhNTEyXCIsIE1hc3RlclNlY3JldCwgc2VlZCkpO1xuICAgICAgICBjb25zdCBzaWduaW5nS2V5ID0gbmV3IGluZGV4X2pzXzEuU2lnbmluZ0tleSgoMCwgaW5kZXhfanNfNC5oZXhsaWZ5KShJLnNsaWNlKDAsIDMyKSkpO1xuICAgICAgICByZXR1cm4gbmV3IEhETm9kZVdhbGxldChfZ3VhcmQsIHNpZ25pbmdLZXksIFwiMHgwMDAwMDAwMFwiLCAoMCwgaW5kZXhfanNfNC5oZXhsaWZ5KShJLnNsaWNlKDMyKSksIFwibVwiLCAwLCAwLCBtbmVtb25pYywgbnVsbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3IEhEIE5vZGUgZnJvbSAlJWV4dGVuZGVkS2V5JSUuXG4gICAgICpcbiAgICAgKiAgSWYgdGhlICUlZXh0ZW5kZWRLZXklJSB3aWxsIGVpdGhlciBoYXZlIGEgcHJlZml4IG9yIGBgeHB1YmBgIG9yXG4gICAgICogIGBgeHByaXZgYCwgcmV0dXJuaW5nIGEgbmV1dGVyZWQgSEQgTm9kZSAoW1tIRE5vZGVWb2lkV2FsbGV0XV0pXG4gICAgICogIG9yIGZ1bGwgSEQgTm9kZSAoW1tIRE5vZGVXYWxsZXQpIHJlc3BlY3RpdmVseS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbUV4dGVuZGVkS2V5KGV4dGVuZGVkS2V5KSB7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gKDAsIGluZGV4X2pzXzQudG9CZUFycmF5KSgoMCwgaW5kZXhfanNfNC5kZWNvZGVCYXNlNTgpKGV4dGVuZGVkS2V5KSk7IC8vIEBUT0RPOiByZWRhY3RcbiAgICAgICAgKDAsIGluZGV4X2pzXzQuYXNzZXJ0QXJndW1lbnQpKGJ5dGVzLmxlbmd0aCA9PT0gODIgfHwgZW5jb2RlQmFzZTU4Q2hlY2soYnl0ZXMuc2xpY2UoMCwgNzgpKSA9PT0gZXh0ZW5kZWRLZXksIFwiaW52YWxpZCBleHRlbmRlZCBrZXlcIiwgXCJleHRlbmRlZEtleVwiLCBcIlsgUkVEQUNURUQgXVwiKTtcbiAgICAgICAgY29uc3QgZGVwdGggPSBieXRlc1s0XTtcbiAgICAgICAgY29uc3QgcGFyZW50RmluZ2VycHJpbnQgPSAoMCwgaW5kZXhfanNfNC5oZXhsaWZ5KShieXRlcy5zbGljZSg1LCA5KSk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoKDAsIGluZGV4X2pzXzQuaGV4bGlmeSkoYnl0ZXMuc2xpY2UoOSwgMTMpKS5zdWJzdHJpbmcoMiksIDE2KTtcbiAgICAgICAgY29uc3QgY2hhaW5Db2RlID0gKDAsIGluZGV4X2pzXzQuaGV4bGlmeSkoYnl0ZXMuc2xpY2UoMTMsIDQ1KSk7XG4gICAgICAgIGNvbnN0IGtleSA9IGJ5dGVzLnNsaWNlKDQ1LCA3OCk7XG4gICAgICAgIHN3aXRjaCAoKDAsIGluZGV4X2pzXzQuaGV4bGlmeSkoYnl0ZXMuc2xpY2UoMCwgNCkpKSB7XG4gICAgICAgICAgICAvLyBQdWJsaWMgS2V5XG4gICAgICAgICAgICBjYXNlIFwiMHgwNDg4YjIxZVwiOlxuICAgICAgICAgICAgY2FzZSBcIjB4MDQzNTg3Y2ZcIjoge1xuICAgICAgICAgICAgICAgIGNvbnN0IHB1YmxpY0tleSA9ICgwLCBpbmRleF9qc180LmhleGxpZnkpKGtleSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBIRE5vZGVWb2lkV2FsbGV0KF9ndWFyZCwgKDAsIGluZGV4X2pzXzMuY29tcHV0ZUFkZHJlc3MpKHB1YmxpY0tleSksIHB1YmxpY0tleSwgcGFyZW50RmluZ2VycHJpbnQsIGNoYWluQ29kZSwgbnVsbCwgaW5kZXgsIGRlcHRoLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFByaXZhdGUgS2V5XG4gICAgICAgICAgICBjYXNlIFwiMHgwNDg4YWRlNFwiOlxuICAgICAgICAgICAgY2FzZSBcIjB4MDQzNTgzOTQgXCI6XG4gICAgICAgICAgICAgICAgaWYgKGtleVswXSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBIRE5vZGVXYWxsZXQoX2d1YXJkLCBuZXcgaW5kZXhfanNfMS5TaWduaW5nS2V5KGtleS5zbGljZSgxKSksIHBhcmVudEZpbmdlcnByaW50LCBjaGFpbkNvZGUsIG51bGwsIGluZGV4LCBkZXB0aCwgbnVsbCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgKDAsIGluZGV4X2pzXzQuYXNzZXJ0QXJndW1lbnQpKGZhbHNlLCBcImludmFsaWQgZXh0ZW5kZWQga2V5IHByZWZpeFwiLCBcImV4dGVuZGVkS2V5XCIsIFwiWyBSRURBQ1RFRCBdXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyByYW5kb20gSEROb2RlLlxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVSYW5kb20ocGFzc3dvcmQsIHBhdGgsIHdvcmRsaXN0KSB7XG4gICAgICAgIGlmIChwYXNzd29yZCA9PSBudWxsKSB7XG4gICAgICAgICAgICBwYXNzd29yZCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhdGggPT0gbnVsbCkge1xuICAgICAgICAgICAgcGF0aCA9IGV4cG9ydHMuZGVmYXVsdFBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdvcmRsaXN0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHdvcmRsaXN0ID0gbGFuZ19lbl9qc18xLkxhbmdFbi53b3JkbGlzdCgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1uZW1vbmljID0gbW5lbW9uaWNfanNfMS5NbmVtb25pYy5mcm9tRW50cm9weSgoMCwgaW5kZXhfanNfMS5yYW5kb21CeXRlcykoMTYpLCBwYXNzd29yZCwgd29yZGxpc3QpO1xuICAgICAgICByZXR1cm4gSEROb2RlV2FsbGV0LiNmcm9tU2VlZChtbmVtb25pYy5jb21wdXRlU2VlZCgpLCBtbmVtb25pYykuZGVyaXZlUGF0aChwYXRoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIENyZWF0ZSBhbiBIRCBOb2RlIGZyb20gJSVtbmVtb25pYyUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tTW5lbW9uaWMobW5lbW9uaWMsIHBhdGgpIHtcbiAgICAgICAgaWYgKCFwYXRoKSB7XG4gICAgICAgICAgICBwYXRoID0gZXhwb3J0cy5kZWZhdWx0UGF0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSEROb2RlV2FsbGV0LiNmcm9tU2VlZChtbmVtb25pYy5jb21wdXRlU2VlZCgpLCBtbmVtb25pYykuZGVyaXZlUGF0aChwYXRoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIENyZWF0ZXMgYW4gSEQgTm9kZSBmcm9tIGEgbW5lbW9uaWMgJSVwaHJhc2UlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVBocmFzZShwaHJhc2UsIHBhc3N3b3JkLCBwYXRoLCB3b3JkbGlzdCkge1xuICAgICAgICBpZiAocGFzc3dvcmQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcGFzc3dvcmQgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXRoID09IG51bGwpIHtcbiAgICAgICAgICAgIHBhdGggPSBleHBvcnRzLmRlZmF1bHRQYXRoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3b3JkbGlzdCA9PSBudWxsKSB7XG4gICAgICAgICAgICB3b3JkbGlzdCA9IGxhbmdfZW5fanNfMS5MYW5nRW4ud29yZGxpc3QoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtbmVtb25pYyA9IG1uZW1vbmljX2pzXzEuTW5lbW9uaWMuZnJvbVBocmFzZShwaHJhc2UsIHBhc3N3b3JkLCB3b3JkbGlzdCk7XG4gICAgICAgIHJldHVybiBIRE5vZGVXYWxsZXQuI2Zyb21TZWVkKG1uZW1vbmljLmNvbXB1dGVTZWVkKCksIG1uZW1vbmljKS5kZXJpdmVQYXRoKHBhdGgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhbiBIRCBOb2RlIGZyb20gYSAlJXNlZWQlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVNlZWQoc2VlZCkge1xuICAgICAgICByZXR1cm4gSEROb2RlV2FsbGV0LiNmcm9tU2VlZChzZWVkLCBudWxsKTtcbiAgICB9XG59XG5leHBvcnRzLkhETm9kZVdhbGxldCA9IEhETm9kZVdhbGxldDtcbi8qKlxuICogIEEgKipIRE5vZGVWb2lkV2FsbGV0KiogY2Fubm90IHNpZ24sIGJ1dCBwcm92aWRlcyBhY2Nlc3MgdG9cbiAqICB0aGUgY2hpbGRyZW4gbm9kZXMgb2YgYSBbW2xpbmstYmlwLTMyXV0gSEQgd2FsbGV0IGFkZHJlc3Nlcy5cbiAqXG4gKiAgVGhlIGNhbiBiZSBjcmVhdGVkIGJ5IHVzaW5nIGFuIGV4dGVuZGVkIGBgeHB1YmBgIGtleSB0b1xuICogIFtbSEROb2RlV2FsbGV0X2Zyb21FeHRlbmRlZEtleV1dIG9yIGJ5XG4gKiAgW251ZXRlcmluZ10oSEROb2RlV2FsbGV0LW5ldXRlcikgYSBbW0hETm9kZVdhbGxldF1dLlxuICovXG5jbGFzcyBIRE5vZGVWb2lkV2FsbGV0IGV4dGVuZHMgaW5kZXhfanNfMi5Wb2lkU2lnbmVyIHtcbiAgICAvKipcbiAgICAgKiAgVGhlIGNvbXByZXNzZWQgcHVibGljIGtleS5cbiAgICAgKi9cbiAgICBwdWJsaWNLZXk7XG4gICAgLyoqXG4gICAgICogIFRoZSBmaW5nZXJwcmludC5cbiAgICAgKlxuICAgICAqICBBIGZpbmdlcnByaW50IGFsbG93cyBxdWljayBxYXkgdG8gZGV0ZWN0IHBhcmVudCBhbmQgY2hpbGQgbm9kZXMsXG4gICAgICogIGJ1dCBkZXZlbG9wZXJzIHNob3VsZCBiZSBwcmVwYXJlZCB0byBkZWFsIHdpdGggY29sbGlzaW9ucyBhcyBpdFxuICAgICAqICBpcyBvbmx5IDQgYnl0ZXMuXG4gICAgICovXG4gICAgZmluZ2VycHJpbnQ7XG4gICAgLyoqXG4gICAgICogIFRoZSBwYXJlbnQgbm9kZSBmaW5nZXJwcmludC5cbiAgICAgKi9cbiAgICBwYXJlbnRGaW5nZXJwcmludDtcbiAgICAvKipcbiAgICAgKiAgVGhlIGNoYWluY29kZSwgd2hpY2ggaXMgZWZmZWN0aXZlbHkgYSBwdWJsaWMga2V5IHVzZWRcbiAgICAgKiAgdG8gZGVyaXZlIGNoaWxkcmVuLlxuICAgICAqL1xuICAgIGNoYWluQ29kZTtcbiAgICAvKipcbiAgICAgKiAgVGhlIGRlcml2YXRpb24gcGF0aCBvZiB0aGlzIHdhbGxldC5cbiAgICAgKlxuICAgICAqICBTaW5jZSBleHRlbmRlZCBrZXlzIGRvIG5vdCBwcm92aWRlciBmdWxsIHBhdGggZGV0YWlscywgdGhpc1xuICAgICAqICBtYXkgYmUgYGBudWxsYGAsIGlmIGluc3RhbnRpYXRlZCBmcm9tIGEgc291cmNlIHRoYXQgZG9lcyBub3RcbiAgICAgKiAgZW5vY2RlIGl0LlxuICAgICAqL1xuICAgIHBhdGg7XG4gICAgLyoqXG4gICAgICogIFRoZSBjaGlsZCBpbmRleCBvZiB0aGlzIHdhbGxldC4gVmFsdWVzIG92ZXIgYGAyICpcXCogMzFgYCBpbmRpY2F0ZVxuICAgICAqICB0aGUgbm9kZSBpcyBoYXJkZW5lZC5cbiAgICAgKi9cbiAgICBpbmRleDtcbiAgICAvKipcbiAgICAgKiAgVGhlIGRlcHRoIG9mIHRoaXMgd2FsbGV0LCB3aGljaCBpcyB0aGUgbnVtYmVyIG9mIGNvbXBvbmVudHNcbiAgICAgKiAgaW4gaXRzIHBhdGguXG4gICAgICovXG4gICAgZGVwdGg7XG4gICAgLyoqXG4gICAgICogIEBwcml2YXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZ3VhcmQsIGFkZHJlc3MsIHB1YmxpY0tleSwgcGFyZW50RmluZ2VycHJpbnQsIGNoYWluQ29kZSwgcGF0aCwgaW5kZXgsIGRlcHRoLCBwcm92aWRlcikge1xuICAgICAgICBzdXBlcihhZGRyZXNzLCBwcm92aWRlcik7XG4gICAgICAgICgwLCBpbmRleF9qc180LmFzc2VydFByaXZhdGUpKGd1YXJkLCBfZ3VhcmQsIFwiSEROb2RlVm9pZFdhbGxldFwiKTtcbiAgICAgICAgKDAsIGluZGV4X2pzXzQuZGVmaW5lUHJvcGVydGllcykodGhpcywgeyBwdWJsaWNLZXkgfSk7XG4gICAgICAgIGNvbnN0IGZpbmdlcnByaW50ID0gKDAsIGluZGV4X2pzXzQuZGF0YVNsaWNlKSgoMCwgaW5kZXhfanNfMS5yaXBlbWQxNjApKCgwLCBpbmRleF9qc18xLnNoYTI1NikocHVibGljS2V5KSksIDAsIDQpO1xuICAgICAgICAoMCwgaW5kZXhfanNfNC5kZWZpbmVQcm9wZXJ0aWVzKSh0aGlzLCB7XG4gICAgICAgICAgICBwdWJsaWNLZXksIGZpbmdlcnByaW50LCBwYXJlbnRGaW5nZXJwcmludCwgY2hhaW5Db2RlLCBwYXRoLCBpbmRleCwgZGVwdGhcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbm5lY3QocHJvdmlkZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIRE5vZGVWb2lkV2FsbGV0KF9ndWFyZCwgdGhpcy5hZGRyZXNzLCB0aGlzLnB1YmxpY0tleSwgdGhpcy5wYXJlbnRGaW5nZXJwcmludCwgdGhpcy5jaGFpbkNvZGUsIHRoaXMucGF0aCwgdGhpcy5pbmRleCwgdGhpcy5kZXB0aCwgcHJvdmlkZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIGV4dGVuZGVkIGtleS5cbiAgICAgKlxuICAgICAqICBUaGlzIGtleSB3aWxsIGJlZ2luIHdpdGggdGhlIHByZWZpeCBgYHhwdWJgYCBhbmQgY2FuIGJlIHVzZWQgdG9cbiAgICAgKiAgcmVjb25zdHJ1Y3QgdGhpcyBuZXV0ZXJlZCBrZXkgdG8gZGVyaXZlIGl0cyBjaGlsZHJlbiBhZGRyZXNzZXMuXG4gICAgICovXG4gICAgZ2V0IGV4dGVuZGVkS2V5KCkge1xuICAgICAgICAvLyBXZSBvbmx5IHN1cHBvcnQgdGhlIG1haW5uZXQgdmFsdWVzIGZvciBub3csIGJ1dCBpZiBhbnlvbmUgbmVlZHNcbiAgICAgICAgLy8gdGVzdG5ldCB2YWx1ZXMsIGxldCBtZSBrbm93LiBJIGJlbGlldmUgY3VycmVudCBzZW50aW1lbnQgaXMgdGhhdFxuICAgICAgICAvLyB3ZSBzaG91bGQgYWx3YXlzIHVzZSBtYWlubmV0LCBhbmQgdXNlIEJJUC00NCB0byBkZXJpdmUgdGhlIG5ldHdvcmtcbiAgICAgICAgLy8gICAtIE1haW5uZXQ6IHB1YmxpYz0weDA0ODhCMjFFLCBwcml2YXRlPTB4MDQ4OEFERTRcbiAgICAgICAgLy8gICAtIFRlc3RuZXQ6IHB1YmxpYz0weDA0MzU4N0NGLCBwcml2YXRlPTB4MDQzNTgzOTRcbiAgICAgICAgKDAsIGluZGV4X2pzXzQuYXNzZXJ0KSh0aGlzLmRlcHRoIDwgMjU2LCBcIkRlcHRoIHRvbyBkZWVwXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uOiBcImV4dGVuZGVkS2V5XCIgfSk7XG4gICAgICAgIHJldHVybiBlbmNvZGVCYXNlNThDaGVjaygoMCwgaW5kZXhfanNfNC5jb25jYXQpKFtcbiAgICAgICAgICAgIFwiMHgwNDg4QjIxRVwiLFxuICAgICAgICAgICAgenBhZCh0aGlzLmRlcHRoLCAxKSxcbiAgICAgICAgICAgIHRoaXMucGFyZW50RmluZ2VycHJpbnQsXG4gICAgICAgICAgICB6cGFkKHRoaXMuaW5kZXgsIDQpLFxuICAgICAgICAgICAgdGhpcy5jaGFpbkNvZGUsXG4gICAgICAgICAgICB0aGlzLnB1YmxpY0tleSxcbiAgICAgICAgXSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0cnVlIGlmIHRoaXMgd2FsbGV0IGhhcyBhIHBhdGgsIHByb3ZpZGluZyBhIFR5cGUgR3VhcmRcbiAgICAgKiAgdGhhdCB0aGUgcGF0aCBpcyBub24tbnVsbC5cbiAgICAgKi9cbiAgICBoYXNQYXRoKCkgeyByZXR1cm4gKHRoaXMucGF0aCAhPSBudWxsKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gdGhlIGNoaWxkIGZvciAlJWluZGV4JSUuXG4gICAgICovXG4gICAgZGVyaXZlQ2hpbGQoX2luZGV4KSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gKDAsIGluZGV4X2pzXzQuZ2V0TnVtYmVyKShfaW5kZXgsIFwiaW5kZXhcIik7XG4gICAgICAgICgwLCBpbmRleF9qc180LmFzc2VydEFyZ3VtZW50KShpbmRleCA8PSAweGZmZmZmZmZmLCBcImludmFsaWQgaW5kZXhcIiwgXCJpbmRleFwiLCBpbmRleCk7XG4gICAgICAgIC8vIEJhc2UgcGF0aFxuICAgICAgICBsZXQgcGF0aCA9IHRoaXMucGF0aDtcbiAgICAgICAgaWYgKHBhdGgpIHtcbiAgICAgICAgICAgIHBhdGggKz0gXCIvXCIgKyAoaW5kZXggJiB+SGFyZGVuZWRCaXQpO1xuICAgICAgICAgICAgaWYgKGluZGV4ICYgSGFyZGVuZWRCaXQpIHtcbiAgICAgICAgICAgICAgICBwYXRoICs9IFwiJ1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgSVIsIElMIH0gPSBzZXJfSShpbmRleCwgdGhpcy5jaGFpbkNvZGUsIHRoaXMucHVibGljS2V5LCBudWxsKTtcbiAgICAgICAgY29uc3QgS2kgPSBpbmRleF9qc18xLlNpZ25pbmdLZXkuYWRkUG9pbnRzKElMLCB0aGlzLnB1YmxpY0tleSwgdHJ1ZSk7XG4gICAgICAgIGNvbnN0IGFkZHJlc3MgPSAoMCwgaW5kZXhfanNfMy5jb21wdXRlQWRkcmVzcykoS2kpO1xuICAgICAgICByZXR1cm4gbmV3IEhETm9kZVZvaWRXYWxsZXQoX2d1YXJkLCBhZGRyZXNzLCBLaSwgdGhpcy5maW5nZXJwcmludCwgKDAsIGluZGV4X2pzXzQuaGV4bGlmeSkoSVIpLCBwYXRoLCBpbmRleCwgdGhpcy5kZXB0aCArIDEsIHRoaXMucHJvdmlkZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIHRoZSBzaWduZXIgZm9yICUlcGF0aCUlIGZyb20gdGhpcyBub2RlLlxuICAgICAqL1xuICAgIGRlcml2ZVBhdGgocGF0aCkge1xuICAgICAgICByZXR1cm4gZGVyaXZlUGF0aCh0aGlzLCBwYXRoKTtcbiAgICB9XG59XG5leHBvcnRzLkhETm9kZVZvaWRXYWxsZXQgPSBIRE5vZGVWb2lkV2FsbGV0O1xuLypcbmV4cG9ydCBjbGFzcyBIRE5vZGVXYWxsZXRNYW5hZ2VyIHtcbiAgICAjcm9vdDogSEROb2RlV2FsbGV0O1xuXG4gICAgY29uc3RydWN0b3IocGhyYXNlOiBzdHJpbmcsIHBhc3N3b3JkPzogbnVsbCB8IHN0cmluZywgcGF0aD86IG51bGwgfCBzdHJpbmcsIGxvY2FsZT86IG51bGwgfCBXb3JkbGlzdCkge1xuICAgICAgICBpZiAocGFzc3dvcmQgPT0gbnVsbCkgeyBwYXNzd29yZCA9IFwiXCI7IH1cbiAgICAgICAgaWYgKHBhdGggPT0gbnVsbCkgeyBwYXRoID0gXCJtLzQ0Jy82MCcvMCcvMFwiOyB9XG4gICAgICAgIGlmIChsb2NhbGUgPT0gbnVsbCkgeyBsb2NhbGUgPSBMYW5nRW4ud29yZGxpc3QoKTsgfVxuICAgICAgICB0aGlzLiNyb290ID0gSEROb2RlV2FsbGV0LmZyb21QaHJhc2UocGhyYXNlLCBwYXNzd29yZCwgcGF0aCwgbG9jYWxlKTtcbiAgICB9XG5cbiAgICBnZXRTaWduZXIoaW5kZXg/OiBudW1iZXIpOiBIRE5vZGVXYWxsZXQge1xuICAgICAgICByZXR1cm4gdGhpcy4jcm9vdC5kZXJpdmVDaGlsZCgoaW5kZXggPT0gbnVsbCkgPyAwOiBpbmRleCk7XG4gICAgfVxufVxuKi9cbi8qKlxuICogIFJldHVybnMgdGhlIFtbbGluay1iaXAtMzJdXSBwYXRoIGZvciB0aGUgYWNjb3VudCBhdCAlJWluZGV4JSUuXG4gKlxuICogIFRoaXMgaXMgdGhlIHBhdHRlcm4gdXNlZCBieSB3YWxsZXRzIGxpa2UgTGVkZ2VyLlxuICpcbiAqICBUaGVyZSBpcyBhbHNvIGFuIFthbHRlcm5hdGUgcGF0dGVybl0oZ2V0SW5kZXhlZEFjY291bnRQYXRoKSB1c2VkIGJ5XG4gKiAgc29tZSBzb2Z0d2FyZS5cbiAqL1xuZnVuY3Rpb24gZ2V0QWNjb3VudFBhdGgoX2luZGV4KSB7XG4gICAgY29uc3QgaW5kZXggPSAoMCwgaW5kZXhfanNfNC5nZXROdW1iZXIpKF9pbmRleCwgXCJpbmRleFwiKTtcbiAgICAoMCwgaW5kZXhfanNfNC5hc3NlcnRBcmd1bWVudCkoaW5kZXggPj0gMCAmJiBpbmRleCA8IEhhcmRlbmVkQml0LCBcImludmFsaWQgYWNjb3VudCBpbmRleFwiLCBcImluZGV4XCIsIGluZGV4KTtcbiAgICByZXR1cm4gYG0vNDQnLzYwJy8ke2luZGV4fScvMC8wYDtcbn1cbmV4cG9ydHMuZ2V0QWNjb3VudFBhdGggPSBnZXRBY2NvdW50UGF0aDtcbi8qKlxuICogIFJldHVybnMgdGhlIHBhdGggdXNpbmcgYW4gYWx0ZXJuYXRpdmUgcGF0dGVybiBmb3IgZGVyaXZpbmcgYWNjb3VudHMsXG4gKiAgYXQgJSVpbmRleCUlLlxuICpcbiAqICBUaGlzIGRlcml2YXRpb24gcGF0aCB1c2VzIHRoZSAvL2luZGV4Ly8gY29tcG9uZW50IHJhdGhlciB0aGFuIHRoZVxuICogIC8vYWNjb3VudC8vIGNvbXBvbmVudCB0byBkZXJpdmUgc2VxdWVudGlhbCBhY2NvdW50cy5cbiAqXG4gKiAgVGhpcyBpcyB0aGUgcGF0dGVybiB1c2VkIGJ5IHdhbGxldHMgbGlrZSBNZXRhTWFzay5cbiAqL1xuZnVuY3Rpb24gZ2V0SW5kZXhlZEFjY291bnRQYXRoKF9pbmRleCkge1xuICAgIGNvbnN0IGluZGV4ID0gKDAsIGluZGV4X2pzXzQuZ2V0TnVtYmVyKShfaW5kZXgsIFwiaW5kZXhcIik7XG4gICAgKDAsIGluZGV4X2pzXzQuYXNzZXJ0QXJndW1lbnQpKGluZGV4ID49IDAgJiYgaW5kZXggPCBIYXJkZW5lZEJpdCwgXCJpbnZhbGlkIGFjY291bnQgaW5kZXhcIiwgXCJpbmRleFwiLCBpbmRleCk7XG4gICAgcmV0dXJuIGBtLzQ0Jy82MCcvMCcvMC8ke2luZGV4fWA7XG59XG5leHBvcnRzLmdldEluZGV4ZWRBY2NvdW50UGF0aCA9IGdldEluZGV4ZWRBY2NvdW50UGF0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhkd2FsbGV0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldEluZGV4ZWRBY2NvdW50UGF0aCIsImdldEFjY291bnRQYXRoIiwiSEROb2RlVm9pZFdhbGxldCIsIkhETm9kZVdhbGxldCIsImRlZmF1bHRQYXRoIiwiaW5kZXhfanNfMSIsInJlcXVpcmUiLCJpbmRleF9qc18yIiwiaW5kZXhfanNfMyIsImluZGV4X2pzXzQiLCJsYW5nX2VuX2pzXzEiLCJiYXNlX3dhbGxldF9qc18xIiwibW5lbW9uaWNfanNfMSIsImpzb25fa2V5c3RvcmVfanNfMSIsIk1hc3RlclNlY3JldCIsIlVpbnQ4QXJyYXkiLCJIYXJkZW5lZEJpdCIsIk4iLCJCaWdJbnQiLCJOaWJibGVzIiwienBhZCIsImxlbmd0aCIsInJlc3VsdCIsIk1hdGgiLCJ0cnVuYyIsImVuY29kZUJhc2U1OENoZWNrIiwiX3ZhbHVlIiwiZ2V0Qnl0ZXMiLCJjaGVjayIsImRhdGFTbGljZSIsInNoYTI1NiIsImJ5dGVzIiwiY29uY2F0IiwiZW5jb2RlQmFzZTU4IiwiX2d1YXJkIiwic2VyX0kiLCJpbmRleCIsImNoYWluQ29kZSIsInB1YmxpY0tleSIsInByaXZhdGVLZXkiLCJkYXRhIiwiYXNzZXJ0Iiwib3BlcmF0aW9uIiwic2V0IiwiaSIsIkkiLCJjb21wdXRlSG1hYyIsIklMIiwic2xpY2UiLCJJUiIsImRlcml2ZVBhdGgiLCJub2RlIiwicGF0aCIsImNvbXBvbmVudHMiLCJzcGxpdCIsImFzc2VydEFyZ3VtZW50IiwiZGVwdGgiLCJzaGlmdCIsImNvbXBvbmVudCIsIm1hdGNoIiwicGFyc2VJbnQiLCJzdWJzdHJpbmciLCJkZXJpdmVDaGlsZCIsIkJhc2VXYWxsZXQiLCJjb25zdHJ1Y3RvciIsImd1YXJkIiwic2lnbmluZ0tleSIsInBhcmVudEZpbmdlcnByaW50IiwibW5lbW9uaWMiLCJwcm92aWRlciIsImFzc2VydFByaXZhdGUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY29tcHJlc3NlZFB1YmxpY0tleSIsImZpbmdlcnByaW50IiwicmlwZW1kMTYwIiwiY29ubmVjdCIsImFjY291bnQiLCJhZGRyZXNzIiwibSIsIndvcmRsaXN0IiwibG9jYWxlIiwicGFzc3dvcmQiLCJlbnRyb3B5IiwiZW5jcnlwdCIsInByb2dyZXNzQ2FsbGJhY2siLCJlbmNyeXB0S2V5c3RvcmVKc29uIiwiZW5jcnlwdFN5bmMiLCJlbmNyeXB0S2V5c3RvcmVKc29uU3luYyIsImV4dGVuZGVkS2V5IiwiaGFzUGF0aCIsIm5ldXRlciIsIl9pbmRleCIsImdldE51bWJlciIsImtpIiwiU2lnbmluZ0tleSIsInRvQmVIZXgiLCJ0b0JpZ0ludCIsImhleGxpZnkiLCJmcm9tU2VlZCIsIl9zZWVkIiwiaXNCeXRlc0xpa2UiLCJzZWVkIiwiZnJvbUV4dGVuZGVkS2V5IiwidG9CZUFycmF5IiwiZGVjb2RlQmFzZTU4Iiwia2V5IiwiY29tcHV0ZUFkZHJlc3MiLCJjcmVhdGVSYW5kb20iLCJMYW5nRW4iLCJNbmVtb25pYyIsImZyb21FbnRyb3B5IiwicmFuZG9tQnl0ZXMiLCJjb21wdXRlU2VlZCIsImZyb21NbmVtb25pYyIsImZyb21QaHJhc2UiLCJwaHJhc2UiLCJWb2lkU2lnbmVyIiwiS2kiLCJhZGRQb2ludHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wallet/hdwallet.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wallet/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wallet/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  When interacting with Ethereum, it is necessary to use a private\n *  key authenticate actions by signing a payload.\n *\n *  Wallets are the simplest way to expose the concept of an\n *  //Externally Owner Account// (EOA) as it wraps a private key\n *  and supports high-level methods to sign common types of interaction\n *  and send transactions.\n *\n *  The class most developers will want to use is [[Wallet]], which\n *  can load a private key directly or from any common wallet format.\n *\n *  The [[HDNodeWallet]] can be used when it is necessary to access\n *  low-level details of how an HD wallets are derived, exported\n *  or imported.\n *\n *  @_section: api/wallet:Wallets  [about-wallets]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Wallet = exports.Mnemonic = exports.encryptKeystoreJsonSync = exports.encryptKeystoreJson = exports.decryptKeystoreJson = exports.decryptKeystoreJsonSync = exports.isKeystoreJson = exports.decryptCrowdsaleJson = exports.isCrowdsaleJson = exports.HDNodeVoidWallet = exports.HDNodeWallet = exports.getIndexedAccountPath = exports.getAccountPath = exports.defaultPath = exports.BaseWallet = void 0;\nvar base_wallet_js_1 = __webpack_require__(/*! ./base-wallet.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wallet/base-wallet.js\");\nObject.defineProperty(exports, \"BaseWallet\", ({\n    enumerable: true,\n    get: function() {\n        return base_wallet_js_1.BaseWallet;\n    }\n}));\nvar hdwallet_js_1 = __webpack_require__(/*! ./hdwallet.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wallet/hdwallet.js\");\nObject.defineProperty(exports, \"defaultPath\", ({\n    enumerable: true,\n    get: function() {\n        return hdwallet_js_1.defaultPath;\n    }\n}));\nObject.defineProperty(exports, \"getAccountPath\", ({\n    enumerable: true,\n    get: function() {\n        return hdwallet_js_1.getAccountPath;\n    }\n}));\nObject.defineProperty(exports, \"getIndexedAccountPath\", ({\n    enumerable: true,\n    get: function() {\n        return hdwallet_js_1.getIndexedAccountPath;\n    }\n}));\nObject.defineProperty(exports, \"HDNodeWallet\", ({\n    enumerable: true,\n    get: function() {\n        return hdwallet_js_1.HDNodeWallet;\n    }\n}));\nObject.defineProperty(exports, \"HDNodeVoidWallet\", ({\n    enumerable: true,\n    get: function() {\n        return hdwallet_js_1.HDNodeVoidWallet;\n    }\n}));\nvar json_crowdsale_js_1 = __webpack_require__(/*! ./json-crowdsale.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wallet/json-crowdsale.js\");\nObject.defineProperty(exports, \"isCrowdsaleJson\", ({\n    enumerable: true,\n    get: function() {\n        return json_crowdsale_js_1.isCrowdsaleJson;\n    }\n}));\nObject.defineProperty(exports, \"decryptCrowdsaleJson\", ({\n    enumerable: true,\n    get: function() {\n        return json_crowdsale_js_1.decryptCrowdsaleJson;\n    }\n}));\nvar json_keystore_js_1 = __webpack_require__(/*! ./json-keystore.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wallet/json-keystore.js\");\nObject.defineProperty(exports, \"isKeystoreJson\", ({\n    enumerable: true,\n    get: function() {\n        return json_keystore_js_1.isKeystoreJson;\n    }\n}));\nObject.defineProperty(exports, \"decryptKeystoreJsonSync\", ({\n    enumerable: true,\n    get: function() {\n        return json_keystore_js_1.decryptKeystoreJsonSync;\n    }\n}));\nObject.defineProperty(exports, \"decryptKeystoreJson\", ({\n    enumerable: true,\n    get: function() {\n        return json_keystore_js_1.decryptKeystoreJson;\n    }\n}));\nObject.defineProperty(exports, \"encryptKeystoreJson\", ({\n    enumerable: true,\n    get: function() {\n        return json_keystore_js_1.encryptKeystoreJson;\n    }\n}));\nObject.defineProperty(exports, \"encryptKeystoreJsonSync\", ({\n    enumerable: true,\n    get: function() {\n        return json_keystore_js_1.encryptKeystoreJsonSync;\n    }\n}));\nvar mnemonic_js_1 = __webpack_require__(/*! ./mnemonic.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wallet/mnemonic.js\");\nObject.defineProperty(exports, \"Mnemonic\", ({\n    enumerable: true,\n    get: function() {\n        return mnemonic_js_1.Mnemonic;\n    }\n}));\nvar wallet_js_1 = __webpack_require__(/*! ./wallet.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wallet/wallet.js\");\nObject.defineProperty(exports, \"Wallet\", ({\n    enumerable: true,\n    get: function() {\n        return wallet_js_1.Wallet;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wallet/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wallet/json-crowdsale.js":
/*!*******************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wallet/json-crowdsale.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decryptCrowdsaleJson = exports.isCrowdsaleJson = void 0;\nconst aes_js_1 = __webpack_require__(/*! aes-js */ \"(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/index.js\");\nconst index_js_1 = __webpack_require__(/*! ../address/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../crypto/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/index.js\");\nconst index_js_3 = __webpack_require__(/*! ../hash/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/hash/index.js\");\nconst index_js_4 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wallet/utils.js\");\n/**\n *  Returns true if %%json%% is a valid JSON Crowdsale wallet.\n */ function isCrowdsaleJson(json) {\n    try {\n        const data = JSON.parse(json);\n        if (data.encseed) {\n            return true;\n        }\n    } catch (error) {}\n    return false;\n}\nexports.isCrowdsaleJson = isCrowdsaleJson;\n// See: https://github.com/ethereum/pyethsaletool\n/**\n *  Before Ethereum launched, it was necessary to create a wallet\n *  format for backers to use, which would be used to receive ether\n *  as a reward for contributing to the project.\n *\n *  The [[link-crowdsale]] format is now obsolete, but it is still\n *  useful to support and the additional code is fairly trivial as\n *  all the primitives required are used through core portions of\n *  the library.\n */ function decryptCrowdsaleJson(json, _password) {\n    const data = JSON.parse(json);\n    const password = (0, utils_js_1.getPassword)(_password);\n    // Ethereum Address\n    const address = (0, index_js_1.getAddress)((0, utils_js_1.spelunk)(data, \"ethaddr:string!\"));\n    // Encrypted Seed\n    const encseed = (0, utils_js_1.looseArrayify)((0, utils_js_1.spelunk)(data, \"encseed:string!\"));\n    (0, index_js_4.assertArgument)(encseed && encseed.length % 16 === 0, \"invalid encseed\", \"json\", json);\n    const key = (0, index_js_4.getBytes)((0, index_js_2.pbkdf2)(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n    const iv = encseed.slice(0, 16);\n    const encryptedSeed = encseed.slice(16);\n    // Decrypt the seed\n    const aesCbc = new aes_js_1.CBC(key, iv);\n    const seed = (0, aes_js_1.pkcs7Strip)((0, index_js_4.getBytes)(aesCbc.decrypt(encryptedSeed)));\n    // This wallet format is weird... Convert the binary encoded hex to a string.\n    let seedHex = \"\";\n    for(let i = 0; i < seed.length; i++){\n        seedHex += String.fromCharCode(seed[i]);\n    }\n    return {\n        address,\n        privateKey: (0, index_js_3.id)(seedHex)\n    };\n}\nexports.decryptCrowdsaleJson = decryptCrowdsaleJson; //# sourceMappingURL=json-crowdsale.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93YWxsZXQvanNvbi1jcm93ZHNhbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Q0FFQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNEJBQTRCLEdBQUdBLHVCQUF1QixHQUFHLEtBQUs7QUFDOUQsTUFBTUksV0FBV0MsbUJBQU9BLENBQUMscUZBQVE7QUFDakMsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUMsc0ZBQXFCO0FBQ2hELE1BQU1FLGFBQWFGLG1CQUFPQSxDQUFDLG9GQUFvQjtBQUMvQyxNQUFNRyxhQUFhSCxtQkFBT0EsQ0FBQyxnRkFBa0I7QUFDN0MsTUFBTUksYUFBYUosbUJBQU9BLENBQUMsa0ZBQW1CO0FBQzlDLE1BQU1LLGFBQWFMLG1CQUFPQSxDQUFDLDRFQUFZO0FBQ3ZDOztDQUVDLEdBQ0QsU0FBU0YsZ0JBQWdCUSxJQUFJO0lBQ3pCLElBQUk7UUFDQSxNQUFNQyxPQUFPQyxLQUFLQyxLQUFLLENBQUNIO1FBQ3hCLElBQUlDLEtBQUtHLE9BQU8sRUFBRTtZQUNkLE9BQU87UUFDWDtJQUNKLEVBQ0EsT0FBT0MsT0FBTyxDQUFFO0lBQ2hCLE9BQU87QUFDWDtBQUNBaEIsdUJBQXVCLEdBQUdHO0FBQzFCLGlEQUFpRDtBQUNqRDs7Ozs7Ozs7O0NBU0MsR0FDRCxTQUFTRCxxQkFBcUJTLElBQUksRUFBRU0sU0FBUztJQUN6QyxNQUFNTCxPQUFPQyxLQUFLQyxLQUFLLENBQUNIO0lBQ3hCLE1BQU1PLFdBQVcsQ0FBQyxHQUFHUixXQUFXUyxXQUFXLEVBQUVGO0lBQzdDLG1CQUFtQjtJQUNuQixNQUFNRyxVQUFVLENBQUMsR0FBR2QsV0FBV2UsVUFBVSxFQUFFLENBQUMsR0FBR1gsV0FBV1ksT0FBTyxFQUFFVixNQUFNO0lBQ3pFLGlCQUFpQjtJQUNqQixNQUFNRyxVQUFVLENBQUMsR0FBR0wsV0FBV2EsYUFBYSxFQUFFLENBQUMsR0FBR2IsV0FBV1ksT0FBTyxFQUFFVixNQUFNO0lBQzNFLElBQUdILFdBQVdlLGNBQWMsRUFBRVQsV0FBVyxRQUFTVSxNQUFNLEdBQUcsT0FBUSxHQUFHLG1CQUFtQixRQUFRZDtJQUNsRyxNQUFNZSxNQUFNLENBQUMsR0FBR2pCLFdBQVdrQixRQUFRLEVBQUUsQ0FBQyxHQUFHcEIsV0FBV3FCLE1BQU0sRUFBRVYsVUFBVUEsVUFBVSxNQUFNLElBQUksV0FBV1csS0FBSyxDQUFDLEdBQUc7SUFDOUcsTUFBTUMsS0FBS2YsUUFBUWMsS0FBSyxDQUFDLEdBQUc7SUFDNUIsTUFBTUUsZ0JBQWdCaEIsUUFBUWMsS0FBSyxDQUFDO0lBQ3BDLG1CQUFtQjtJQUNuQixNQUFNRyxTQUFTLElBQUk1QixTQUFTNkIsR0FBRyxDQUFDUCxLQUFLSTtJQUNyQyxNQUFNSSxPQUFPLENBQUMsR0FBRzlCLFNBQVMrQixVQUFVLEVBQUUsQ0FBQyxHQUFHMUIsV0FBV2tCLFFBQVEsRUFBRUssT0FBT0ksT0FBTyxDQUFDTDtJQUM5RSw2RUFBNkU7SUFDN0UsSUFBSU0sVUFBVTtJQUNkLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSixLQUFLVCxNQUFNLEVBQUVhLElBQUs7UUFDbENELFdBQVdFLE9BQU9DLFlBQVksQ0FBQ04sSUFBSSxDQUFDSSxFQUFFO0lBQzFDO0lBQ0EsT0FBTztRQUFFbEI7UUFBU3FCLFlBQVksQ0FBQyxHQUFHakMsV0FBV2tDLEVBQUUsRUFBRUw7SUFBUztBQUM5RDtBQUNBckMsNEJBQTRCLEdBQUdFLHNCQUMvQiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93YWxsZXQvanNvbi1jcm93ZHNhbGUuanM/YTc0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogIEBfc3Vic2VjdGlvbjogYXBpL3dhbGxldDpKU09OIFdhbGxldHMgIFtqc29uLXdhbGxldHNdXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjcnlwdENyb3dkc2FsZUpzb24gPSBleHBvcnRzLmlzQ3Jvd2RzYWxlSnNvbiA9IHZvaWQgMDtcbmNvbnN0IGFlc19qc18xID0gcmVxdWlyZShcImFlcy1qc1wiKTtcbmNvbnN0IGluZGV4X2pzXzEgPSByZXF1aXJlKFwiLi4vYWRkcmVzcy9pbmRleC5qc1wiKTtcbmNvbnN0IGluZGV4X2pzXzIgPSByZXF1aXJlKFwiLi4vY3J5cHRvL2luZGV4LmpzXCIpO1xuY29uc3QgaW5kZXhfanNfMyA9IHJlcXVpcmUoXCIuLi9oYXNoL2luZGV4LmpzXCIpO1xuY29uc3QgaW5kZXhfanNfNCA9IHJlcXVpcmUoXCIuLi91dGlscy9pbmRleC5qc1wiKTtcbmNvbnN0IHV0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi91dGlscy5qc1wiKTtcbi8qKlxuICogIFJldHVybnMgdHJ1ZSBpZiAlJWpzb24lJSBpcyBhIHZhbGlkIEpTT04gQ3Jvd2RzYWxlIHdhbGxldC5cbiAqL1xuZnVuY3Rpb24gaXNDcm93ZHNhbGVKc29uKGpzb24pIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICAgICAgaWYgKGRhdGEuZW5jc2VlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmlzQ3Jvd2RzYWxlSnNvbiA9IGlzQ3Jvd2RzYWxlSnNvbjtcbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3B5ZXRoc2FsZXRvb2xcbi8qKlxuICogIEJlZm9yZSBFdGhlcmV1bSBsYXVuY2hlZCwgaXQgd2FzIG5lY2Vzc2FyeSB0byBjcmVhdGUgYSB3YWxsZXRcbiAqICBmb3JtYXQgZm9yIGJhY2tlcnMgdG8gdXNlLCB3aGljaCB3b3VsZCBiZSB1c2VkIHRvIHJlY2VpdmUgZXRoZXJcbiAqICBhcyBhIHJld2FyZCBmb3IgY29udHJpYnV0aW5nIHRvIHRoZSBwcm9qZWN0LlxuICpcbiAqICBUaGUgW1tsaW5rLWNyb3dkc2FsZV1dIGZvcm1hdCBpcyBub3cgb2Jzb2xldGUsIGJ1dCBpdCBpcyBzdGlsbFxuICogIHVzZWZ1bCB0byBzdXBwb3J0IGFuZCB0aGUgYWRkaXRpb25hbCBjb2RlIGlzIGZhaXJseSB0cml2aWFsIGFzXG4gKiAgYWxsIHRoZSBwcmltaXRpdmVzIHJlcXVpcmVkIGFyZSB1c2VkIHRocm91Z2ggY29yZSBwb3J0aW9ucyBvZlxuICogIHRoZSBsaWJyYXJ5LlxuICovXG5mdW5jdGlvbiBkZWNyeXB0Q3Jvd2RzYWxlSnNvbihqc29uLCBfcGFzc3dvcmQpIHtcbiAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICBjb25zdCBwYXNzd29yZCA9ICgwLCB1dGlsc19qc18xLmdldFBhc3N3b3JkKShfcGFzc3dvcmQpO1xuICAgIC8vIEV0aGVyZXVtIEFkZHJlc3NcbiAgICBjb25zdCBhZGRyZXNzID0gKDAsIGluZGV4X2pzXzEuZ2V0QWRkcmVzcykoKDAsIHV0aWxzX2pzXzEuc3BlbHVuaykoZGF0YSwgXCJldGhhZGRyOnN0cmluZyFcIikpO1xuICAgIC8vIEVuY3J5cHRlZCBTZWVkXG4gICAgY29uc3QgZW5jc2VlZCA9ICgwLCB1dGlsc19qc18xLmxvb3NlQXJyYXlpZnkpKCgwLCB1dGlsc19qc18xLnNwZWx1bmspKGRhdGEsIFwiZW5jc2VlZDpzdHJpbmchXCIpKTtcbiAgICAoMCwgaW5kZXhfanNfNC5hc3NlcnRBcmd1bWVudCkoZW5jc2VlZCAmJiAoZW5jc2VlZC5sZW5ndGggJSAxNikgPT09IDAsIFwiaW52YWxpZCBlbmNzZWVkXCIsIFwianNvblwiLCBqc29uKTtcbiAgICBjb25zdCBrZXkgPSAoMCwgaW5kZXhfanNfNC5nZXRCeXRlcykoKDAsIGluZGV4X2pzXzIucGJrZGYyKShwYXNzd29yZCwgcGFzc3dvcmQsIDIwMDAsIDMyLCBcInNoYTI1NlwiKSkuc2xpY2UoMCwgMTYpO1xuICAgIGNvbnN0IGl2ID0gZW5jc2VlZC5zbGljZSgwLCAxNik7XG4gICAgY29uc3QgZW5jcnlwdGVkU2VlZCA9IGVuY3NlZWQuc2xpY2UoMTYpO1xuICAgIC8vIERlY3J5cHQgdGhlIHNlZWRcbiAgICBjb25zdCBhZXNDYmMgPSBuZXcgYWVzX2pzXzEuQ0JDKGtleSwgaXYpO1xuICAgIGNvbnN0IHNlZWQgPSAoMCwgYWVzX2pzXzEucGtjczdTdHJpcCkoKDAsIGluZGV4X2pzXzQuZ2V0Qnl0ZXMpKGFlc0NiYy5kZWNyeXB0KGVuY3J5cHRlZFNlZWQpKSk7XG4gICAgLy8gVGhpcyB3YWxsZXQgZm9ybWF0IGlzIHdlaXJkLi4uIENvbnZlcnQgdGhlIGJpbmFyeSBlbmNvZGVkIGhleCB0byBhIHN0cmluZy5cbiAgICBsZXQgc2VlZEhleCA9IFwiXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNlZWRIZXggKz0gU3RyaW5nLmZyb21DaGFyQ29kZShzZWVkW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgYWRkcmVzcywgcHJpdmF0ZUtleTogKDAsIGluZGV4X2pzXzMuaWQpKHNlZWRIZXgpIH07XG59XG5leHBvcnRzLmRlY3J5cHRDcm93ZHNhbGVKc29uID0gZGVjcnlwdENyb3dkc2FsZUpzb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc29uLWNyb3dkc2FsZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWNyeXB0Q3Jvd2RzYWxlSnNvbiIsImlzQ3Jvd2RzYWxlSnNvbiIsImFlc19qc18xIiwicmVxdWlyZSIsImluZGV4X2pzXzEiLCJpbmRleF9qc18yIiwiaW5kZXhfanNfMyIsImluZGV4X2pzXzQiLCJ1dGlsc19qc18xIiwianNvbiIsImRhdGEiLCJKU09OIiwicGFyc2UiLCJlbmNzZWVkIiwiZXJyb3IiLCJfcGFzc3dvcmQiLCJwYXNzd29yZCIsImdldFBhc3N3b3JkIiwiYWRkcmVzcyIsImdldEFkZHJlc3MiLCJzcGVsdW5rIiwibG9vc2VBcnJheWlmeSIsImFzc2VydEFyZ3VtZW50IiwibGVuZ3RoIiwia2V5IiwiZ2V0Qnl0ZXMiLCJwYmtkZjIiLCJzbGljZSIsIml2IiwiZW5jcnlwdGVkU2VlZCIsImFlc0NiYyIsIkNCQyIsInNlZWQiLCJwa2NzN1N0cmlwIiwiZGVjcnlwdCIsInNlZWRIZXgiLCJpIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwicHJpdmF0ZUtleSIsImlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wallet/json-crowdsale.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wallet/json-keystore.js":
/*!******************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wallet/json-keystore.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  The JSON Wallet formats allow a simple way to store the private\n *  keys needed in Ethereum along with related information and allows\n *  for extensible forms of encryption.\n *\n *  These utilities facilitate decrypting and encrypting the most common\n *  JSON Wallet formats.\n *\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.encryptKeystoreJson = exports.encryptKeystoreJsonSync = exports.decryptKeystoreJson = exports.decryptKeystoreJsonSync = exports.isKeystoreJson = void 0;\nconst aes_js_1 = __webpack_require__(/*! aes-js */ \"(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/index.js\");\nconst index_js_1 = __webpack_require__(/*! ../address/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/address/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../crypto/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/index.js\");\nconst index_js_3 = __webpack_require__(/*! ../transaction/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/transaction/index.js\");\nconst index_js_4 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wallet/utils.js\");\nconst _version_js_1 = __webpack_require__(/*! ../_version.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/_version.js\");\nconst defaultPath = \"m/44'/60'/0'/0/0\";\n/**\n *  Returns true if %%json%% is a valid JSON Keystore Wallet.\n */ function isKeystoreJson(json) {\n    try {\n        const data = JSON.parse(json);\n        const version = data.version != null ? parseInt(data.version) : 0;\n        if (version === 3) {\n            return true;\n        }\n    } catch (error) {}\n    return false;\n}\nexports.isKeystoreJson = isKeystoreJson;\nfunction decrypt(data, key, ciphertext) {\n    const cipher = (0, utils_js_1.spelunk)(data, \"crypto.cipher:string\");\n    if (cipher === \"aes-128-ctr\") {\n        const iv = (0, utils_js_1.spelunk)(data, \"crypto.cipherparams.iv:data!\");\n        const aesCtr = new aes_js_1.CTR(key, iv);\n        return (0, index_js_4.hexlify)(aesCtr.decrypt(ciphertext));\n    }\n    (0, index_js_4.assert)(false, \"unsupported cipher\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"decrypt\"\n    });\n}\nfunction getAccount(data, _key) {\n    const key = (0, index_js_4.getBytes)(_key);\n    const ciphertext = (0, utils_js_1.spelunk)(data, \"crypto.ciphertext:data!\");\n    const computedMAC = (0, index_js_4.hexlify)((0, index_js_2.keccak256)((0, index_js_4.concat)([\n        key.slice(16, 32),\n        ciphertext\n    ]))).substring(2);\n    (0, index_js_4.assertArgument)(computedMAC === (0, utils_js_1.spelunk)(data, \"crypto.mac:string!\").toLowerCase(), \"incorrect password\", \"password\", \"[ REDACTED ]\");\n    const privateKey = decrypt(data, key.slice(0, 16), ciphertext);\n    const address = (0, index_js_3.computeAddress)(privateKey);\n    if (data.address) {\n        let check = data.address.toLowerCase();\n        if (!check.startsWith(\"0x\")) {\n            check = \"0x\" + check;\n        }\n        (0, index_js_4.assertArgument)((0, index_js_1.getAddress)(check) === address, \"keystore address/privateKey mismatch\", \"address\", data.address);\n    }\n    const account = {\n        address,\n        privateKey\n    };\n    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n    const version = (0, utils_js_1.spelunk)(data, \"x-ethers.version:string\");\n    if (version === \"0.1\") {\n        const mnemonicKey = key.slice(32, 64);\n        const mnemonicCiphertext = (0, utils_js_1.spelunk)(data, \"x-ethers.mnemonicCiphertext:data!\");\n        const mnemonicIv = (0, utils_js_1.spelunk)(data, \"x-ethers.mnemonicCounter:data!\");\n        const mnemonicAesCtr = new aes_js_1.CTR(mnemonicKey, mnemonicIv);\n        account.mnemonic = {\n            path: (0, utils_js_1.spelunk)(data, \"x-ethers.path:string\") || defaultPath,\n            locale: (0, utils_js_1.spelunk)(data, \"x-ethers.locale:string\") || \"en\",\n            entropy: (0, index_js_4.hexlify)((0, index_js_4.getBytes)(mnemonicAesCtr.decrypt(mnemonicCiphertext)))\n        };\n    }\n    return account;\n}\nfunction getDecryptKdfParams(data) {\n    const kdf = (0, utils_js_1.spelunk)(data, \"crypto.kdf:string\");\n    if (kdf && typeof kdf === \"string\") {\n        if (kdf.toLowerCase() === \"scrypt\") {\n            const salt = (0, utils_js_1.spelunk)(data, \"crypto.kdfparams.salt:data!\");\n            const N = (0, utils_js_1.spelunk)(data, \"crypto.kdfparams.n:int!\");\n            const r = (0, utils_js_1.spelunk)(data, \"crypto.kdfparams.r:int!\");\n            const p = (0, utils_js_1.spelunk)(data, \"crypto.kdfparams.p:int!\");\n            // Make sure N is a power of 2\n            (0, index_js_4.assertArgument)(N > 0 && (N & N - 1) === 0, \"invalid kdf.N\", \"kdf.N\", N);\n            (0, index_js_4.assertArgument)(r > 0 && p > 0, \"invalid kdf\", \"kdf\", kdf);\n            const dkLen = (0, utils_js_1.spelunk)(data, \"crypto.kdfparams.dklen:int!\");\n            (0, index_js_4.assertArgument)(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dflen\", dkLen);\n            return {\n                name: \"scrypt\",\n                salt,\n                N,\n                r,\n                p,\n                dkLen: 64\n            };\n        } else if (kdf.toLowerCase() === \"pbkdf2\") {\n            const salt = (0, utils_js_1.spelunk)(data, \"crypto.kdfparams.salt:data!\");\n            const prf = (0, utils_js_1.spelunk)(data, \"crypto.kdfparams.prf:string!\");\n            const algorithm = prf.split(\"-\").pop();\n            (0, index_js_4.assertArgument)(algorithm === \"sha256\" || algorithm === \"sha512\", \"invalid kdf.pdf\", \"kdf.pdf\", prf);\n            const count = (0, utils_js_1.spelunk)(data, \"crypto.kdfparams.c:int!\");\n            const dkLen = (0, utils_js_1.spelunk)(data, \"crypto.kdfparams.dklen:int!\");\n            (0, index_js_4.assertArgument)(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dklen\", dkLen);\n            return {\n                name: \"pbkdf2\",\n                salt,\n                count,\n                dkLen,\n                algorithm\n            };\n        }\n    }\n    (0, index_js_4.assertArgument)(false, \"unsupported key-derivation function\", \"kdf\", kdf);\n}\n/**\n *  Returns the account details for the JSON Keystore Wallet %%json%%\n *  using %%password%%.\n *\n *  It is preferred to use the [async version](decryptKeystoreJson)\n *  instead, which allows a [[ProgressCallback]] to keep the user informed\n *  as to the decryption status.\n *\n *  This method will block the event loop (freezing all UI) until decryption\n *  is complete, which can take quite some time, depending on the wallet\n *  paramters and platform.\n */ function decryptKeystoreJsonSync(json, _password) {\n    const data = JSON.parse(json);\n    const password = (0, utils_js_1.getPassword)(_password);\n    const params = getDecryptKdfParams(data);\n    if (params.name === \"pbkdf2\") {\n        const { salt, count, dkLen, algorithm } = params;\n        const key = (0, index_js_2.pbkdf2)(password, salt, count, dkLen, algorithm);\n        return getAccount(data, key);\n    }\n    (0, index_js_4.assert)(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", {\n        params\n    });\n    const { salt, N, r, p, dkLen } = params;\n    const key = (0, index_js_2.scryptSync)(password, salt, N, r, p, dkLen);\n    return getAccount(data, key);\n}\nexports.decryptKeystoreJsonSync = decryptKeystoreJsonSync;\nfunction stall(duration) {\n    return new Promise((resolve)=>{\n        setTimeout(()=>{\n            resolve();\n        }, duration);\n    });\n}\n/**\n *  Resolves to the decrypted JSON Keystore Wallet %%json%% using the\n *  %%password%%.\n *\n *  If provided, %%progress%% will be called periodically during the\n *  decrpytion to provide feedback, and if the function returns\n *  ``false`` will halt decryption.\n *\n *  The %%progressCallback%% will **always** receive ``0`` before\n *  decryption begins and ``1`` when complete.\n */ async function decryptKeystoreJson(json, _password, progress) {\n    const data = JSON.parse(json);\n    const password = (0, utils_js_1.getPassword)(_password);\n    const params = getDecryptKdfParams(data);\n    if (params.name === \"pbkdf2\") {\n        if (progress) {\n            progress(0);\n            await stall(0);\n        }\n        const { salt, count, dkLen, algorithm } = params;\n        const key = (0, index_js_2.pbkdf2)(password, salt, count, dkLen, algorithm);\n        if (progress) {\n            progress(1);\n            await stall(0);\n        }\n        return getAccount(data, key);\n    }\n    (0, index_js_4.assert)(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", {\n        params\n    });\n    const { salt, N, r, p, dkLen } = params;\n    const key = await (0, index_js_2.scrypt)(password, salt, N, r, p, dkLen, progress);\n    return getAccount(data, key);\n}\nexports.decryptKeystoreJson = decryptKeystoreJson;\nfunction getEncryptKdfParams(options) {\n    // Check/generate the salt\n    const salt = options.salt != null ? (0, index_js_4.getBytes)(options.salt, \"options.salt\") : (0, index_js_2.randomBytes)(32);\n    // Override the scrypt password-based key derivation function parameters\n    let N = 1 << 17, r = 8, p = 1;\n    if (options.scrypt) {\n        if (options.scrypt.N) {\n            N = options.scrypt.N;\n        }\n        if (options.scrypt.r) {\n            r = options.scrypt.r;\n        }\n        if (options.scrypt.p) {\n            p = options.scrypt.p;\n        }\n    }\n    (0, index_js_4.assertArgument)(typeof N === \"number\" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), \"invalid scrypt N parameter\", \"options.N\", N);\n    (0, index_js_4.assertArgument)(typeof r === \"number\" && r > 0 && Number.isSafeInteger(r), \"invalid scrypt r parameter\", \"options.r\", r);\n    (0, index_js_4.assertArgument)(typeof p === \"number\" && p > 0 && Number.isSafeInteger(p), \"invalid scrypt p parameter\", \"options.p\", p);\n    return {\n        name: \"scrypt\",\n        dkLen: 32,\n        salt,\n        N,\n        r,\n        p\n    };\n}\nfunction _encryptKeystore(key, kdf, account, options) {\n    const privateKey = (0, index_js_4.getBytes)(account.privateKey, \"privateKey\");\n    // Override initialization vector\n    const iv = options.iv != null ? (0, index_js_4.getBytes)(options.iv, \"options.iv\") : (0, index_js_2.randomBytes)(16);\n    (0, index_js_4.assertArgument)(iv.length === 16, \"invalid options.iv length\", \"options.iv\", options.iv);\n    // Override the uuid\n    const uuidRandom = options.uuid != null ? (0, index_js_4.getBytes)(options.uuid, \"options.uuid\") : (0, index_js_2.randomBytes)(16);\n    (0, index_js_4.assertArgument)(uuidRandom.length === 16, \"invalid options.uuid length\", \"options.uuid\", options.iv);\n    // This will be used to encrypt the wallet (as per Web3 secret storage)\n    // - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n    // - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n    const derivedKey = key.slice(0, 16);\n    const macPrefix = key.slice(16, 32);\n    // Encrypt the private key\n    const aesCtr = new aes_js_1.CTR(derivedKey, iv);\n    const ciphertext = (0, index_js_4.getBytes)(aesCtr.encrypt(privateKey));\n    // Compute the message authentication code, used to check the password\n    const mac = (0, index_js_2.keccak256)((0, index_js_4.concat)([\n        macPrefix,\n        ciphertext\n    ]));\n    // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n    const data = {\n        address: account.address.substring(2).toLowerCase(),\n        id: (0, index_js_4.uuidV4)(uuidRandom),\n        version: 3,\n        Crypto: {\n            cipher: \"aes-128-ctr\",\n            cipherparams: {\n                iv: (0, index_js_4.hexlify)(iv).substring(2)\n            },\n            ciphertext: (0, index_js_4.hexlify)(ciphertext).substring(2),\n            kdf: \"scrypt\",\n            kdfparams: {\n                salt: (0, index_js_4.hexlify)(kdf.salt).substring(2),\n                n: kdf.N,\n                dklen: 32,\n                p: kdf.p,\n                r: kdf.r\n            },\n            mac: mac.substring(2)\n        }\n    };\n    // If we have a mnemonic, encrypt it into the JSON wallet\n    if (account.mnemonic) {\n        const client = options.client != null ? options.client : `ethers/${_version_js_1.version}`;\n        const path = account.mnemonic.path || defaultPath;\n        const locale = account.mnemonic.locale || \"en\";\n        const mnemonicKey = key.slice(32, 64);\n        const entropy = (0, index_js_4.getBytes)(account.mnemonic.entropy, \"account.mnemonic.entropy\");\n        const mnemonicIv = (0, index_js_2.randomBytes)(16);\n        const mnemonicAesCtr = new aes_js_1.CTR(mnemonicKey, mnemonicIv);\n        const mnemonicCiphertext = (0, index_js_4.getBytes)(mnemonicAesCtr.encrypt(entropy));\n        const now = new Date();\n        const timestamp = now.getUTCFullYear() + \"-\" + (0, utils_js_1.zpad)(now.getUTCMonth() + 1, 2) + \"-\" + (0, utils_js_1.zpad)(now.getUTCDate(), 2) + \"T\" + (0, utils_js_1.zpad)(now.getUTCHours(), 2) + \"-\" + (0, utils_js_1.zpad)(now.getUTCMinutes(), 2) + \"-\" + (0, utils_js_1.zpad)(now.getUTCSeconds(), 2) + \".0Z\";\n        const gethFilename = \"UTC--\" + timestamp + \"--\" + data.address;\n        data[\"x-ethers\"] = {\n            client,\n            gethFilename,\n            path,\n            locale,\n            mnemonicCounter: (0, index_js_4.hexlify)(mnemonicIv).substring(2),\n            mnemonicCiphertext: (0, index_js_4.hexlify)(mnemonicCiphertext).substring(2),\n            version: \"0.1\"\n        };\n    }\n    return JSON.stringify(data);\n}\n/**\n *  Return the JSON Keystore Wallet for %%account%% encrypted with\n *  %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used. Any provided [[ProgressCallback]] is ignord.\n */ function encryptKeystoreJsonSync(account, password, options) {\n    if (options == null) {\n        options = {};\n    }\n    const passwordBytes = (0, utils_js_1.getPassword)(password);\n    const kdf = getEncryptKdfParams(options);\n    const key = (0, index_js_2.scryptSync)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);\n    return _encryptKeystore((0, index_js_4.getBytes)(key), kdf, account, options);\n}\nexports.encryptKeystoreJsonSync = encryptKeystoreJsonSync;\n/**\n *  Resolved to the JSON Keystore Wallet for %%account%% encrypted\n *  with %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used and provide a [[ProgressCallback]] to receive periodic updates\n *  on the completion status..\n */ async function encryptKeystoreJson(account, password, options) {\n    if (options == null) {\n        options = {};\n    }\n    const passwordBytes = (0, utils_js_1.getPassword)(password);\n    const kdf = getEncryptKdfParams(options);\n    const key = await (0, index_js_2.scrypt)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);\n    return _encryptKeystore((0, index_js_4.getBytes)(key), kdf, account, options);\n}\nexports.encryptKeystoreJson = encryptKeystoreJson; //# sourceMappingURL=json-keystore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wallet/json-keystore.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wallet/mnemonic.js":
/*!*************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wallet/mnemonic.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Mnemonic = void 0;\nconst index_js_1 = __webpack_require__(/*! ../crypto/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst lang_en_js_1 = __webpack_require__(/*! ../wordlists/lang-en.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-en.js\");\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits) {\n    return (1 << bits) - 1 << 8 - bits & 0xff;\n}\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits) {\n    return (1 << bits) - 1 & 0xff;\n}\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    (0, index_js_2.assertNormalize)(\"NFKD\");\n    if (wordlist == null) {\n        wordlist = lang_en_js_1.LangEn.wordlist();\n    }\n    const words = wordlist.split(mnemonic);\n    (0, index_js_2.assertArgument)(words.length % 3 === 0 && words.length >= 12 && words.length <= 24, \"invalid mnemonic length\", \"mnemonic\", \"[ REDACTED ]\");\n    const entropy = new Uint8Array(Math.ceil(11 * words.length / 8));\n    let offset = 0;\n    for(let i = 0; i < words.length; i++){\n        let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n        (0, index_js_2.assertArgument)(index >= 0, `invalid mnemonic word at index ${i}`, \"mnemonic\", \"[ REDACTED ]\");\n        for(let bit = 0; bit < 11; bit++){\n            if (index & 1 << 10 - bit) {\n                entropy[offset >> 3] |= 1 << 7 - offset % 8;\n            }\n            offset++;\n        }\n    }\n    const entropyBits = 32 * words.length / 3;\n    const checksumBits = words.length / 3;\n    const checksumMask = getUpperMask(checksumBits);\n    const checksum = (0, index_js_2.getBytes)((0, index_js_1.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n    (0, index_js_2.assertArgument)(checksum === (entropy[entropy.length - 1] & checksumMask), \"invalid mnemonic checksum\", \"mnemonic\", \"[ REDACTED ]\");\n    return (0, index_js_2.hexlify)(entropy.slice(0, entropyBits / 8));\n}\nfunction entropyToMnemonic(entropy, wordlist) {\n    (0, index_js_2.assertArgument)(entropy.length % 4 === 0 && entropy.length >= 16 && entropy.length <= 32, \"invalid entropy size\", \"entropy\", \"[ REDACTED ]\");\n    if (wordlist == null) {\n        wordlist = lang_en_js_1.LangEn.wordlist();\n    }\n    const indices = [\n        0\n    ];\n    let remainingBits = 11;\n    for(let i = 0; i < entropy.length; i++){\n        // Consume the whole byte (with still more to go)\n        if (remainingBits > 8) {\n            indices[indices.length - 1] <<= 8;\n            indices[indices.length - 1] |= entropy[i];\n            remainingBits -= 8;\n        // This byte will complete an 11-bit index\n        } else {\n            indices[indices.length - 1] <<= remainingBits;\n            indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;\n            // Start the next word\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n            remainingBits += 3;\n        }\n    }\n    // Compute the checksum bits\n    const checksumBits = entropy.length / 4;\n    const checksum = parseInt((0, index_js_1.sha256)(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);\n    // Shift the checksum into the word indices\n    indices[indices.length - 1] <<= checksumBits;\n    indices[indices.length - 1] |= checksum >> 8 - checksumBits;\n    return wordlist.join(indices.map((index)=>wordlist.getWord(index)));\n}\nconst _guard = {};\n/**\n *  A **Mnemonic** wraps all properties required to compute [[link-bip-39]]\n *  seeds and convert between phrases and entropy.\n */ class Mnemonic {\n    /**\n     *  @private\n     */ constructor(guard, entropy, phrase, password, wordlist){\n        if (password == null) {\n            password = \"\";\n        }\n        if (wordlist == null) {\n            wordlist = lang_en_js_1.LangEn.wordlist();\n        }\n        (0, index_js_2.assertPrivate)(guard, _guard, \"Mnemonic\");\n        (0, index_js_2.defineProperties)(this, {\n            phrase,\n            password,\n            wordlist,\n            entropy\n        });\n    }\n    /**\n     *  Returns the seed for the mnemonic.\n     */ computeSeed() {\n        const salt = (0, index_js_2.toUtf8Bytes)(\"mnemonic\" + this.password, \"NFKD\");\n        return (0, index_js_1.pbkdf2)((0, index_js_2.toUtf8Bytes)(this.phrase, \"NFKD\"), salt, 2048, 64, \"sha512\");\n    }\n    /**\n     *  Creates a new Mnemonic for the %%phrase%%.\n     *\n     *  The default %%password%% is the empty string and the default\n     *  wordlist is the [English wordlists](LangEn).\n     */ static fromPhrase(phrase, password, wordlist) {\n        // Normalize the case and space; throws if invalid\n        const entropy = mnemonicToEntropy(phrase, wordlist);\n        phrase = entropyToMnemonic((0, index_js_2.getBytes)(entropy), wordlist);\n        return new Mnemonic(_guard, entropy, phrase, password, wordlist);\n    }\n    /**\n     *  Create a new **Mnemonic** from the %%entropy%%.\n     *\n     *  The default %%password%% is the empty string and the default\n     *  wordlist is the [English wordlists](LangEn).\n     */ static fromEntropy(_entropy, password, wordlist) {\n        const entropy = (0, index_js_2.getBytes)(_entropy, \"entropy\");\n        const phrase = entropyToMnemonic(entropy, wordlist);\n        return new Mnemonic(_guard, (0, index_js_2.hexlify)(entropy), phrase, password, wordlist);\n    }\n    /**\n     *  Returns the phrase for %%mnemonic%%.\n     */ static entropyToPhrase(_entropy, wordlist) {\n        const entropy = (0, index_js_2.getBytes)(_entropy, \"entropy\");\n        return entropyToMnemonic(entropy, wordlist);\n    }\n    /**\n     *  Returns the entropy for %%phrase%%.\n     */ static phraseToEntropy(phrase, wordlist) {\n        return mnemonicToEntropy(phrase, wordlist);\n    }\n    /**\n     *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.\n     *\n     *  This checks all the provided words belong to the %%wordlist%%,\n     *  that the length is valid and the checksum is correct.\n     */ static isValidMnemonic(phrase, wordlist) {\n        try {\n            mnemonicToEntropy(phrase, wordlist);\n            return true;\n        } catch (error) {}\n        return false;\n    }\n}\nexports.Mnemonic = Mnemonic; //# sourceMappingURL=mnemonic.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wallet/mnemonic.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wallet/utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wallet/utils.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n *  @_ignore\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.spelunk = exports.getPassword = exports.zpad = exports.looseArrayify = void 0;\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nfunction looseArrayify(hexString) {\n    if (typeof hexString === \"string\" && !hexString.startsWith(\"0x\")) {\n        hexString = \"0x\" + hexString;\n    }\n    return (0, index_js_1.getBytesCopy)(hexString);\n}\nexports.looseArrayify = looseArrayify;\nfunction zpad(value, length) {\n    value = String(value);\n    while(value.length < length){\n        value = \"0\" + value;\n    }\n    return value;\n}\nexports.zpad = zpad;\nfunction getPassword(password) {\n    if (typeof password === \"string\") {\n        return (0, index_js_1.toUtf8Bytes)(password, \"NFKC\");\n    }\n    return (0, index_js_1.getBytesCopy)(password);\n}\nexports.getPassword = getPassword;\nfunction spelunk(object, _path) {\n    const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);\n    (0, index_js_1.assertArgument)(match != null, \"invalid path\", \"path\", _path);\n    const path = match[1];\n    const type = match[3];\n    const reqd = match[4] === \"!\";\n    let cur = object;\n    for (const comp of path.toLowerCase().split(\".\")){\n        // Search for a child object with a case-insensitive matching key\n        if (Array.isArray(cur)) {\n            if (!comp.match(/^[0-9]+$/)) {\n                break;\n            }\n            cur = cur[parseInt(comp)];\n        } else if (typeof cur === \"object\") {\n            let found = null;\n            for(const key in cur){\n                if (key.toLowerCase() === comp) {\n                    found = cur[key];\n                    break;\n                }\n            }\n            cur = found;\n        } else {\n            cur = null;\n        }\n        if (cur == null) {\n            break;\n        }\n    }\n    (0, index_js_1.assertArgument)(!reqd || cur != null, \"missing required value\", \"path\", path);\n    if (type && cur != null) {\n        if (type === \"int\") {\n            if (typeof cur === \"string\" && cur.match(/^-?[0-9]+$/)) {\n                return parseInt(cur);\n            } else if (Number.isSafeInteger(cur)) {\n                return cur;\n            }\n        }\n        if (type === \"number\") {\n            if (typeof cur === \"string\" && cur.match(/^-?[0-9.]*$/)) {\n                return parseFloat(cur);\n            }\n        }\n        if (type === \"data\") {\n            if (typeof cur === \"string\") {\n                return looseArrayify(cur);\n            }\n        }\n        if (type === \"array\" && Array.isArray(cur)) {\n            return cur;\n        }\n        if (type === typeof cur) {\n            return cur;\n        }\n        (0, index_js_1.assertArgument)(false, `wrong type found for ${type} `, \"path\", path);\n    }\n    return cur;\n}\nexports.spelunk = spelunk; /*\nexport function follow(object: any, path: string): null | string {\n    let currentChild = object;\n\n    for (const comp of path.toLowerCase().split('/')) {\n\n        // Search for a child object with a case-insensitive matching key\n        let matchingChild = null;\n        for (const key in currentChild) {\n             if (key.toLowerCase() === comp) {\n                 matchingChild = currentChild[key];\n                 break;\n             }\n        }\n\n        if (matchingChild === null) { return null; }\n\n        currentChild = matchingChild;\n    }\n\n    return currentChild;\n}\n\n// \"path/to/something:type!\"\nexport function followRequired(data: any, path: string): string {\n    const value = follow(data, path);\n    if (value != null) { return value; }\n    return logger.throwArgumentError(\"invalid value\", `data:${ path }`,\n    JSON.stringify(data));\n}\n*/  // See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\n /*\nexport function uuidV4(randomBytes: BytesLike): string {\n    const bytes = getBytes(randomBytes, \"randomBytes\");\n\n    // Section: 4.1.3:\n    // - time_hi_and_version[12:16] = 0b0100\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\n\n    // Section 4.4\n    // - clock_seq_hi_and_reserved[6] = 0b0\n    // - clock_seq_hi_and_reserved[7] = 0b1\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\n    const value = hexlify(bytes);\n\n    return [\n       value.substring(2, 10),\n       value.substring(10, 14),\n       value.substring(14, 18),\n       value.substring(18, 22),\n       value.substring(22, 34),\n    ].join(\"-\");\n}\n*/  //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93YWxsZXQvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Q0FFQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZUFBZSxHQUFHQSxtQkFBbUIsR0FBR0EsWUFBWSxHQUFHQSxxQkFBcUIsR0FBRyxLQUFLO0FBQ3BGLE1BQU1NLGFBQWFDLG1CQUFPQSxDQUFDLGtGQUFtQjtBQUM5QyxTQUFTRixjQUFjRyxTQUFTO0lBQzVCLElBQUksT0FBUUEsY0FBZSxZQUFZLENBQUNBLFVBQVVDLFVBQVUsQ0FBQyxPQUFPO1FBQ2hFRCxZQUFZLE9BQU9BO0lBQ3ZCO0lBQ0EsT0FBTyxDQUFDLEdBQUdGLFdBQVdJLFlBQVksRUFBRUY7QUFDeEM7QUFDQVIscUJBQXFCLEdBQUdLO0FBQ3hCLFNBQVNELEtBQUtILEtBQUssRUFBRVUsTUFBTTtJQUN2QlYsUUFBUVcsT0FBT1g7SUFDZixNQUFPQSxNQUFNVSxNQUFNLEdBQUdBLE9BQVE7UUFDMUJWLFFBQVEsTUFBTUE7SUFDbEI7SUFDQSxPQUFPQTtBQUNYO0FBQ0FELFlBQVksR0FBR0k7QUFDZixTQUFTRCxZQUFZVSxRQUFRO0lBQ3pCLElBQUksT0FBUUEsYUFBYyxVQUFVO1FBQ2hDLE9BQU8sQ0FBQyxHQUFHUCxXQUFXUSxXQUFXLEVBQUVELFVBQVU7SUFDakQ7SUFDQSxPQUFPLENBQUMsR0FBR1AsV0FBV0ksWUFBWSxFQUFFRztBQUN4QztBQUNBYixtQkFBbUIsR0FBR0c7QUFDdEIsU0FBU0QsUUFBUWEsTUFBTSxFQUFFQyxLQUFLO0lBQzFCLE1BQU1DLFFBQVFELE1BQU1DLEtBQUssQ0FBQztJQUN6QixJQUFHWCxXQUFXWSxjQUFjLEVBQUVELFNBQVMsTUFBTSxnQkFBZ0IsUUFBUUQ7SUFDdEUsTUFBTUcsT0FBT0YsS0FBSyxDQUFDLEVBQUU7SUFDckIsTUFBTUcsT0FBT0gsS0FBSyxDQUFDLEVBQUU7SUFDckIsTUFBTUksT0FBUUosS0FBSyxDQUFDLEVBQUUsS0FBSztJQUMzQixJQUFJSyxNQUFNUDtJQUNWLEtBQUssTUFBTVEsUUFBUUosS0FBS0ssV0FBVyxHQUFHQyxLQUFLLENBQUMsS0FBTTtRQUM5QyxpRUFBaUU7UUFDakUsSUFBSUMsTUFBTUMsT0FBTyxDQUFDTCxNQUFNO1lBQ3BCLElBQUksQ0FBQ0MsS0FBS04sS0FBSyxDQUFDLGFBQWE7Z0JBQ3pCO1lBQ0o7WUFDQUssTUFBTUEsR0FBRyxDQUFDTSxTQUFTTCxNQUFNO1FBQzdCLE9BQ0ssSUFBSSxPQUFRRCxRQUFTLFVBQVU7WUFDaEMsSUFBSU8sUUFBUTtZQUNaLElBQUssTUFBTUMsT0FBT1IsSUFBSztnQkFDbkIsSUFBSVEsSUFBSU4sV0FBVyxPQUFPRCxNQUFNO29CQUM1Qk0sUUFBUVAsR0FBRyxDQUFDUSxJQUFJO29CQUNoQjtnQkFDSjtZQUNKO1lBQ0FSLE1BQU1PO1FBQ1YsT0FDSztZQUNEUCxNQUFNO1FBQ1Y7UUFDQSxJQUFJQSxPQUFPLE1BQU07WUFDYjtRQUNKO0lBQ0o7SUFDQyxJQUFHaEIsV0FBV1ksY0FBYyxFQUFFLENBQUNHLFFBQVFDLE9BQU8sTUFBTSwwQkFBMEIsUUFBUUg7SUFDdkYsSUFBSUMsUUFBUUUsT0FBTyxNQUFNO1FBQ3JCLElBQUlGLFNBQVMsT0FBTztZQUNoQixJQUFJLE9BQVFFLFFBQVMsWUFBWUEsSUFBSUwsS0FBSyxDQUFDLGVBQWU7Z0JBQ3RELE9BQU9XLFNBQVNOO1lBQ3BCLE9BQ0ssSUFBSVMsT0FBT0MsYUFBYSxDQUFDVixNQUFNO2dCQUNoQyxPQUFPQTtZQUNYO1FBQ0o7UUFDQSxJQUFJRixTQUFTLFVBQVU7WUFDbkIsSUFBSSxPQUFRRSxRQUFTLFlBQVlBLElBQUlMLEtBQUssQ0FBQyxnQkFBZ0I7Z0JBQ3ZELE9BQU9nQixXQUFXWDtZQUN0QjtRQUNKO1FBQ0EsSUFBSUYsU0FBUyxRQUFRO1lBQ2pCLElBQUksT0FBUUUsUUFBUyxVQUFVO2dCQUMzQixPQUFPakIsY0FBY2lCO1lBQ3pCO1FBQ0o7UUFDQSxJQUFJRixTQUFTLFdBQVdNLE1BQU1DLE9BQU8sQ0FBQ0wsTUFBTTtZQUN4QyxPQUFPQTtRQUNYO1FBQ0EsSUFBSUYsU0FBUyxPQUFRRSxLQUFNO1lBQ3ZCLE9BQU9BO1FBQ1g7UUFDQyxJQUFHaEIsV0FBV1ksY0FBYyxFQUFFLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRUUsS0FBSyxDQUFDLENBQUMsRUFBRSxRQUFRRDtJQUNuRjtJQUNBLE9BQU9HO0FBQ1g7QUFDQXRCLGVBQWUsR0FBR0UsU0FDbEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQThCQSxJQUNBLDBEQUEwRDtDQUMxRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkEsSUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93YWxsZXQvdXRpbHMuanM/OTUyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogIEBfaWdub3JlXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3BlbHVuayA9IGV4cG9ydHMuZ2V0UGFzc3dvcmQgPSBleHBvcnRzLnpwYWQgPSBleHBvcnRzLmxvb3NlQXJyYXlpZnkgPSB2b2lkIDA7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4uL3V0aWxzL2luZGV4LmpzXCIpO1xuZnVuY3Rpb24gbG9vc2VBcnJheWlmeShoZXhTdHJpbmcpIHtcbiAgICBpZiAodHlwZW9mIChoZXhTdHJpbmcpID09PSBcInN0cmluZ1wiICYmICFoZXhTdHJpbmcuc3RhcnRzV2l0aChcIjB4XCIpKSB7XG4gICAgICAgIGhleFN0cmluZyA9IFwiMHhcIiArIGhleFN0cmluZztcbiAgICB9XG4gICAgcmV0dXJuICgwLCBpbmRleF9qc18xLmdldEJ5dGVzQ29weSkoaGV4U3RyaW5nKTtcbn1cbmV4cG9ydHMubG9vc2VBcnJheWlmeSA9IGxvb3NlQXJyYXlpZnk7XG5mdW5jdGlvbiB6cGFkKHZhbHVlLCBsZW5ndGgpIHtcbiAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSk7XG4gICAgd2hpbGUgKHZhbHVlLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgICAgICB2YWx1ZSA9ICcwJyArIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5leHBvcnRzLnpwYWQgPSB6cGFkO1xuZnVuY3Rpb24gZ2V0UGFzc3dvcmQocGFzc3dvcmQpIHtcbiAgICBpZiAodHlwZW9mIChwYXNzd29yZCkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiAoMCwgaW5kZXhfanNfMS50b1V0ZjhCeXRlcykocGFzc3dvcmQsIFwiTkZLQ1wiKTtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBpbmRleF9qc18xLmdldEJ5dGVzQ29weSkocGFzc3dvcmQpO1xufVxuZXhwb3J0cy5nZXRQYXNzd29yZCA9IGdldFBhc3N3b3JkO1xuZnVuY3Rpb24gc3BlbHVuayhvYmplY3QsIF9wYXRoKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBfcGF0aC5tYXRjaCgvXihbYS16MC05JF8uLV0qKSg6KFthLXpdKykpPyghKT8kL2kpO1xuICAgICgwLCBpbmRleF9qc18xLmFzc2VydEFyZ3VtZW50KShtYXRjaCAhPSBudWxsLCBcImludmFsaWQgcGF0aFwiLCBcInBhdGhcIiwgX3BhdGgpO1xuICAgIGNvbnN0IHBhdGggPSBtYXRjaFsxXTtcbiAgICBjb25zdCB0eXBlID0gbWF0Y2hbM107XG4gICAgY29uc3QgcmVxZCA9IChtYXRjaFs0XSA9PT0gXCIhXCIpO1xuICAgIGxldCBjdXIgPSBvYmplY3Q7XG4gICAgZm9yIChjb25zdCBjb21wIG9mIHBhdGgudG9Mb3dlckNhc2UoKS5zcGxpdCgnLicpKSB7XG4gICAgICAgIC8vIFNlYXJjaCBmb3IgYSBjaGlsZCBvYmplY3Qgd2l0aCBhIGNhc2UtaW5zZW5zaXRpdmUgbWF0Y2hpbmcga2V5XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGN1cikpIHtcbiAgICAgICAgICAgIGlmICghY29tcC5tYXRjaCgvXlswLTldKyQvKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VyID0gY3VyW3BhcnNlSW50KGNvbXApXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgKGN1cikgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGxldCBmb3VuZCA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBjdXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5LnRvTG93ZXJDYXNlKCkgPT09IGNvbXApIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSBjdXJba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VyID0gZm91bmQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjdXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKDAsIGluZGV4X2pzXzEuYXNzZXJ0QXJndW1lbnQpKCFyZXFkIHx8IGN1ciAhPSBudWxsLCBcIm1pc3NpbmcgcmVxdWlyZWQgdmFsdWVcIiwgXCJwYXRoXCIsIHBhdGgpO1xuICAgIGlmICh0eXBlICYmIGN1ciAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlID09PSBcImludFwiKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIChjdXIpID09PSBcInN0cmluZ1wiICYmIGN1ci5tYXRjaCgvXi0/WzAtOV0rJC8pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGN1cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChOdW1iZXIuaXNTYWZlSW50ZWdlcihjdXIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiAoY3VyKSA9PT0gXCJzdHJpbmdcIiAmJiBjdXIubWF0Y2goL14tP1swLTkuXSokLykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChjdXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSBcImRhdGFcIikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiAoY3VyKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb29zZUFycmF5aWZ5KGN1cik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09IFwiYXJyYXlcIiAmJiBBcnJheS5pc0FycmF5KGN1cikpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09IHR5cGVvZiAoY3VyKSkge1xuICAgICAgICAgICAgcmV0dXJuIGN1cjtcbiAgICAgICAgfVxuICAgICAgICAoMCwgaW5kZXhfanNfMS5hc3NlcnRBcmd1bWVudCkoZmFsc2UsIGB3cm9uZyB0eXBlIGZvdW5kIGZvciAke3R5cGV9IGAsIFwicGF0aFwiLCBwYXRoKTtcbiAgICB9XG4gICAgcmV0dXJuIGN1cjtcbn1cbmV4cG9ydHMuc3BlbHVuayA9IHNwZWx1bms7XG4vKlxuZXhwb3J0IGZ1bmN0aW9uIGZvbGxvdyhvYmplY3Q6IGFueSwgcGF0aDogc3RyaW5nKTogbnVsbCB8IHN0cmluZyB7XG4gICAgbGV0IGN1cnJlbnRDaGlsZCA9IG9iamVjdDtcblxuICAgIGZvciAoY29uc3QgY29tcCBvZiBwYXRoLnRvTG93ZXJDYXNlKCkuc3BsaXQoJy8nKSkge1xuXG4gICAgICAgIC8vIFNlYXJjaCBmb3IgYSBjaGlsZCBvYmplY3Qgd2l0aCBhIGNhc2UtaW5zZW5zaXRpdmUgbWF0Y2hpbmcga2V5XG4gICAgICAgIGxldCBtYXRjaGluZ0NoaWxkID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gY3VycmVudENoaWxkKSB7XG4gICAgICAgICAgICAgaWYgKGtleS50b0xvd2VyQ2FzZSgpID09PSBjb21wKSB7XG4gICAgICAgICAgICAgICAgIG1hdGNoaW5nQ2hpbGQgPSBjdXJyZW50Q2hpbGRba2V5XTtcbiAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGNoaW5nQ2hpbGQgPT09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cblxuICAgICAgICBjdXJyZW50Q2hpbGQgPSBtYXRjaGluZ0NoaWxkO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50Q2hpbGQ7XG59XG5cbi8vIFwicGF0aC90by9zb21ldGhpbmc6dHlwZSFcIlxuZXhwb3J0IGZ1bmN0aW9uIGZvbGxvd1JlcXVpcmVkKGRhdGE6IGFueSwgcGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCB2YWx1ZSA9IGZvbGxvdyhkYXRhLCBwYXRoKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkgeyByZXR1cm4gdmFsdWU7IH1cbiAgICByZXR1cm4gbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgdmFsdWVcIiwgYGRhdGE6JHsgcGF0aCB9YCxcbiAgICBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG59XG4qL1xuLy8gU2VlOiBodHRwczovL3d3dy5pZXRmLm9yZy9yZmMvcmZjNDEyMi50eHQgKFNlY3Rpb24gNC40KVxuLypcbmV4cG9ydCBmdW5jdGlvbiB1dWlkVjQocmFuZG9tQnl0ZXM6IEJ5dGVzTGlrZSk6IHN0cmluZyB7XG4gICAgY29uc3QgYnl0ZXMgPSBnZXRCeXRlcyhyYW5kb21CeXRlcywgXCJyYW5kb21CeXRlc1wiKTtcblxuICAgIC8vIFNlY3Rpb246IDQuMS4zOlxuICAgIC8vIC0gdGltZV9oaV9hbmRfdmVyc2lvblsxMjoxNl0gPSAwYjAxMDBcbiAgICBieXRlc1s2XSA9IChieXRlc1s2XSAmIDB4MGYpIHwgMHg0MDtcblxuICAgIC8vIFNlY3Rpb24gNC40XG4gICAgLy8gLSBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkWzZdID0gMGIwXG4gICAgLy8gLSBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkWzddID0gMGIxXG4gICAgYnl0ZXNbOF0gPSAoYnl0ZXNbOF0gJiAweDNmKSB8IDB4ODA7XG5cbiAgICBjb25zdCB2YWx1ZSA9IGhleGxpZnkoYnl0ZXMpO1xuXG4gICAgcmV0dXJuIFtcbiAgICAgICB2YWx1ZS5zdWJzdHJpbmcoMiwgMTApLFxuICAgICAgIHZhbHVlLnN1YnN0cmluZygxMCwgMTQpLFxuICAgICAgIHZhbHVlLnN1YnN0cmluZygxNCwgMTgpLFxuICAgICAgIHZhbHVlLnN1YnN0cmluZygxOCwgMjIpLFxuICAgICAgIHZhbHVlLnN1YnN0cmluZygyMiwgMzQpLFxuICAgIF0uam9pbihcIi1cIik7XG59XG4qL1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic3BlbHVuayIsImdldFBhc3N3b3JkIiwienBhZCIsImxvb3NlQXJyYXlpZnkiLCJpbmRleF9qc18xIiwicmVxdWlyZSIsImhleFN0cmluZyIsInN0YXJ0c1dpdGgiLCJnZXRCeXRlc0NvcHkiLCJsZW5ndGgiLCJTdHJpbmciLCJwYXNzd29yZCIsInRvVXRmOEJ5dGVzIiwib2JqZWN0IiwiX3BhdGgiLCJtYXRjaCIsImFzc2VydEFyZ3VtZW50IiwicGF0aCIsInR5cGUiLCJyZXFkIiwiY3VyIiwiY29tcCIsInRvTG93ZXJDYXNlIiwic3BsaXQiLCJBcnJheSIsImlzQXJyYXkiLCJwYXJzZUludCIsImZvdW5kIiwia2V5IiwiTnVtYmVyIiwiaXNTYWZlSW50ZWdlciIsInBhcnNlRmxvYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wallet/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wallet/wallet.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wallet/wallet.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Wallet = void 0;\nconst index_js_1 = __webpack_require__(/*! ../crypto/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/crypto/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst base_wallet_js_1 = __webpack_require__(/*! ./base-wallet.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wallet/base-wallet.js\");\nconst hdwallet_js_1 = __webpack_require__(/*! ./hdwallet.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wallet/hdwallet.js\");\nconst json_crowdsale_js_1 = __webpack_require__(/*! ./json-crowdsale.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wallet/json-crowdsale.js\");\nconst json_keystore_js_1 = __webpack_require__(/*! ./json-keystore.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wallet/json-keystore.js\");\nconst mnemonic_js_1 = __webpack_require__(/*! ./mnemonic.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wallet/mnemonic.js\");\nfunction stall(duration) {\n    return new Promise((resolve)=>{\n        setTimeout(()=>{\n            resolve();\n        }, duration);\n    });\n}\n/**\n *  A **Wallet** manages a single private key which is used to sign\n *  transactions, messages and other common payloads.\n *\n *  This class is generally the main entry point for developers\n *  that wish to use a private key directly, as it can create\n *  instances from a large variety of common sources, including\n *  raw private key, [[link-bip-39]] mnemonics and encrypte JSON\n *  wallets.\n */ class Wallet extends base_wallet_js_1.BaseWallet {\n    /**\n     *  Create a new wallet for the private %%key%%, optionally connected\n     *  to %%provider%%.\n     */ constructor(key, provider){\n        if (typeof key === \"string\" && !key.startsWith(\"0x\")) {\n            key = \"0x\" + key;\n        }\n        let signingKey = typeof key === \"string\" ? new index_js_1.SigningKey(key) : key;\n        super(signingKey, provider);\n    }\n    connect(provider) {\n        return new Wallet(this.signingKey, provider);\n    }\n    /**\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n     *  %%password%%.\n     *\n     *  If %%progressCallback%% is specified, it will receive periodic\n     *  updates as the encryption process progreses.\n     */ async encrypt(password, progressCallback) {\n        const account = {\n            address: this.address,\n            privateKey: this.privateKey\n        };\n        return await (0, json_keystore_js_1.encryptKeystoreJson)(account, password, {\n            progressCallback\n        });\n    }\n    /**\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n     *  %%password%%.\n     *\n     *  It is preferred to use the [async version](encrypt) instead,\n     *  which allows a [[ProgressCallback]] to keep the user informed.\n     *\n     *  This method will block the event loop (freezing all UI) until\n     *  it is complete, which may be a non-trivial duration.\n     */ encryptSync(password) {\n        const account = {\n            address: this.address,\n            privateKey: this.privateKey\n        };\n        return (0, json_keystore_js_1.encryptKeystoreJsonSync)(account, password);\n    }\n    static #fromAccount(account) {\n        (0, index_js_2.assertArgument)(account, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n        if (\"mnemonic\" in account && account.mnemonic && account.mnemonic.locale === \"en\") {\n            const mnemonic = mnemonic_js_1.Mnemonic.fromEntropy(account.mnemonic.entropy);\n            const wallet = hdwallet_js_1.HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);\n            if (wallet.address === account.address && wallet.privateKey === account.privateKey) {\n                return wallet;\n            }\n            console.log(\"WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key\");\n        }\n        const wallet = new Wallet(account.privateKey);\n        (0, index_js_2.assertArgument)(wallet.address === account.address, \"address/privateKey mismatch\", \"json\", \"[ REDACTED ]\");\n        return wallet;\n    }\n    /**\n     *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%\n     *  with %%password%%.\n     *\n     *  If %%progress%% is provided, it is called periodically during\n     *  decryption so that any UI can be updated.\n     */ static async fromEncryptedJson(json, password, progress) {\n        let account = null;\n        if ((0, json_keystore_js_1.isKeystoreJson)(json)) {\n            account = await (0, json_keystore_js_1.decryptKeystoreJson)(json, password, progress);\n        } else if ((0, json_crowdsale_js_1.isCrowdsaleJson)(json)) {\n            if (progress) {\n                progress(0);\n                await stall(0);\n            }\n            account = (0, json_crowdsale_js_1.decryptCrowdsaleJson)(json, password);\n            if (progress) {\n                progress(1);\n                await stall(0);\n            }\n        }\n        return Wallet.#fromAccount(account);\n    }\n    /**\n     *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.\n     *\n     *  The [[fromEncryptedJson]] method is preferred, as this method\n     *  will lock up and freeze the UI during decryption, which may take\n     *  some time.\n     */ static fromEncryptedJsonSync(json, password) {\n        let account = null;\n        if ((0, json_keystore_js_1.isKeystoreJson)(json)) {\n            account = (0, json_keystore_js_1.decryptKeystoreJsonSync)(json, password);\n        } else if ((0, json_crowdsale_js_1.isCrowdsaleJson)(json)) {\n            account = (0, json_crowdsale_js_1.decryptCrowdsaleJson)(json, password);\n        } else {\n            (0, index_js_2.assertArgument)(false, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n        }\n        return Wallet.#fromAccount(account);\n    }\n    /**\n     *  Creates a new random [[HDNodeWallet]] using the avavilable\n     *  [cryptographic random source](randomBytes).\n     *\n     *  If there is no crytographic random source, this will throw.\n     */ static createRandom(provider) {\n        const wallet = hdwallet_js_1.HDNodeWallet.createRandom();\n        if (provider) {\n            return wallet.connect(provider);\n        }\n        return wallet;\n    }\n    /**\n     *  Creates a [[HDNodeWallet]] for %%phrase%%.\n     */ static fromPhrase(phrase, provider) {\n        const wallet = hdwallet_js_1.HDNodeWallet.fromPhrase(phrase);\n        if (provider) {\n            return wallet.connect(provider);\n        }\n        return wallet;\n    }\n}\nexports.Wallet = Wallet; //# sourceMappingURL=wallet.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wallet/wallet.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wordlists/bit-reader.js":
/*!******************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wordlists/bit-reader.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decodeBits = void 0;\nconst Base64 = \")!@#$%^&*(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_\";\n/**\n *  @_ignore\n */ function decodeBits(width, data) {\n    const maxValue = (1 << width) - 1;\n    const result = [];\n    let accum = 0, bits = 0, flood = 0;\n    for(let i = 0; i < data.length; i++){\n        // Accumulate 6 bits of data\n        accum = accum << 6 | Base64.indexOf(data[i]);\n        bits += 6;\n        // While we have enough for a word...\n        while(bits >= width){\n            // ...read the word\n            const value = accum >> bits - width;\n            accum &= (1 << bits - width) - 1;\n            bits -= width;\n            // A value of 0 indicates we exceeded maxValue, it\n            // floods over into the next value\n            if (value === 0) {\n                flood += maxValue;\n            } else {\n                result.push(value + flood);\n                flood = 0;\n            }\n        }\n    }\n    return result;\n}\nexports.decodeBits = decodeBits; //# sourceMappingURL=bit-reader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93b3JkbGlzdHMvYml0LXJlYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsa0JBQWtCLEdBQUcsS0FBSztBQUMxQixNQUFNRyxTQUFTO0FBQ2Y7O0NBRUMsR0FDRCxTQUFTRCxXQUFXRSxLQUFLLEVBQUVDLElBQUk7SUFDM0IsTUFBTUMsV0FBVyxDQUFDLEtBQUtGLEtBQUksSUFBSztJQUNoQyxNQUFNRyxTQUFTLEVBQUU7SUFDakIsSUFBSUMsUUFBUSxHQUFHQyxPQUFPLEdBQUdDLFFBQVE7SUFDakMsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlOLEtBQUtPLE1BQU0sRUFBRUQsSUFBSztRQUNsQyw0QkFBNEI7UUFDNUJILFFBQVMsU0FBVSxJQUFLTCxPQUFPVSxPQUFPLENBQUNSLElBQUksQ0FBQ00sRUFBRTtRQUM5Q0YsUUFBUTtRQUNSLHFDQUFxQztRQUNyQyxNQUFPQSxRQUFRTCxNQUFPO1lBQ2xCLG1CQUFtQjtZQUNuQixNQUFNSCxRQUFTTyxTQUFVQyxPQUFPTDtZQUNoQ0ksU0FBUyxDQUFDLEtBQU1DLE9BQU9MLEtBQUssSUFBSztZQUNqQ0ssUUFBUUw7WUFDUixrREFBa0Q7WUFDbEQsa0NBQWtDO1lBQ2xDLElBQUlILFVBQVUsR0FBRztnQkFDYlMsU0FBU0o7WUFDYixPQUNLO2dCQUNEQyxPQUFPTyxJQUFJLENBQUNiLFFBQVFTO2dCQUNwQkEsUUFBUTtZQUNaO1FBQ0o7SUFDSjtJQUNBLE9BQU9IO0FBQ1g7QUFDQVAsa0JBQWtCLEdBQUdFLFlBQ3JCLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL3dvcmRsaXN0cy9iaXQtcmVhZGVyLmpzPzVlYjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlY29kZUJpdHMgPSB2b2lkIDA7XG5jb25zdCBCYXNlNjQgPSBcIikhQCMkJV4mKihBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LV9cIjtcbi8qKlxuICogIEBfaWdub3JlXG4gKi9cbmZ1bmN0aW9uIGRlY29kZUJpdHMod2lkdGgsIGRhdGEpIHtcbiAgICBjb25zdCBtYXhWYWx1ZSA9ICgxIDw8IHdpZHRoKSAtIDE7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IGFjY3VtID0gMCwgYml0cyA9IDAsIGZsb29kID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gQWNjdW11bGF0ZSA2IGJpdHMgb2YgZGF0YVxuICAgICAgICBhY2N1bSA9ICgoYWNjdW0gPDwgNikgfCBCYXNlNjQuaW5kZXhPZihkYXRhW2ldKSk7XG4gICAgICAgIGJpdHMgKz0gNjtcbiAgICAgICAgLy8gV2hpbGUgd2UgaGF2ZSBlbm91Z2ggZm9yIGEgd29yZC4uLlxuICAgICAgICB3aGlsZSAoYml0cyA+PSB3aWR0aCkge1xuICAgICAgICAgICAgLy8gLi4ucmVhZCB0aGUgd29yZFxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSAoYWNjdW0gPj4gKGJpdHMgLSB3aWR0aCkpO1xuICAgICAgICAgICAgYWNjdW0gJj0gKDEgPDwgKGJpdHMgLSB3aWR0aCkpIC0gMTtcbiAgICAgICAgICAgIGJpdHMgLT0gd2lkdGg7XG4gICAgICAgICAgICAvLyBBIHZhbHVlIG9mIDAgaW5kaWNhdGVzIHdlIGV4Y2VlZGVkIG1heFZhbHVlLCBpdFxuICAgICAgICAgICAgLy8gZmxvb2RzIG92ZXIgaW50byB0aGUgbmV4dCB2YWx1ZVxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZmxvb2QgKz0gbWF4VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSArIGZsb29kKTtcbiAgICAgICAgICAgICAgICBmbG9vZCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuZGVjb2RlQml0cyA9IGRlY29kZUJpdHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaXQtcmVhZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlY29kZUJpdHMiLCJCYXNlNjQiLCJ3aWR0aCIsImRhdGEiLCJtYXhWYWx1ZSIsInJlc3VsdCIsImFjY3VtIiwiYml0cyIsImZsb29kIiwiaSIsImxlbmd0aCIsImluZGV4T2YiLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wordlists/bit-reader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wordlists/decode-owl.js":
/*!******************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wordlists/decode-owl.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decodeOwl = exports.decode = void 0;\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst subsChrs = \" !#$%&'()*+,-./<=>?@[]^_`{|}~\";\nconst Word = /^[a-z]*$/i;\nfunction unfold(words, sep) {\n    let initial = 97;\n    return words.reduce((accum, word)=>{\n        if (word === sep) {\n            initial++;\n        } else if (word.match(Word)) {\n            accum.push(String.fromCharCode(initial) + word);\n        } else {\n            initial = 97;\n            accum.push(word);\n        }\n        return accum;\n    }, []);\n}\n/**\n *  @_ignore\n */ function decode(data, subs) {\n    // Replace all the substitutions with their expanded form\n    for(let i = subsChrs.length - 1; i >= 0; i--){\n        data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));\n    }\n    // Get all tle clumps; each suffix, first-increment and second-increment\n    const clumps = [];\n    const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word)=>{\n        if (semi) {\n            for(let i = parseInt(semi); i >= 0; i--){\n                clumps.push(\";\");\n            }\n        } else {\n            clumps.push(item.toLowerCase());\n        }\n        return \"\";\n    });\n    /* c8 ignore start */ if (leftover) {\n        throw new Error(`leftovers: ${JSON.stringify(leftover)}`);\n    }\n    /* c8 ignore stop */ return unfold(unfold(clumps, \";\"), \":\");\n}\nexports.decode = decode;\n/**\n *  @_ignore\n */ function decodeOwl(data) {\n    (0, index_js_1.assertArgument)(data[0] === \"0\", \"unsupported auwl data\", \"data\", data);\n    return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));\n}\nexports.decodeOwl = decodeOwl; //# sourceMappingURL=decode-owl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93b3JkbGlzdHMvZGVjb2RlLW93bC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUdBLGNBQWMsR0FBRyxLQUFLO0FBQzFDLE1BQU1JLGFBQWFDLG1CQUFPQSxDQUFDLGtGQUFtQjtBQUM5QyxNQUFNQyxXQUFXO0FBQ2pCLE1BQU1DLE9BQU87QUFDYixTQUFTQyxPQUFPQyxLQUFLLEVBQUVDLEdBQUc7SUFDdEIsSUFBSUMsVUFBVTtJQUNkLE9BQU9GLE1BQU1HLE1BQU0sQ0FBQyxDQUFDQyxPQUFPQztRQUN4QixJQUFJQSxTQUFTSixLQUFLO1lBQ2RDO1FBQ0osT0FDSyxJQUFJRyxLQUFLQyxLQUFLLENBQUNSLE9BQU87WUFDdkJNLE1BQU1HLElBQUksQ0FBQ0MsT0FBT0MsWUFBWSxDQUFDUCxXQUFXRztRQUM5QyxPQUNLO1lBQ0RILFVBQVU7WUFDVkUsTUFBTUcsSUFBSSxDQUFDRjtRQUNmO1FBQ0EsT0FBT0Q7SUFDWCxHQUFHLEVBQUU7QUFDVDtBQUNBOztDQUVDLEdBQ0QsU0FBU1YsT0FBT2dCLElBQUksRUFBRUMsSUFBSTtJQUN0Qix5REFBeUQ7SUFDekQsSUFBSyxJQUFJQyxJQUFJZixTQUFTZ0IsTUFBTSxHQUFHLEdBQUdELEtBQUssR0FBR0EsSUFBSztRQUMzQ0YsT0FBT0EsS0FBS0ksS0FBSyxDQUFDakIsUUFBUSxDQUFDZSxFQUFFLEVBQUVHLElBQUksQ0FBQ0osS0FBS0ssU0FBUyxDQUFDLElBQUlKLEdBQUcsSUFBSUEsSUFBSTtJQUN0RTtJQUNBLHdFQUF3RTtJQUN4RSxNQUFNSyxTQUFTLEVBQUU7SUFDakIsTUFBTUMsV0FBV1IsS0FBS1MsT0FBTyxDQUFDLDhCQUE4QixDQUFDQyxLQUFLQyxNQUFNQyxNQUFNakI7UUFDMUUsSUFBSWlCLE1BQU07WUFDTixJQUFLLElBQUlWLElBQUlXLFNBQVNELE9BQU9WLEtBQUssR0FBR0EsSUFBSztnQkFDdENLLE9BQU9WLElBQUksQ0FBQztZQUNoQjtRQUNKLE9BQ0s7WUFDRFUsT0FBT1YsSUFBSSxDQUFDYyxLQUFLRyxXQUFXO1FBQ2hDO1FBQ0EsT0FBTztJQUNYO0lBQ0EsbUJBQW1CLEdBQ25CLElBQUlOLFVBQVU7UUFDVixNQUFNLElBQUlPLE1BQU0sQ0FBQyxXQUFXLEVBQUVDLEtBQUtDLFNBQVMsQ0FBQ1QsVUFBVSxDQUFDO0lBQzVEO0lBQ0Esa0JBQWtCLEdBQ2xCLE9BQU9uQixPQUFPQSxPQUFPa0IsUUFBUSxNQUFNO0FBQ3ZDO0FBQ0ExQixjQUFjLEdBQUdHO0FBQ2pCOztDQUVDLEdBQ0QsU0FBU0QsVUFBVWlCLElBQUk7SUFDbEIsSUFBR2YsV0FBV2lDLGNBQWMsRUFBRWxCLElBQUksQ0FBQyxFQUFFLEtBQUssS0FBSyx5QkFBeUIsUUFBUUE7SUFDakYsT0FBT2hCLE9BQU9nQixLQUFLTSxTQUFTLENBQUMsSUFBSSxJQUFJbkIsU0FBU2dCLE1BQU0sR0FBR0gsS0FBS00sU0FBUyxDQUFDLEdBQUcsSUFBSSxJQUFJbkIsU0FBU2dCLE1BQU07QUFDcEc7QUFDQXRCLGlCQUFpQixHQUFHRSxXQUNwQixzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93b3JkbGlzdHMvZGVjb2RlLW93bC5qcz9iMzRlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvZGVPd2wgPSBleHBvcnRzLmRlY29kZSA9IHZvaWQgMDtcbmNvbnN0IGluZGV4X2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvaW5kZXguanNcIik7XG5jb25zdCBzdWJzQ2hycyA9IFwiICEjJCUmJygpKissLS4vPD0+P0BbXV5fYHt8fX5cIjtcbmNvbnN0IFdvcmQgPSAvXlthLXpdKiQvaTtcbmZ1bmN0aW9uIHVuZm9sZCh3b3Jkcywgc2VwKSB7XG4gICAgbGV0IGluaXRpYWwgPSA5NztcbiAgICByZXR1cm4gd29yZHMucmVkdWNlKChhY2N1bSwgd29yZCkgPT4ge1xuICAgICAgICBpZiAod29yZCA9PT0gc2VwKSB7XG4gICAgICAgICAgICBpbml0aWFsKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAod29yZC5tYXRjaChXb3JkKSkge1xuICAgICAgICAgICAgYWNjdW0ucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGluaXRpYWwpICsgd29yZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbml0aWFsID0gOTc7XG4gICAgICAgICAgICBhY2N1bS5wdXNoKHdvcmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2N1bTtcbiAgICB9LCBbXSk7XG59XG4vKipcbiAqICBAX2lnbm9yZVxuICovXG5mdW5jdGlvbiBkZWNvZGUoZGF0YSwgc3Vicykge1xuICAgIC8vIFJlcGxhY2UgYWxsIHRoZSBzdWJzdGl0dXRpb25zIHdpdGggdGhlaXIgZXhwYW5kZWQgZm9ybVxuICAgIGZvciAobGV0IGkgPSBzdWJzQ2hycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBkYXRhID0gZGF0YS5zcGxpdChzdWJzQ2hyc1tpXSkuam9pbihzdWJzLnN1YnN0cmluZygyICogaSwgMiAqIGkgKyAyKSk7XG4gICAgfVxuICAgIC8vIEdldCBhbGwgdGxlIGNsdW1wczsgZWFjaCBzdWZmaXgsIGZpcnN0LWluY3JlbWVudCBhbmQgc2Vjb25kLWluY3JlbWVudFxuICAgIGNvbnN0IGNsdW1wcyA9IFtdO1xuICAgIGNvbnN0IGxlZnRvdmVyID0gZGF0YS5yZXBsYWNlKC8oOnwoWzAtOV0pfChbQS1aXVthLXpdKikpL2csIChhbGwsIGl0ZW0sIHNlbWksIHdvcmQpID0+IHtcbiAgICAgICAgaWYgKHNlbWkpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBwYXJzZUludChzZW1pKTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBjbHVtcHMucHVzaChcIjtcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjbHVtcHMucHVzaChpdGVtLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH0pO1xuICAgIC8qIGM4IGlnbm9yZSBzdGFydCAqL1xuICAgIGlmIChsZWZ0b3Zlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGxlZnRvdmVyczogJHtKU09OLnN0cmluZ2lmeShsZWZ0b3Zlcil9YCk7XG4gICAgfVxuICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXG4gICAgcmV0dXJuIHVuZm9sZCh1bmZvbGQoY2x1bXBzLCBcIjtcIiksIFwiOlwiKTtcbn1cbmV4cG9ydHMuZGVjb2RlID0gZGVjb2RlO1xuLyoqXG4gKiAgQF9pZ25vcmVcbiAqL1xuZnVuY3Rpb24gZGVjb2RlT3dsKGRhdGEpIHtcbiAgICAoMCwgaW5kZXhfanNfMS5hc3NlcnRBcmd1bWVudCkoZGF0YVswXSA9PT0gXCIwXCIsIFwidW5zdXBwb3J0ZWQgYXV3bCBkYXRhXCIsIFwiZGF0YVwiLCBkYXRhKTtcbiAgICByZXR1cm4gZGVjb2RlKGRhdGEuc3Vic3RyaW5nKDEgKyAyICogc3Vic0NocnMubGVuZ3RoKSwgZGF0YS5zdWJzdHJpbmcoMSwgMSArIDIgKiBzdWJzQ2hycy5sZW5ndGgpKTtcbn1cbmV4cG9ydHMuZGVjb2RlT3dsID0gZGVjb2RlT3dsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVjb2RlLW93bC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWNvZGVPd2wiLCJkZWNvZGUiLCJpbmRleF9qc18xIiwicmVxdWlyZSIsInN1YnNDaHJzIiwiV29yZCIsInVuZm9sZCIsIndvcmRzIiwic2VwIiwiaW5pdGlhbCIsInJlZHVjZSIsImFjY3VtIiwid29yZCIsIm1hdGNoIiwicHVzaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImRhdGEiLCJzdWJzIiwiaSIsImxlbmd0aCIsInNwbGl0Iiwiam9pbiIsInN1YnN0cmluZyIsImNsdW1wcyIsImxlZnRvdmVyIiwicmVwbGFjZSIsImFsbCIsIml0ZW0iLCJzZW1pIiwicGFyc2VJbnQiLCJ0b0xvd2VyQ2FzZSIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImFzc2VydEFyZ3VtZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wordlists/decode-owl.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wordlists/decode-owla.js":
/*!*******************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wordlists/decode-owla.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decodeOwlA = void 0;\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst bit_reader_js_1 = __webpack_require__(/*! ./bit-reader.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/bit-reader.js\");\nconst decode_owl_js_1 = __webpack_require__(/*! ./decode-owl.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/decode-owl.js\");\n/**\n *  @_ignore\n */ function decodeOwlA(data, accents) {\n    let words = (0, decode_owl_js_1.decodeOwl)(data).join(\",\");\n    // Inject the accents\n    accents.split(/,/g).forEach((accent)=>{\n        const match = accent.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);\n        (0, index_js_1.assertArgument)(match !== null, \"internal error parsing accents\", \"accents\", accents);\n        let posOffset = 0;\n        const positions = (0, bit_reader_js_1.decodeBits)(parseInt(match[3]), match[4]);\n        const charCode = parseInt(match[2]);\n        const regex = new RegExp(`([${match[1]}])`, \"g\");\n        words = words.replace(regex, (all, letter)=>{\n            const rem = --positions[posOffset];\n            if (rem === 0) {\n                letter = String.fromCharCode(letter.charCodeAt(0), charCode);\n                posOffset++;\n            }\n            return letter;\n        });\n    });\n    return words.split(\",\");\n}\nexports.decodeOwlA = decodeOwlA; //# sourceMappingURL=decode-owla.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93b3JkbGlzdHMvZGVjb2RlLW93bGEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtCQUFrQixHQUFHLEtBQUs7QUFDMUIsTUFBTUcsYUFBYUMsbUJBQU9BLENBQUMsa0ZBQW1CO0FBQzlDLE1BQU1DLGtCQUFrQkQsbUJBQU9BLENBQUMseUZBQWlCO0FBQ2pELE1BQU1FLGtCQUFrQkYsbUJBQU9BLENBQUMseUZBQWlCO0FBQ2pEOztDQUVDLEdBQ0QsU0FBU0YsV0FBV0ssSUFBSSxFQUFFQyxPQUFPO0lBQzdCLElBQUlDLFFBQVEsQ0FBQyxHQUFHSCxnQkFBZ0JJLFNBQVMsRUFBRUgsTUFBTUksSUFBSSxDQUFDO0lBQ3RELHFCQUFxQjtJQUNyQkgsUUFBUUksS0FBSyxDQUFDLE1BQU1DLE9BQU8sQ0FBQyxDQUFDQztRQUN6QixNQUFNQyxRQUFRRCxPQUFPQyxLQUFLLENBQUM7UUFDMUIsSUFBR1osV0FBV2EsY0FBYyxFQUFFRCxVQUFVLE1BQU0sa0NBQWtDLFdBQVdQO1FBQzVGLElBQUlTLFlBQVk7UUFDaEIsTUFBTUMsWUFBWSxDQUFDLEdBQUdiLGdCQUFnQmMsVUFBVSxFQUFFQyxTQUFTTCxLQUFLLENBQUMsRUFBRSxHQUFHQSxLQUFLLENBQUMsRUFBRTtRQUM5RSxNQUFNTSxXQUFXRCxTQUFTTCxLQUFLLENBQUMsRUFBRTtRQUNsQyxNQUFNTyxRQUFRLElBQUlDLE9BQU8sQ0FBQyxFQUFFLEVBQUVSLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDNUNOLFFBQVFBLE1BQU1lLE9BQU8sQ0FBQ0YsT0FBTyxDQUFDRyxLQUFLQztZQUMvQixNQUFNQyxNQUFNLEVBQUVULFNBQVMsQ0FBQ0QsVUFBVTtZQUNsQyxJQUFJVSxRQUFRLEdBQUc7Z0JBQ1hELFNBQVNFLE9BQU9DLFlBQVksQ0FBQ0gsT0FBT0ksVUFBVSxDQUFDLElBQUlUO2dCQUNuREo7WUFDSjtZQUNBLE9BQU9TO1FBQ1g7SUFDSjtJQUNBLE9BQU9qQixNQUFNRyxLQUFLLENBQUM7QUFDdkI7QUFDQVosa0JBQWtCLEdBQUdFLFlBQ3JCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL3dvcmRsaXN0cy9kZWNvZGUtb3dsYS5qcz9hMTM4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvZGVPd2xBID0gdm9pZCAwO1xuY29uc3QgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9pbmRleC5qc1wiKTtcbmNvbnN0IGJpdF9yZWFkZXJfanNfMSA9IHJlcXVpcmUoXCIuL2JpdC1yZWFkZXIuanNcIik7XG5jb25zdCBkZWNvZGVfb3dsX2pzXzEgPSByZXF1aXJlKFwiLi9kZWNvZGUtb3dsLmpzXCIpO1xuLyoqXG4gKiAgQF9pZ25vcmVcbiAqL1xuZnVuY3Rpb24gZGVjb2RlT3dsQShkYXRhLCBhY2NlbnRzKSB7XG4gICAgbGV0IHdvcmRzID0gKDAsIGRlY29kZV9vd2xfanNfMS5kZWNvZGVPd2wpKGRhdGEpLmpvaW4oXCIsXCIpO1xuICAgIC8vIEluamVjdCB0aGUgYWNjZW50c1xuICAgIGFjY2VudHMuc3BsaXQoLywvZykuZm9yRWFjaCgoYWNjZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gYWNjZW50Lm1hdGNoKC9eKFthLXpdKikoWzAtOV0rKShbMC05XSkoLiopJC8pO1xuICAgICAgICAoMCwgaW5kZXhfanNfMS5hc3NlcnRBcmd1bWVudCkobWF0Y2ggIT09IG51bGwsIFwiaW50ZXJuYWwgZXJyb3IgcGFyc2luZyBhY2NlbnRzXCIsIFwiYWNjZW50c1wiLCBhY2NlbnRzKTtcbiAgICAgICAgbGV0IHBvc09mZnNldCA9IDA7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9ICgwLCBiaXRfcmVhZGVyX2pzXzEuZGVjb2RlQml0cykocGFyc2VJbnQobWF0Y2hbM10pLCBtYXRjaFs0XSk7XG4gICAgICAgIGNvbnN0IGNoYXJDb2RlID0gcGFyc2VJbnQobWF0Y2hbMl0pO1xuICAgICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYChbJHttYXRjaFsxXX1dKWAsIFwiZ1wiKTtcbiAgICAgICAgd29yZHMgPSB3b3Jkcy5yZXBsYWNlKHJlZ2V4LCAoYWxsLCBsZXR0ZXIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlbSA9IC0tcG9zaXRpb25zW3Bvc09mZnNldF07XG4gICAgICAgICAgICBpZiAocmVtID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbGV0dGVyID0gU3RyaW5nLmZyb21DaGFyQ29kZShsZXR0ZXIuY2hhckNvZGVBdCgwKSwgY2hhckNvZGUpO1xuICAgICAgICAgICAgICAgIHBvc09mZnNldCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGxldHRlcjtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHdvcmRzLnNwbGl0KFwiLFwiKTtcbn1cbmV4cG9ydHMuZGVjb2RlT3dsQSA9IGRlY29kZU93bEE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvZGUtb3dsYS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWNvZGVPd2xBIiwiaW5kZXhfanNfMSIsInJlcXVpcmUiLCJiaXRfcmVhZGVyX2pzXzEiLCJkZWNvZGVfb3dsX2pzXzEiLCJkYXRhIiwiYWNjZW50cyIsIndvcmRzIiwiZGVjb2RlT3dsIiwiam9pbiIsInNwbGl0IiwiZm9yRWFjaCIsImFjY2VudCIsIm1hdGNoIiwiYXNzZXJ0QXJndW1lbnQiLCJwb3NPZmZzZXQiLCJwb3NpdGlvbnMiLCJkZWNvZGVCaXRzIiwicGFyc2VJbnQiLCJjaGFyQ29kZSIsInJlZ2V4IiwiUmVnRXhwIiwicmVwbGFjZSIsImFsbCIsImxldHRlciIsInJlbSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNoYXJDb2RlQXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wordlists/decode-owla.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wordlists/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wordlists/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.wordlists = exports.WordlistOwlA = exports.WordlistOwl = exports.LangEn = exports.Wordlist = void 0;\n/**\n *  A Wordlist is a set of 2048 words used to encode private keys\n *  (or other binary data) that is easier for humans to write down,\n *  transcribe and dictate.\n *\n *  The [[link-bip-39]] standard includes several checksum bits,\n *  depending on the size of the mnemonic phrase.\n *\n *  A mnemonic phrase may be 12, 15, 18, 21 or 24 words long. For\n *  most purposes 12 word mnemonics should be used, as including\n *  additional words increases the difficulty and potential for\n *  mistakes and does not offer any effective improvement on security.\n *\n *  There are a variety of [[link-bip39-wordlists]] for different\n *  languages, but for maximal compatibility, the\n *  [English Wordlist](LangEn) is recommended.\n *\n *  @_section: api/wordlists:Wordlists [about-wordlists]\n */ var wordlist_js_1 = __webpack_require__(/*! ./wordlist.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist.js\");\nObject.defineProperty(exports, \"Wordlist\", ({\n    enumerable: true,\n    get: function() {\n        return wordlist_js_1.Wordlist;\n    }\n}));\nvar lang_en_js_1 = __webpack_require__(/*! ./lang-en.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-en.js\");\nObject.defineProperty(exports, \"LangEn\", ({\n    enumerable: true,\n    get: function() {\n        return lang_en_js_1.LangEn;\n    }\n}));\nvar wordlist_owl_js_1 = __webpack_require__(/*! ./wordlist-owl.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist-owl.js\");\nObject.defineProperty(exports, \"WordlistOwl\", ({\n    enumerable: true,\n    get: function() {\n        return wordlist_owl_js_1.WordlistOwl;\n    }\n}));\nvar wordlist_owla_js_1 = __webpack_require__(/*! ./wordlist-owla.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist-owla.js\");\nObject.defineProperty(exports, \"WordlistOwlA\", ({\n    enumerable: true,\n    get: function() {\n        return wordlist_owla_js_1.WordlistOwlA;\n    }\n}));\nvar wordlists_js_1 = __webpack_require__(/*! ./wordlists.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlists.js\");\nObject.defineProperty(exports, \"wordlists\", ({\n    enumerable: true,\n    get: function() {\n        return wordlists_js_1.wordlists;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93b3JkbGlzdHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHQSxvQkFBb0IsR0FBR0EsbUJBQW1CLEdBQUdBLGNBQWMsR0FBR0EsZ0JBQWdCLEdBQUcsS0FBSztBQUMxRzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBa0JDLEdBQ0QsSUFBSU8sZ0JBQWdCQyxtQkFBT0EsQ0FBQyxxRkFBZTtBQUMzQ1YsNENBQTJDO0lBQUVXLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILGNBQWNELFFBQVE7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNySCxJQUFJSyxlQUFlSCxtQkFBT0EsQ0FBQyxtRkFBYztBQUN6Q1YsMENBQXlDO0lBQUVXLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLGFBQWFOLE1BQU07SUFBRTtBQUFFLENBQUMsRUFBQztBQUNoSCxJQUFJTyxvQkFBb0JKLG1CQUFPQSxDQUFDLDZGQUFtQjtBQUNuRFYsK0NBQThDO0lBQUVXLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLGtCQUFrQlIsV0FBVztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQy9ILElBQUlTLHFCQUFxQkwsbUJBQU9BLENBQUMsK0ZBQW9CO0FBQ3JEVixnREFBK0M7SUFBRVcsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0csbUJBQW1CVixZQUFZO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDbEksSUFBSVcsaUJBQWlCTixtQkFBT0EsQ0FBQyx1RkFBZ0I7QUFDN0NWLDZDQUE0QztJQUFFVyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSSxlQUFlWixTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUMsRUFDeEgsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvd29yZGxpc3RzL2luZGV4LmpzPzRlOGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndvcmRsaXN0cyA9IGV4cG9ydHMuV29yZGxpc3RPd2xBID0gZXhwb3J0cy5Xb3JkbGlzdE93bCA9IGV4cG9ydHMuTGFuZ0VuID0gZXhwb3J0cy5Xb3JkbGlzdCA9IHZvaWQgMDtcbi8qKlxuICogIEEgV29yZGxpc3QgaXMgYSBzZXQgb2YgMjA0OCB3b3JkcyB1c2VkIHRvIGVuY29kZSBwcml2YXRlIGtleXNcbiAqICAob3Igb3RoZXIgYmluYXJ5IGRhdGEpIHRoYXQgaXMgZWFzaWVyIGZvciBodW1hbnMgdG8gd3JpdGUgZG93bixcbiAqICB0cmFuc2NyaWJlIGFuZCBkaWN0YXRlLlxuICpcbiAqICBUaGUgW1tsaW5rLWJpcC0zOV1dIHN0YW5kYXJkIGluY2x1ZGVzIHNldmVyYWwgY2hlY2tzdW0gYml0cyxcbiAqICBkZXBlbmRpbmcgb24gdGhlIHNpemUgb2YgdGhlIG1uZW1vbmljIHBocmFzZS5cbiAqXG4gKiAgQSBtbmVtb25pYyBwaHJhc2UgbWF5IGJlIDEyLCAxNSwgMTgsIDIxIG9yIDI0IHdvcmRzIGxvbmcuIEZvclxuICogIG1vc3QgcHVycG9zZXMgMTIgd29yZCBtbmVtb25pY3Mgc2hvdWxkIGJlIHVzZWQsIGFzIGluY2x1ZGluZ1xuICogIGFkZGl0aW9uYWwgd29yZHMgaW5jcmVhc2VzIHRoZSBkaWZmaWN1bHR5IGFuZCBwb3RlbnRpYWwgZm9yXG4gKiAgbWlzdGFrZXMgYW5kIGRvZXMgbm90IG9mZmVyIGFueSBlZmZlY3RpdmUgaW1wcm92ZW1lbnQgb24gc2VjdXJpdHkuXG4gKlxuICogIFRoZXJlIGFyZSBhIHZhcmlldHkgb2YgW1tsaW5rLWJpcDM5LXdvcmRsaXN0c11dIGZvciBkaWZmZXJlbnRcbiAqICBsYW5ndWFnZXMsIGJ1dCBmb3IgbWF4aW1hbCBjb21wYXRpYmlsaXR5LCB0aGVcbiAqICBbRW5nbGlzaCBXb3JkbGlzdF0oTGFuZ0VuKSBpcyByZWNvbW1lbmRlZC5cbiAqXG4gKiAgQF9zZWN0aW9uOiBhcGkvd29yZGxpc3RzOldvcmRsaXN0cyBbYWJvdXQtd29yZGxpc3RzXVxuICovXG52YXIgd29yZGxpc3RfanNfMSA9IHJlcXVpcmUoXCIuL3dvcmRsaXN0LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV29yZGxpc3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHdvcmRsaXN0X2pzXzEuV29yZGxpc3Q7IH0gfSk7XG52YXIgbGFuZ19lbl9qc18xID0gcmVxdWlyZShcIi4vbGFuZy1lbi5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkxhbmdFblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbGFuZ19lbl9qc18xLkxhbmdFbjsgfSB9KTtcbnZhciB3b3JkbGlzdF9vd2xfanNfMSA9IHJlcXVpcmUoXCIuL3dvcmRsaXN0LW93bC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIldvcmRsaXN0T3dsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3b3JkbGlzdF9vd2xfanNfMS5Xb3JkbGlzdE93bDsgfSB9KTtcbnZhciB3b3JkbGlzdF9vd2xhX2pzXzEgPSByZXF1aXJlKFwiLi93b3JkbGlzdC1vd2xhLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV29yZGxpc3RPd2xBXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3b3JkbGlzdF9vd2xhX2pzXzEuV29yZGxpc3RPd2xBOyB9IH0pO1xudmFyIHdvcmRsaXN0c19qc18xID0gcmVxdWlyZShcIi4vd29yZGxpc3RzLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwid29yZGxpc3RzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3b3JkbGlzdHNfanNfMS53b3JkbGlzdHM7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ3b3JkbGlzdHMiLCJXb3JkbGlzdE93bEEiLCJXb3JkbGlzdE93bCIsIkxhbmdFbiIsIldvcmRsaXN0Iiwid29yZGxpc3RfanNfMSIsInJlcXVpcmUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwibGFuZ19lbl9qc18xIiwid29yZGxpc3Rfb3dsX2pzXzEiLCJ3b3JkbGlzdF9vd2xhX2pzXzEiLCJ3b3JkbGlzdHNfanNfMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wordlists/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-cz.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wordlists/lang-cz.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LangCz = void 0;\nconst wordlist_owl_js_1 = __webpack_require__(/*! ./wordlist-owl.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist-owl.js\");\nconst words = \"0itatkastcenaovo$taouleraeki&chor*teci%enbalodaeladet'!Chn=0Di#%E%^1Resa2Rese3CeT'#0EjKohol0Pu)%0A&sDul#Ekdo)Ke)Ti#Ul|3}aOgan%0FaltI$@tPi,%TmaTronom0LasL{i#Ol0Tobus4Yl:B#}<CilCul#D!_Ge)GrHnoKterieLa^L{#LkonLon-LvanLzaMbusNkom!R[rR{RmanRokoRvaTer#TohVl&Zal#Zili#Zu#3D&RanSe^StieTonZin#ZmocZ)k3CyklD]Ft-KinyLan%Og,fO]gTvaZon2AhobytAt*/E/aEdu+EskIk!Iz&Ok|Oud Ud2B-BrDl.D~H!(JkotJ|K<ysLe$R>R'?TaUb_U/!U^U+Ur!Xer2A^v#Ambo,An#AtrEp)Ike)KoLohOnzOskevUn{#Usin#Z^Zy2Bl.Bn|})D _D#D'aF{Jar(Kv?LdokLvaN^NkrRzaTikVolZola3D+tL.T'#0Ukot:PartRev&3DrDu+J/JnLaLerLkemLn?N.Nn(N'#NtrumNz<StopisT#2AlupaAp`]Ar aA)E/t!EmieI/otIrurgL`Le[Lub M_Mu,ObotO/olOd[O+,Om=Op Oro[OvRapotRl RtRupTiv(Ud.Utn!V!Vil#V(Y[Y$!Yt 0Bu+Gare)H_&HlaNkotRkusSter&Ta%TrusZin>Z(2O&2KolivUv!4It_N(0Dn(Ke)KrPot0Ak~AlIkRkot2Kli$a:L-oRe[T_Tum1E,1B!a}'#Cib_Fic Fla%KlKr{Mokr!PreseRbyS#T-tiv3Kob,zKt|O^P]mSkSp+jV`]Vo/2AhaOuhoUhopis1Es0BroByt-C@t}ut DnesH+dHo^H,JemJn?Kl`KolaKt<Kum@tLarLevaL.MaM.ntMluv M'Nut P`PisPln PosudPr'odPu$ Raz R(RtSahSl'St!-SudSy)TazT-Tk~Uf!Utn!Voz%Z`uZn!Z<%2Aho)AkAm!ikAv>AzeDolObn(OgerieOzdSn(T Z(2B@}'noD-HaH'#S SnoT(0Oj?Or>2Nam :9O]gOnomie0EktronIpsa0AilIseO%P!ie2Izo^O/aOpejOs2EjEn%K<)Kymo0Ike)0F<ie0Olu%1Eku%KurzePed?P]zeP<tT,kt:C#Jf#Kul)N!ikN)zieRmacieV< Zo+3De,%J{onN#3Al#Gu,ntLozofLtrNan%N)Xa%0Ord1An_IrtOtila2NdSf<T[lT#Ton2Ak%Es#On)2KarNk%3Zi#:LejeRant3N{i#O]g3Lot.2Azu,Ejt2LemLfi$aTi#2AfAmofonAnu+EpIlOgOtes#2Ma:D?DrLaL@#N[NopisRfaRpu&V,n3Bk(J#lJnoJtmanK)rLmaM!omR>R&S]Zky3St<ik2Ad'#AsivkyAvaEd!EnO^v>OhOup(T!Ub.U/o)0AtO)Yz0IsOjivoOut0Bl.Boj}DinyDl!Dno)D|Jn(KejLin#L#LubMo+N [No,%RalR^RizontRkoRliv>RmonRn.RoskopR$voSpo^St.T'(U[UfUp!Us#V<2Ad[An?Av(Az^Bo+kD.D]D(N-Ob#Oma^OtOu^Oz@St#Ub(Yz!2B@(B~D[KotMrS aSto)0Ozd2Bn(D,ntGie&M&Sterik:2Yl#3Ned2O&0Uze0Un a0F-%Fla%KasoOva%Sp-%Tern{Vali^Ve$<Zer%3Onie:Blko})Ho^Kmi+K(L'>N)rRmarkRoSanSnoT#V<Zyk3Din>D+Dn!_HlanKotL@L oMn(NomP?S{erV Zd>Zero3NakNdyNo/Sk,Sto)Trn?Zva3En|1Gurt5R):Bar{B_Bin{}&D{Did]HanJakJu)KaoKtusLam aLhotyLibrLn(Me,MkolivM&Ni[lNoeNt<Pal.P_aP olaP#P+Po)PrPu$aPy[,Ram_Rot#RtonSaTa]gTed,U%UzaVa+cZaj#Ze)Ziv(2EkolivEsi0Dlub@MpRami#3No2A%kAdivoAmApotAsi#AunEcEn[Ep!Es~IdImaIs&Ob*kO#nOpaOubUb'&Us!Uzk(0EnIt!Otr0IhaOt0Al?Ber>B#BlihaBylaC*rH=J@>KosKtejlLapsLe^LizeLoMandoMe)MikMn!aMo,MpasMun aN!N%ptNd?N>NfeseNgresN.NkursN)ktNzervaPan>PieP~Pr'#Rb_R-t<Rmid]RoptevRpusRu&RytoRz{S!>St#T_T+)T*lUk!Up_&Us-Uz]VbojZaZ<oh2Ab?A/Aj.Al|AsopisAv!aEd EjcarEs[Eve)Ik{ItikIzeKav>Me+cMivoOcanOkOni#Op OupaOv#T-Uh`]Up?Ut(Vin#Y/+Yp)Y$alYt2Dlan#FrJn(KlaLaj^Li/L#Lom{Ltu,NaPodivuRtRz<Til0Al aAsin#E$<2No]gS_.Ta,T?T#T'>V`]:B,d<})nDn(IkKom>M_aMpaN'#S?SoStu,Tin#V.3B#CkdyD@Dn?D'#Dv.G@^GieG,%H%Hk(H~KtvarNo/odNtil#P@#Pid]T`]T>TmoTokruhVhartV a%Vobok3B,}ot#DojedDsk(H'.Jav>L-M{#NieN#No+umStop`T.T|5Bi$aDivodGi#GopedKal aK{Mc|P!aPu/RdSosTrU^lUhU#Usk!V>3Tiv(1Cer&CiferMpSkSt,%0I%2RaRi#S.:DamD]Gi$rHagonJ{-J _J< aKakK'?Kr_aL[L.L|Lv?Min#Nd+NkoRn(SakrSkotSopu$T?Tri#Tur aZan>ZivoZl Zur#2Lo[0}anikD a%D'.LasaL*nNtol#TlaTo^TrZe,3G,%H~Hu+K.KrofonL@>Lim{rL(Mi#Nc'&Ni[rNom{Nul(S#StrX|2Ad(HaH'.OkS!Uv 1I/Ohem0BilCn(D_#Dl [HylaKroL-ulaM@t#Nar/aNoklN$rumNt|NzunSazSkytStTiva%T<#Ty#U/aUdr(Zai#Z-Zol2Am<Av@>KevTvolaZ{Zut(0T _1DrcF]nL!MieN?S{Ta%ZeumZi#nt3Sliv>0Da:B*r!}yt!Da%Dbyt-DhozDobroDpisHlasHn!Hodi+H,d Iv aJedn*Ji$oJm=K]n Kon>Krm LevoMaz!Mluv Nom{rOkoOpakO$roP`!PevnoPln P~Pos+dPr(oRod RubyRy/]S` S-!S+poSt!TolikV@-Vr/Vzd<yZv!3Be}!CkyDa+koDb!DuhGa%H{Ho^J@JprveKlidLib(Mil(MocO/o)On#PokojR(RvSmyslS*l`Tv<UronV.Zvyk+3Co)JakKamKdyKlKte,kTro5C+hHav?M.%RaR-S _Sn(UzeVinyVo)Zd,5DaD+G{T Tn(Trie3Mfa:0AlArv AvaDivEcEhn!Ejm=Ez aHajo[Iln?Jasn J-tK]p La$L-Li[LohaLu^NosOh! Oj-OutRaz>R&Ru[RysSahSluhaS)r!UvVazVin VodVyk+Yv!_Z<0AsElEn Hl` Ho)H,&It~0BojByt}odCiz Ebr!Esl!Evzd!EzvaH`%Hod J{JinudKazK*p LivLu#Ml#Oln(P`PisPl=P<Pu$ Pyk!Raz#S*d StupSunTokTudVahaVe)Vol!V,%tZ&k1I&Sajd1LasNiskoRa^Roz Ryz-2ApEn?Li#NoOuzl OvyRasaResRs-RuhUpantUr#Us 0Ejn.Iz|0AkE+)Ez L`.L*v!LuvaYl0Ehdy1Ak|As-E,%I%Il(Is|O,Oz?RavduRoti1B al}e$rGieL?LojT_0A^}~I#IvoLavaLep Ln L' N'aO[Ol Pa+cT@T,haTu^Ty/Voj 0Epl IskOpRh!Rl(RokRubyV<1A~ArEsLivn O%1Id1Do[:}!_Ci@tD*/H<-KtLan^L>LivoLu[Mf+tMls-N@#Ni#N&N|N$voNtof+Pri#Rke)RodieR)Ru#Ry[Se#Siv aSt_#T@tTro&V*kZnehtZ*r-3C#DagogJs-K]LotonNal)Ndr-NzeRiskopRoStr(Tar^T?Tro+jVn.Xeso3Ani$aHaJav?K+KnikL.Ln(Lul#Nze)Pe)S!_Sto+Tev&Vn?V'ar2A%n)Ak!Am@Ane)A$i#At Avid]AzE/Em@oEn)EsEtivoEv_Iv!N NoO/aOd.Om[OutUkYn2Bav Byt}odC Ctiv>D!D%n Deps!Dh+dDiv Dkl`Dman DnikDo[Dpo,D,zD$!aDvodDzimEzieHan#Hnut#H'<HromaHybIn)Ji$#Jm=Kaz K+sKojKrokKu)KynLedneLib-Lk~LohaLynomMaluMi~Ml#MocM$aMys+tNe/!N<#Nur(P`!P_Pis-Pla/Pros Ps!PudR`%R%RodRu/aRyvS` SedSilaSkokSlan>S*d SpoluS)vaSud-SypTahT#nT+skTom-T,vaTupaTvo,U#zUtoUzdroVahaVidlaVlakVozVr/V$!VykVzde/Zd,vZem-Zn!-Z<Zv!2Ac|Ah<yAkti#A+sAot>Ap<-AseAv^IncipKnoObud O%ntoOdejOfeseOh,Oj-tO]m Omi+Onik!Op`OrokOs[OtonOut-OvazS#v#St@Udk(UtV-Voh<y0An>OvodTruh0Actvo0Ber)}DlKav>Kl.Kr+LtMpaNcP@SaSin#St.T|Ty#3Rami^SkT_::C-}otDia%Dn?DonFtGbyKe)K'.M@oMp*/NdeRa/R aS'&StrTo+$Zan%Zid]3Ag|Ak%CeptDakt<Fer@tF+xJnokKlamaK<dKrutKt<Pu)%VizeVmaVolverZerva3Sk|Ziko5Boti#Dokm@H'#K+KokoMan{oP'odPu/aRejsSolStl.Tmi$rTopedTun^Ub@#U/oUpU,V.Vn?Zb<Z/odZd!Zezn!Zhod%Zin#ZjezdZ#zZ]haZmarZp`Zru/ZsahZtokZumZvod5Bri#}`]Kav?Kopis3BaBol'}l(D]P`]T.Z(:Di$aH!KoM>Mizd!Mo)N #Rdin#San#T_ Z[Z@?0Or0H|1B,n#CeseD`]Dim@tD]Hn!Jm=Ke,K)Kun^KvojeM@oNoRvisS` Sho,SkokSl!St,SuvSyp!T[T.Tk!T~Trv!VerZ&m2O^R~0FonLn?R#Rot-RupTua%1AfandrAliskoAnz@AutEptikIcaL`[L@?LoLuzO[O#nOroRip)RzUp.V(Vr&0Abi#Adid]An.A$Avn(Ed|Ep>EvaEz.IbI&Izn?OnOup-OvoU/UhaUn%Up#Za0A,gdE)&Il$voL*vaOgR`RkRt#Ut-Ysl0AdAhaOb0Bo)}aD'#KolP#TvaUbojUc Ud%UhlasUl`Um,kUp,vaUsedUtokUvis{0Al'&As _IsLavOd-Oj@>OluOnz<Orn(Ou$aR/aU$ 1An^AzD%NaN>Ovn!P@StUb1An?Ar(aAti#Av[EhnoEz#OdolaO+kOpaOrnoOup!Ra/ResRh~RomRu&Ud&Upn?VolYk0Bj-tBtropy}arD(KnoNd!N=Rik!aR'.0AhAl$voEtrAt[Az-Is+It-Obo^Odid]Or#Rab2Kav#KotN-N'>P!Pk(R'(S_T(:B+t#Bu+H*nJemnoJfunJgaJ Jn(Kti#Mh+MponNc|N>NkerPe)V@.Z!_3}ni#HdyKut.LefonMno)Nd@%Ni$aN<P])P&PrveRapieRmos#Xtil3}oSkopisTu+k1Ad+cAn.0Ap#Esk!UkotUpa0El1A+)Pin#PolRzoUhaU+c2Ad?Akt<AmpAsaAverzaEf E$Ez<Hav.Hl.O/uOj?Os#Ou[P%P _Pk(Ub>U/l Uhl?UsV!2DyH~H(Nd,Ri$aR&jZemsko0ArohOr[Rd(Rz2GrKev:0Oh(OzeR!R*s-RusYt'&0HoTiv(0Iv 3R` 1Edn!I$ M=0Az!_Lidn Lon Otv Roj 0I%I)Ov 0Yv`]0Av If<maIk~1Ad~L!n Ly~Out!Rav 1AnAz 0Ed~Il|Mrt N`n N=Oud Tl!Tr~0Ah|K!Lum O~Op@>R*s 1Al Oln Oz'#3D,v ElEn.L.N!:GonL/aL*nNaN^lNil#RanRhanyR|1ElkuHod0Ova0DroGe)%J%Lbl*dL{rhL _LmocLry[Nk'Ran^RzeS_#SkrzeSn?SpoduS)Ter.Ver#3B,%}rDeoh,D.D+LaN?S{Tal aZeZ #0Ezd0L`Us0Aj#AkAs>EvoHk(IvN'#Oup!1Uc|Uk0DaDiv(Doz&kD$voJ@skyJ&JskoLantL[L LnoSk'#Zid]Z'&0Ravo1Ab>A%tAhA)Ba}o+kH!StvaTu+0Ad T*p Tup0Ip4Bav Br!}|D!D,Fot H+d!H~Hod H,d Hub Jasn J{Jm=K]p Kon!L-!Maz!Mez Miz{Mys+tNe/!Nik!Nut P`!Pl! P,v Pu$ Raz R'n!Rv!Sl' SokoS)v Su~Syp!Tas Tes!Tr! Vi~Vol!Vrh_Zdob Zn!0AduBud }op D<Du/Dy/!E$upH+demKazLyk!NikOr-P*,TahT-::993Lofon::Br!Byd+t}|DarmoDus F*k!Hlt Hod H,^Hy~J!>J{Ji$ K+p!K*p Lep Mez Mot!Mys+tNe/!Nik!Pl! Poj Ps!Raz S)v Su~Taj Temn Tk~Ujm=Val Ve+tVin Vol!Vrt!Zvon 0Av RusuUd|Yt-1A+#ArmaAtn(IvoOb RojVihYm`]0L@.ManM.Pt!Z`uZdola2At Lt~Lubo#Ot' Ru[0MaMn?0Emn 0Lam!Oum!R!#Umav#0AtoEh#O[OmO$Ozvyk0Ap|ArAt-IjeIz{Ocn Odr!Rzl.Ut|0AkAl(Am@!Ovu0B,z Tav Ub-Ufa+0Lod Omal RavaR( Rud#Rvu1A^An C`]N (NoOv&Y/l Zav(1I/aR! 0B'.Br0Ed~EnkuEs_aOnR!Uk'odYk\";\nconst checksum = \"0x25f44555f4af25b51a711136e1c7d6e50ce9f8917d39d6b1f076b2bb4d2fac1a\";\nlet wordlist = null;\n/**\n *  The [[link-bip39-cz]] for [mnemonic phrases](link-bip-39).\n *\n *  @_docloc: api/wordlists\n */ class LangCz extends wordlist_owl_js_1.WordlistOwl {\n    /**\n     *  Creates a new instance of the Czech language Wordlist.\n     *\n     *  Using the constructor should be unnecessary, instead use the\n     *  [[wordlist]] singleton method.\n     *\n     *  @_ignore:\n     */ constructor(){\n        super(\"cz\", words, checksum);\n    }\n    /**\n     *  Returns a singleton instance of a ``LangCz``, creating it\n     *  if this is the first time being called.\n     */ static wordlist() {\n        if (wordlist == null) {\n            wordlist = new LangCz();\n        }\n        return wordlist;\n    }\n}\nexports.LangCz = LangCz; //# sourceMappingURL=lang-cz.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93b3JkbGlzdHMvbGFuZy1jei5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHLEtBQUs7QUFDdEIsTUFBTUcsb0JBQW9CQyxtQkFBT0EsQ0FBQyw2RkFBbUI7QUFDckQsTUFBTUMsUUFBUTtBQUNkLE1BQU1DLFdBQVc7QUFDakIsSUFBSUMsV0FBVztBQUNmOzs7O0NBSUMsR0FDRCxNQUFNTCxlQUFlQyxrQkFBa0JLLFdBQVc7SUFDOUM7Ozs7Ozs7S0FPQyxHQUNEQyxhQUFjO1FBQUUsS0FBSyxDQUFDLE1BQU1KLE9BQU9DO0lBQVc7SUFDOUM7OztLQUdDLEdBQ0QsT0FBT0MsV0FBVztRQUNkLElBQUlBLFlBQVksTUFBTTtZQUNsQkEsV0FBVyxJQUFJTDtRQUNuQjtRQUNBLE9BQU9LO0lBQ1g7QUFDSjtBQUNBUCxjQUFjLEdBQUdFLFFBQ2pCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL3dvcmRsaXN0cy9sYW5nLWN6LmpzP2RjZTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxhbmdDeiA9IHZvaWQgMDtcbmNvbnN0IHdvcmRsaXN0X293bF9qc18xID0gcmVxdWlyZShcIi4vd29yZGxpc3Qtb3dsLmpzXCIpO1xuY29uc3Qgd29yZHMgPSBcIjBpdGF0a2FzdGNlbmFvdm8kdGFvdWxlcmFla2kmY2hvcip0ZWNpJWVuYmFsb2RhZWxhZGV0JyFDaG49MERpIyVFJV4xUmVzYTJSZXNlM0NlVCcjMEVqS29ob2wwUHUpJTBBJnNEdWwjRWtkbylLZSlUaSNVbHwzfWFPZ2FuJTBGYWx0SSRAdFBpLCVUbWFUcm9ub20wTGFzTHtpI09sMFRvYnVzNFlsOkIjfTxDaWxDdWwjRCFfR2UpR3JIbm9LdGVyaWVMYV5MeyNMa29uTG9uLUx2YW5MemFNYnVzTmtvbSFSW3JSe1JtYW5Sb2tvUnZhVGVyI1RvaFZsJlphbCNaaWxpI1p1IzNEJlJhblNlXlN0aWVUb25aaW4jWm1vY1opazNDeWtsRF1GdC1LaW55TGFuJU9nLGZPXWdUdmFab24yQWhvYnl0QXQqL0UvYUVkdStFc2tJayFJeiZPa3xPdWQgVWQyQi1CckRsLkR+SCEoSmtvdEp8Szx5c0xlJFI+Uic/VGFVYl9VLyFVXlUrVXIhWGVyMkFediNBbWJvLEFuI0F0ckVwKUlrZSlLb0xvaE9uek9za2V2VW57I1VzaW4jWl5aeTJCbC5Cbnx9KUQgX0QjRCdhRntKYXIoS3Y/TGRva0x2YU5eTmtyUnphVGlrVm9sWm9sYTNEK3RMLlQnIzBVa290OlBhcnRSZXYmM0RyRHUrSi9KbkxhTGVyTGtlbUxuP04uTm4oTicjTnRydW1OejxTdG9waXNUIzJBbHVwYUFwYF1BciBhQSlFL3QhRW1pZUkvb3RJcnVyZ0xgTGVbTHViIE1fTXUsT2JvdE8vb2xPZFtPKyxPbT1PcCBPcm9bT3ZSYXBvdFJsIFJ0UnVwVGl2KFVkLlV0biFWIVZpbCNWKFlbWSQhWXQgMEJ1K0dhcmUpSF8mSGxhTmtvdFJrdXNTdGVyJlRhJVRydXNaaW4+WigyTyYyS29saXZVdiE0SXRfTigwRG4oS2UpS3JQb3QwQWt+QWxJa1Jrb3QyS2xpJGE6TC1vUmVbVF9UdW0xRSwxQiFhfScjQ2liX0ZpYyBGbGElS2xLcntNb2tyIVByZXNlUmJ5UyNULXRpdjNLb2Isekt0fE9eUF1tU2tTcCtqVmBdVm8vMkFoYU91aG9VaG9waXMxRXMwQnJvQnl0LUNAdH11dCBEbmVzSCtkSG9eSCxKZW1Kbj9LbGBLb2xhS3Q8S3VtQHRMYXJMZXZhTC5NYU0ubnRNbHV2IE0nTnV0IFBgUGlzUGxuIFBvc3VkUHInb2RQdSQgUmF6IFIoUnRTYWhTbCdTdCEtU3VkU3kpVGF6VC1Ua35VZiFVdG4hVm96JVpgdVpuIVo8JTJBaG8pQWtBbSFpa0F2PkF6ZURvbE9ibihPZ2VyaWVPemRTbihUIFooMkJAfSdub0QtSGFIJyNTIFNub1QoME9qP09yPjJOYW0gOjlPXWdPbm9taWUwRWt0cm9uSXBzYTBBaWxJc2VPJVAhaWUySXpvXk8vYU9wZWpPczJFakVuJUs8KUt5bW8wSWtlKTBGPGllME9sdSUxRWt1JUt1cnplUGVkP1BdemVQPHRULGt0OkMjSmYjS3VsKU4haWtOKXppZVJtYWNpZVY8IFpvKzNEZSwlSntvbk4jM0FsI0d1LG50TG96b2ZMdHJOYW4lTilYYSUwT3JkMUFuX0lydE90aWxhMk5kU2Y8VFtsVCNUb24yQWslRXMjT24pMkthck5rJTNaaSM6TGVqZVJhbnQzTntpI09dZzNMb3QuMkF6dSxFanQyTGVtTGZpJGFUaSMyQWZBbW9mb25BbnUrRXBJbE9nT3RlcyMyTWE6RD9EckxhTEAjTltOb3Bpc1JmYVJwdSZWLG4zQmsoSiNsSm5vSnRtYW5LKXJMbWFNIW9tUj5SJlNdWmt5M1N0PGlrMkFkJyNBc2l2a3lBdmFFZCFFbk9edj5PaE91cChUIVViLlUvbykwQXRPKVl6MElzT2ppdm9PdXQwQmwuQm9qfURpbnlEbCFEbm8pRHxKbihLZWpMaW4jTCNMdWJNbytOIFtObywlUmFsUl5SaXpvbnRSa29SbGl2PlJtb25Sbi5Sb3Nrb3BSJHZvU3BvXlN0LlQnKFVbVWZVcCFVcyNWPDJBZFtBbj9BdihBel5CbytrRC5EXUQoTi1PYiNPbWFeT3RPdV5PekBTdCNVYihZeiEyQkAoQn5EW0tvdE1yUyBhU3RvKTBPemQyQm4oRCxudEdpZSZNJlN0ZXJpazoyWWwjM05lZDJPJjBVemUwVW4gYTBGLSVGbGElS2Fzb092YSVTcC0lVGVybntWYWxpXlZlJDxaZXIlM09uaWU6Qmxrb30pSG9eS21pK0soTCc+TilyUm1hcmtSb1NhblNub1QjVjxaeWszRGluPkQrRG4hX0hsYW5Lb3RMQEwgb01uKE5vbVA/U3tlclYgWmQ+WmVybzNOYWtOZHlOby9TayxTdG8pVHJuP1p2YTNFbnwxR3VydDVSKTpCYXJ7Ql9CaW57fSZEe0RpZF1IYW5KYWtKdSlLYW9LdHVzTGFtIGFMaG90eUxpYnJMbihNZSxNa29saXZNJk5pW2xOb2VOdDxQYWwuUF9hUCBvbGFQI1ArUG8pUHJQdSRhUHlbLFJhbV9Sb3QjUnRvblNhVGFdZ1RlZCxVJVV6YVZhK2NaYWojWmUpWml2KDJFa29saXZFc2kwRGx1YkBNcFJhbWkjM05vMkEla0FkaXZvQW1BcG90QXNpI0F1bkVjRW5bRXAhRXN+SWRJbWFJcyZPYiprTyNuT3BhT3ViVWInJlVzIVV6aygwRW5JdCFPdHIwSWhhT3QwQWw/QmVyPkIjQmxpaGFCeWxhQypySD1KQD5Lb3NLdGVqbExhcHNMZV5MaXplTG9NYW5kb01lKU1pa01uIWFNbyxNcGFzTXVuIGFOIU4lcHROZD9OPk5mZXNlTmdyZXNOLk5rdXJzTilrdE56ZXJ2YVBhbj5QaWVQflByJyNSYl9SLXQ8Um1pZF1Sb3B0ZXZScHVzUnUmUnl0b1J6e1MhPlN0I1RfVCspVCpsVWshVXBfJlVzLVV6XVZib2paYVo8b2gyQWI/QS9Bai5BbHxBc29waXNBdiFhRWQgRWpjYXJFc1tFdmUpSWt7SXRpa0l6ZUthdj5NZStjTWl2b09jYW5Pa09uaSNPcCBPdXBhT3YjVC1VaGBdVXA/VXQoVmluI1kvK1lwKVkkYWxZdDJEbGFuI0ZySm4oS2xhTGFqXkxpL0wjTG9te0x0dSxOYVBvZGl2dVJ0Uno8VGlsMEFsIGFBc2luI0UkPDJOb11nU18uVGEsVD9UI1QnPlZgXTpCLGQ8fSluRG4oSWtLb20+TV9hTXBhTicjUz9Tb1N0dSxUaW4jVi4zQiNDa2R5REBEbj9EJyNEdi5HQF5HaWVHLCVIJUhrKEh+S3R2YXJOby9vZE50aWwjUEAjUGlkXVRgXVQ+VG1vVG9rcnVoVmhhcnRWIGElVm9ib2szQix9b3QjRG9qZWREc2soSCcuSmF2PkwtTXsjTmllTiNObyt1bVN0b3BgVC5UfDVCaSRhRGl2b2RHaSNHb3BlZEthbCBhS3tNY3xQIWFQdS9SZFNvc1RyVV5sVWhVI1VzayFWPjNUaXYoMUNlciZDaWZlck1wU2tTdCwlMEklMlJhUmkjUy46RGFtRF1HaSRySGFnb25Key1KIF9KPCBhS2FrSyc/S3JfYUxbTC5MfEx2P01pbiNOZCtOa29SbihTYWtyU2tvdFNvcHUkVD9UcmkjVHVyIGFaYW4+Wml2b1psIFp1ciMyTG9bMH1hbmlrRCBhJUQnLkxhc2FMKm5OdG9sI1RsYVRvXlRyWmUsM0csJUh+SHUrSy5Lcm9mb25MQD5MaW17ckwoTWkjTmMnJk5pW3JOb217TnVsKFMjU3RyWHwyQWQoSGFIJy5Pa1MhVXYgMUkvT2hlbTBCaWxDbihEXyNEbCBbSHlsYUtyb0wtdWxhTUB0I05hci9hTm9rbE4kcnVtTnR8Tnp1blNhelNreXRTdFRpdmElVDwjVHkjVS9hVWRyKFphaSNaLVpvbDJBbTxBdkA+S2V2VHZvbGFae1p1dCgwVCBfMURyY0ZdbkwhTWllTj9Te1RhJVpldW1aaSNudDNTbGl2PjBEYTpCKnIhfXl0IURhJURieXQtRGhvekRvYnJvRHBpc0hsYXNIbiFIb2RpK0gsZCBJdiBhSmVkbipKaSRvSm09S11uIEtvbj5Lcm0gTGV2b01heiFNbHV2IE5vbXtyT2tvT3Bha08kcm9QYCFQZXZub1BsbiBQflBvcytkUHIob1JvZCBSdWJ5UnkvXVNgIFMtIVMrcG9TdCFUb2xpa1ZALVZyL1Z6ZDx5WnYhM0JlfSFDa3lEYStrb0RiIUR1aEdhJUh7SG9eSkBKcHJ2ZUtsaWRMaWIoTWlsKE1vY08vbylPbiNQb2tvalIoUnZTbXlzbFMqbGBUdjxVcm9uVi5adnlrKzNDbylKYWtLYW1LZHlLbEt0ZSxrVHJvNUMraEhhdj9NLiVSYVItUyBfU24oVXplVmlueVZvKVpkLDVEYUQrR3tUIFRuKFRyaWUzTWZhOjBBbEFydiBBdmFEaXZFY0VobiFFam09RXogYUhham9bSWxuP0phc24gSi10S11wIExhJEwtTGlbTG9oYUx1Xk5vc09oISBPai1PdXRSYXo+UiZSdVtSeXNTYWhTbHVoYVMpciFVdlZhelZpbiBWb2RWeWsrWXYhX1o8MEFzRWxFbiBIbGAgSG8pSCwmSXR+MEJvakJ5dH1vZENpeiBFYnIhRXNsIUV2emQhRXp2YUhgJUhvZCBKe0ppbnVkS2F6SypwIExpdkx1I01sI09sbihQYFBpc1BsPVA8UHUkIFB5ayFSYXojUypkIFN0dXBTdW5Ub2tUdWRWYWhhVmUpVm9sIVYsJXRaJmsxSSZTYWpkMUxhc05pc2tvUmFeUm96IFJ5ei0yQXBFbj9MaSNOb091emwgT3Z5UmFzYVJlc1JzLVJ1aFVwYW50VXIjVXMgMEVqbi5JenwwQWtFKylFeiBMYC5MKnYhTHV2YVlsMEVoZHkxQWt8QXMtRSwlSSVJbChJc3xPLE96P1JhdmR1Um90aTFCIGFsfWUkckdpZUw/TG9qVF8wQV59fkkjSXZvTGF2YUxlcCBMbiBMJyBOJ2FPW09sIFBhK2NUQFQsaGFUdV5UeS9Wb2ogMEVwbCBJc2tPcFJoIVJsKFJva1J1YnlWPDFBfkFyRXNMaXZuIE8lMUlkMURvWzp9IV9DaUB0RCovSDwtS3RMYW5eTD5MaXZvTHVbTWYrdE1scy1OQCNOaSNOJk58TiR2b050b2YrUHJpI1JrZSlSb2RpZVIpUnUjUnlbU2UjU2l2IGFTdF8jVEB0VHJvJlYqa1puZWh0WipyLTNDI0RhZ29nSnMtS11Mb3Rvbk5hbClOZHItTnplUmlza29wUm9TdHIoVGFyXlQ/VHJvK2pWbi5YZXNvM0FuaSRhSGFKYXY/SytLbmlrTC5MbihMdWwjTnplKVBlKVMhX1N0bytUZXYmVm4/VidhcjJBJW4pQWshQW1AQW5lKUEkaSNBdCBBdmlkXUF6RS9FbUBvRW4pRXNFdGl2b0V2X0l2IU4gTm9PL2FPZC5PbVtPdXRVa1luMkJhdiBCeXR9b2RDIEN0aXY+RCFEJW4gRGVwcyFEaCtkRGl2IERrbGBEbWFuIERuaWtEb1tEcG8sRCx6RCQhYUR2b2REemltRXppZUhhbiNIbnV0I0gnPEhyb21hSHliSW4pSmkkI0ptPUtheiBLK3NLb2pLcm9rS3UpS3luTGVkbmVMaWItTGt+TG9oYUx5bm9tTWFsdU1pfk1sI01vY00kYU15cyt0TmUvIU48I051cihQYCFQX1Bpcy1QbGEvUHJvcyBQcyFQdWRSYCVSJVJvZFJ1L2FSeXZTYCBTZWRTaWxhU2tva1NsYW4+UypkIFNwb2x1Uyl2YVN1ZC1TeXBUYWhUI25UK3NrVG9tLVQsdmFUdXBhVHZvLFUjelV0b1V6ZHJvVmFoYVZpZGxhVmxha1ZvelZyL1YkIVZ5a1Z6ZGUvWmQsdlplbS1abiEtWjxadiEyQWN8QWg8eUFrdGkjQStzQW90PkFwPC1Bc2VBdl5JbmNpcEtub09idWQgTyVudG9PZGVqT2Zlc2VPaCxPai10T11tIE9taStPbmlrIU9wYE9yb2tPc1tPdG9uT3V0LU92YXpTI3YjU3RAVWRrKFV0Vi1Wb2g8eTBBbj5Pdm9kVHJ1aDBBY3R2bzBCZXIpfURsS2F2PktsLktyK0x0TXBhTmNQQFNhU2luI1N0LlR8VHkjM1JhbWleU2tUXzo6Qy19b3REaWElRG4/RG9uRnRHYnlLZSlLJy5NQG9NcCovTmRlUmEvUiBhUycmU3RyVG8rJFphbiVaaWRdM0FnfEFrJUNlcHREYWt0PEZlckB0Rit4Sm5va0tsYW1hSzxkS3J1dEt0PFB1KSVWaXplVm1hVm9sdmVyWmVydmEzU2t8WmlrbzVCb3RpI0Rva21ASCcjSytLb2tvTWFue29QJ29kUHUvYVJlanNTb2xTdGwuVG1pJHJUb3BlZFR1bl5VYkAjVS9vVXBVLFYuVm4/WmI8Wi9vZFpkIVplem4hWmhvZCVaaW4jWmplemRaI3paXWhhWm1hclpwYFpydS9ac2FoWnRva1p1bVp2b2Q1QnJpI31gXUthdj9Lb3BpczNCYUJvbCd9bChEXVBgXVQuWig6RGkkYUghS29NPk1pemQhTW8pTiAjUmRpbiNTYW4jVF8gWltaQD8wT3IwSHwxQixuI0Nlc2VEYF1EaW1AdERdSG4hSm09S2UsSylLdW5eS3ZvamVNQG9Ob1J2aXNTYCBTaG8sU2tva1NsIVN0LFN1dlN5cCFUW1QuVGshVH5UcnYhVmVyWiZtMk9eUn4wRm9uTG4/UiNSb3QtUnVwVHVhJTFBZmFuZHJBbGlza29BbnpAQXV0RXB0aWtJY2FMYFtMQD9Mb0x1ek9bTyNuT3JvUmlwKVJ6VXAuVihWciYwQWJpI0FkaWRdQW4uQSRBdm4oRWR8RXA+RXZhRXouSWJJJkl6bj9Pbk91cC1Pdm9VL1VoYVVuJVVwI1phMEEsZ2RFKSZJbCR2b0wqdmFPZ1JgUmtSdCNVdC1Zc2wwQWRBaGFPYjBCbyl9YUQnI0tvbFAjVHZhVWJvalVjIFVkJVVobGFzVWxgVW0sa1VwLHZhVXNlZFV0b2tVdmlzezBBbCcmQXMgX0lzTGF2T2QtT2pAPk9sdU9uejxPcm4oT3UkYVIvYVUkIDFBbl5BekQlTmFOPk92biFQQFN0VWIxQW4/QXIoYUF0aSNBdltFaG5vRXojT2RvbGFPK2tPcGFPcm5vT3VwIVJhL1Jlc1JoflJvbVJ1JlVkJlVwbj9Wb2xZazBCai10QnRyb3B5fWFyRChLbm9OZCFOPVJpayFhUicuMEFoQWwkdm9FdHJBdFtBei1JcytJdC1PYm9eT2RpZF1PciNSYWIyS2F2I0tvdE4tTic+UCFQayhSJyhTX1QoOkIrdCNCdStIKm5KZW1ub0pmdW5KZ2FKIEpuKEt0aSNNaCtNcG9uTmN8Tj5Oa2VyUGUpVkAuWiFfM31uaSNIZHlLdXQuTGVmb25Nbm8pTmRAJU5pJGFOPFBdKVAmUHJ2ZVJhcGllUm1vcyNYdGlsM31vU2tvcGlzVHUrazFBZCtjQW4uMEFwI0VzayFVa290VXBhMEVsMUErKVBpbiNQb2xSem9VaGFVK2MyQWQ/QWt0PEFtcEFzYUF2ZXJ6YUVmIEUkRXo8SGF2LkhsLk8vdU9qP09zI091W1AlUCBfUGsoVWI+VS9sIFVobD9Vc1YhMkR5SH5IKE5kLFJpJGFSJmpaZW1za28wQXJvaE9yW1JkKFJ6MkdyS2V2OjBPaChPemVSIVIqcy1SdXNZdCcmMEhvVGl2KDBJdiAzUmAgMUVkbiFJJCBNPTBBeiFfTGlkbiBMb24gT3R2IFJvaiAwSSVJKU92IDBZdmBdMEF2IElmPG1hSWt+MUFkfkwhbiBMeX5PdXQhUmF2IDFBbkF6IDBFZH5JbHxNcnQgTmBuIE49T3VkIFRsIVRyfjBBaHxLIUx1bSBPfk9wQD5SKnMgMUFsIE9sbiBPeicjM0QsdiBFbEVuLkwuTiE6R29uTC9hTCpuTmFOXmxOaWwjUmFuUmhhbnlSfDFFbGt1SG9kME92YTBEcm9HZSklSiVMYmwqZEx7cmhMIF9MbW9jTHJ5W05rJ1Jhbl5SemVTXyNTa3J6ZVNuP1Nwb2R1UylUZXIuVmVyIzNCLCV9ckRlb2gsRC5EK0xhTj9Te1RhbCBhWmVaICMwRXpkMExgVXMwQWojQWtBcz5Fdm9IayhJdk4nI091cCExVWN8VWswRGFEaXYoRG96JmtEJHZvSkBza3lKJkpza29MYW50TFtMIExub1NrJyNaaWRdWicmMFJhdm8xQWI+QSV0QWhBKUJhfW8ra0ghU3R2YVR1KzBBZCBUKnAgVHVwMElwNEJhdiBCciF9fEQhRCxGb3QgSCtkIUh+SG9kIEgsZCBIdWIgSmFzbiBKe0ptPUtdcCBLb24hTC0hTWF6IU1leiBNaXp7TXlzK3ROZS8hTmlrIU51dCBQYCFQbCEgUCx2IFB1JCBSYXogUiduIVJ2IVNsJyBTb2tvUyl2IFN1flN5cCFUYXMgVGVzIVRyISBWaX5Wb2whVnJoX1pkb2IgWm4hMEFkdUJ1ZCB9b3AgRDxEdS9EeS8hRSR1cEgrZGVtS2F6THlrIU5pa09yLVAqLFRhaFQtOjo5OTNMb2Zvbjo6QnIhQnlkK3R9fERhcm1vRHVzIEYqayFIbHQgSG9kIEgsXkh5fkohPkp7SmkkIEsrcCFLKnAgTGVwIE1leiBNb3QhTXlzK3ROZS8hTmlrIVBsISBQb2ogUHMhUmF6IFMpdiBTdX5UYWogVGVtbiBUa35Vam09VmFsIFZlK3RWaW4gVm9sIVZydCFadm9uIDBBdiBSdXN1VWR8WXQtMUErI0FybWFBdG4oSXZvT2IgUm9qVmloWW1gXTBMQC5NYW5NLlB0IVpgdVpkb2xhMkF0IEx0fkx1Ym8jT3QnIFJ1WzBNYU1uPzBFbW4gMExhbSFPdW0hUiEjVW1hdiMwQXRvRWgjT1tPbU8kT3p2eWswQXB8QXJBdC1JamVJentPY24gT2RyIVJ6bC5VdHwwQWtBbChBbUAhT3Z1MEIseiBUYXYgVWItVWZhKzBMb2QgT21hbCBSYXZhUiggUnVkI1J2dTFBXkFuIENgXU4gKE5vT3YmWS9sIFphdigxSS9hUiEgMEInLkJyMEVkfkVua3VFc19hT25SIVVrJ29kWWtcIjtcbmNvbnN0IGNoZWNrc3VtID0gXCIweDI1ZjQ0NTU1ZjRhZjI1YjUxYTcxMTEzNmUxYzdkNmU1MGNlOWY4OTE3ZDM5ZDZiMWYwNzZiMmJiNGQyZmFjMWFcIjtcbmxldCB3b3JkbGlzdCA9IG51bGw7XG4vKipcbiAqICBUaGUgW1tsaW5rLWJpcDM5LWN6XV0gZm9yIFttbmVtb25pYyBwaHJhc2VzXShsaW5rLWJpcC0zOSkuXG4gKlxuICogIEBfZG9jbG9jOiBhcGkvd29yZGxpc3RzXG4gKi9cbmNsYXNzIExhbmdDeiBleHRlbmRzIHdvcmRsaXN0X293bF9qc18xLldvcmRsaXN0T3dsIHtcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgQ3plY2ggbGFuZ3VhZ2UgV29yZGxpc3QuXG4gICAgICpcbiAgICAgKiAgVXNpbmcgdGhlIGNvbnN0cnVjdG9yIHNob3VsZCBiZSB1bm5lY2Vzc2FyeSwgaW5zdGVhZCB1c2UgdGhlXG4gICAgICogIFtbd29yZGxpc3RdXSBzaW5nbGV0b24gbWV0aG9kLlxuICAgICAqXG4gICAgICogIEBfaWdub3JlOlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkgeyBzdXBlcihcImN6XCIsIHdvcmRzLCBjaGVja3N1bSk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBhIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiBhIGBgTGFuZ0N6YGAsIGNyZWF0aW5nIGl0XG4gICAgICogIGlmIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgYmVpbmcgY2FsbGVkLlxuICAgICAqL1xuICAgIHN0YXRpYyB3b3JkbGlzdCgpIHtcbiAgICAgICAgaWYgKHdvcmRsaXN0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHdvcmRsaXN0ID0gbmV3IExhbmdDeigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3b3JkbGlzdDtcbiAgICB9XG59XG5leHBvcnRzLkxhbmdDeiA9IExhbmdDejtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxhbmctY3ouanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTGFuZ0N6Iiwid29yZGxpc3Rfb3dsX2pzXzEiLCJyZXF1aXJlIiwid29yZHMiLCJjaGVja3N1bSIsIndvcmRsaXN0IiwiV29yZGxpc3RPd2wiLCJjb25zdHJ1Y3RvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-cz.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-en.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wordlists/lang-en.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LangEn = void 0;\nconst wordlist_owl_js_1 = __webpack_require__(/*! ./wordlist-owl.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist-owl.js\");\nconst words = \"0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO\";\nconst checksum = \"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60\";\nlet wordlist = null;\n/**\n *  The [[link-bip39-en]] for [mnemonic phrases](link-bip-39).\n *\n *  @_docloc: api/wordlists\n */ class LangEn extends wordlist_owl_js_1.WordlistOwl {\n    /**\n     *  Creates a new instance of the English language Wordlist.\n     *\n     *  This should be unnecessary most of the time as the exported\n     *  [[langEn]] should suffice.\n     *\n     *  @_ignore:\n     */ constructor(){\n        super(\"en\", words, checksum);\n    }\n    /**\n     *  Returns a singleton instance of a ``LangEn``, creating it\n     *  if this is the first time being called.\n     */ static wordlist() {\n        if (wordlist == null) {\n            wordlist = new LangEn();\n        }\n        return wordlist;\n    }\n}\nexports.LangEn = LangEn; //# sourceMappingURL=lang-en.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-en.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-es.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wordlists/lang-es.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LangEs = void 0;\nconst wordlist_owla_js_1 = __webpack_require__(/*! ./wordlist-owla.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist-owla.js\");\nconst words = \"0arertoiotadonoaRteirroenaNonaLsolocoiliaralaorrenadaChoN$n0A>Dom,EjaI!#Oga&O'Or#RazoR*Ue=U<0Ab Adem@Ce<C~Ei)ElgaEn#Ept I&L  NeOg!O<TivoToTrizTu Ud*U!&Us 0Ic#Mit*Opt Or'Ua`Ul#0Reo0Ect Ic~In Irm 0IlIt On@Os#Ot Reg R$UaU&U?aUja0OgoOr+0ReSl 0Ed_zE'Us)1Ac[nAmb_ArmaBaBumCaldeDeaEg_Ej Er%E%F?!GaGo&nIa&I,#Iv$MaMejaMib T TezaTivoToTu[Um'Z 0AbleAn)Apo]ArgoAs B Bi#E'IgoIs%dOrP oPl$0|oC@'C]D D,Em@Gu=Il=ImoIsOt T,aTiguoTojoUalUl Unc$Ad*EjoO1Ag A[#Eti#IoLic O&Or)OyoR,d!Rob Ues%U+1A&A`ArBit+BolBus#|ivoCoD!D?]DuoEaI&IesM.i-esOmaPaP.Reg=RozRugaTeTis%0AA&Al#C,<Egur EoE<rI,#I=Ist*NoOmb+P!oT?]T+Tu#Um*Un#0AjoAqueArEn#EoI>Le%OmoRa!RozUn0DazD$GeLaM,#S,)T^0AlAnceA+EEl]`E`EstruzI.I<2ErU{U'0Af[nArO)Uc Uf_Ul:BaB^|eH@IleJ Lanz/c.LdeMbuN>Nd-oRb(>RnizR+Scu]S#nSu[Tal]T!@T*Tu%UlZ 3BeBid/=S SoSt@3|oEnNgo2An>OqueUsa2ABi`BoCaCi`DaDegaIn//!oLsaMb-{dNi#N}saiRdeRr SqueTeTinVe{Zal2AvoAzoEchaEveIl=In>IsaOcaOmaOnceO)UjaUs>U#2CeoCleE'EyFan{F.HoIt_L#Rbuj(l(+Sc TacaZ.:Bal=BezaBi`B[CaoDav!D,aErFeI{ImanJaJ.LLam Lc$L&Li{dLleLm/^LvoMaMb$Mel=Mi'Mp}c!Nd?Nel-gu+Nic-#N-.ObaOsPazPi%nPo)Pt Puch((b.RcelRe%Rg(i'RneRpe%R+R%SaS>S!oSpaS#rT^ceT_U{lUsaZo3Bol]D!D+Ld/eb_Lo<Lu]M,#Niz-t+Rc(&Rez(oRr R)zaSpedT+2AcalAle>AmpuAnc]ApaAr]I>Is)IvoOqueOzaUle%Up 0Cl.EgoE=EnEr#F[G +M->NeN%P_sR>Rue]SneTaU{d2Am^AnA+AseAveI,)ImaInica2B_Cc~|i'Ci`CoDigoDoF_G!He)JinJoL/ch/eg$Lg Lin/l LmoLum`Mba)M!Mi{Mo&Mpr-deNej}g-oc!Nsej}t PaPi(az.Rba%RchoR&nR.(r!S!SmosS%2AneoAt!E Ec!Ei&EmaIaIm,Ip%IsisOmoOnicaOque%U&Uz2Ad+Ar#At+BoBr*| aEl=En#Er{Es%EvaId Lebr/p/#Mb_Mpl*N-e%O%P.Pul( R$<R<RvaTis:M-z(R&T?3B!B?Ca{C*DoF,saFin*J LfinLga&Li#M^-<N%lP^)RechoR+%Sayu'SeoSf?eSnu&Sti'Sv$TalleT,!U{3AAb=AdemaAman)A`Ar$BujoCt En)E%EzFic?G'Lem/u*N!oRec#Rig*S>Se'Sf[zVaVi'5BleCeL^Ming}N Ra&Rm*R<SSis2Ag.Oga2|aDaE=E'LceOQueR Rez(o:0A'R$0H OUa&r0AdIc~Ific$I#rUc 1Ec#Icaz3EEmp=1Efan)Eg*Em,#Ev IpseI)Ix*Og$Ud*0Bu&It*Oc~Pa)Pe'PleoP_sa0A'C go|ufeC@EmigoE+Fa&F!moGa'Igm/aceOrmeRe&SayoS, T!oTr VaseV$1Oca0Uipo0Izo0Ca]C,aCol Crib*Cu&Enc@F!aFu!zoPa{PejoP@PosaPumaQuiT TeTi=Tufa0ApaEr'Ic-@1Ad*Alu En#It 1Ac#Am,Ce<CusaEn#Ig*Il$Ist*I#P!#Plic P.!T_mo:BricaBu]|a{C?C#rE`J/d/=L<Lt MaM?@Mo<Ra.Rmaci(olRsaSeTigaU`V^X3Br!o|/izORi(ozRt?Rv^Stin3AbleAnzaArB[Cc~|aDeoEb_ElE[Es%Gu[J JoL/e)L@lLt+NNc-g*Ni#Rma2A>Au%EchaOrO%U*UjoU^2B@CaGa%G.L$Lle#N&Rm(+Rtun(z SaTo2Aca<Ag?AnjaAseAudeE*E'EsaIoI#U%2EgoEn)ErzaGaM Nc~Nd(g.R@S?TbolTu+:Ce]FasI%JoL/!i/=Mb- Nch}g-<RajeRzaSoli`St ToV?an3Me=M*NN!}$N)Ran$R,)Rm,S#3Gan)M`s$R Ro2Aci OboOr@2LLfoLo<LpeM(&R?([TaTeoZ 2A{Afi>A'AsaAtisAveIe%Il=IpeIsI#O<rUaUe<UmoUpo2An)ApoArd@Er[IaI'I.I<It [Sa'St :B!B?Bl C!|aD/l Mac(i`ZZa`3B?]B[|oLa&L$Mbr(*Rma'RoeRv*3E=Er+Ga&Gi,eJoM'S#r@5Ci>G Gu!aJaMb_Ng}^Nr((mig('St?Yo5E>ElgaEr%E<EvoI{IrMa'Me&M?deM}d*RacanR#:1O'0EalIomaO=2Lesi/uUal4EgalUs~0Ag,AnIt P P!$P.!Pul<0CapazDiceEr)FielF^meG,$Ic$M,<MuneNa#Sec#S%n)T!esTimoTu*Ut?Vi!'3AIsOn@0L/o):BaliB.M.RabeRdinR[U]Zmin3FeRinga3Ne)5R`d(obaV,Ya5ErgaEvesEzGa&rGoGue)Ic$N>Ngl-$Nt Pit!R S#V,?Zg :7Lo5A]:B$C$C[DoD+nG #GrimaGu`I>M!Mi`Mp --ch-gos%NzaPizRgoRvaStimaTaTexT*U_lV Zo3AlCc~|eC#rErG~Gumb_Ja'Ngu-#NaOnOp &S~TalT[VeY,{3B!%dB+C^D!Di EnzoGaG!oMaMi)M.Mp$NceN&Ne-go)N}t!`Qui&SoS%T!aT$T+2AgaAmaAn#AveEg En Ev Or Ov!Uv@2BoC~CoCu[GicaG+MbrizM}jaTe5|aC*G J}-esPaSt+ToZ:Ce%|oD!aD_Du+Est+F@G@GoIzL{dLe%Ll/oMaMboMutN>N&Nej Ng-iquiNj N}<N%Na`PaQuin(R>Re(f?Rg,Ri&RmolR+nR)sRzoSaSc aSivoT T!@TizTrizXimoY^Z^ca3|aDal]D$Du]J?]J^L,/.M^i-^NsajeN)NuRca&R,gueRi#SS.TaT!To&T+Zc]3E&ElEmb+G/Lag+Lit Ll.M}-!}im}u#OpeR SaS!@S?SmoTadTo5|?aC~DaDe=HoJ LdeL!Li'M,#Mi- c-ed-j-#NoRad(d!Re'R*R+Rs(%lScaStr TivoV!V?Zo5|oD EbleE]Er)Est[G_J!L/e%L%N&Nec(alRoScu=SeoSgoSicaS=:C C~D IpeRanj(izRr SalTalTivoTu[lUseaValVeVi{d3C$Ct G Goc$G+OnRv$ToUt+V V!a3|oDoEb]E#NezNoTi&Vel5Bleza|eMin(i(m()TaTic@Va#Ve]V$5BeCaCleoD?=DoE[EveEzLoM!oTr@:Sis0E<IspoJe#R(!oS!v T,!V$0AA<Ea'H,%HoIoReTavoTub_Ul#Up Urr*0I IoIsea0S)0EnsaEr%Ic$Rec!0Ro1DoR0O1AEa{Fa#IvoLaMoOrVi&0Bligo0DaZa1A>C~E[In On!T TicaUes#1Ac~A&rAlBi%CaD,EjaGa'G@Gul=I,)Ig,Il]OQues%Uga0Ad@Cu+Ez'OT[0O'Ro1EjaU=1I&Ige'0En)0O':C#D_El]Gi`GoIsJ oLabr/>Le%Li&Lm/om/p NNalNi>Nt!-ue=PaPelP?]Que)R Rcel(edR*RoRpa&RqueR[foR)S SeoS~SoS%TaT$Tr@UsaU%VoYa<3A#nCa&C!a|oDalD*G IneL L{'Le/ig+LlejoLoLuc--s N.OnOrPi'Que'R(ch(d!Rez(f?Ri>Rl(mi<R+Rs.aSaScaSimoS%`Ta=T+leoZZu`3C |.EEd[Er`EzaJam/ Lo#Mi,%N}#rNz-aOjoP(a%S Sci`SoS%T.Zca2AcaAnA%AyaAzaEi#E'OmoUmaU[l2B_CoD!D$EmaEs@E%L,Lici/=LvoMa{Me=MoMp-!Rc~R%lSa{Se!SibleS)T,c@T+Zo2A&E>zEgun%Em$EnsaE<Ev$ImoIncipeIs~Iv OaOb Oce<Oduc#OezaOfe<rOg[maOleOmesaOn#Op$OximoUeba2Bli>|!oD^Eb=Er%Es#Lg/*Lm.LpoL<M-#NalNoPaP?(e:99Ed EjaEm Er!E<Ie#ImicaInceIt :Ba'B@BoC~DicalIzMaMp-ch}goPazPi&P#SgoSpaToYoZaZ.3Acc~Ali{dBa'Bo)Ca!Ce%|azoCog!C_oC#Cur<DD.&Duc*FlejoF^maF[nFug$Ga=G*G]G_<H,I'IrJ/a#LevoLieveLle'LojM Med$M}>rNd*N%P #Pet*Po<Pt?SSca)Si`Spe#S#Sum,T*oT^'T[#Un*VesVis%YZ 3CoEgoEn{EsgoFaGi&G^Nc.N.OQuezaSaTmoToZo5BleCeCi D DeoD?]ErJizoJoM!oMp!NN>N{PaP!oSaScaSt+T 5BiB^DoE{G*I&In/e%LoMboM^Ptu[TaTi`:Ba&B!B$BleC GazG[&L/&L!oL*Lm.L.Ls/#LudLv Mb-c~Ndi-e Ng_Ni{dN}#PoQueRdin()nSt_TanU`Xof.3Cc~CoC_#C%DGu*IsL=LvaMa`M?l-d-<rNalN^P  P@Qui(RieRm.Rv*S,%S~TaT,%V!oXoX#3D[Es%E)G=G'Lab/b L,c$L]Mbo=M$R,aS)maT$Tu 5B_C$D$LLap/{&Le{dLi&Lt Luc~Mbr-de}i&No+NrisaPaPl P^)R&Rp_s()oS)nTa'5AveB*Ce<D^Eg[E=E'Er)Fr*Je#L%nM P! Pl*P.!P_moRR>Re'Rg*S#T?:Ba>BiqueB]BuCoC#JoL L>L,#Ll/.Ma'Mb^Ng}quePaPe)P@P.Qu?l(deRe(if(je%RotR+R%TuajeU+ZaZ.3At+|oC]CnicaJa&J!Ji&L/efo'MaM^Mp=NazNd!N!NisN<Ori(api(>Rmi'Rnur(+rSisSo+StigoT!aX#Z3B$Bu+nEmpoEn{Er[E<G_J!/deMb_Mi&M}%OPi>PoR(.TanT!eTu=Za5Al]B?=C Ci'DoG/&M N}#P PeQueRaxR!oRm,%RneoRoRpe&R_R<RtugaSS>S!Xi>2AbajoAc#rA!Afi>AgoAjeAmoAnceA#AumaAz EbolEguaEin%EnEp EsIbuIgoIpaIs)IunfoOfeoOmpaOn>OpaO)OzoU>Ue'Ufa2B!@BoEr#MbaM^NelNic(bin(ismoR'T^:0Ic 9C!a0B[l0I{dIrIv!<OT A3Ba'BeG,)Na0ArU $0IlOp@1A:CaC$Cu`G GoI`J?l/eLi&LleL^Lvu]Mp*oR(i R.So3Ci'C#rHicu=In)JezL/!oLozN-c!Nd-e'Ng N*N%NusRRa'RboRdeRed(j(<Rt!3AAjeBr C$CtimaDaDeoDr$EjoErnesG^LLl-ag_N}e&OlinRalRgoRtudS^Sp!aS%Tami`U&VazV!oV*Vo5LcanLum,Lv!RazT ToZ5E=Lg :::C!Te3GuaM('So9DoGaGur:F*}jaPa#Rza93N(+5MoR&\";\nconst accents = \"aeiou7695@@BZWWavwUJkO@Y-Kn))YEGq#E@O)cI@#ZkMHv$e*))M!!)D**$GW!oKm*Acoh^k&It-pi^SYW)$^n!G)bO!Wkzam(jS#X)Og*^l^RW!bQ#QygBKXfzE))hti!Qm)Cng%%c)mJiI*HJWbmYniCLwNdYyY%WKO^bnT$PuGOr!IvHu&G(GKbtBuhiW&!eO@XMeoYQeCa#!MrTJCq!OW&CHG(WCcW%%)$rfrIegu$)w!G)JGmWWw)MnD%SXXWIT^LWAZuVWB^W)eTL^x&$WGHW(nKWEMA)#$F$x$Waekqs,n7715)W*HM-$WAcCiu(a))VCZ)GG%(*CWWdW%$D!UCO$M\";\nconst checksum = \"0xf74fb7092aeacdfbf8959557de22098da512207fb9f109cb526994938cf40300\";\nlet wordlist = null;\n/**\n *  The [[link-bip39-es]] for [mnemonic phrases](link-bip-39).\n *\n *  @_docloc: api/wordlists\n */ class LangEs extends wordlist_owla_js_1.WordlistOwlA {\n    /**\n     *  Creates a new instance of the Spanish language Wordlist.\n     *\n     *  This should be unnecessary most of the time as the exported\n     *  [[langEs]] should suffice.\n     *\n     *  @_ignore:\n     */ constructor(){\n        super(\"es\", words, accents, checksum);\n    }\n    /**\n     *  Returns a singleton instance of a ``LangEs``, creating it\n     *  if this is the first time being called.\n     */ static wordlist() {\n        if (wordlist == null) {\n            wordlist = new LangEs();\n        }\n        return wordlist;\n    }\n}\nexports.LangEs = LangEs; //# sourceMappingURL=lang-es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-es.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-fr.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wordlists/lang-fr.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LangFr = void 0;\nconst wordlist_owla_js_1 = __webpack_require__(/*! ./wordlist-owla.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist-owla.js\");\nconst words = \"0erreleontiteurinueiriet cegeanseali medenel q)eniluxaus ch0Ais}And$Diqu E`#Ol*Ord Ou%rOy RasifReuv Ri,Rog RuptS_-SoluS'@UsifYss=0A@m+AjouAr+nCab]Cep,Clam Cola@Cro~eCu}ErbeHatHe,Idu]I Omp&Qu *R$y?Te'TifT)l0Ep&EquatHesifJec%fJug Mett!M* Op,Or Ouc*Res<RoitUl&V be0R R$ef0Fai!Fec,Fi~eF!{Fub]0Ac Enc I#I,Raf Reab#Ru?1D Gu`#L>Mab#S/-0Ou,Us,1Arm Chim+Er&Geb!G)I_ I?ntLeg Lia.Lou Lum O'd*PagaTes<Veo#0A&'BiguB!Enag Ertu?Id$Ir=Orc O'Ovib#Phib+P#'Us/t0Aly<Apho!Ar~+Atom+C+nE/%rG#Gois<Gu#{Im=Nex N$-N)lOd(Om=+Ony?Orm=T_[Tido&X+{1Ai}Eri%fL/*Olog+Pa!`Pe]Por,Puy 0UariumUeduc0Bit!Bus&De'Doi<G_tLequ(Matu!Me?ntMoi!Mu!P_,Ra~ Riv Ro}S_icT +lTic#0PectPh=&P* S|tS v*S+t&Soc>S' TicotT!Tu-0El>O?RiumRo-Ta^T_%fT* Trap 0Ba(eB .Da-Dib#G' Ro!Tom[Tru~e0A]Anc Ari-En*Er<Eug#Ia&'I@I$I}O(eOu R`1I=Io?:D.Fou Ga.G)t&Igna@L/c Lc$Le(eLisa.Mb(Ncai!Nda.Nl+)Nn>eNqu>Rb>R`R$R^Rra.Ss(S%$Ta`#Te|T,+Udr>Vard 3Let&L>Lo&Nefi-R-|Rg Rl(eRmudaSa-Sog[Ta`Ur!3B $Cyc#Du#JouL/L(g)LlardNai!Olog+Ops+OtypeScuitS$Sto'iTu?Zar!2AfardAg)An~*Ess/tInd OndOqu Ous$2BardB(eI!I}Li@Nb$Nd*Nhe'Nif>NusRdu!R[T&Uc#Ue{Ug+Ul$Uqu(Ur<Usso#U%^Xe'2An~eAs>AveEbisE~eEuva.Ico]Iga@Ill/tIo~eI^O~u!Od Onz Ous<Oye'U?Us^Ut=Uy/t2Ff#Iss$L#%nRe|R(S% T( To*Vab#Vet&:B/$B(eChet&De|D!Fe(eIllouIss$Lcu]Lep(Lib!Lm Lomn+Lvai!Mara@M aMi$Mpag[N=Net$N$N%[NularPab#Por=Pri-Psu#P,Pu~eRab(eRb$eRes}RibouRna.Rot&R!|Rt$Sca@S>S^Ssu!U}U%$V=>V [Viar3D`#Intu!Les&Llu#Ndr>Ns' Ntr=Rc#Rebr=Ri<Rn Rve|S}2Agr(Ai<A#'Amb!An-Apit!Arb$As<'At$Auss$Av* Emi<En`#Equ>Er~ Ev=I_Iff!Ign$Im eIotLoru!OcolatOis*O<O)t&Ro?U&0Ga!Gog[M_,NemaNtr Rcu]R R^T [Toy_Tr$V`2A*$A?'Aqu As<Av>I_tIgn ImatIva.O~eOna.Opor&2B=tBraCas<Co% D Dif>Ff!Gn Hesi$Iff Inc L eLibriLl(eLma,L$elMbatMed+Mm/@MpactNc tNdui!Nf>N.]Nno,Ns$[NtactNvexePa(P+Ra`Rbe|Rda.Rni~eRpusR!ctR&.Smi^Stu?T$U@Upu!Ura.U&|Uvr*Yo&2AbeA(&Ava&Ay$Eatu!Edi,E?{Eu}Evet&Ib]I Ist=I,eOi!Oqu Ota#Uci=UelYp,2Bi^E`l*Il]eIs(eIv!Lm( L%v Mu]Pi@Ra%fR<'3Anu!C#L(d!Ni^:Ign M>Ng N<'Uph(3Batt!Bi,Bord Brid But/tC= Cemb!Ch* Cid Clar Cor Cri!Cup]Da#Duc%fEs<F_sifFi]Fray Gag Givr Glu%rGraf Jeun Li-Log M/d Me' Mol*Ni~ Nou N&l#Nud PartP_}Pha}Plac Po}R/g Rob Sast!S-n&S tSign Sobe*Ss( Str>Ta~ Tes,To' T!s<V/c V_*V( Vo*3Ab#Alog)Am/tC,Ff  G  Git=G[Lu M/~eM(u Oxy@Rec%fRig Scu,Spo}Ssip St/-V %rVi}5Ci#C&'G?IgtMa(eMici#Mp,Na&'Nj$Nn Pam(eRto*Ru!Sa.Se'Ss>Ta%$U/>Ub#U-'U,Y_2Ag$Ap Es}Ibb]Oitu!2P +P#xeRab#Rc*3Nas%e:0Lou*0Ar,HarpeHel#La* Lip<Lo!Lu<O#Onom+Or-Ou,Ra}Rem Riva(RouU?U!u`0If>Uqu 1Fac Fec%fFig+FortFray Fusi$0Ali}Ar 2Ec,1Abor Arg*Ectr$Eg/tEph/tEveIgib#I%s?O.Ucid Ud 0B=]Bell*Bry$Er|@Issi$M_ O%$Ouvo*P e'Ploy Por,Pri<Ulsi$0Cadr Ch eClaveCo~eDigu Dos}DroitDui!Erg+F/-F m Fou*Gag G(Glob Ig?Jamb JeuLev NemiNuye{Ri~*Roba.Seig[Tas}T_d!T>To' Trav Um  Vah*Viab#Voy Zy?0L+n0Aiss*Arg[At/tAu#Ic +I@m+I Ilog)I[Iso@ItapheO^ReuveRouv Uis/t0U !Uipe0Ig Osi$Re'Up%$0C=>Pad$Pe-P+g#Po*PritQuiv Say S_-S+uSor Ti?TomacTra@0Ag eA]An~eA%^E(d!Endo*Er[lH/olHi^Hn+Ir Off Oi#Onn/tO'd*R/.RoitU@0Phor+0Alu Asi$Enta`I@n-I,Olu%fOqu 1ActAg  Auc Cel]Cit/tClusifCu<Ecu,Emp#Erc H= Hor,I.n-I]Is,O%^Ped>Plor Po}Prim QuisT_sifTrai!Ul,:B#Bu#{Cet&Ci#Ctu!Ibl*Lai<Me{M`#R-'RfeluR(eRou~eSc( T=Tig)Uc$U%fVe'Vori3Bri#C$d D  L(M?M'Ndo*Od=Rm Ro-Rve'S%v=U`#Ut!Vr>3AscoCe]C%fDe#Gu!Latu!Leta.L>eL#ulLm LouLtr N/c N*O#R?Ssu!X 2A* Am?As^At&'E|E~eE'Exi$Oc$O!Uctu Ui@Uvi=2L+Nd +Ngib#Nta(eRc Rg $Rmu]Rtu[Ssi#Ud!Ug eU`]Ulu!Urmi2Agi#Ai<An~*App Aye'Ega&E( El$Em*E[s+E!Iab#Ic%$Iss$Ivo#OidOma.Ont=Ot,Uit2Gi%fI&Re'R+{R%fSi$T':Gn Lax+L +Mbad R/%rRd+nRn*Rrig)Zel#Z$3AntLa%[Lu#Ndar?N =N+NouN%lOlog+O?t!R/iumR?St)lY}3B>C]RafeV!2A-AiveIs}ObeOi!Or+{2Lfe'M?Nf]R.R`#Udr$Uff!UlotUp`#Urm/dUt&2Ad)lAffi%A(eAndApp(AtuitAv*EnatIffu!Il]Imp Ogn Ond Ot&OupeUg U% Uy e2EpardErr>I@Im|veIta!Sta%f3Mnas&Rostat:Bitu@Cho*L&Me|NgarN[t$RicotRm$+Rp$Sard3LiumMato?RbeRiss$Rm(eR$Si,U!{3B n BouLar/tStoi!V 5MardMma.Mo.[N['Nor N&{R@Riz$Rlo.Rm$eRrib#U#{Us<5BlotI#{Ma(Mb#Mi@Mo'R]3Dro?lG+[M[Pno<:2Yl#2Nor U/e4Lici&Lusi$0A.Bib I,M_<Mobi#Muab#PactP i=Plor Po}Prim Pu,0Carn C_d+Ci@ntCl( Colo!Dex Di-Duc%fEditEp%eExactF(iFlig Form Fusi$G  H= Hib Jec,Ju!No-ntOcu]Ond Scri!Sec&Sig[Soli&Sp* S%nctSul,TactT_<Ti?Trig)Tui%fU%#Vasi$V_,Vi,Voqu 3Oni^Rad>ReelRi,0O]2Oi!Res<:GuarIll*MbeNv>Rd(Ug U[Velot3Tab#T$UdiU[s<9Ind!N~ Ng]Ue'UissifUrn=Vi=Y|Ye{5Bi]Ge?ntNiorP$Ris&S%-Te{V_i#:Yak7M$oOs^:BelBi=Bo' C  Cto<Gu[I[Is}I% Mbe|Mel#MpeN-'Nga.N,[P(R.'R?Ur>VaboVo*3Ctu!G=G Gu?SsiveTt!V>Xi^Zard3As<B  B!C_-Cor[E.Ev!Gatu!Go,G)M Mi&M$a@Mpi@Neai!NgotOn-|Qui@S>eS,ThiumTi.Ttor=V!'5Gi^Inta(Is*MbricT +U UrdUt!UveY=5B+Ci@Cra%fE'Gub!Is/tM>eNai!NdiR$T,X){:Ch(eGas(G_taGi^Ig!Ill$In%_Ir+Is$Jor Lax Lefi-Lhe'Li-L#t&MmouthNda,Niab#Nqu/tN&|N)lRath$Rb!R~/dRdiRi%?R^'Rr$R&]Scot&SsifT +lT>eTra^Udi!Ussa@UveXim=3Ch/tC$nuDa`#Dec(Di,Du<Il#'L/.Lod+Mb!Moi!Nac N Nh*Ns$.NtorRc!diRi&R#Ssag Su!T=Teo!Tho@T>Ub#3Au]CrobeEt&Gn$Gr L+uLli$Mi^N-N =Nim=Nor Nu&Rac#Roi,Ssi#X&5Bi#D [El#{Ndi=Ni&'Nna+Not$eNst!Ntag[Nu?ntQ)'R-|Rsu!R% Te'TifU~eUf#Ul(Uss$Ut$Uv/t5L%p#Ni%$Ra`#Re[Rmu!Sc#SeumSic+nTa%$T T)l3Ria@R%l#S,eThi^:Ge'PpeRquoisRr Ta%$Ti$Tu!Ufra.U%^Vi!3Bu#{CtarFas&Ga%$Glig Goc>I.Rve{Ttoy Ur$eUtr$Veu3CheCkelTra&Ve|5B#CifCt'[Ir-'I<t&Ma@Mb!{Mm Rma%fTab#Tif>Toi!Urr*Uve|Va&'Vemb!Vi-5A.Anc I!Isib#M oP%=Q)Tri%f:0E*Jec%fLig Sc'S v Stac#T_*T' 0Casi$Cup E/Tob!Troy Tup]Ulai!0E'Or/t1F_}Fic>Fr*0Ive1Se|S`l$2Fac%fIv>0Bra.Ett!0Ct){Du]E!{Iri^1A#A^Er Ini$PortunPrim T Ti^1A.{An.Bi&D$n E`#G/eG)`Ifi-Ne?ntQ)T+0C`]Mo<Satu!0Ar+0Rag/Rs$T`Trag Vra.0A%$1Y@Y.[1O[:Isib#La-Lma!sLo'@Lp Na~eNdaNgol(Niqu N[|NoramaNt=$PayeP>Po,PyrusRadoxeR-l#Res<Rfum R]Ro#Rra(R<m Rtag Ru!Rv_*Ssi$S&^T [lT+n-Tr$V`l$Voi}Y Ysa.3Ig[Int!La.Lic/L#Lou<Lu~eNdu#Netr Nib#NsifN'+Pi&PlumRdrixRfor Rio@Rmu,Rp#xeRs`R&S Ta#TitTr*Up#2Ara$Ob+O^Ot$Ra<Ysi^0AnoCt'=E-Er!Euv!Lo&N-|Pet&Qu Rog)Sc(eSt$Vo,XelZza2AcardAf$dAis*An A^Astr$A&|E' ExusIa.OmbOng U+Uma.2Chet&Es+E&In&Ir>Iss$Iv!Lai!Lic>L#nLyg$eMma@Mp>Nct)lNd  NeyR%^Si%$S<d Stu!Tag Te|Ti$U-Ula(Um$Urp!Uss(Uvo*2A*+A%^Ec+{Edi!EfixeElu@EnomE<n-E&x&Evo*Imi%fIn-Is$Iv Ob#?O-d Odi.Of$dOg!sO+Oje,Olog)O?n Op!Osp eO&g O)s<Ov beU@n-U[|0Y~o<1BlicC $I}LpeLsarNai<Ni%fPit!Rif>Zz#3Rami@:99AsarE!l#Es%$Ietu@It,O%_t:C(eC$,D+{G$d(I@'Is(L_%rLl$.Mas}Pi@Sa.Tis}Vag V(Y$n 3Ac%fAg*Ali}Anim Cevo*Ci,Clam Col,Cru,Cu]Cyc]Dig Dou,Fai!F#xeForm Fra(Fu.G=+nGi$Gla.Gul>I, Je,Jou La%fLev L+fMar^Me@Mi<M$,Mpl*Mu NardNfortNif]N$c Ntr NvoiPl>Por,Pri<P%#Qu(S veS(e{Soud!SpectS,SultatTabl*T_*Ticu#Tomb Trac Uni$Uss*V/~eViv!Vol&Vulsif3Ches<De|E'Gi@Go]Nc Pos,Sib#S^T)lV=V>e5Che{M/-Mp!N-Nd(Se|S>Ta%fTorTu#U.U`#U#|U%[Y|?5B/BisCheEl#G){In Is<|S S%^3Th?:B]Bo,B!Co~eFariGes<Is*La@LiveL$Lu MediNc%$Ngl>Rcas?Rd(eT' Ug!nuUm$U,Uva.V/tV$n 1AlpelAnda#E]atEnarioEpt!HemaI_-Ind O!Ru%nUlp,1An-Cab#Ch Cou C!,Da%fDui!Ig['Jo'Lec%fMa(eMb]M_-M(=Na&'Nsib#N&n-Par Q)n-Re(R.ntR+{Rru!RumRvi-Sa?V*Vra.Xtup#3D =Ec#Eg Ff]G#Gn=L_-LiciumMp#Nc eNist!Ph$RopSmi^Tu 1I 3Ci=C#DiumIg[{LdatLe`Litu@Lub#Mb!M?`Mno]N@N.'N[t&No!Rc>R%rS+T%<Uc+{Udu!Uff#U#v UpapeUr-U%r Uv_*0Ac+{A%=Eci=H eIr=3Ab#A%$ErnumImulusIpu]RictUd+{Upe'Ylis&0Bli?BstratB%lBv_*C-sC!FfixeGg  Ive'Lfa&P bePpl>Rfa-Rica&R?n Rpri<Rs|tRv+Spect3LlabeMbo#Metr+Nap<NtaxeS&?:BacBl>C%#Il]L_tLism/L$n Mbo'Mi}Ngib#PisQu( Rd RifR%[S<TamiToua.UpeU!|X 3Mo(Mpo!lNa`#Nd!Ne'N*Nsi$Rm( R[Rrib#T(eX&2E?Eor+Erap+Orax0BiaE@Mi@Reli!Ro*SsuT/eT!Tub 5Bogg/L /tMa&Ni^N[|P$y?R~eRd!Rna@Rp`#R!ntR<Rt)TemU~ Urna.Us}X(e2Ac%$AficAgi^Ah*A(An~ Ava`Ef#Emp EsorEu`Ia.Ibun=Ico,Ilog+IompheIp]It' Ivi=Omb$eOncOpic=Oupe|2I#LipeMul&N[lRb(eTe'Toy Y|3Mp/Ph$Pi^R/:0Ues^9Ti?Tras$1Ani?If>I$I^Itai!Iv s3AniumBa(Tic/t0A.I[UelU!0I#Op+:Car?Cc(Gab$dG)Ill/tInc!Is<|Lab#Li<Ll$LveMpi!N`#Pe'R>Se{Ss=S&3C&'Det&Get=Hicu#InardLo-Nd!diN  Ng Ni?{Ntou<Rdu!R(Rn*RrouR}RtuSt$T /Tus&X/tX 3AducAn@Ctoi!D/.DeoG[t&G)'La(Lla.Naig!Ol$P eRe?ntRtuo<RusSa.Se'Si$S^{S)lT=Tes<Tico#Tr(eVa-Vipa!5Ca%$Gu I#Is(Itu!La`#Lc/L%g Lu?Ra-R&xT Ulo*Ya.Yel#:G$:3N$:Cht:3B!NithS&9Olog+\";\nconst accents = \"e7693&)U*o&)Ry^)*)W))))#X^))))@@)#Wf)m%)#!))AG)&IIAQIIIBIIHJNAgBIILIDJGo)))HIQIIIIA(IGgJHH(BIIxX#)Ou)@*IAAPIIIJHQJ)&QIQPYI(HYAQC%)!))QHJJ@)#)^f*^AXCJ))$%CP))%&m)u)@e^A#G#))W@!(IKK%!(I%))O@QA))@GG#e))))WHJIWh))my@IIBT^)!)HAYGETHI*))!QnUDG)))nBoKAC*HwyQh))$&)G&)UGO)G)))(BX#v**)%O,e7686)I))@)&)gdMP()))ud)p#L))I^FIHYdWG))D@DFV)QA)o%MyTh%*)Z)%)n(XANc^R)YS\";\nconst checksum = \"0x51deb7ae009149dc61a6bd18a918eb7ac78d2775726c68e598b92d002519b045\";\nlet wordlist = null;\n/**\n *  The [[link-bip39-fr]] for [mnemonic phrases](link-bip-39).\n *\n *  @_docloc: api/wordlists\n */ class LangFr extends wordlist_owla_js_1.WordlistOwlA {\n    /**\n     *  Creates a new instance of the French language Wordlist.\n     *\n     *  This should be unnecessary most of the time as the exported\n     *  [[langFr]] should suffice.\n     *\n     *  @_ignore:\n     */ constructor(){\n        super(\"fr\", words, accents, checksum);\n    }\n    /**\n     *  Returns a singleton instance of a ``LangFr``, creating it\n     *  if this is the first time being called.\n     */ static wordlist() {\n        if (wordlist == null) {\n            wordlist = new LangFr();\n        }\n        return wordlist;\n    }\n}\nexports.LangFr = LangFr; //# sourceMappingURL=lang-fr.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-fr.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-it.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wordlists/lang-it.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LangIt = void 0;\nconst wordlist_owl_js_1 = __webpack_require__(/*! ./wordlist-owl.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist-owl.js\");\nconst words = \"0torea noica!iosorolotaleratelanena%oiadoencotivomai t ca%a0A]Bagl'Bin#E.Is(Oli!Rasi_Rog#0Cade!C[$Cus#E <Hil,I@QuaReRil>Roba+U 0Ag'Deb{DomeEgu#Eri!IpeOtt&Ul&1Fabi,Fe|Fis(F-n Oris`O(R~$0AveEn.E_,Ganc'I!It&OnismoR>*Rume Uzzo4AbardaA Bat)Ber#BoBumeCeCol>E|<FaGeb-Ian.IbiIm[ Lag#Leg)Lie_Lo@/Lusi_Me$Oge$Pa}Pest!Ta,=Ter$T%c'T)veUn$Veo*Z&0Alga`Ani+A!=B{Br#EbaEr~E^s+I]Mas(M[daMir&Mon{O!P'Pli&U, 0A}r@Ag-feAlis+Arch?At-CaCel/Co-D&D!aEl*Ge*Gol&Gus I`Neg&Nid#NoNunc'OnimoT%ipoZi1At>Ertu-OdePari!Pe^ Pogg'P)@Pun Ri,1Ab~AchideAgos+Ald~Anc'Atu-AzzoBit)Chiv'D{Eni,G[ Gi<Gu IaMon?NeseRed#RingaRos S[>SoTef%eZil*0Ciu|Col EpsiEtt>Fal I$O/Pir#P)Sagg'SeSolu Sur@TaT[u T%eT-|0Av>EismoOm>O$TesaTiv&Tor$Tr{Tua,0Sil'Str?Tis+To$moTun$0Anz#E!V[i!Vi(Volge!3Io<O ZimoZur):Be,C}$Ci$CoDessaDi/+Gn#I+L]<L@Le=L/+Lza$Mbi$Ndi!RaondaRba)R}R{$RlumeRoc]Sil>S(Tos+Ttu U,VaVosa3C]FfaLg'LvaNdaNe_,Nig$Nzi=ReRli=Ta3Bi+CiDo<Fi@GaLanc?MboNo]*O*goPedePol&Rban.R-S]|Ses S$n$Son.SturiZzar)2An@At+2Ll{Nif>R@S]Tan>T^$Zzo*2Acc'AdipoA`An}Avu-E.l/Eve|EzzaIgl?Il/n.Ind&Oc]*O@Onzi=Ul*U$2Bbo<CaDi$Ffo<IoLboO$R*<R-s}S(/S+:De|Du]La`)L]*LesseLib)LmoLor?MbusaMe-+M%?Mmi$Mo/Mpa,NapaNde/NeNi$No|N^=PacePel*P{*Pogi)Ppe)P-Psu/RapaceR}ssaR@Ris`Rova=R!|R li=Sacc'S}+Ser`SoS(<S.l*Sua,Tas+Te=T-meU Vil*3Dibi,D-+Fa*Leb!Llul&NaNo<N.simoRam~Rc&R RumeRvel*So?SpoTo2E/Ia)Ic}Iede!Ime-I=IrurgoI+r-0AoClismoFr&G$Lind)O|*R}R)siTr>T+di$UffoVet+Vi,2Ass>In~O)2C]Dar@D%eE!n.G$meLl&Lm#Lo!Lpo(L^v#LzaMaMe+M`n@Mo@Mpu.rMu<Nci(Ndur!Nfer`Ngel&NiugeN<s(Nosce!NsumoN^nuoNveg$Per P'<Pp?Pr~poRazzaRda+R%#Rn%eRol/RpoR!@Rs?R.seSm>S+n.Ttu-V#2A.!Avat+E#Ede!Emo(Esci+E+Ice I=,IsiIt>OceO=}Os++Uc?,Us}2Ci!Cu*Gi$Ll#Po/R#!R(!R_Sci$S de:DoI$L`+Meri$Nie/N$(Nz&T#Van^Vve)3Bu|C[n'Ci(Cli$Col*C! D%#Fin{FormeG$Leg&Lfi$Lir'L+M[zaNot#Nt)Pos{Rapa+Riv&RogaScri|Ser Sider'Sume!Tersi_Vo 3Amet)Cemb!Ed)Fe(Ffu(Geri!Gi+,Luv'Nam>N=nziPin P*`Po*Rad&ReRo|RupoSag'Sc! Sf&Sge*Spos S+nzaSu`$ToVa$Vel Vide!Vor#5B*<C[.Ga=,G`LceM#M[~Min&N@*NoRmi!TeT !Vu Zzi=2AgoUi@2Bb'Bit&Ca,NaOmoPl%eRatu):0A$0Ces(CoLissiO$m?0E-I]/I,I r?Uc&2Emon?LiOismoReg'4Abor#Argi!Egan.Enc#E|Ev&F>I}MoSaU(0An#B,`Es(I)O^_Oz'<Pir>U*0Dem>Du)Erg?FasiO.}Tr&Zi`1A^.I*goI(d'O},Pu!0U#!0Ar'BaBo(EdeEmi+Ige!Met>OeOsi_Ran.0Ago$AmeAnimeAudi!CaEmp'Erc{Ib{Ig[.Is.!I OfagoOrt#O(Pan(P!s(S[zaSoTe(Tim&Ton?T)(Ult&0Il>N>Rus]To0ClideoRopa0A(Id[zaIt#Olu Viva:Bbr~Cc[daChi)L]Migl?Na,Nfa-NgoN+s`ReRfal/Ri$(R`]Sc?S (Sul*T%&ToVo*(3Bb!Co/DeG#LpaLt)Mmi=Nde!Nome$Rm[ R)R^,Ssu-S^_T+U@3AbaDuc?FaGur#LoNanzaNest-Ni!O!S},S>Ume2A]<Am[]EboEm`Ori@U[.Uo)2B>Cacc?Co(Der#Gl'La+Lc*!Lgo!Nd[.Net>N?N+=Rb{Rchet+Res+Rm~R='RoR.zzaRz&Sf#S(2A}s(A=Assi$A.l*Eccet+E=+Es]IgoOlli$OndeUga,Ut+2Ci/+Cs?Gg[.Lmi<L_Man.Me|Mo(NeNz'<O]RboRgo<Ro!SoTi,:Bb?$FfeLa.oLli=LoppoMbe)M`Ranz?RboRofa$Rzo<S@|Sol'Str>T Ud'ZeboZzel/3CoLa^=L(Mel*Mm#NeN{!N='No^poRgo2Epar@Iacc'Isa0Al*LdaNep)Oc&Oiel*Or$OveR#Ro<T++Udiz'Ur#Us 2Obu*U^<1Omo0BbaLfM{Mmo<Nf'N=Ver$2Aci,A@Af>AmmoAndeAtt&A_(Az?E}EggeIfo<Ig'InzaOt+Uppo2Adag$A'An Ard&FoId&::0Ern#0O=0Ent>Ill'O*RaR>Roge$2Ie<Na)Nor#4A!Le(Log>Lude!0Bal*Bevu Boc]Bu Ma<Mer(Mol#Pac]Pe PiegoPor P)n+0Al&Arc&At^_Can C[d'Chi$Cisi_Clu(Cont)C)c'CuboDagi<D?Do,Ed{Fat^Fil&Fli|Gagg'Geg$G,seGor@G)s(Nes]O@!Oltr&Ond#Sa$Se|SiemeSonn?Suli=Tas#Te)To=]Tu{Umidi!Vali@VeceV{1Erbo,Not>O.siP~1IdeLandaOn>Rig#Ror&0Ol#O poTer>Titu Tr%e0Al?Er&:::Bb)Birin C}Cer#Cri`Cu=D@veGoMpoNcet+N.r=R@(RgaRingeSt-T[zaTi$TtugaVag=Vo)3Ga,Gge)MboN.zzaNzaO<P!Si_Ss#S T.-,VaVig#3Be)DoEv{L/Matu-Mit&Mpi@Ne&NguaQui@RaR~S}TeTig'V!a5CandaDeG~Mb&Nd-Nge_QuaceR[zoToT.r?5CeCid#Ma}Mi$(NgoPoPpo*SingaS(T :Cab)Cchi=Ce)Cin#Da`G>Gl?G<.G)Iol~LafedeLg-@Lin.(Lsa$L Lumo!NaNc?N@r/Ngi&Nifes N=)Nov-NsardaN^deNubr'PpaR#=Rci!Ret+RmoRsup'Sche-Ssa?S^$Te-s(Tr>/T <Tu)Zur}3And)C}n>Ce=.DesimoDit&GaLassaLisLod?NingeNoN(/Rcur'R[daR*Schi$SeSse!S *Tal*To@T.!3Agol&CaCel'Che,C)boDol*E,Gl'!La$Li.MosaNe-,NiNo!Ri$R^l*Sce/SsivaS Sur&TezzaTig&T-T.n.4Emon>0Del*Dif~Du*Ga$G'LeLos(Nas.)N]Ndi=Ne+r'Ni,No $N(<Nt#Nvi(RaRde!Rs%#St)Tiv#TosegaT V[zaVim[ Zzo5C}CosaFfaGhe|G='La|Li<l*L^p*Mm?N Ove!Ra,SaS]*S~Te_,To:BabboF+Nomet)Rci(R%eRr#Sce!Str&Tu-,Ut~Vigl'3Bu*saC)siGa^_Goz'Mme$Ofi+Re|R_Ssu$Ttu$Ut-,VeV)t>3Cch?NfaTi@5Bi,Ci_DoMeMi=Rd>R`,RvegeseSt-$T&Tiz?Ttur$Vel/5C,oL/Me)O_Tri!Vo/Z?,:Si0Bedi!BligoElis]L'O*So, 0Cas'<Ch'Cid[.Cor!!Cult&RaUl#0Ier$Or&1Fer+Fri!Fusc#0Ge|GiNu$4AndeseFa|I#IvaOg-m`T!0Agg'Bel>B-EgaIss'<0Do(E!IceNi_)O!_,Ta1Er#In'<Pos 1A]*AfoDi<Ecchi$Ef%eFa$Gan>Igi<Izzon.MaMegg'Na^_O*g'R[@Ribi,T[s?T~Za+Zo0A!Cur&MosiPeda,Pi.SaSid&Ta]*Te0I.ReTago$TimoTob!1A,EstI$Ipa)Oc{UnqueVi&3Io:Cche|CeCif>Del/D)<EseGaGi=Lazzi=Les&Lli@LoLudeN@)N<l*O*O=zzoPr~Rabo/Rcel/Re!Rgo*RiRl#Ro/R^!Rv[zaRz?,Ssi_St%}Tac}To*g?TtumeVo<3Cc#Dal&Do=,Gg'Lo(N&Nd%eNi(/Nnu Nomb-Ns&N /PePi+Rbe<R]r(R@n#Rfor&Rgame=R'@Rmes(R$Rp,s(Rsua(Rtug'Rva(S#!Sis+SoS^fe)Ta*T^<Tu/n.Zzo3Ace!An+At^$Cci$CozzaEgaEt-Ffe)G?`Gol'G)LaLife)L*/Lo+Mpan.Ne+N=No*Ogg?OmboRamideRet>Ri.RolisiTo<Zz>2AceboAn&As`A+$E=r'2ChezzaDe)(DismoEs?Ggi&L[+Ligo$Ll%eLmoni.Lpet+L(Lt)=Lve!M%eMo@)N.Po*(Rfi@Ro(Rpo-R!R++SaSi^_Sses(Stul#Tass'Te!2AnzoAssiAt~Eclu(Ed~Efis(Egi#Elie_Eme!E$t&Epar#Es[zaE.s Eval(I`IncipeIv#Ob,`Ocu-Odur!OfumoOge|OlungaOmessaO$meOpos+O)gaO.(OvaUd[.Ug=Ur{0Iche1Bbl>D~Gil#G$LceL{Lsan.Nt&PazzoPil/Ro:99Ad)Al]saAsiE!/O+:C]l D@pp'D~,Dun#Ff~GazzoG'<G$Mar)MingoMoNdag'N l&P#Pi=Pp!(Satu-Schi#S[.Sseg=St!l*TaVvedu 3A,Cepi!Cin Clu+Cond{Cupe)Dd{Dime!Gal#Gist)Go/G!s(Laz'<M&Mo N=Pl~Prime!Put&SaSid[.Spon(S+u)TeTi=Tor~T^f~Voc#3Assun Badi!Bel,B!zzoCar~C]Ceve!C%l#Cor@C!du D>*Dur!Fas&F,s(For`Fug'G&Gett#Ghel*Lass#Lev#Ma<!MbalzoMed'Morch'Nasci+N})NforzoN$_Nom#Nsav{N c]Nunc?Nv[i!Par#Petu Pie$Port&P!saPuli!Sa+Sch'ServaSibi,SoSpe|S )Sult#S_l Tar@Teg$Tm>T)_Un'<VaVer(Vinci+Vol Zo`5BaBot>Bus Cc?CoDagg'De!D{!G{Ll'Mant>Mpe!Nz'Sol&SpoTan.Ton@Tu/Vesc'5BizzoBr~GaLli$Mi<Mo)(O*PeSs&St>:B#Bbi&Bot#Go`Las(Ldatu-Lgem`Liv&Lmo<Lo<Lt&Lu L_Pe!Pi@Por{Race$R}smoR S((Telli.Ti-Tol*Tur$Va=V'Zi#0Adigl'AlzoAnc#Ar-At.!Av&End&Irci&Locc#Occi#Rin&Ruffo<Uff&0Ab)(Ad[zaA/Ambi&Anda*Apo/Ar(A.n&Av#El En>Ett)HedaHie=IarpaI[zaInde!IppoI)ppoI_*Ler&Odel/Olp{Ompar Onfor Opri!Or+Os(<OzzeseRibaRoll&Ru^n'Uder?Ul !Uo/U)Us&0Ebit&Ogan&0C}tu-Con@Da$Gg'/G=l#G!g#Gu{Lci#Let^_L/Lvagg'Mafo)Mbr&MeMin#Mp!N(N^!Pol Qu[zaRa+Rb#Re$R'Rp[.R-gl'Rvi!S^=To/T^`=0Ace*Ald&Am#Arzo(At%#E-IdaIl#IngeOc#Oder&OgoOl^!Orz#Ra|Rutt#Ugg{Um&U(0Abel*Arb#Onfi&Orb'Rass#Uar@1Bi*C]meEr-G/G$!L[z'L/baMbo*Mpat>Mul#Nfon?Ngo*Nist)NoN.siNu(idePar'S`S ,Tu#2It+Ogatu-Ove$0Arr{Emor#En^ E-l@IlzoOnt&Ott#Uss#0Elli!Erv#O@0BbalzoBr'C]r(C?,Da,Ffi|G$Ld#L[<Li@L/zzoLoLubi,Lv[.Mat>M`NdaNe|Nnife)Pi!Ppe(P-Rge!Rpas(Rri(R(R.gg'R_l#Spi)S+T^,0AdaAl/Arge!A /Av[ Azzo/EcieEdi!Eg<!E/tu-E-nzaEs(!Ett-,Ezz#IaIgo*(Ill#I$(I-,L[di@Or^_O(RangaRec&Ron#RuzzoUn^$0Uil*0Ad%&O l#1Abi,Ac]AffaAgn&Amp#Ant'Arnu Ase-Atu E*EppaErzoI,|I`IrpeIva,Izzo(On#Or>RappoReg#Ridu*Rozz&Ru|Ucc&UfoUp[@0B[t)C](Do!Gger{GoL+$On&PerboPpor Rgel#R)g#Ssur)Tu-0Ag&EdeseEgl'El&Enu Ez?IluppoIs+Izze-Ol+Uot&:Bac]Bul#Cci&Citur$LeLis`$Mpo<Nni$RaRdi_Rg#RiffaRp&R+rugaS Tt>Ver=Vo/+Zza3CaCn>Lefo$Me-r'MpoMu N@<Ne)Ns'<N+]*O!`RmeR-zzoRze|SiSser#St#T)T ?3F&Gel/Mb)N P>Pog-foRagg'RoTan'To*Tuban.Z'Zzo<5Cc&L,r&L Mbo/MoNfoNsil/Paz'Po*g?PpaRbaRn&R)<R -S}$Ssi!S+tu-Ta$2Aboc]AcheaAfi/Aged?Alc'Amon Ans{Apa$Ar!As*]Att#AveEcc?Emol'Espo*Ibu Iche]Ifogl'Il*InceaIoIs.zzaItur#Ivel/OmbaO$OppoO|/Ov&Ucc#2Batu-Ff#Lipa$Mul Nis?Rb&Rchi$TaTe/:0Ic#0Cel*Ci(!0I!I^_1FaF%'0Ua,4IsseTim#0A$I,Orismo0Ci<|Ge!Ghe!seI]r$If%#I($I+r'Te0Vo0Upa1Aga$G[zaLo0AnzaA C{Ig$*U-'0Ensi,IlizzoOp?:Can.Ccin#Gabon@Gli#LangaLgoL>L,t+Lo)(Lut&L_/Mpa+Ng&N{(NoN+gg'Nve-Po!Ra$Rc#R?n.S}3Det+DovaDu Ge+,I]*Lc)Li=Llu LoceN#Ndemm?N RaceRba,Rgog=Rif~RoRru}Rt~,Sc~Ssil*S+,Te-$Tri=Tus 3Andan.B-n.C[daChingoCi=nzaDim&Gil?G< Go!LeL/$MiniNc{!O/Pe-Rgo/Ro*goRu,n S](S'<SpoSsu Su-TaTel*T^`VandaVi@Zi&5CeGaLa^,Le!LpeRagi<5L}$::::Mpog=N=Pp#T.-Vor-3Fi)Lan.LoNze)Rbi$3Be|N]R]<T 5L/T>5Cche)Fo*LuPpa\";\nconst checksum = \"0x5c1362d88fd4cf614a96f3234941d29f7d37c08c5292fde03bf62c2db6ff7620\";\nlet wordlist = null;\n/**\n *  The [[link-bip39-it]] for [mnemonic phrases](link-bip-39).\n *\n *  @_docloc: api/wordlists\n */ class LangIt extends wordlist_owl_js_1.WordlistOwl {\n    /**\n     *  Creates a new instance of the Italian language Wordlist.\n     *\n     *  This should be unnecessary most of the time as the exported\n     *  [[langIt]] should suffice.\n     *\n     *  @_ignore:\n     */ constructor(){\n        super(\"it\", words, checksum);\n    }\n    /**\n     *  Returns a singleton instance of a ``LangIt``, creating it\n     *  if this is the first time being called.\n     */ static wordlist() {\n        if (wordlist == null) {\n            wordlist = new LangIt();\n        }\n        return wordlist;\n    }\n}\nexports.LangIt = LangIt; //# sourceMappingURL=lang-it.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93b3JkbGlzdHMvbGFuZy1pdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHLEtBQUs7QUFDdEIsTUFBTUcsb0JBQW9CQyxtQkFBT0EsQ0FBQyw2RkFBbUI7QUFDckQsTUFBTUMsUUFBUTtBQUNkLE1BQU1DLFdBQVc7QUFDakIsSUFBSUMsV0FBVztBQUNmOzs7O0NBSUMsR0FDRCxNQUFNTCxlQUFlQyxrQkFBa0JLLFdBQVc7SUFDOUM7Ozs7Ozs7S0FPQyxHQUNEQyxhQUFjO1FBQUUsS0FBSyxDQUFDLE1BQU1KLE9BQU9DO0lBQVc7SUFDOUM7OztLQUdDLEdBQ0QsT0FBT0MsV0FBVztRQUNkLElBQUlBLFlBQVksTUFBTTtZQUNsQkEsV0FBVyxJQUFJTDtRQUNuQjtRQUNBLE9BQU9LO0lBQ1g7QUFDSjtBQUNBUCxjQUFjLEdBQUdFLFFBQ2pCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL3dvcmRsaXN0cy9sYW5nLWl0LmpzPzg4MzUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxhbmdJdCA9IHZvaWQgMDtcbmNvbnN0IHdvcmRsaXN0X293bF9qc18xID0gcmVxdWlyZShcIi4vd29yZGxpc3Qtb3dsLmpzXCIpO1xuY29uc3Qgd29yZHMgPSBcIjB0b3JlYSBub2ljYSFpb3Nvcm9sb3RhbGVyYXRlbGFuZW5hJW9pYWRvZW5jb3Rpdm9tYWkgdCBjYSVhMEFdQmFnbCdCaW4jRS5JcyhPbGkhUmFzaV9Sb2cjMENhZGUhQ1skQ3VzI0UgPEhpbCxJQFF1YVJlUmlsPlJvYmErVSAwQWcnRGVie0RvbWVFZ3UjRXJpIUlwZU90dCZVbCYxRmFiaSxGZXxGaXMoRi1uIE9yaXNgTyhSfiQwQXZlRW4uRV8sR2FuYydJIUl0Jk9uaXNtb1I+KlJ1bWUgVXp6bzRBYmFyZGFBIEJhdClCZXIjQm9CdW1lQ2VDb2w+RXw8RmFHZWItSWFuLkliaUltWyBMYWcjTGVnKUxpZV9Mb0AvTHVzaV9NZSRPZ2UkUGF9UGVzdCFUYSw9VGVyJFQlYydUKXZlVW4kVmVvKlomMEFsZ2FgQW5pK0EhPUJ7QnIjRWJhRXJ+RV5zK0ldTWFzKE1bZGFNaXImTW9ue08hUCdQbGkmVSwgMEF9ckBBZy1mZUFsaXMrQXJjaD9BdC1DYUNlbC9Dby1EJkQhYUVsKkdlKkdvbCZHdXMgSWBOZWcmTmlkI05vTnVuYydPbmltb1QlaXBvWmkxQXQ+RXJ0dS1PZGVQYXJpIVBlXiBQb2dnJ1ApQFB1biBSaSwxQWJ+QWNoaWRlQWdvcytBbGR+QW5jJ0F0dS1BenpvQml0KUNoaXYnRHtFbmksR1sgR2k8R3UgSWFNb24/TmVzZVJlZCNSaW5nYVJvcyBTWz5Tb1RlZiVlWmlsKjBDaXV8Q29sIEVwc2lFdHQ+RmFsIEkkTy9QaXIjUClTYWdnJ1NlU29sdSBTdXJAVGFUW3UgVCVlVC18MEF2PkVpc21vT20+TyRUZXNhVGl2JlRvciRUcntUdWEsMFNpbCdTdHI/VGlzK1RvJG1vVHVuJDBBbnojRSFWW2khVmkoVm9sZ2UhM0lvPE8gWmltb1p1cik6QmUsQ30kQ2kkQ29EZXNzYURpLytHbiNJK0xdPExATGU9TC8rTHphJE1iaSROZGkhUmFvbmRhUmJhKVJ9UnskUmx1bWVSb2NdU2lsPlMoVG9zK1R0dSBVLFZhVm9zYTNDXUZmYUxnJ0x2YU5kYU5lXyxOaWckTnppPVJlUmxpPVRhM0JpK0NpRG88RmlAR2FMYW5jP01ib05vXSpPKmdvUGVkZVBvbCZSYmFuLlItU118U2VzIFMkbiRTb24uU3R1cmlaemFyKTJBbkBBdCsyTGx7TmlmPlJAU11UYW4+VF4kWnpvKjJBY2MnQWRpcG9BYEFufUF2dS1FLmwvRXZlfEV6emFJZ2w/SWwvbi5JbmQmT2NdKk9AT256aT1VbCpVJDJCYm88Q2FEaSRGZm88SW9MYm9PJFIqPFItc31TKC9TKzpEZXxEdV1MYWApTF0qTGVzc2VMaWIpTG1vTG9yP01idXNhTWUtK00lP01taSRNby9NcGEsTmFwYU5kZS9OZU5pJE5vfE5ePVBhY2VQZWwqUHsqUG9naSlQcGUpUC1Qc3UvUmFwYWNlUn1zc2FSQFJpc2BSb3ZhPVIhfFIgbGk9U2FjYydTfStTZXJgU29TKDxTLmwqU3VhLFRhcytUZT1ULW1lVSBWaWwqM0RpYmksRC0rRmEqTGViIUxsdWwmTmFObzxOLnNpbW9SYW1+UmMmUiBSdW1lUnZlbCpTbz9TcG9UbzJFL0lhKUljfUllZGUhSW1lLUk9SXJ1cmdvSStyLTBBb0NsaXNtb0ZyJkckTGluZClPfCpSfVIpc2lUcj5UK2RpJFVmZm9WZXQrVmksMkFzcz5Jbn5PKTJDXURhckBEJWVFIW4uRyRtZUxsJkxtI0xvIUxwbyhMXnYjTHphTWFNZStNYG5ATW9ATXB1LnJNdTxOY2koTmR1ciFOZmVyYE5nZWwmTml1Z2VOPHMoTm9zY2UhTnN1bW9OXm51b052ZWckUGVyIFAnPFBwP1ByfnBvUmF6emFSZGErUiUjUm4lZVJvbC9ScG9SIUBScz9SLnNlU20+UytuLlR0dS1WIzJBLiFBdmF0K0UjRWRlIUVtbyhFc2NpK0UrSWNlIEk9LElzaUl0Pk9jZU89fU9zKytVYz8sVXN9MkNpIUN1KkdpJExsI1BvL1IjIVIoIVJfU2NpJFMgZGU6RG9JJExgK01lcmkkTmllL04kKE56JlQjVmFuXlZ2ZSkzQnV8Q1tuJ0NpKENsaSRDb2wqQyEgRCUjRmlue0Zvcm1lRyRMZWcmTGZpJExpcidMK01bemFOb3QjTnQpUG9ze1JhcGErUml2JlJvZ2FTY3JpfFNlciBTaWRlcidTdW1lIVRlcnNpX1ZvIDNBbWV0KUNlbWIhRWQpRmUoRmZ1KEdlcmkhR2krLEx1didOYW0+Tj1uemlQaW4gUCpgUG8qUmFkJlJlUm98UnVwb1NhZydTYyEgU2YmU2dlKlNwb3MgUytuemFTdWAkVG9WYSRWZWwgVmlkZSFWb3IjNUIqPENbLkdhPSxHYExjZU0jTVt+TWluJk5AKk5vUm1pIVRlVCAhVnUgWnppPTJBZ29VaUAyQmInQml0JkNhLE5hT21vUGwlZVJhdHUpOjBBJDBDZXMoQ29MaXNzaU8kbT8wRS1JXS9JLEkgcj9VYyYyRW1vbj9MaU9pc21vUmVnJzRBYm9yI0FyZ2khRWdhbi5FbmMjRXxFdiZGPkl9TW9TYVUoMEFuI0IsYEVzKEkpT15fT3onPFBpcj5VKjBEZW0+RHUpRXJnP0Zhc2lPLn1UciZaaWAxQV4uSSpnb0koZCdPfSxQdSEwVSMhMEFyJ0JhQm8oRWRlRW1pK0lnZSFNZXQ+T2VPc2lfUmFuLjBBZ28kQW1lQW5pbWVBdWRpIUNhRW1wJ0VyY3tJYntJZ1suSXMuIUkgT2ZhZ29PcnQjTyhQYW4oUCFzKFNbemFTb1RlKFRpbSZUb24/VCkoVWx0JjBJbD5OPlJ1c11UbzBDbGlkZW9Sb3BhMEEoSWRbemFJdCNPbHUgVml2YTpCYnJ+Q2NbZGFDaGkpTF1NaWdsP05hLE5mYS1OZ29OK3NgUmVSZmFsL1JpJChSYF1TYz9TIChTdWwqVCUmVG9WbyooM0JiIUNvL0RlRyNMcGFMdClNbWk9TmRlIU5vbWUkUm1bIFIpUl4sU3N1LVNeX1QrVUAzQWJhRHVjP0ZhR3VyI0xvTmFuemFOZXN0LU5pIU8hU30sUz5VbWUyQV08QW1bXUVib0VtYE9yaUBVWy5VbykyQj5DYWNjP0NvKERlciNHbCdMYStMYyohTGdvIU5kWy5OZXQ+Tj9OKz1SYntSY2hldCtSZXMrUm1+Uj0nUm9SLnp6YVJ6JlNmI1MoMkF9cyhBPUFzc2kkQS5sKkVjY2V0K0U9K0VzXUlnb09sbGkkT25kZVVnYSxVdCsyQ2kvK0NzP0dnWy5MbWk8TF9NYW4uTWV8TW8oTmVOeic8T11SYm9SZ288Um8hU29UaSw6QmI/JEZmZUxhLm9MbGk9TG9wcG9NYmUpTWBSYW56P1Jib1JvZmEkUnpvPFNAfFNvbCdTdHI+VCBVZCdaZWJvWnplbC8zQ29MYV49TChNZWwqTW0jTmVOeyFOPSdOb15wb1JnbzJFcGFyQElhY2MnSXNhMEFsKkxkYU5lcClPYyZPaWVsKk9yJE92ZVIjUm88VCsrVWRpeidVciNVcyAyT2J1KlVePDFPbW8wQmJhTGZNe01tbzxOZidOPVZlciQyQWNpLEFAQWY+QW1tb0FuZGVBdHQmQV8oQXo/RX1FZ2dlSWZvPElnJ0luemFPdCtVcHBvMkFkYWckQSdBbiBBcmQmRm9JZCY6OjBFcm4jME89MEVudD5JbGwnTypSYVI+Um9nZSQySWU8TmEpTm9yIzRBIUxlKExvZz5MdWRlITBCYWwqQmV2dSBCb2NdQnUgTWE8TWVyKE1vbCNQYWNdUGUgUGllZ29Qb3IgUCluKzBBbCZBcmMmQXReX0NhbiBDW2QnQ2hpJENpc2lfQ2x1KENvbnQpQyljJ0N1Ym9EYWdpPEQ/RG8sRWR7RmF0XkZpbCZGbGl8R2FnZydHZWckRyxzZUdvckBHKXMoTmVzXU9AIU9sdHImT25kI1NhJFNlfFNpZW1lU29ubj9TdWxpPVRhcyNUZSlUbz1dVHV7VW1pZGkhVmFsaUBWZWNlVnsxRXJibyxOb3Q+Ty5zaVB+MUlkZUxhbmRhT24+UmlnI1JvciYwT2wjTyBwb1Rlcj5UaXR1IFRyJWUwQWw/RXImOjo6QmIpQmlyaW4gQ31DZXIjQ3JpYEN1PURAdmVHb01wb05jZXQrTi5yPVJAKFJnYVJpbmdlU3QtVFt6YVRpJFR0dWdhVmFnPVZvKTNHYSxHZ2UpTWJvTi56emFOemFPPFAhU2lfU3MjUyBULi0sVmFWaWcjM0JlKURvRXZ7TC9NYXR1LU1pdCZNcGlATmUmTmd1YVF1aUBSYVJ+U31UZVRpZydWIWE1Q2FuZGFEZUd+TWImTmQtTmdlX1F1YWNlUlt6b1RvVC5yPzVDZUNpZCNNYX1NaSQoTmdvUG9QcG8qU2luZ2FTKFQgOkNhYilDY2hpPUNlKUNpbiNEYWBHPkdsP0c8LkcpSW9sfkxhZmVkZUxnLUBMaW4uKExzYSRMIEx1bW8hTmFOYz9OQHIvTmdpJk5pZmVzIE49KU5vdi1Oc2FyZGFOXmRlTnVicidQcGFSIz1SY2khUmV0K1Jtb1JzdXAnU2NoZS1Tc2E/U14kVGUtcyhUcj4vVCA8VHUpWnVyfTNBbmQpQ31uPkNlPS5EZXNpbW9EaXQmR2FMYXNzYUxpc0xvZD9OaW5nZU5vTigvUmN1cidSW2RhUipTY2hpJFNlU3NlIVMgKlRhbCpUb0BULiEzQWdvbCZDYUNlbCdDaGUsQylib0RvbCpFLEdsJyFMYSRMaS5Nb3NhTmUtLE5pTm8hUmkkUl5sKlNjZS9Tc2l2YVMgU3VyJlRlenphVGlnJlQtVC5uLjRFbW9uPjBEZWwqRGlmfkR1KkdhJEcnTGVMb3MoTmFzLilOXU5kaT1OZStyJ05pLE5vICROKDxOdCNOdmkoUmFSZGUhUnMlI1N0KVRpdiNUb3NlZ2FUIFZbemFWaW1bIFp6bzVDfUNvc2FGZmFHaGV8Rz0nTGF8TGk8bCpMXnAqTW0/TiBPdmUhUmEsU2FTXSpTflRlXyxUbzpCYWJib0YrTm9tZXQpUmNpKFIlZVJyI1NjZSFTdHImVHUtLFV0flZpZ2wnM0J1KnNhQylzaUdhXl9Hb3onTW1lJE9maStSZXxSX1NzdSRUdHUkVXQtLFZlVil0PjNDY2g/TmZhVGlANUJpLENpX0RvTWVNaT1SZD5SYCxSdmVnZXNlU3QtJFQmVGl6P1R0dXIkVmVsLzVDLG9ML01lKU9fVHJpIVZvL1o/LDpTaTBCZWRpIUJsaWdvRWxpc11MJ08qU28sIDBDYXMnPENoJ0NpZFsuQ29yISFDdWx0JlJhVWwjMEllciRPciYxRmVyK0ZyaSFGdXNjIzBHZXxHaU51JDRBbmRlc2VGYXxJI0l2YU9nLW1gVCEwQWdnJ0JlbD5CLUVnYUlzcyc8MERvKEUhSWNlTmlfKU8hXyxUYTFFciNJbic8UG9zIDFBXSpBZm9EaTxFY2NoaSRFZiVlRmEkR2FuPklnaTxJenpvbi5NYU1lZ2cnTmFeX08qZydSW0BSaWJpLFRbcz9UflphK1pvMEEhQ3VyJk1vc2lQZWRhLFBpLlNhU2lkJlRhXSpUZTBJLlJlVGFnbyRUaW1vVG9iITFBLEVzdEkkSXBhKU9je1VucXVlVmkmM0lvOkNjaGV8Q2VDaWY+RGVsL0QpPEVzZUdhR2k9TGF6emk9TGVzJkxsaUBMb0x1ZGVOQClOPGwqTypPPXp6b1ByflJhYm8vUmNlbC9SZSFSZ28qUmlSbCNSby9SXiFSdlt6YVJ6PyxTc2lfU3QlfVRhY31UbypnP1R0dW1lVm88M0NjI0RhbCZEbz0sR2cnTG8oTiZOZCVlTmkoL05udSBOb21iLU5zJk4gL1BlUGkrUmJlPFJdcihSQG4jUmZvciZSZ2FtZT1SJ0BSbWVzKFIkUnAscyhSc3VhKFJ0dWcnUnZhKFMjIVNpcytTb1NeZmUpVGEqVF48VHUvbi5aem8zQWNlIUFuK0F0XiRDY2kkQ296emFFZ2FFdC1GZmUpRz9gR29sJ0cpTGFMaWZlKUwqL0xvK01wYW4uTmUrTj1ObypPZ2c/T21ib1JhbWlkZVJldD5SaS5Sb2xpc2lUbzxaej4yQWNlYm9BbiZBc2BBKyRFPXInMkNoZXp6YURlKShEaXNtb0VzP0dnaSZMWytMaWdvJExsJWVMbW9uaS5McGV0K0woTHQpPUx2ZSFNJWVNb0ApTi5QbyooUmZpQFJvKFJwby1SIVIrK1NhU2leX1NzZXMoU3R1bCNUYXNzJ1RlITJBbnpvQXNzaUF0fkVjbHUoRWR+RWZpcyhFZ2kjRWxpZV9FbWUhRSR0JkVwYXIjRXNbemFFLnMgRXZhbChJYEluY2lwZUl2I09iLGBPY3UtT2R1ciFPZnVtb09nZXxPbHVuZ2FPbWVzc2FPJG1lT3BvcytPKWdhTy4oT3ZhVWRbLlVnPVVyezBJY2hlMUJibD5EfkdpbCNHJExjZUx7THNhbi5OdCZQYXp6b1BpbC9Sbzo5OUFkKUFsXXNhQXNpRSEvTys6Q11sIERAcHAnRH4sRHVuI0ZmfkdhenpvRyc8RyRNYXIpTWluZ29Nb05kYWcnTiBsJlAjUGk9UHAhKFNhdHUtU2NoaSNTWy5Tc2VnPVN0IWwqVGFWdmVkdSAzQSxDZXBpIUNpbiBDbHUrQ29uZHtDdXBlKURke0RpbWUhR2FsI0dpc3QpR28vRyFzKExheic8TSZNbyBOPVBsflByaW1lIVB1dCZTYVNpZFsuU3BvbihTK3UpVGVUaT1Ub3J+VF5mflZvYyMzQXNzdW4gQmFkaSFCZWwsQiF6em9DYXJ+Q11DZXZlIUMlbCNDb3JAQyFkdSBEPipEdXIhRmFzJkYscyhGb3JgRnVnJ0cmR2V0dCNHaGVsKkxhc3MjTGV2I01hPCFNYmFsem9NZWQnTW9yY2gnTmFzY2krTn0pTmZvcnpvTiRfTm9tI05zYXZ7TiBjXU51bmM/TnZbaSFQYXIjUGV0dSBQaWUkUG9ydCZQIXNhUHVsaSFTYStTY2gnU2VydmFTaWJpLFNvU3BlfFMgKVN1bHQjU19sIFRhckBUZWckVG0+VClfVW4nPFZhVmVyKFZpbmNpK1ZvbCBab2A1QmFCb3Q+QnVzIENjP0NvRGFnZydEZSFEeyFHe0xsJ01hbnQ+TXBlIU56J1NvbCZTcG9UYW4uVG9uQFR1L1Zlc2MnNUJpenpvQnJ+R2FMbGkkTWk8TW8pKE8qUGVTcyZTdD46QiNCYmkmQm90I0dvYExhcyhMZGF0dS1MZ2VtYExpdiZMbW88TG88THQmTHUgTF9QZSFQaUBQb3J7UmFjZSRSfXNtb1IgUygoVGVsbGkuVGktVG9sKlR1ciRWYT1WJ1ppIzBBZGlnbCdBbHpvQW5jI0FyLUF0LiFBdiZFbmQmSXJjaSZMb2NjI09jY2kjUmluJlJ1ZmZvPFVmZiYwQWIpKEFkW3phQS9BbWJpJkFuZGEqQXBvL0FyKEEubiZBdiNFbCBFbj5FdHQpSGVkYUhpZT1JYXJwYUlbemFJbmRlIUlwcG9JKXBwb0lfKkxlciZPZGVsL09scHtPbXBhciBPbmZvciBPcHJpIU9yK09zKDxPenplc2VSaWJhUm9sbCZSdV5uJ1VkZXI/VWwgIVVvL1UpVXMmMEViaXQmT2dhbiYwQ310dS1Db25ARGEkR2cnL0c9bCNHIWcjR3V7TGNpI0xldF5fTC9MdmFnZydNYWZvKU1iciZNZU1pbiNNcCFOKE5eIVBvbCBRdVt6YVJhK1JiI1JlJFInUnBbLlItZ2wnUnZpIVNePVRvL1ReYD0wQWNlKkFsZCZBbSNBcnpvKEF0JSNFLUlkYUlsI0luZ2VPYyNPZGVyJk9nb09sXiFPcnojUmF8UnV0dCNVZ2d7VW0mVSgwQWJlbCpBcmIjT25maSZPcmInUmFzcyNVYXJAMUJpKkNdbWVFci1HL0ckIUxbeidML2JhTWJvKk1wYXQ+TXVsI05mb24/TmdvKk5pc3QpTm9OLnNpTnUoaWRlUGFyJ1NgUyAsVHUjMkl0K09nYXR1LU92ZSQwQXJye0Vtb3IjRW5eIEUtbEBJbHpvT250Jk90dCNVc3MjMEVsbGkhRXJ2I09AMEJiYWx6b0JyJ0NdcihDPyxEYSxGZml8RyRMZCNMWzxMaUBML3p6b0xvTHViaSxMdlsuTWF0Pk1gTmRhTmV8Tm5pZmUpUGkhUHBlKFAtUmdlIVJwYXMoUnJpKFIoUi5nZydSX2wjU3BpKVMrVF4sMEFkYUFsL0FyZ2UhQSAvQXZbIEF6em8vRWNpZUVkaSFFZzwhRS90dS1FLW56YUVzKCFFdHQtLEV6eiNJYUlnbyooSWxsI0kkKEktLExbZGlAT3JeX08oUmFuZ2FSZWMmUm9uI1J1enpvVW5eJDBVaWwqMEFkJSZPIGwjMUFiaSxBY11BZmZhQWduJkFtcCNBbnQnQXJudSBBc2UtQXR1IEUqRXBwYUVyem9JLHxJYElycGVJdmEsSXp6byhPbiNPcj5SYXBwb1JlZyNSaWR1KlJvenomUnV8VWNjJlVmb1VwW0AwQlt0KUNdKERvIUdnZXJ7R29MKyRPbiZQZXJib1Bwb3IgUmdlbCNSKWcjU3N1cilUdS0wQWcmRWRlc2VFZ2wnRWwmRW51IEV6P0lsdXBwb0lzK0l6emUtT2wrVW90JjpCYWNdQnVsI0NjaSZDaXR1ciRMZUxpc2AkTXBvPE5uaSRSYVJkaV9SZyNSaWZmYVJwJlIrcnVnYVMgVHQ+VmVyPVZvLytaemEzQ2FDbj5MZWZvJE1lLXInTXBvTXUgTkA8TmUpTnMnPE4rXSpPIWBSbWVSLXp6b1J6ZXxTaVNzZXIjU3QjVClUID8zRiZHZWwvTWIpTiBQPlBvZy1mb1JhZ2cnUm9UYW4nVG8qVHViYW4uWidaem88NUNjJkwsciZMIE1iby9Nb05mb05zaWwvUGF6J1BvKmc/UHBhUmJhUm4mUik8UiAtU30kU3NpIVMrdHUtVGEkMkFib2NdQWNoZWFBZmkvQWdlZD9BbGMnQW1vbiBBbnN7QXBhJEFyIUFzKl1BdHQjQXZlRWNjP0Vtb2wnRXNwbypJYnUgSWNoZV1JZm9nbCdJbCpJbmNlYUlvSXMuenphSXR1ciNJdmVsL09tYmFPJE9wcG9PfC9PdiZVY2MjMkJhdHUtRmYjTGlwYSRNdWwgTmlzP1JiJlJjaGkkVGFUZS86MEljIzBDZWwqQ2koITBJIUleXzFGYUYlJzBVYSw0SXNzZVRpbSMwQSRJLE9yaXNtbzBDaTx8R2UhR2hlIXNlSV1yJElmJSNJKCRJK3InVGUwVm8wVXBhMUFnYSRHW3phTG8wQW56YUEgQ3tJZyQqVS0nMEVuc2ksSWxpenpvT3A/OkNhbi5DY2luI0dhYm9uQEdsaSNMYW5nYUxnb0w+TCx0K0xvKShMdXQmTF8vTXBhK05nJk57KE5vTitnZydOdmUtUG8hUmEkUmMjUj9uLlN9M0RldCtEb3ZhRHUgR2UrLEldKkxjKUxpPUxsdSBMb2NlTiNOZGVtbT9OIFJhY2VSYmEsUmdvZz1SaWZ+Um9ScnV9UnR+LFNjflNzaWwqUyssVGUtJFRyaT1UdXMgM0FuZGFuLkItbi5DW2RhQ2hpbmdvQ2k9bnphRGltJkdpbD9HPCBHbyFMZUwvJE1pbmlOY3shTy9QZS1SZ28vUm8qZ29SdSxuIFNdKFMnPFNwb1NzdSBTdS1UYVRlbCpUXmBWYW5kYVZpQFppJjVDZUdhTGFeLExlIUxwZVJhZ2k8NUx9JDo6OjpNcG9nPU49UHAjVC4tVm9yLTNGaSlMYW4uTG9OemUpUmJpJDNCZXxOXVJdPFQgNUwvVD41Q2NoZSlGbypMdVBwYVwiO1xuY29uc3QgY2hlY2tzdW0gPSBcIjB4NWMxMzYyZDg4ZmQ0Y2Y2MTRhOTZmMzIzNDk0MWQyOWY3ZDM3YzA4YzUyOTJmZGUwM2JmNjJjMmRiNmZmNzYyMFwiO1xubGV0IHdvcmRsaXN0ID0gbnVsbDtcbi8qKlxuICogIFRoZSBbW2xpbmstYmlwMzktaXRdXSBmb3IgW21uZW1vbmljIHBocmFzZXNdKGxpbmstYmlwLTM5KS5cbiAqXG4gKiAgQF9kb2Nsb2M6IGFwaS93b3JkbGlzdHNcbiAqL1xuY2xhc3MgTGFuZ0l0IGV4dGVuZHMgd29yZGxpc3Rfb3dsX2pzXzEuV29yZGxpc3RPd2wge1xuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBJdGFsaWFuIGxhbmd1YWdlIFdvcmRsaXN0LlxuICAgICAqXG4gICAgICogIFRoaXMgc2hvdWxkIGJlIHVubmVjZXNzYXJ5IG1vc3Qgb2YgdGhlIHRpbWUgYXMgdGhlIGV4cG9ydGVkXG4gICAgICogIFtbbGFuZ0l0XV0gc2hvdWxkIHN1ZmZpY2UuXG4gICAgICpcbiAgICAgKiAgQF9pZ25vcmU6XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7IHN1cGVyKFwiaXRcIiwgd29yZHMsIGNoZWNrc3VtKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGEgc2luZ2xldG9uIGluc3RhbmNlIG9mIGEgYGBMYW5nSXRgYCwgY3JlYXRpbmcgaXRcbiAgICAgKiAgaWYgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSBiZWluZyBjYWxsZWQuXG4gICAgICovXG4gICAgc3RhdGljIHdvcmRsaXN0KCkge1xuICAgICAgICBpZiAod29yZGxpc3QgPT0gbnVsbCkge1xuICAgICAgICAgICAgd29yZGxpc3QgPSBuZXcgTGFuZ0l0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdvcmRsaXN0O1xuICAgIH1cbn1cbmV4cG9ydHMuTGFuZ0l0ID0gTGFuZ0l0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGFuZy1pdC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJMYW5nSXQiLCJ3b3JkbGlzdF9vd2xfanNfMSIsInJlcXVpcmUiLCJ3b3JkcyIsImNoZWNrc3VtIiwid29yZGxpc3QiLCJXb3JkbGlzdE93bCIsImNvbnN0cnVjdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-it.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-ja.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wordlists/lang-ja.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LangJa = void 0;\nconst index_js_1 = __webpack_require__(/*! ../hash/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/hash/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst wordlist_js_1 = __webpack_require__(/*! ./wordlist.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist.js\");\nconst data = [\n    // 4-kana words\n    \"AQRASRAGBAGUAIRAHBAghAURAdBAdcAnoAMEAFBAFCBKFBQRBSFBCXBCDBCHBGFBEQBpBBpQBIkBHNBeOBgFBVCBhBBhNBmOBmRBiHBiFBUFBZDBvFBsXBkFBlcBjYBwDBMBBTBBTRBWBBWXXaQXaRXQWXSRXCFXYBXpHXOQXHRXhRXuRXmXXbRXlXXwDXTRXrCXWQXWGaBWaKcaYgasFadQalmaMBacAKaRKKBKKXKKjKQRKDRKCYKCRKIDKeVKHcKlXKjHKrYNAHNBWNaRNKcNIBNIONmXNsXNdXNnBNMBNRBNrXNWDNWMNFOQABQAHQBrQXBQXFQaRQKXQKDQKOQKFQNBQNDQQgQCXQCDQGBQGDQGdQYXQpBQpQQpHQLXQHuQgBQhBQhCQuFQmXQiDQUFQZDQsFQdRQkHQbRQlOQlmQPDQjDQwXQMBQMDQcFQTBQTHQrDDXQDNFDGBDGQDGRDpFDhFDmXDZXDbRDMYDRdDTRDrXSAhSBCSBrSGQSEQSHBSVRShYShkSyQSuFSiBSdcSoESocSlmSMBSFBSFKSFNSFdSFcCByCaRCKcCSBCSRCCrCGbCEHCYXCpBCpQCIBCIHCeNCgBCgFCVECVcCmkCmwCZXCZFCdRClOClmClFCjDCjdCnXCwBCwXCcRCFQCFjGXhGNhGDEGDMGCDGCHGIFGgBGVXGVEGVRGmXGsXGdYGoSGbRGnXGwXGwDGWRGFNGFLGFOGFdGFkEABEBDEBFEXOEaBEKSENBENDEYXEIgEIkEgBEgQEgHEhFEudEuFEiBEiHEiFEZDEvBEsXEsFEdXEdREkFEbBEbRElFEPCEfkEFNYAEYAhYBNYQdYDXYSRYCEYYoYgQYgRYuRYmCYZTYdBYbEYlXYjQYRbYWRpKXpQopQnpSFpCXpIBpISphNpdBpdRpbRpcZpFBpFNpFDpFopFrLADLBuLXQLXcLaFLCXLEhLpBLpFLHXLeVLhILdHLdRLoDLbRLrXIABIBQIBCIBsIBoIBMIBRIXaIaRIKYIKRINBINuICDIGBIIDIIkIgRIxFIyQIiHIdRIbYIbRIlHIwRIMYIcRIRVITRIFBIFNIFQOABOAFOBQOaFONBONMOQFOSFOCDOGBOEQOpBOLXOIBOIFOgQOgFOyQOycOmXOsXOdIOkHOMEOMkOWWHBNHXNHXWHNXHDuHDRHSuHSRHHoHhkHmRHdRHkQHlcHlRHwBHWcgAEgAggAkgBNgBQgBEgXOgYcgLXgHjgyQgiBgsFgdagMYgWSgFQgFEVBTVXEVKBVKNVKDVKYVKRVNBVNYVDBVDxVSBVSRVCjVGNVLXVIFVhBVhcVsXVdRVbRVlRhBYhKYhDYhGShxWhmNhdahdkhbRhjohMXhTRxAXxXSxKBxNBxEQxeNxeQxhXxsFxdbxlHxjcxFBxFNxFQxFOxFoyNYyYoybcyMYuBQuBRuBruDMuCouHBudQukkuoBulVuMXuFEmCYmCRmpRmeDmiMmjdmTFmFQiADiBOiaRiKRiNBiNRiSFiGkiGFiERipRiLFiIFihYibHijBijEiMXiWBiFBiFCUBQUXFUaRUNDUNcUNRUNFUDBUSHUCDUGBUGFUEqULNULoUIRUeEUeYUgBUhFUuRUiFUsXUdFUkHUbBUjSUjYUwXUMDUcHURdUTBUrBUrXUrQZAFZXZZaRZKFZNBZQFZCXZGBZYdZpBZLDZIFZHXZHNZeQZVRZVFZmXZiBZvFZdFZkFZbHZbFZwXZcCZcRZRBvBQvBGvBLvBWvCovMYsAFsBDsaRsKFsNFsDrsSHsSFsCXsCRsEBsEHsEfspBsLBsLDsIgsIRseGsbRsFBsFQsFSdNBdSRdCVdGHdYDdHcdVbdySduDdsXdlRdwXdWYdWcdWRkBMkXOkaRkNIkNFkSFkCFkYBkpRkeNkgBkhVkmXksFklVkMBkWDkFNoBNoaQoaFoNBoNXoNaoNEoSRoEroYXoYCoYbopRopFomXojkowXorFbBEbEIbdBbjYlaRlDElMXlFDjKjjSRjGBjYBjYkjpRjLXjIBjOFjeVjbRjwBnXQnSHnpFnLXnINnMBnTRwXBwXNwXYwNFwQFwSBwGFwLXwLDweNwgBwuHwjDwnXMBXMpFMIBMeNMTHcaQcNBcDHcSFcCXcpBcLXcLDcgFcuFcnXcwXccDcTQcrFTQErXNrCHrpFrgFrbFrTHrFcWNYWNbWEHWMXWTR\",\n    // 5-kana words\n    \"ABGHABIJAEAVAYJQALZJAIaRAHNXAHdcAHbRAZJMAZJRAZTRAdVJAklmAbcNAjdRAMnRAMWYAWpRAWgRAFgBAFhBAFdcBNJBBNJDBQKBBQhcBQlmBDEJBYJkBYJTBpNBBpJFBIJBBIJDBIcABOKXBOEJBOVJBOiJBOZJBepBBeLXBeIFBegBBgGJBVJXBuocBiJRBUJQBlXVBlITBwNFBMYVBcqXBTlmBWNFBWiJBWnRBFGHBFwXXKGJXNJBXNZJXDTTXSHSXSVRXSlHXCJDXGQJXEhXXYQJXYbRXOfXXeNcXVJFXhQJXhEJXdTRXjdXXMhBXcQTXRGBXTEBXTnQXFCXXFOFXFgFaBaFaBNJaBCJaBpBaBwXaNJKaNJDaQIBaDpRaEPDaHMFamDJalEJaMZJaFaFaFNBaFQJaFLDaFVHKBCYKBEBKBHDKXaFKXGdKXEJKXpHKXIBKXZDKXwXKKwLKNacKNYJKNJoKNWcKDGdKDTRKChXKGaRKGhBKGbRKEBTKEaRKEPTKLMDKLWRKOHDKVJcKdBcKlIBKlOPKFSBKFEPKFpFNBNJNJBQNBGHNBEPNBHXNBgFNBVXNBZDNBsXNBwXNNaRNNJDNNJENNJkNDCJNDVDNGJRNJiDNZJNNsCJNJFNNFSBNFCXNFEPNFLXNFIFQJBFQCaRQJEQQLJDQLJFQIaRQOqXQHaFQHHQQVJXQVJDQhNJQmEIQZJFQsJXQJrFQWbRDJABDBYJDXNFDXCXDXLXDXZDDXsJDQqXDSJFDJCXDEPkDEqXDYmQDpSJDOCkDOGQDHEIDVJDDuDuDWEBDJFgSBNDSBSFSBGHSBIBSBTQSKVYSJQNSJQiSJCXSEqXSJYVSIiJSOMYSHAHSHaQSeCFSepQSegBSHdHSHrFShSJSJuHSJUFSkNRSrSrSWEBSFaHSJFQSFCXSFGDSFYXSFODSFgBSFVXSFhBSFxFSFkFSFbBSFMFCADdCJXBCXaFCXKFCXNFCXCXCXGBCXEJCXYBCXLDCXIBCXOPCXHXCXgBCXhBCXiBCXlDCXcHCJNBCJNFCDCJCDGBCDVXCDhBCDiDCDJdCCmNCpJFCIaRCOqXCHCHCHZJCViJCuCuCmddCJiFCdNBCdHhClEJCnUJCreSCWlgCWTRCFBFCFNBCFYBCFVFCFhFCFdSCFTBCFWDGBNBGBQFGJBCGBEqGBpBGBgQGNBEGNJYGNkOGNJRGDUFGJpQGHaBGJeNGJeEGVBlGVKjGiJDGvJHGsVJGkEBGMIJGWjNGFBFGFCXGFGBGFYXGFpBGFMFEASJEAWpEJNFECJVEIXSEIQJEOqXEOcFEeNcEHEJEHlFEJgFEhlmEmDJEmZJEiMBEUqXEoSREPBFEPXFEPKFEPSFEPEFEPpFEPLXEPIBEJPdEPcFEPTBEJnXEqlHEMpREFCXEFODEFcFYASJYJAFYBaBYBVXYXpFYDhBYCJBYJGFYYbRYeNcYJeVYiIJYZJcYvJgYvJRYJsXYsJFYMYMYreVpBNHpBEJpBwXpQxFpYEJpeNDpJeDpeSFpeCHpHUJpHbBpHcHpmUJpiiJpUJrpsJuplITpFaBpFQqpFGBpFEfpFYBpFpBpFLJpFIDpFgBpFVXpFyQpFuFpFlFpFjDpFnXpFwXpJFMpFTBLXCJLXEFLXhFLXUJLXbFLalmLNJBLSJQLCLCLGJBLLDJLHaFLeNFLeSHLeCXLepFLhaRLZsJLsJDLsJrLocaLlLlLMdbLFNBLFSBLFEHLFkFIBBFIBXFIBaQIBKXIBSFIBpHIBLXIBgBIBhBIBuHIBmXIBiFIBZXIBvFIBbFIBjQIBwXIBWFIKTRIQUJIDGFICjQIYSRIINXIJeCIVaRImEkIZJFIvJRIsJXIdCJIJoRIbBQIjYBIcqXITFVIreVIFKFIFSFIFCJIFGFIFLDIFIBIJFOIFgBIFVXIJFhIFxFIFmXIFdHIFbBIJFrIJFWOBGBOQfXOOKjOUqXOfXBOqXEOcqXORVJOFIBOFlDHBIOHXiFHNTRHCJXHIaRHHJDHHEJHVbRHZJYHbIBHRsJHRkDHWlmgBKFgBSBgBCDgBGHgBpBgBIBgBVJgBuBgBvFgKDTgQVXgDUJgGSJgOqXgmUMgZIJgTUJgWIEgFBFgFNBgFDJgFSFgFGBgFYXgJFOgFgQgFVXgFhBgFbHgJFWVJABVQKcVDgFVOfXVeDFVhaRVmGdViJYVMaRVFNHhBNDhBCXhBEqhBpFhBLXhNJBhSJRheVXhhKEhxlmhZIJhdBQhkIJhbMNhMUJhMZJxNJgxQUJxDEkxDdFxSJRxplmxeSBxeCXxeGFxeYXxepQxegBxWVcxFEQxFLXxFIBxFgBxFxDxFZtxFdcxFbBxFwXyDJXyDlcuASJuDJpuDIBuCpJuGSJuIJFueEFuZIJusJXudWEuoIBuWGJuFBcuFKEuFNFuFQFuFDJuFGJuFVJuFUtuFdHuFTBmBYJmNJYmQhkmLJDmLJomIdXmiJYmvJRmsJRmklmmMBymMuCmclmmcnQiJABiJBNiJBDiBSFiBCJiBEFiBYBiBpFiBLXiBTHiJNciDEfiCZJiECJiJEqiOkHiHKFieNDiHJQieQcieDHieSFieCXieGFieEFieIHiegFihUJixNoioNXiFaBiFKFiFNDiFEPiFYXitFOitFHiFgBiFVEiFmXiFitiFbBiFMFiFrFUCXQUIoQUIJcUHQJUeCEUHwXUUJDUUqXUdWcUcqXUrnQUFNDUFSHUFCFUFEfUFLXUtFOZBXOZXSBZXpFZXVXZEQJZEJkZpDJZOqXZeNHZeCDZUqXZFBQZFEHZFLXvBAFvBKFvBCXvBEPvBpHvBIDvBgFvBuHvQNJvFNFvFGBvFIBvJFcsXCDsXLXsXsXsXlFsXcHsQqXsJQFsEqXseIFsFEHsFjDdBxOdNpRdNJRdEJbdpJRdhZJdnSJdrjNdFNJdFQHdFhNkNJDkYaRkHNRkHSRkVbRkuMRkjSJkcqDoSJFoEiJoYZJoOfXohEBoMGQocqXbBAFbBXFbBaFbBNDbBGBbBLXbBTBbBWDbGJYbIJHbFQqbFpQlDgQlOrFlVJRjGEBjZJRnXvJnXbBnEfHnOPDngJRnxfXnUJWwXEJwNpJwDpBwEfXwrEBMDCJMDGHMDIJMLJDcQGDcQpHcqXccqNFcqCXcFCJRBSBRBGBRBEJRBpQTBNFTBQJTBpBTBVXTFABTFSBTFCFTFGBTFMDrXCJrXLDrDNJrEfHrFQJrFitWNjdWNTR\",\n    // 6-kana words\n    \"AKLJMANOPFASNJIAEJWXAYJNRAIIbRAIcdaAeEfDAgidRAdjNYAMYEJAMIbRAFNJBAFpJFBBIJYBDZJFBSiJhBGdEBBEJfXBEJqXBEJWRBpaUJBLXrXBIYJMBOcfXBeEfFBestXBjNJRBcDJOBFEqXXNvJRXDMBhXCJNYXOAWpXONJWXHDEBXeIaRXhYJDXZJSJXMDJOXcASJXFVJXaBQqXaBZJFasXdQaFSJQaFEfXaFpJHaFOqXKBNSRKXvJBKQJhXKEJQJKEJGFKINJBKIJjNKgJNSKVElmKVhEBKiJGFKlBgJKjnUJKwsJYKMFIJKFNJDKFIJFKFOfXNJBSFNJBCXNBpJFNJBvQNJBMBNJLJXNJOqXNJeCXNJeGFNdsJCNbTKFNwXUJQNFEPQDiJcQDMSJQSFpBQGMQJQJeOcQyCJEQUJEBQJFBrQFEJqDXDJFDJXpBDJXIMDGiJhDIJGRDJeYcDHrDJDVXgFDkAWpDkIgRDjDEqDMvJRDJFNFDJFIBSKclmSJQOFSJQVHSJQjDSJGJBSJGJFSECJoSHEJqSJHTBSJVJDSViJYSZJNBSJsJDSFSJFSFEfXSJFLXCBUJVCJXSBCJXpBCXVJXCJXsXCJXdFCJNJHCLIJgCHiJFCVNJMChCJhCUHEJCsJTRCJdYcCoQJCCFEfXCFIJgCFUJxCFstFGJBaQGJBIDGQJqXGYJNRGJHKFGeQqDGHEJFGJeLXGHIiJGHdBlGUJEBGkIJTGFQPDGJFEqEAGegEJIJBEJVJXEhQJTEiJNcEJZJFEJoEqEjDEqEPDsXEPGJBEPOqXEPeQFEfDiDEJfEFEfepQEfMiJEqXNBEqDIDEqeSFEqVJXEMvJRYXNJDYXEJHYKVJcYYJEBYJeEcYJUqXYFpJFYFstXpAZJMpBSJFpNBNFpeQPDpHLJDpHIJFpHgJFpeitFpHZJFpJFADpFSJFpJFCJpFOqXpFitBpJFZJLXIJFLIJgRLVNJWLVHJMLwNpJLFGJBLFLJDLFOqXLJFUJIBDJXIBGJBIJBYQIJBIBIBOqXIBcqDIEGJFILNJTIIJEBIOiJhIJeNBIJeIBIhiJIIWoTRIJFAHIJFpBIJFuHIFUtFIJFTHOSBYJOEcqXOHEJqOvBpFOkVJrObBVJOncqDOcNJkHhNJRHuHJuHdMhBgBUqXgBsJXgONJBgHNJDgHHJQgJeitgHsJXgJyNagyDJBgZJDrgsVJQgkEJNgkjSJgJFAHgFCJDgFZtMVJXNFVXQfXVJXDJVXoQJVQVJQVDEfXVDvJHVEqNFVeQfXVHpJFVHxfXVVJSRVVmaRVlIJOhCXVJhHjYkhxCJVhWVUJhWiJcxBNJIxeEqDxfXBFxcFEPxFSJFxFYJXyBDQJydaUJyFOPDuYCJYuLvJRuHLJXuZJLDuFOPDuFZJHuFcqXmKHJdmCQJcmOsVJiJAGFitLCFieOfXiestXiZJMEikNJQirXzFiFQqXiFIJFiFZJFiFvtFUHpJFUteIcUteOcUVCJkUhdHcUbEJEUJqXQUMNJhURjYkUFitFZDGJHZJIxDZJVJXZJFDJZJFpQvBNJBvBSJFvJxBrseQqDsVFVJdFLJDkEJNBkmNJYkFLJDoQJOPoGsJRoEAHBoEJfFbBQqDbBZJHbFVJXlFIJBjYIrXjeitcjjCEBjWMNBwXQfXwXOaFwDsJXwCJTRwrCZJMDNJQcDDJFcqDOPRYiJFTBsJXTQIJBTFEfXTFLJDrXEJFrEJXMrFZJFWEJdEWYTlm\",\n    // 7-kana words\n    \"ABCDEFACNJTRAMBDJdAcNJVXBLNJEBXSIdWRXErNJkXYDJMBXZJCJaXMNJaYKKVJKcKDEJqXKDcNJhKVJrNYKbgJVXKFVJSBNBYBwDNJeQfXNJeEqXNhGJWENJFiJRQlIJbEQJfXxDQqXcfXQFNDEJQFwXUJDYcnUJDJIBgQDIUJTRDJFEqDSJQSJFSJQIJFSOPeZtSJFZJHCJXQfXCTDEqFGJBSJFGJBOfXGJBcqXGJHNJDGJRLiJEJfXEqEJFEJPEFpBEJYJBZJFYBwXUJYiJMEBYJZJyTYTONJXpQMFXFpeGIDdpJFstXpJFcPDLBVSJRLHQJqXLJFZJFIJBNJDIJBUqXIBkFDJIJEJPTIYJGWRIJeQPDIJeEfHIJFsJXOqGDSFHXEJqXgJCsJCgGQJqXgdQYJEgFMFNBgJFcqDVJwXUJVJFZJchIgJCCxOEJqXxOwXUJyDJBVRuscisciJBiJBieUtqXiJFDJkiFsJXQUGEZJcUJFsJXZtXIrXZDZJDrZJFNJDZJFstXvJFQqXvJFCJEsJXQJqkhkNGBbDJdTRbYJMEBlDwXUJMEFiJFcfXNJDRcNJWMTBLJXC\",\n    // 8-kana words\n    \"BraFUtHBFSJFdbNBLJXVJQoYJNEBSJBEJfHSJHwXUJCJdAZJMGjaFVJXEJPNJBlEJfFiJFpFbFEJqIJBVJCrIBdHiJhOPFChvJVJZJNJWxGFNIFLueIBQJqUHEJfUFstOZJDrlXEASJRlXVJXSFwVJNJWD\",\n    // 9-kana words\n    \"QJEJNNJDQJEJIBSFQJEJxegBQJEJfHEPSJBmXEJFSJCDEJqXLXNJFQqXIcQsFNJFIFEJqXUJgFsJXIJBUJEJfHNFvJxEqXNJnXUJFQqD\",\n    // 10-kana words\n    \"IJBEJqXZJ\"\n];\n// Maps each character into its kana value (the index)\nconst mapping = \"~~AzB~X~a~KN~Q~D~S~C~G~E~Y~p~L~I~O~eH~g~V~hxyumi~~U~~Z~~v~~s~~dkoblPjfnqwMcRTr~W~~~F~~~~~Jt\";\nlet _wordlist = null;\nfunction hex(word) {\n    return (0, index_js_2.hexlify)((0, index_js_2.toUtf8Bytes)(word));\n}\nconst KiYoKu = \"0xe3818de38284e3818f\";\nconst KyoKu = \"0xe3818de38283e3818f\";\nfunction toString(data) {\n    return (0, index_js_2.toUtf8String)(new Uint8Array(data));\n}\nfunction loadWords() {\n    if (_wordlist !== null) {\n        return _wordlist;\n    }\n    const wordlist = [];\n    // Transforms for normalizing (sort is a not quite UTF-8)\n    const transform = {};\n    // Delete the diacritic marks\n    transform[toString([\n        227,\n        130,\n        154\n    ])] = false;\n    transform[toString([\n        227,\n        130,\n        153\n    ])] = false;\n    // Some simple transforms that sort out most of the order\n    transform[toString([\n        227,\n        130,\n        133\n    ])] = toString([\n        227,\n        130,\n        134\n    ]);\n    transform[toString([\n        227,\n        129,\n        163\n    ])] = toString([\n        227,\n        129,\n        164\n    ]);\n    transform[toString([\n        227,\n        130,\n        131\n    ])] = toString([\n        227,\n        130,\n        132\n    ]);\n    transform[toString([\n        227,\n        130,\n        135\n    ])] = toString([\n        227,\n        130,\n        136\n    ]);\n    // Normalize words using the transform\n    function normalize(word) {\n        let result = \"\";\n        for(let i = 0; i < word.length; i++){\n            let kana = word[i];\n            const target = transform[kana];\n            if (target === false) {\n                continue;\n            }\n            if (target) {\n                kana = target;\n            }\n            result += kana;\n        }\n        return result;\n    }\n    // Sort how the Japanese list is sorted\n    function sortJapanese(a, b) {\n        a = normalize(a);\n        b = normalize(b);\n        if (a < b) {\n            return -1;\n        }\n        if (a > b) {\n            return 1;\n        }\n        return 0;\n    }\n    // Load all the words\n    for(let length = 3; length <= 9; length++){\n        const d = data[length - 3];\n        for(let offset = 0; offset < d.length; offset += length){\n            const word = [];\n            for(let i = 0; i < length; i++){\n                const k = mapping.indexOf(d[offset + i]);\n                word.push(227);\n                word.push(k & 0x40 ? 130 : 129);\n                word.push((k & 0x3f) + 128);\n            }\n            wordlist.push(toString(word));\n        }\n    }\n    wordlist.sort(sortJapanese);\n    // For some reason kyoku and kiyoku are flipped in node (!!).\n    // The order SHOULD be:\n    //   - kyoku\n    //   - kiyoku\n    // This should ignore \"if\", but that doesn't work here??\n    /* c8 ignore start */ if (hex(wordlist[442]) === KiYoKu && hex(wordlist[443]) === KyoKu) {\n        const tmp = wordlist[442];\n        wordlist[442] = wordlist[443];\n        wordlist[443] = tmp;\n    }\n    /* c8 ignore stop */ // Verify the computed list matches the official list\n    /* istanbul ignore if */ const checksum = (0, index_js_1.id)(wordlist.join(\"\\n\") + \"\\n\");\n    /* c8 ignore start */ if (checksum !== \"0xcb36b09e6baa935787fd762ce65e80b0c6a8dabdfbc3a7f86ac0e2c4fd111600\") {\n        throw new Error(\"BIP39 Wordlist for ja (Japanese) FAILED\");\n    }\n    /* c8 ignore stop */ _wordlist = wordlist;\n    return wordlist;\n}\nlet wordlist = null;\n/**\n *  The [[link-bip39-ja]] for [mnemonic phrases](link-bip-39).\n *\n *  @_docloc: api/wordlists\n */ class LangJa extends wordlist_js_1.Wordlist {\n    /**\n     *  Creates a new instance of the Japanese language Wordlist.\n     *\n     *  This should be unnecessary most of the time as the exported\n     *  [[langJa]] should suffice.\n     *\n     *  @_ignore:\n     */ constructor(){\n        super(\"ja\");\n    }\n    getWord(index) {\n        const words = loadWords();\n        (0, index_js_2.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, \"index\", index);\n        return words[index];\n    }\n    getWordIndex(word) {\n        return loadWords().indexOf(word);\n    }\n    split(phrase) {\n        //logger.assertNormalize();\n        return phrase.split(/(?:\\u3000| )+/g);\n    }\n    join(words) {\n        return words.join(\"　\");\n    }\n    /**\n     *  Returns a singleton instance of a ``LangJa``, creating it\n     *  if this is the first time being called.\n     */ static wordlist() {\n        if (wordlist == null) {\n            wordlist = new LangJa();\n        }\n        return wordlist;\n    }\n}\nexports.LangJa = LangJa; //# sourceMappingURL=lang-ja.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-ja.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-ko.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wordlists/lang-ko.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LangKo = void 0;\nconst index_js_1 = __webpack_require__(/*! ../hash/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/hash/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst wordlist_js_1 = __webpack_require__(/*! ./wordlist.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist.js\");\nconst data = [\n    \"OYAa\",\n    \"ATAZoATBl3ATCTrATCl8ATDloATGg3ATHT8ATJT8ATJl3ATLlvATLn4ATMT8ATMX8ATMboATMgoAToLbAToMTATrHgATvHnAT3AnAT3JbAT3MTAT8DbAT8JTAT8LmAT8MYAT8MbAT#LnAUHT8AUHZvAUJXrAUJX8AULnrAXJnvAXLUoAXLgvAXMn6AXRg3AXrMbAX3JTAX3QbAYLn3AZLgvAZrSUAZvAcAZ8AaAZ8AbAZ8AnAZ8HnAZ8LgAZ8MYAZ8MgAZ8OnAaAboAaDTrAaFTrAaJTrAaJboAaLVoAaMXvAaOl8AaSeoAbAUoAbAg8AbAl4AbGnrAbMT8AbMXrAbMn4AbQb8AbSV8AbvRlAb8AUAb8AnAb8HgAb8JTAb8NTAb8RbAcGboAcLnvAcMT8AcMX8AcSToAcrAaAcrFnAc8AbAc8MgAfGgrAfHboAfJnvAfLV8AfLkoAfMT8AfMnoAfQb8AfScrAfSgrAgAZ8AgFl3AgGX8AgHZvAgHgrAgJXoAgJX8AgJboAgLZoAgLn4AgOX8AgoATAgoAnAgoCUAgoJgAgoLXAgoMYAgoSeAgrDUAgrJTAhrFnAhrLjAhrQgAjAgoAjJnrAkMX8AkOnoAlCTvAlCV8AlClvAlFg4AlFl6AlFn3AloSnAlrAXAlrAfAlrFUAlrFbAlrGgAlrOXAlvKnAlvMTAl3AbAl3MnAnATrAnAcrAnCZ3AnCl8AnDg8AnFboAnFl3AnHX4AnHbrAnHgrAnIl3AnJgvAnLXoAnLX4AnLbrAnLgrAnLhrAnMXoAnMgrAnOn3AnSbrAnSeoAnvLnAn3OnCTGgvCTSlvCTvAUCTvKnCTvNTCT3CZCT3GUCT3MTCT8HnCUCZrCULf8CULnvCU3HnCU3JUCY6NUCbDb8CbFZoCbLnrCboOTCboScCbrFnCbvLnCb8AgCb8HgCb$LnCkLfoClBn3CloDUDTHT8DTLl3DTSU8DTrAaDTrLXDTrLjDTrOYDTrOgDTvFXDTvFnDT3HUDT3LfDUCT9DUDT4DUFVoDUFV8DUFkoDUGgrDUJnrDULl8DUMT8DUMXrDUMX4DUMg8DUOUoDUOgvDUOg8DUSToDUSZ8DbDXoDbDgoDbGT8DbJn3DbLg3DbLn4DbMXrDbMg8DbOToDboJXGTClvGTDT8GTFZrGTLVoGTLlvGTLl3GTMg8GTOTvGTSlrGToCUGTrDgGTrJYGTrScGTtLnGTvAnGTvQgGUCZrGUDTvGUFZoGUHXrGULnvGUMT8GUoMgGXoLnGXrMXGXrMnGXvFnGYLnvGZOnvGZvOnGZ8LaGZ8LmGbAl3GbDYvGbDlrGbHX3GbJl4GbLV8GbLn3GbMn4GboJTGboRfGbvFUGb3GUGb4JnGgDX3GgFl$GgJlrGgLX6GgLZoGgLf8GgOXoGgrAgGgrJXGgrMYGgrScGgvATGgvOYGnAgoGnJgvGnLZoGnLg3GnLnrGnQn8GnSbrGnrMgHTClvHTDToHTFT3HTQT8HToJTHToJgHTrDUHTrMnHTvFYHTvRfHT8MnHT8SUHUAZ8HUBb4HUDTvHUoMYHXFl6HXJX6HXQlrHXrAUHXrMnHXrSbHXvFYHXvKXHX3LjHX3MeHYvQlHZrScHZvDbHbAcrHbFT3HbFl3HbJT8HbLTrHbMT8HbMXrHbMbrHbQb8HbSX3HboDbHboJTHbrFUHbrHgHbrJTHb8JTHb8MnHb8QgHgAlrHgDT3HgGgrHgHgrHgJTrHgJT8HgLX@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!Ln$CTGXMnCToLZ4CTrHT8CT3JTrCT3RZrCT#GTvCU6GgvCU8Db8CU8GZrCU8HT8CboLl3CbrGgrCbrMU8Cb8DT3Cb8GnrCb8LX4Cb8MT8Cb8ObrCgrGgvCgrKX4Cl8FZoDTrAbvDTrDboDTrGT6DTrJgrDTrMX3DTrRZrDTrRg8DTvAVvDTvFZoDT3DT8DT3Ln3DT4HZrDT4MT8DT8AlrDT8MT8DUAkGbDUDbJnDYLnQlDbDUOYDbMTAnDbMXSnDboAT3DboFn4DboLnvDj6JTrGTCgFTGTGgFnGTJTMnGTLnPlGToJT8GTrCT3GTrLVoGTrLnvGTrMX3GTrMboGTvKl3GZClFnGZrDT3GZ8DTrGZ8FZ8GZ8MXvGZ8On8GZ8ST3GbCnQXGbMbFnGboFboGboJg3GboMXoGb3JTvGb3JboGb3Mn6Gb3Qb8GgDXLjGgMnAUGgrDloGgrHX4GgrSToGgvAXrGgvAZvGgvFbrGgvLl3GgvMnvGnDnLXGnrATrGnrMboGnuLl3HTATMnHTAgCnHTCTCTHTrGTvHTrHTvHTrJX8HTrLl8HTrMT8HTrMgoHTrOTrHTuOn3HTvAZrHTvDTvHTvGboHTvJU8HTvLl3HTvMXrHTvQb4HT4GT6HT4JT8HT4Jb#HT8Al3HT8GZrHT8GgrHT8HX4HT8Jb8HT8JnoHT8LTrHT8LgvHT8SToHT8SV8HUoJUoHUoJX8HUoLnrHXrLZoHXvAl3HX3LnrHX4FkvHX4LhrHX4MXoHX4OnoHZrAZ8HZrDb8HZrGZ8HZrJnrHZvGZ8HZvLnvHZ8JnvHZ8LhrHbCXJlHbMTAnHboJl4HbpLl3HbrJX8HbrLnrHbrMnvHbvRYrHgoSTrHgrFV8HgrGZ8HgrJXoHgrRnvHgvBb!HgvGTrHgvHX4HgvHn!HgvLTrHgvSU8HnDnLbHnFbJbHnvDn8Hn6GgvHn!BTvJTCTLnJTQgFnJTrAnvJTrLX4JTrOUoJTvFn3JTvLnrJTvNToJT3AgoJT3Jn4JT3LhvJT3ObrJT8AcrJT8Al3JT8JT8JT8JnoJT8LX4JT8LnrJT8MX3JT8Rg3JT8Sc8JUoBTvJU8AToJU8GZ8JU8GgvJU8JTrJU8JXrJU8JnrJU8LnvJU8ScvJXHnJlJXrGgvJXrJU8JXrLhrJXrMT8JXrMXrJXrQUoJXvCTvJXvGZ8JXvGgrJXvQT8JX8Ab8JX8DT8JX8GZ8JX8HZvJX8LnrJX8MT8JX8MXoJX8MnvJX8ST3JYGnCTJbAkGbJbCTAnJbLTAcJboDT3JboLb6JbrAnvJbrCn3JbrDl8JbrGboJbrIZoJbrJnvJbrMnvJbrQb4Jb8RZrJeAbAnJgJnFbJgScAnJgrATrJgvHZ8JgvMn4JlJlFbJlLiQXJlLjOnJlRbOlJlvNXoJlvRl3Jl4AcrJl8AUoJl8MnrJnFnMlJnHgGbJnoDT8JnoFV8JnoGgvJnoIT8JnoQToJnoRg3JnrCZ3JnrGgrJnrHTvJnrLf8JnrOX8JnvAT3JnvFZoJnvGT8JnvJl4JnvMT8JnvMX8JnvOXrJnvPX6JnvSX3JnvSZrJn3MT8Jn3MX8Jn3RTrLTATKnLTJnLTLTMXKnLTRTQlLToGb8LTrAZ8LTrCZ8LTrDb8LTrHT8LT3PX6LT4FZoLT$CTvLT$GgrLUvHX3LVoATrLVoAgoLVoJboLVoMX3LVoRg3LV8CZ3LV8FZoLV8GTvLXrDXoLXrFbrLXvAgvLXvFlrLXvLl3LXvRn6LX4Mb8LX8GT8LYCXMnLYrMnrLZoSTvLZrAZvLZrAloLZrFToLZrJXvLZrJboLZrJl4LZrLnrLZrMT8LZrOgvLZrRnvLZrST4LZvMX8LZvSlvLZ8AgoLZ8CT3LZ8JT8LZ8LV8LZ8LZoLZ8Lg8LZ8SV8LZ8SbrLZ$HT8LZ$Mn4La6CTvLbFbMnLbRYFTLbSnFZLboJT8LbrAT9LbrGb3LbrQb8LcrJX8LcrMXrLerHTvLerJbrLerNboLgrDb8LgrGZ8LgrHTrLgrMXrLgrSU8LgvJTrLgvLl3Lg6Ll3LhrLnrLhrMT8LhvAl4LiLnQXLkoAgrLkoJT8LkoJn4LlrSU8Ll3FZoLl3HTrLl3JX8Ll3JnoLl3LToLmLeFbLnDUFbLnLVAnLnrATrLnrAZoLnrAb8LnrAlrLnrGgvLnrJU8LnrLZrLnrLhrLnrMb8LnrOXrLnrSZ8LnvAb4LnvDTrLnvDl8LnvHTrLnvHbrLnvJT8LnvJU8LnvJbrLnvLhvLnvMX8LnvMb8LnvNnoLnvSU8Ln3Al3Ln4FZoLn4GT6Ln4JgvLn4LhrLn4MT8Ln4SToMToCZrMToJX8MToLX4MToLf8MToRg3MTrEloMTvGb6MT3BTrMT3Lb6MT8AcrMT8AgrMT8GZrMT8JnoMT8LnrMT8MX3MUOUAnMXAbFnMXoAloMXoJX8MXoLf8MXoLl8MXrAb8MXrDTvMXrGT8MXrGgrMXrHTrMXrLf8MXrMU8MXrOXvMXrQb8MXvGT8MXvHTrMXvLVoMX3AX3MX3Jn3MX3LhrMX3MX3MX4AlrMX4OboMX8GTvMX8GZrMX8GgrMX8JT8MX8JX8MX8LhrMX8MT8MYDUFbMYMgDbMbGnFfMbvLX4MbvLl3Mb8Mb8Mb8ST4MgGXCnMg8ATrMg8AgoMg8CZrMg8DTrMg8DboMg8HTrMg8JgrMg8LT8MloJXoMl8AhrMl8JT8MnLgAUMnoJXrMnoLX4MnoLhrMnoMT8MnrAl4MnrDb8MnrOTvMnrOgvMnrQb8MnrSU8MnvGgrMnvHZ8Mn3MToMn4DTrMn4LTrMn4Mg8NnBXAnOTFTFnOToAToOTrGgvOTrJX8OT3JXoOT6MTrOT8GgrOT8HTpOT8MToOUoHT8OUoJT8OUoLn3OXrAgoOXrDg8OXrMT8OXvSToOX6CTvOX8CZrOX8OgrOb6HgvOb8AToOb8MT8OcvLZ8OgvAlrOgvHTvOgvJTrOgvJnrOgvLZrOgvLn4OgvMT8OgvRTrOg8AZoOg8DbvOnrOXoOnvJn4OnvLhvOnvRTrOn3GgoOn3JnvOn6JbvOn8OTrPTGYFTPbBnFnPbGnDnPgDYQTPlrAnvPlrETvPlrLnvPlrMXvPlvFX4QTMTAnQTrJU8QYCnJlQYJlQlQbGTQbQb8JnrQb8LZoQb8LnvQb8MT8Qb8Ml8Qb8ST4QloAl4QloHZvQloJX8QloMn8QnJZOlRTrAZvRTrDTrRTvJn4RTvLhvRT4Jb8RZrAZrRZ8AkrRZ8JU8RZ8LV8RZ8LnvRbJlQXRg3GboRg3MnvRg8AZ8Rg8JboRg8Jl4RnLTCbRnvFl3RnvQb8SToAl4SToCZrSToFZoSToHXrSToJU8SToJgvSToJl4SToLhrSToMX3STrAlvSTrCT9STrCgrSTrGgrSTrHXrSTrHboSTrJnoSTrNboSTvLnrST4AZoST8Ab8ST8JT8SUoJn3SU6HZ#SU6JTvSU8Db8SU8HboSU8LgrSV8JT8SZrAcrSZrAl3SZrJT8SZrJnvSZrMT8SZvLUoSZ4FZoSZ8JnoSZ8RZrScoLnrScoMT8ScoMX8ScrAT4ScrAZ8ScrLZ8ScrLkvScvDb8ScvLf8ScvNToSgrFZrShvKnrSloHUoSloLnrSlrMXoSl8HgrSmrJUoSn3BX6\",\n    \"ATFlOn3ATLgrDYAT4MTAnAT8LTMnAYJnRTrAbGgJnrAbLV8LnAbvNTAnAeFbLg3AgOYMXoAlQbFboAnDboAfAnJgoJTBToDgAnBUJbAl3BboDUAnCTDlvLnCTFTrSnCYoQTLnDTwAbAnDUDTrSnDUHgHgrDX8LXFnDbJXAcrETvLTLnGTFTQbrGTMnGToGT3DUFbGUJlPX3GbQg8LnGboJbFnGb3GgAYGgAg8ScGgMbAXrGgvAbAnGnJTLnvGnvATFgHTDT6ATHTrDlJnHYLnMn8HZrSbJTHZ8LTFnHbFTJUoHgSeMT8HgrLjAnHgvAbAnHlFUrDlHnDgvAnHnHTFT3HnQTGnrJTAaMXvJTGbCn3JTOgrAnJXvAXMnJbMg8SnJbMnRg3Jb8LTMnJnAl3OnJnGYrQlJnJlQY3LTDlCn3LTJjLg3LTLgvFXLTMg3GTLV8HUOgLXFZLg3LXNXrMnLX8QXFnLX9AlMYLYLXPXrLZAbJU8LZDUJU8LZMXrSnLZ$AgFnLaPXrDULbFYrMnLbMn8LXLboJgJgLeFbLg3LgLZrSnLgOYAgoLhrRnJlLkCTrSnLkOnLhrLnFX%AYLnFZoJXLnHTvJbLnLloAbMTATLf8MTHgJn3MTMXrAXMT3MTFnMUITvFnMXFX%AYMXMXvFbMXrFTDbMYAcMX3MbLf8SnMb8JbFnMgMXrMTMgvAXFnMgvGgCmMnAloSnMnFnJTrOXvMXSnOX8HTMnObJT8ScObLZFl3ObMXCZoPTLgrQXPUFnoQXPU3RXJlPX3RkQXPbrJXQlPlrJbFnQUAhrDbQXGnCXvQYLnHlvQbLfLnvRTOgvJbRXJYrQlRYLnrQlRbLnrQlRlFT8JlRlFnrQXSTClCn3STHTrAnSTLZQlrSTMnGTrSToHgGbSTrGTDnSTvGXCnST3HgFbSU3HXAXSbAnJn3SbFT8LnScLfLnv\",\n    \"AT3JgJX8AT8FZoSnAT8JgFV8AT8LhrDbAZ8JT8DbAb8GgLhrAb8SkLnvAe8MT8SnAlMYJXLVAl3GYDTvAl3LfLnvBUDTvLl3CTOn3HTrCT3DUGgrCU8MT8AbCbFTrJUoCgrDb8MTDTLV8JX8DTLnLXQlDT8LZrSnDUQb8FZ8DUST4JnvDb8ScOUoDj6GbJl4GTLfCYMlGToAXvFnGboAXvLnGgAcrJn3GgvFnSToGnLf8JnvGn#HTDToHTLnFXJlHTvATFToHTvHTDToHTvMTAgoHT3STClvHT4AlFl6HT8HTDToHUoDgJTrHUoScMX3HbRZrMXoHboJg8LTHgDb8JTrHgMToLf8HgvLnLnoHnHn3HT4Hn6MgvAnJTJU8ScvJT3AaQT8JT8HTrAnJXrRg8AnJbAloMXoJbrATFToJbvMnoSnJgDb6GgvJgDb8MXoJgSX3JU8JguATFToJlPYLnQlJlQkDnLbJlQlFYJlJl8Lf8OTJnCTFnLbJnLTHXMnJnLXGXCnJnoFfRg3JnrMYRg3Jn3HgFl3KT8Dg8LnLTRlFnPTLTvPbLbvLVoSbrCZLXMY6HT3LXNU7DlrLXNXDTATLX8DX8LnLZDb8JU8LZMnoLhrLZSToJU8LZrLaLnrLZvJn3SnLZ8LhrSnLaJnoMT8LbFlrHTvLbrFTLnrLbvATLlvLb6OTFn3LcLnJZOlLeAT6Mn4LeJT3ObrLg6LXFlrLhrJg8LnLhvDlPX4LhvLfLnvLj6JTFT3LnFbrMXoLnQluCTvLnrQXCY6LnvLfLnvLnvMgLnvLnvSeLf8MTMbrJn3MT3JgST3MT8AnATrMT8LULnrMUMToCZrMUScvLf8MXoDT8SnMX6ATFToMX8AXMT8MX8FkMT8MX8HTrDUMX8ScoSnMYJT6CTvMgAcrMXoMg8SToAfMlvAXLg3MnFl3AnvOT3AnFl3OUoATHT8OU3RnLXrOXrOXrSnObPbvFn6Og8HgrSnOg8OX8DbPTvAgoJgPU3RYLnrPXrDnJZrPb8CTGgvPlrLTDlvPlvFUJnoQUvFXrQlQeMnoAl3QlrQlrSnRTFTrJUoSTDlLiLXSTFg6HT3STJgoMn4STrFTJTrSTrLZFl3ST4FnMXoSUrDlHUoScvHTvSnSfLkvMXo\",\n    \"AUoAcrMXoAZ8HboAg8AbOg6ATFgAg8AloMXoAl3AT8JTrAl8MX8MXoCT3SToJU8Cl8Db8MXoDT8HgrATrDboOT8MXoGTOTrATMnGT8LhrAZ8GnvFnGnQXHToGgvAcrHTvAXvLl3HbrAZoMXoHgBlFXLg3HgMnFXrSnHgrSb8JUoHn6HT8LgvITvATrJUoJUoLZrRnvJU8HT8Jb8JXvFX8QT8JXvLToJTrJYrQnGnQXJgrJnoATrJnoJU8ScvJnvMnvMXoLTCTLgrJXLTJlRTvQlLbRnJlQYvLbrMb8LnvLbvFn3RnoLdCVSTGZrLeSTvGXCnLg3MnoLn3MToLlrETvMT8SToAl3MbrDU6GTvMb8LX4LhrPlrLXGXCnSToLf8Rg3STrDb8LTrSTvLTHXMnSb3RYLnMnSgOg6ATFg\",\n    \"HUDlGnrQXrJTrHgLnrAcJYMb8DULc8LTvFgGnCk3Mg8JbAnLX4QYvFYHnMXrRUoJnGnvFnRlvFTJlQnoSTrBXHXrLYSUJgLfoMT8Se8DTrHbDb\",\n    \"AbDl8SToJU8An3RbAb8ST8DUSTrGnrAgoLbFU6Db8LTrMg8AaHT8Jb8ObDl8SToJU8Pb3RlvFYoJl\"\n];\nconst codes = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*\";\nfunction getHangul(code) {\n    if (code >= 40) {\n        code = code + 168 - 40;\n    } else if (code >= 19) {\n        code = code + 97 - 19;\n    }\n    return (0, index_js_2.toUtf8String)(new Uint8Array([\n        225,\n        (code >> 6) + 132,\n        (code & 0x3f) + 128\n    ]));\n}\nlet _wordlist = null;\nfunction loadWords() {\n    if (_wordlist != null) {\n        return _wordlist;\n    }\n    const wordlist = [];\n    data.forEach((data, length)=>{\n        length += 4;\n        for(let i = 0; i < data.length; i += length){\n            let word = \"\";\n            for(let j = 0; j < length; j++){\n                word += getHangul(codes.indexOf(data[i + j]));\n            }\n            wordlist.push(word);\n        }\n    });\n    wordlist.sort();\n    // Verify the computed list matches the official list\n    /* istanbul ignore if */ const checksum = (0, index_js_1.id)(wordlist.join(\"\\n\") + \"\\n\");\n    /* c8 ignore start */ if (checksum !== \"0xf9eddeace9c5d3da9c93cf7d3cd38f6a13ed3affb933259ae865714e8a3ae71a\") {\n        throw new Error(\"BIP39 Wordlist for ko (Korean) FAILED\");\n    }\n    /* c8 ignore stop */ _wordlist = wordlist;\n    return wordlist;\n}\nlet wordlist = null;\n/**\n *  The [[link-bip39-ko]] for [mnemonic phrases](link-bip-39).\n *\n *  @_docloc: api/wordlists\n */ class LangKo extends wordlist_js_1.Wordlist {\n    /**\n     *  Creates a new instance of the Korean language Wordlist.\n     *\n     *  This should be unnecessary most of the time as the exported\n     *  [[langKo]] should suffice.\n     *\n     *  @_ignore:\n     */ constructor(){\n        super(\"ko\");\n    }\n    getWord(index) {\n        const words = loadWords();\n        (0, index_js_2.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, \"index\", index);\n        return words[index];\n    }\n    getWordIndex(word) {\n        return loadWords().indexOf(word);\n    }\n    /**\n     *  Returns a singleton instance of a ``LangKo``, creating it\n     *  if this is the first time being called.\n     */ static wordlist() {\n        if (wordlist == null) {\n            wordlist = new LangKo();\n        }\n        return wordlist;\n    }\n}\nexports.LangKo = LangKo; //# sourceMappingURL=lang-ko.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-ko.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-pt.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wordlists/lang-pt.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LangPt = void 0;\nconst wordlist_owl_js_1 = __webpack_require__(/*! ./wordlist-owl.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist-owl.js\");\nconst words = \"0arad!ototealirertainrasoent hoandoaR#riareha!aroele'oronul0Aca%AixoAl A%rDuz'El]Er$IsmoO$ R<g(Revi Rig Rup$S*$Solu$Sur=Ut[0Ab#Alm Amp Anh A,Ei.El( En ErvoEss E$naHa.IdezImaI}#Irr Lam LiveOlhidaOmod Opl Ord Um~ Us?0Ap.EgaEnt_Ep$Equ Er-%EsivoEusI<%ItivoJetivoJun$M' Or Qu''UboV(,Vog#0R}ave0As.Er'EtivoIn?Iv` Li$Lu-%R}.0Ach Arr As&/Enci Iliz Io)It#O+R! Res%Rup U d Ul]2O`h Ud Us.1AmedaArmeAstr Av<caB(gueB*oCat+De@EcrimEgr@Er.FaceF*e%GumHeioI Ica%I- Inh Ivi Mof^Oc Pis%T( TitudeUc* Ug UnoUsivoVo0Aci A=rA[loAss BasBi-%EixaEniz I=Is$,Iz!eOl?On$ O_,Ost+P  Pli Pola0Ag+maAlis Arqu@A$m@DaimeElExoG~ Im JoOm&@Ot#Sio,T(i|Uid!eUnci Zol1Ag?Alp Anh#EgoEli=Ert^Es Eti%I$Lau,Lic^OioOn.Os)R-dizRov 0Uec(0AmeAn]A+C^D-%E@Ej Eni$Es)Gilo,GolaMaQuivoRai&Reba%Risc Rob>um S-&T(i&TigoVo[=0F&.Il#P' S?S* So&/Sun$Tr&0Ac#Adu+Al/A[f E End(Er_EuIng'Ir?IvoOl{oRac Revi=RizU&Um0Di$rM-.R>o+TismoT|@Tu 0Ali An%Ar@Ent&Es,I?Is Ul,1Ila1Ar E=Ei%Ulejo:B BosaC&]uCh `C@GagemI<oIl I}e)Ir_Ixis)J~ Le@LizaLsaN&Nd{aN/N'Nque%Ra$Rb#R}es>+c>~/Se#S)n%Ta)Te=rTidaTomTuc Unil]3B(IjoIr^IsebolLd!eLezaLgaLisc Ndi$Ng&aNz(RimbauRl*d>_Sou_XigaZ(_3CoCu=En&Foc&Furc G|naLhe%Mest[Mo$rOlog@OmboOsf(aPol Rr-$Scoi$Sne$SpoSsex$TolaZ _2Ind#OcoOque 2A$BagemC#CejoChec]Ico.L^LetimL]LoMb{oNdeNecoNi)Rb~h>d>e&R+c]V*oXe?2AncoAsaAvezaEuIgaIl/Inc OaOchu+Onze O$Uxo2C]DismoF LeRacoScaS$Z*a:B<aB`oBideBoBri$CauCet^C/r_CiqueDast_De#Fez&IaqueIp'aIxo%J#JuLafrioLc~ Ld{aLibr Lm<%Lo)M^Mbis)MisaMomilaMp<]Mufl Navi&Nc` Ne)NguruN/$Nive%NoaNs#N.Nu=Pac/P`aP* Po.Pric/Pt?PuzRacolRb}oRde&Rec>imb Rn{oRpe%R['>)zRv&/SacoScaSeb[S%loS~oT a)Tiv UleUs?U%l V&oV(na3BolaDil]G}]Lebr L~ Nou+N,N%ioRc Rr#R%'oRvejaTimV^2Aco)Al{aAm#Ap^ArmeAticeAveEfeEg^E'oEqueIco%If[In`oOc&/Ov(UmboU.Uva0CatrizCl}eD!eD['aEn%G<aM-$N$Nz><d>cui$Rurg@T 2A[zaE_Ic OneUbe2A=Ag'Ba@B($rBr C^El/Ent_E,Gum`oIb'IfaIo%L L{aLh(Lid'Lme@L}oLunaM<=Mb* M-.MitivaMov(MplexoMumNc]N=rNec.Nfu,Ng` Nhec(Njug Nsum'Nt+$Nvi%Op( P{oPi?PoQue%lRagemRdi&Rne)R}h>p|&R[ioR%joRuj>voSs-oS%laT}e%U_UveVilZ*]2A%+AvoEcheE=rEmeErEspoI^Im*&Io~oIseItic Os)UaUz{o2B<oEcaId#JoLat+Lm* Lp Ltu+Mpr'Nh#Pi=RativoRr&Rs R$Sp'S% T`o:MascoT 3Ba%rBi.BocheB~h C&queCim&CliveCo%C[.D&Dic#Duz'FesaFum G`oG+uGus.It#Ix La$rLeg#L*e L}gaM<daMit'Moli=Ntis)P-#Pil PoisP[ssaPur Riv>+m SafioSbo.Sc<,S-/Sfi#Sgas%Sigu&SlizeSmam SovaSpesaS)queSvi T&h T-$rT} Tri$UsaV(Vi=Vot#Z-a3Ag+maAle$Da)Fu,Gi.Lat#Lu-%M*u'Nast@Nh{oOceseRe$Sc[)Sf ceSp oSque%Ssip S)n%T?UrnoV(,Vi,rV~g Z(5Br?L|i=M?M*#NativoNz`>m-%Rs&SagemUr#U$r2EnagemIbleOg @2El EndeE$PloQues><%Vi=,:1Lod'O Olog@0Ific It&Uc#1Ei$Etiv 3E.1Ab| Eg(Ei$rEncoEv?Im* Ogi 0B goBol#Br~/Buti=EndaErg'Is,rPat@P-/P*#Polg P[goPurr Ul?0CaixeC-#Ch-%C}t_Deus Doss Faix Fei%FimGaj#G-/Glob Gom#G+x Gu@Jo La.Qu<$Raiz Rol#Rug SaioSe^S*oSop#T<$Te#Tid!eT|.Tr^T~/V(g Vi#Volv(XameX($Xof[Xu$1Id(me0Uip 0E$Gui=Ra)VaVil]0B<j B`$CamaColaCri)Cu)F*geFol F[g Fum#GrimaM&%P<$P`/PigaP}jaP[i)Pum Qu(daTacaT{aTic Tof#T[laTu=Vazi 0AnolIque)0F|i>opeu0Acu Ap| AsivoEntu&Id-%Olu'1Ag(oAl Am* A$Aus$Ces,Ci.Clam Ecu.EmploIb'Ig-%On( P<d'P`'P' Pl< Pos$P[s,P~s T(noT*$T+$:Bric B~o,Ce)Ci&DaDigaIxaL L)Mili Nd<goNf +N$cheRd#R`oR*h>of>p>tu+T@T|V|i)X*aZ-da3Ch#Ijo^I+n%L*oM**oNdaNoR>i#RrugemRv(S%j T&Ud&3ApoB_seC Ch{oGur#L{aL/LmeLtr RmezaSg^Ssu+TaV`aX?Xo2AcidezAm*goAn`aEch^O+Utu Uxo2C&C*/Foc GoGue%IceLg#Lhe$Rj Rmig>noR%ScoSsa2Aga)AldaAngoAscoA%rnoE'aEn%E.IezaI,Itu+On]Ustr U%'a2G'L<oLigemNd NgoNilR?Rio,Tebol:B i$B*e%DoIa$IolaIvo)LegaL/L*]Loc]Nh RagemRfoRg&oRimpoRoup>+faSodu$S$TaTil/Ve)Z`a3L#Le@LoM^M(Mi=N(o,NgivaNi&NomaN_Ologi>?Rm* S,S$r3Nas)Nc<aNg#Raf>*o2Aci&IcoseOb&Orio,2ElaIabaLfeLpe Rdu+Rje)R_S$,T{aV(n 2AcejoAdu&Afi%Al]AmpoAn^Atui$Ave$AxaEgoElh EveIloIs&/I.@Os,O%scoUd#Unhi=U)2AcheA+niAx*imEr[ I Inc/Is#LaLo,Ru:Bi.Rm}@S%V(3C.eRd Res@Si.3A$B(n D+.EnaNoPismoPnosePo%ca5JeLofo%MemNes$Nr#Rm}&Sped 5M|#:Te2E@O,2N|#RejaU<a4E,HaUdi=Um* Ustr 0AgemEd@$En,ErsivoIn-%It?Ort&Pac$Ped'Pl<%P|Pr-saPuneUniz 0Al?Ap$AtivoC-,Ch Cid'Clu'Col|Deci,D'e$Du$rEficazEr-%F<tilFes.F*i$Flam F|m&F+$rG('Ibi=Ici&ImigoJe.Oc-%O=_Ov?OxQuie$Scri$Se$Sist'Spe$rSt& S~$Tac$Tegr&Tim Toc#TrigaVa,rV(noVic$Voc 0Gur%2Ani<oOniz Re&Rit#0CaEn$Ol#Qu{o0Ali<o:N{oNg^N)R ac>dimR_SmimToV&iZida3Jum9An*]Elh^G?I>n&Rr Vem5BaDeuDocaIzLg?L/R#Ris)RoS)::B edaB|&C[C)n%Dril/G )GoaJeMb(M-.M* MpejoNchePid P,R<j>{>gu+S<]St_T(&Ti=V<daVou+Vr?X<%Z(3Ald!eB[G#G-d Gis)IgoIlo Itu+Mb[%MeNh?Ntil]OaSmaS%TivoT['oV VezaVi.3B(&Bi=D( G G{oMi.Mo{oMp?NdaNe N]gemQuidezS)gemSu+T|&V_XaX{a5C?Cu$rJis)MboNaNgeNt+RdeT#T(@Ucu+UsaUv 5ArCidezC_Ne)St[T?Va:CacoCe%Ch#CioD{aDr*]Gna)G[zaI|IsL<d_L]Lo%LucoMiloMo{oMu%N^Nc]Nda$NequimN/,Niv`aNobr NsaN%rNuse Pe#Qu* Rc?Resi>fimRgemR*/Rmi)Ro$RquiseR[coR%loRujoSco%Sm|+SsagemStig Tag&T(noT*&Tu.Xil 3D&]DidaDusaGaf}eIgaL<c@L/rMb_M|i&N*oNosNsagemNt&Rec(Rg~/S^Scl SmoSqui)St[T!eTeo_T+gemX(Xic<o3C_G&]Gr Lag[L- Lh M#N( N/caNist_N|@OloR<%RtiloStur 5Cid!eD(noD~ EdaErIn/I)Ldu+LezaL/L*e%LuscoN)n]Quec><goRcegoR=moR-aSaicoSque%S.daT`TimToTriz5DaI$La)Lh(L.Ndi&Ni=R&h>c/Sc~ SeuSic&:Ci}&D?JaMo_R*>r#Sc(TivaTu[zaV&]Veg Vio3Bl*aB~o,GativaGoci Gri$Rvo,TaUr&VascaVo{o3N N/TidezV` 5B[zaI%IvaMe M*&Rdes%R% T Tici TurnoV`oVil/Vo5Bl#DezM(&Pci&Tr'Vem:0Cec#Edec(JetivoRig#Scu_S%t+T(Tur 0Id-%Io,Orr(Ulis)Up#2Eg<%EnsivaEr-daIc*aUsc#0Iva4Ar@Eo,H Iv{a0B_Ele%Is,It'0D~#E_,Tem1Ci}&Er?On-%OrtunoOs$1ArBi.DemD*&F<a$GasmoG~/I-t&IgemIun=LaTo=xoV&/0Cil S^SoT-.0Imismo0S!@T}oTub_Vi=0El]Ul 1Id Ig- :Ca$Ci-%Co%Ctu D @Dr*/G GodeIn`Ir IsagemLav+Lest+Lhe)Li$Lm^Lpi.Nc^N`aNfle$NquecaN)n&PagaioP`^P'oRaf*>ci&Rd&RedeRtidaSmoSs#S%lTam T-%T* T_noUl^Us 3C~i D& Dest[D@t+D+G^I$r&IxeLeLic<oNcaNdur N{aN]scoNs?N%Rceb(Rfei$Rgun)Ri$Rmit'Rn>plexoRsi<>%nceRucaSc#SquisaS,aTisc 3AdaC#Ed!eGm-$Last+Lh#Lo.M-)Nc`NguimN]No%N.On{oPocaQue%R<h>esRue)Sc S$laT<gaVe%2An)Aque)At*aEbeuUmagemUvi&1Eu0DaE'aEtisaLeg^Lici Lu-%Lvil/M MbaNd( N.@P~o,R)Ssu'St&TeUp U,Vo 2A@Anc]A$AxeEceEd?Efei$Emi Ens Ep  Esil]E%x$Ev-'Ez Ima)IncesaIsmaIv#Oces,Odu$Ofe)Oibi=Oje$Ome%rOpag OsaO%$rOv?2Blic DimL Lm} Ls{aNh&N'PiloRezaX?:99Ad+Ant@Ar$AseEbr EdaEijoEn%Eri=Im}oInaIosque:B<^BiscoCh Ci} Di&I In]IoIvaJ^L#M&Ng(Nhu+P!u+P`PidezPosaQue%Rid!eS<%Scun/Sg Sp?S%'aSur Taz<aTo{a3AlezaAnim Av(Baix B`deBol C#C-%CheioCiboC|d Cru.Cu DeDim'D}daDuzidaEnvioF* Flet'Fog F[scoFugi G&@GimeG+In#I$rJei.LativoM?M-=M|,Nov#P oP`'Ple$Pol/P[saPudi Qu((S-]Sfri Sga.Sid'Solv(Spei$SsacaS)n%Sum'T&/T(T' Tom^T+.V` Vi,rVol)3Ac/CaGidezGo_,M NgueS^ScoS}/5B&oChe=D^DeioDov@E=rLe)M<oNc S#S{aS$TaT{oT*aT~ UcoUpaXo5B_Gi=Go,IvoMoPest[S,:B|Ci ColaCud'DioF'aGaGr^Ib_L^L{oLg#LivaLpic Lsic]L.Lv?Mb Mu+iN Nf}aNgueNid!ePa$Rd>g-$Rje)Tur Ud!eXof}eZ}&3C C~ DaD-$Di#Do,Du$rGm-$G[=Gun=IvaLe$LvagemM<&M-%N?N/rNsu&Nt#P #Rei>*g>+RvoTemb_T|3GiloLhue)Lic}eMetr@Mpat@M~ N&Nc(oNg~ NopseN$ni>-eRiTu#5B(<oB+C|_G_JaLdaLetr L%'oMbrioNa)Nd Neg Nh?NoP+noQue%Rr'R%ioSsegoTaqueT(r V#Z*/5Aviz BidaBm(,B,loBt+'Ca)Ces,CoDes%FixoG?G('Jei$Lfa$M'OrP(i|Plic Pos$Prim'Rd*>fis)Rp[s>[&Rt'Sp'oS%n$:B`aBle%Bu^C/G `aLh(LoLvezM</Mb|imMpaNg-%N$P Pioc>dioRef>j>+xaTuagemUr*oXativoXis)3Atr&C(Ci=Cl#Dio,IaIm Lef}eLh#Mp(oN-%N,rN.Rm&RnoRr-oSeSou+St#ToXtu+Xugo3A+G`aJoloMbr MidezNgi=N%'oRagemT~ 5Al]C]L( LiceM^Mil/N`Ntu+Pe%R>ci=RneioRqueRr!>$S.UcaUp{aX*a2Ab&/Acej Adu$rAfeg Aje$AmaAnc ApoAs{oAt?Av E*oEm(Epid EvoIagemIboIcicloId-%Ilog@Ind!eIploItur Iunf&Oc Ombe)OvaUnfoUque2B~ C<oDoLipaPiRboRm>quesaT` T|i&:7V 3Bigo0HaId!eIf|me3Olog@SoTigaUbu0A=InaUfru':C*aDi G o,I=,LaL-%Lid!eLo[sN)gemQu{oR<d>e)Rr(Sc~ Sil]S,u+Z Zio3A=D Ge.Ic~ L{oLhiceLu=Nce=rNdav&N( Nt[Rb&Rd!eRe?Rg}h>m`/RnizRs R%n%SpaSti=T|i&3Adu$AgemAj Atu+Br?D{aDr @ElaGaG-%Gi G| L ejoNcoNhe)NilOle)R!>tudeSi.S$Tr&V{oZ*/5A=rArG&L<%LeibolL)gemLumo,Nt!e5L$Vuz`a::D[zRope3QueRe.Rife3Ng ::Ng#Rp 3BuL?9Mb Olog@5Mbi=\";\nconst checksum = \"0x2219000926df7b50d8aa0a3d495826b988287df4657fbd100e6fe596c8f737ac\";\nlet wordlist = null;\n/**\n *  The [[link-bip39-pt]] for [mnemonic phrases](link-bip-39).\n *\n *  @_docloc: api/wordlists\n */ class LangPt extends wordlist_owl_js_1.WordlistOwl {\n    /**\n     *  Creates a new instance of the Portuguese language Wordlist.\n     *\n     *  This should be unnecessary most of the time as the exported\n     *  [[langPt]] should suffice.\n     *\n     *  @_ignore:\n     */ constructor(){\n        super(\"pt\", words, checksum);\n    }\n    /**\n     *  Returns a singleton instance of a ``LangPt``, creating it\n     *  if this is the first time being called.\n     */ static wordlist() {\n        if (wordlist == null) {\n            wordlist = new LangPt();\n        }\n        return wordlist;\n    }\n}\nexports.LangPt = LangPt; //# sourceMappingURL=lang-pt.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-pt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-zh.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wordlists/lang-zh.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LangZh = void 0;\nconst index_js_1 = __webpack_require__(/*! ../hash/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/hash/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst wordlist_js_1 = __webpack_require__(/*! ./wordlist.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist.js\");\nconst data = \"}aE#4A=Yv&co#4N#6G=cJ&SM#66|/Z#4t&kn~46#4K~4q%b9=IR#7l,mB#7W_X2*dl}Uo~7s}Uf&Iw#9c&cw~6O&H6&wx&IG%v5=IQ~8a&Pv#47$PR&50%Ko&QM&3l#5f,D9#4L|/H&tQ;v0~6n]nN<di,AM=W5%QO&ka&ua,hM^tm=zV=JA=wR&+X]7P&NB#4J#5L|/b[dA}tJ<Do&6m&u2[U1&Kb.HM&mC=w0&MW<rY,Hq#6M}QG,13&wP}Jp]Ow%ue&Kg<HP<D9~4k~9T&I2_c6$9T#9/[C5~7O~4a=cs&O7=KK=An&l9$6U$8A&uD&QI|/Y&bg}Ux&F2#6b}E2&JN&kW&kp=U/&bb=Xl<Cj}k+~5J#6L&5z&9i}b4&Fo,ho(X0_g3~4O$Fz&QE<HN=Ww]6/%GF-Vw=tj&/D&PN#9g=YO}cL&Of&PI~5I&Ip=vU=IW#9G;0o-wU}ss&QR<BT&R9=tk$PY_dh&Pq-yh]7T,nj.Xu=EP&76=cI&Fs*Xg}z7$Gb&+I=DF,AF=cA}rL#7j=Dz&3y<Aa$52=PQ}b0(iY$Fa}oL&xV#6U=ec=WZ,xh%RY<dp#9N&Fl&44=WH*A7=sh&TB&8P=07;u+&PK}uh}J5#72)V/=xC,AB$k0&f6;1E|+5=1B,3v]6n&wR%b+&xx]7f=Ol}fl;+D^wG]7E;nB;uh^Ir&l5=JL,nS=cf=g5;u6|/Q$Gc=MH%Hg#5d%M6^86=U+$Gz,l/,ir^5y&Ba&/F-IY&FI&be%IZ#77&PW_Nu$kE(Yf&NX]7Z,Jy&FJ(Xo&Nz#/d=y7&MX<Ag}Z+;nE]Dt(iG#4D=13&Pj~4c%v8&Zo%OL&/X#4W<HR&ie~6J_1O(Y2=y5=Ad*cv_eB#6k&PX:BU#7A;uk&Ft&Fx_dD=U2;vB=U5=4F}+O&GN.HH:9s=b0%NV(jO&IH=JT}Z9=VZ<Af,Kx^4m&uJ%c6,6r;9m#+L}cf%Kh&F3~4H=vP}bu,Hz|++,1w]nv}k6;uu$jw*Kl*WX&uM[x7&Fr[m7$NO&QN]hu=JN}nR^8g#/h(ps|KC;vd}xz=V0}p6&FD$G1#7K<bG_4p~8g&cf;u4=tl}+k%5/}fz;uw<cA=u1}gU}VM=LJ=eX&+L&Pr#4U}p2:nC,2K]7H:jF&9x}uX#9O=MB<fz~8X~5m&4D&kN&u5%E/(h7(ZF&VG<de(qM|/e-Wt=3x(a+,/R]f/&ND$Ro&nU}0g=KA%kH&NK$Ke<dS}cB&IX~5g$TN]6m=Uv,Is&Py=Ef%Kz#+/%bi&+A<F4$OG&4C&FL#9V<Zk=2I_eE&6c]nw&kq$HG}y+&A8$P3}OH=XP]70%IS(AJ_gH%GZ&tY&AZ=vb~6y&/r=VI=Wv<Zi=fl=xf&eL}c8}OL=MJ=g8$F7=YT}9u=0+^xC}JH&nL^N0~4T]K2,Cy%OC#6s;vG(AC^xe^cG&MF}Br#9P;wD-7h$O/&xA}Fn^PC]6i]7G&8V$Qs;vl(TB~73~4l<mW&6V=2y&uY&+3)aP}XF;LP&kx$wU=t7;uy<FN&lz)7E=Oo*Y+;wI}9q}le;J6&Ri&4t&Qr#8B=cb&vG=J5|Ql(h5<Yy~4+}QD,Lx=wn%K/&RK=dO&Pw,Q9=co%4u;9u}g0@6a^4I%b0=zo|/c&tX=dQ=OS#+b=yz_AB&wB&Pm=W9$HP_gR=62=AO=ti=hI,oA&jr&dH=tm&b6$P2(x8=zi;nG~7F;05]0n[Ix&3m}rg=Xp=cd&uz]7t;97=cN;vV<jf&FF&F1=6Q&Ik*Kk&P4,2z=fQ]7D&3u,H0=d/}Uw<ZN<7R}Kv;0f$H7,MD]7n$F0#88~9Z%da=by;+T#/u=VF&fO&kr^kf<AB]sU,I5$Ng&Pz;0i&QD&vM=Yl:BM;nJ_xJ]U7&Kf&30,3f|Z9*dC)je_jA&Q4&Kp$NH(Yz#6S&Id%Ib=KX,AD=KV%dP}tW&Pk^+E_Ni=cq,3R}VZ(Si=b+}rv;0j}rZ]uA,/w(Sx&Jv$w9&4d&wE,NJ$Gy=J/]Ls#7k<ZQ<Y/&uj]Ov$PM;v3,2F&+u:up=On&3e,Jv;90=J+&Qm]6q}bK#+d~8Y(h2]hA;99&AS=I/}qB&dQ}yJ-VM}Vl&ui,iB&G3|Dc]7d=eQ%dX%JC_1L~4d^NP;vJ&/1)ZI#7N]9X[bQ&PL=0L(UZ,Lm&kc&IR}n7(iR<AQ<dg=33=vN}ft}au]7I,Ba=x9=dR~6R&Tq=Xi,3d$Nr&Bc}DI&ku&vf]Dn,/F&iD,Ll&Nw=0y&I7=Ls=/A&tU=Qe}Ua&uk&+F=g4=gh=Vj#+1&Qn}Uy*44#5F,Pc&Rz*Xn=oh=5W;0n_Nf(iE<Y7=vr=Zu]oz#5Z%mI=kN=Bv_Jp(T2;vt_Ml<FS&uI=L/&6P]64$M7}86<bo%QX(SI%IY&VK=Al&Ux;vv;ut*E/%uh<ZE|O3,M2(yc]yu=Wk&tp:Ex}hr,Cl&WE)+Z=8U}I2_4Q,hA_si=iw=OM=tM=yZ%Ia=U7;wT}b+;uo=Za}yS!5x}HD}fb#5O_dA;Nv%uB(yB;01(Sf}Fk;v7}Pt#8v<mZ#7L,/r&Pl~4w&f5=Ph$Fw_LF&8m,bL=yJ&BH}p/*Jn}tU~5Q;wB(h6]Df]8p^+B;E4&Wc=d+;Ea&bw$8C&FN,DM=Yf}mP~5w=fT#6V=mC=Fi=AV}jB&AN}lW}aH#/D)dZ;hl;vE}/7,CJ;31&w8,hj%u9_Js=jJ&4M~8k=TN&eC}nL&uc-wi&lX}dj=Mv=e2#6u=cr$uq$6G]8W}Jb:nm=Yg<b3(UA;vX&6n&xF=KT,jC,De&R8&oY=Zv&oB]7/=Z2&Oa}bf,hh(4h^tZ&72&Nx;D2&xL~5h~40)ZG)h+=OJ&RA]Bv$yB=Oq=df,AQ%Jn}OJ;11,3z&Tl&tj;v+^Hv,Dh(id=s+]7N&N3)9Q~8f,S4=uW=w4&uX,LX&3d]CJ&yp&8x<b2_do&lP=y/<cy_dG=Oi=7R(VH(lt_1T,Iq_AA;12^6T%k6#8K[B1{oO<AU[Bt;1b$9S&Ps<8T=St{bY,jB(Zp&63&Uv$9V,PM]6v&Af}zW[bW_oq}sm}nB&Kq&gC&ff_eq_2m&5F&TI}rf}Gf;Zr_z9;ER&jk}iz_sn<BN~+n&vo=Vi%97|ZR=Wc,WE&6t]6z%85(ly#84=KY)6m_5/=aX,N3}Tm&he&6K]tR_B2-I3;u/&hU&lH<AP=iB&IA=XL;/5&Nh=wv<BH#79=vS=zl<AA=0X_RG}Bw&9p$NW,AX&kP_Lp&/Z(Tc]Mu}hs#6I}5B&cI<bq&H9#6m=K9}vH(Y1(Y0#4B&w6,/9&gG<bE,/O=zb}I4_l8<B/;wL%Qo<HO[Mq=XX}0v&BP&F4(mG}0i}nm,EC=9u{I3,xG&/9=JY*DK&hR)BX=EI=cx=b/{6k}yX%A+&wa}Xb=la;wi^lL;0t}jo&Qb=xg=XB}iO<qo{bR=NV&8f=a0&Jy;0v=uK)HK;vN#6h&jB(h/%ud&NI%wY.X7=Pt}Cu-uL&Gs_hl%mH,tm]78=Lb^Q0#7Y=1u<Bt&+Q=Co_RH,w3;1e}ux<aU;ui}U3&Q5%bt]63&UQ|0l&uL}O7&3o,AV&dm|Nj(Xt*5+(Uu&Hh(p7(UF=VR=Bp^Jl&Hd[ix)9/=Iq]C8<67]66}mB%6f}bb}JI]8T$HA}db=YM&pa=2J}tS&Y0=PS&y4=cX$6E,hX,XP&nR;04,FQ&l0&Vm_Dv#5Y~8Z=Bi%MA]6x=JO:+p,Az&9q,Hj~6/}SD=K1:EJ}nA;Qo#/E]9R,Ie&6X%W3]61&v4=xX_MC=0q;06(Xq=fs}IG}Dv=0l}o7$iZ;9v&LH&DP-7a&OY,SZ,Kz,Cv&dh=fx|Nh,F/~7q=XF&w+;9n&Gw;0h}Z7<7O&JK(S7&LS<AD<ac=wo<Dt&zw%4B=4v#8P;9o~6p*vV=Tm,Or&I6=1q}nY=P0=gq&Bl&Uu,Ch%yb}UY=zh}dh}rl(T4_xk(YA#8R*xH,IN}Jn]7V}C4&Ty}j3]7p=cL=3h&wW%Qv<Z3=f0&RI&+S(ic_zq}oN&/Y=z1;Td=LW=0e=OI(Vc,+b^ju(UL;0r:Za%8v=Rp=zw&58&73&wK}qX]6y&8E)a2}WR=wP^ur&nQ<cH}Re=Aq&wk}Q0&+q=PP,Gc|/d^k5,Fw]8Y}Pg]p3=ju=ed}r5_yf&Cs]7z$/G<Cm&Jp&54_1G_gP_Ll}JZ;0u]k8_7k(Sg]65{9i=LN&Sx&WK,iW&fD&Lk{9a}Em-9c#8N&io=sy]8d&nT&IK(lx#7/$lW(Td<s8~49,3o<7Y=MW(T+_Jr&Wd,iL}Ct=xh&5V;v4&8n%Kx=iF&l2_0B{B+,If(J0,Lv;u8=Kx-vB=HC&vS=Z6&fU&vE^xK;3D=4h=MR#45:Jw;0d}iw=LU}I5=I0]gB*im,K9}GU,1k_4U&Tt=Vs(iX&lU(TF#7y,ZO}oA&m5#5P}PN}Uz=hM<B1&FB<aG,e6~7T<tP(UQ_ZT=wu&F8)aQ]iN,1r_Lo&/g:CD}84{J1_Ki&Na&3n$jz&FE=dc;uv;va}in}ll=fv(h1&3h}fp=Cy}BM(+E~8m}lo%v7=hC(T6$cj=BQ=Bw(DR,2j=Ks,NS|F+;00=fU=70}Mb(YU;+G&m7&hr=Sk%Co]t+(X5_Jw}0r}gC(AS-IP&QK<Z2#8Q$WC]WX}T2&pG_Ka,HC=R4&/N;Z+;ch(C7,D4$3p_Mk&B2$8D=n9%Ky#5z(CT&QJ#7B]DC]gW}nf~5M;Iw#80}Tc_1F#4Z-aC}Hl=ph=fz,/3=aW}JM}nn;DG;vm}wn,4P}T3;wx&RG$u+}zK=0b;+J_Ek{re<aZ=AS}yY#5D]7q,Cp}xN=VP*2C}GZ}aG~+m_Cs=OY#6r]6g<GS}LC(UB=3A=Bo}Jy<c4}Is;1P<AG}Op<Z1}ld}nS=1Z,yM&95&98=CJ(4t:2L$Hk=Zo}Vc;+I}np&N1}9y=iv}CO*7p=jL)px]tb^zh&GS&Vl%v/;vR=14=zJ&49|/f]hF}WG;03=8P}o/&Gg&rp;DB,Kv}Ji&Pb;aA^ll(4j%yt}+K$Ht#4y&hY]7Y<F1,eN}bG(Uh%6Z]t5%G7;+F_RE;it}tL=LS&Da=Xx(S+(4f=8G=yI}cJ}WP=37=jS}pX}hd)fp<A8=Jt~+o$HJ=M6}iX=g9}CS=dv=Cj(mP%Kd,xq|+9&LD(4/=Xm&QP=Lc}LX&fL;+K=Op(lu=Qs.qC:+e&L+=Jj#8w;SL]7S(b+#4I=c1&nG_Lf&uH;+R)ZV<bV%B/,TE&0H&Jq&Ah%OF&Ss(p2,Wv&I3=Wl}Vq;1L&lJ#9b_1H=8r=b8=JH(SZ=hD=J2#7U,/U#/X~6P,FU<eL=jx,mG=hG=CE&PU=Se(qX&LY=X6=y4&tk&QQ&tf=4g&xI}W+&mZ=Dc#7w}Lg;DA;wQ_Kb(cJ=hR%yX&Yb,hw{bX_4X;EP;1W_2M}Uc=b5(YF,CM&Tp^OJ{DD]6s=vF=Yo~8q}XH}Fu%P5(SJ=Qt;MO]s8<F3&B3&8T(Ul-BS*dw&dR<87}/8]62$PZ]Lx<Au}9Q]7c=ja=KR,Go,Us&v6(qk}pG&G2=ev^GM%w4&H4]7F&dv]J6}Ew:9w=sj-ZL}Ym$+h(Ut(Um~4n=Xs(U7%eE=Qc_JR<CA#6t<Fv|/I,IS,EG<F2(Xy$/n<Fa(h9}+9_2o&N4#7X<Zq|+f_Dp=dt&na,Ca=NJ)jY=8C=YG=s6&Q+<DO}D3=xB&R1(lw;Qn<bF(Cu|/B}HV=SS&n7,10&u0]Dm%A6^4Q=WR(TD=Xo<GH,Rj(l8)bP&n/=LM&CF,F5&ml=PJ;0k=LG=tq,Rh,D6@4i=1p&+9=YC%er_Mh;nI;0q=Fw]80=xq=FM$Gv;v6&nc;wK%H2&Kj;vs,AA=YP,66}bI(qR~5U=6q~4b$Ni=K5.X3$So&Iu(p+]8G=Cf=RY(TS_O3(iH&57=fE=Dg_Do#9z#7H;FK{qd_2k%JR}en&gh_z8;Rx}9p<cN_Ne,DO;LN_7o~/p=NF=5Y}gN<ce<C1,QE]Wv=3u<BC}GK]yq}DY&u/_hj=II(pz&rC,jV&+Z}ut=NQ;Cg-SR_ZS,+o=u/;Oy_RK_QF(Fx&xP}Wr&TA,Uh&g1=yr{ax[VF$Pg(YB;Ox=Vy;+W(Sp}XV%dd&33(l/]l4#4Y}OE=6c=bw(A7&9t%wd&N/&mo,JH&Qe)fm=Ao}fu=tH\";\nconst deltaData = \"FAZDC6BALcLZCA+GBARCW8wNCcDDZ8LVFBOqqDUiou+M42TFAyERXFb7EjhP+vmBFpFrUpfDV2F7eB+eCltCHJFWLFCED+pWTojEIHFXc3aFn4F68zqjEuKidS1QBVPDEhE7NA4mhMF7oThD49ot3FgtzHFCK0acW1x8DH1EmLoIlrWFBLE+y5+NA3Cx65wJHTaEZVaK1mWAmPGxgYCdxwOjTDIt/faOEhTl1vqNsKtJCOhJWuio2g07KLZEQsFBUpNtwEByBgxFslFheFbiEPvi61msDvApxCzB6rBCzox7joYA5UdDc+Cb4FSgIabpXFAj3bjkmFAxCZE+mD/SFf/0ELecYCt3nLoxC6WEZf2tKDB4oZvrEmqFkKk7BwILA7gtYBpsTq//D4jD0F0wEB9pyQ1BD5Ba0oYHDI+sbDFhvrHXdDHfgFEIJLi5r8qercNFBgFLC4bo5ERJtamWBDFy73KCEb6M8VpmEt330ygCTK58EIIFkYgF84gtGA9Uyh3m68iVrFbWFbcbqiCYHZ9J1jeRPbL8yswhMiDbhEhdNoSwFbZrLT740ABEqgCkO8J1BLd1VhKKR4sD1yUo0z+FF59Mvg71CFbyEhbHSFBKEIKyoQNgQppq9T0KAqePu0ZFGrXOHdKJqkoTFhYvpDNyuuznrN84thJbsCoO6Cu6Xlvntvy0QYuAExQEYtTUBf3CoCqwgGFZ4u1HJFzDVwEy3cjcpV4QvsPaBC3rCGyCF23o4K3pp2gberGgFEJEHo4nHICtyKH2ZqyxhN05KBBJIQlKh/Oujv/DH32VrlqFdIFC7Fz9Ct4kaqFME0UETLprnN9kfy+kFmtQBB0+5CFu0N9Ij8l/VvJDh2oq3hT6EzjTHKFN7ZjZwoTsAZ4Exsko6Fpa6WC+sduz8jyrLpegTv2h1EBeYpLpm2czQW0KoCcS0bCVXCmuWJDBjN1nQNLdF58SFJ0h7i3pC3oEOKy/FjBklL70XvBEEIWp2yZ04xObzAWDDJG7f+DbqBEA7LyiR95j7MDVdDViz2RE5vWlBMv5e4+VfhP3aXNPhvLSynb9O2x4uFBV+3jqu6d5pCG28/sETByvmu/+IJ0L3wb4rj9DNOLBF6XPIODr4L19U9RRofAG6Nxydi8Bki8BhGJbBAJKzbJxkZSlF9Q2Cu8oKqggB9hBArwLLqEBWEtFowy8XK8bEyw9snT+BeyFk1ZCSrdmgfEwFePTgCjELBEnIbjaDDPJm36rG9pztcEzT8dGk23SBhXBB1H4z+OWze0ooFzz8pDBYFvp9j9tvFByf9y4EFdVnz026CGR5qMr7fxMHN8UUdlyJAzlTBDRC28k+L4FB8078ljyD91tUj1ocnTs8vdEf7znbzm+GIjEZnoZE5rnLL700Xc7yHfz05nWxy03vBB9YGHYOWxgMQGBCR24CVYNE1hpfKxN0zKnfJDmmMgMmBWqNbjfSyFCBWSCGCgR8yFXiHyEj+VtD1FB3FpC1zI0kFbzifiKTLm9yq5zFmur+q8FHqjoOBWsBPiDbnCC2ErunV6cJ6TygXFYHYp7MKN9RUlSIS8/xBAGYLzeqUnBF4QbsTuUkUqGs6CaiDWKWjQK9EJkjpkTmNCPYXL\";\nconst _wordlist = {\n    zh_cn: null,\n    zh_tw: null\n};\nconst Checks = {\n    zh_cn: \"0x17bcc4d8547e5a7135e365d1ab443aaae95e76d8230c2782c67305d4f21497a1\",\n    zh_tw: \"0x51e720e90c7b87bec1d70eb6e74a21a449bd3ec9c020b01d3a40ed991b60ce5d\"\n};\nconst codes = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nconst style = \"~!@#$%^&*_-=[]{}|;:,.()<>?\";\nfunction loadWords(locale) {\n    if (_wordlist[locale] != null) {\n        return _wordlist[locale];\n    }\n    const wordlist = [];\n    let deltaOffset = 0;\n    for(let i = 0; i < 2048; i++){\n        const s = style.indexOf(data[i * 3]);\n        const bytes = [\n            228 + (s >> 2),\n            128 + codes.indexOf(data[i * 3 + 1]),\n            128 + codes.indexOf(data[i * 3 + 2])\n        ];\n        if (locale === \"zh_tw\") {\n            const common = s % 4;\n            for(let i = common; i < 3; i++){\n                bytes[i] = codes.indexOf(deltaData[deltaOffset++]) + (i == 0 ? 228 : 128);\n            }\n        }\n        wordlist.push((0, index_js_2.toUtf8String)(new Uint8Array(bytes)));\n    }\n    // Verify the computed list matches the official list\n    const checksum = (0, index_js_1.id)(wordlist.join(\"\\n\") + \"\\n\");\n    /* c8 ignore start */ if (checksum !== Checks[locale]) {\n        throw new Error(`BIP39 Wordlist for ${locale} (Chinese) FAILED`);\n    }\n    /* c8 ignore stop */ _wordlist[locale] = wordlist;\n    return wordlist;\n}\nconst wordlists = {};\n/**\n *  The [[link-bip39-zh_cn]] and [[link-bip39-zh_tw]] for\n *  [mnemonic phrases](link-bip-39).\n *\n *  @_docloc: api/wordlists\n */ class LangZh extends wordlist_js_1.Wordlist {\n    /**\n     *  Creates a new instance of the Chinese language Wordlist for\n     *  the %%dialect%%, either ``\"cn\"`` or ``\"tw\"`` for simplified\n     *  or traditional, respectively.\n     *\n     *  This should be unnecessary most of the time as the exported\n     *  [[langZhCn]] and [[langZhTw]] should suffice.\n     *\n     *  @_ignore:\n     */ constructor(dialect){\n        super(\"zh_\" + dialect);\n    }\n    getWord(index) {\n        const words = loadWords(this.locale);\n        (0, index_js_2.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, \"index\", index);\n        return words[index];\n    }\n    getWordIndex(word) {\n        return loadWords(this.locale).indexOf(word);\n    }\n    split(phrase) {\n        phrase = phrase.replace(/(?:\\u3000| )+/g, \"\");\n        return phrase.split(\"\");\n    }\n    /**\n     *  Returns a singleton instance of a ``LangZh`` for %%dialect%%,\n     *  creating it if this is the first time being called.\n     *\n     *  Use the %%dialect%% ``\"cn\"`` or ``\"tw\"`` for simplified or\n     *  traditional, respectively.\n     */ static wordlist(dialect) {\n        if (wordlists[dialect] == null) {\n            wordlists[dialect] = new LangZh(dialect);\n        }\n        return wordlists[dialect];\n    }\n}\nexports.LangZh = LangZh; //# sourceMappingURL=lang-zh.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93b3JkbGlzdHMvbGFuZy16aC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHLEtBQUs7QUFDdEIsTUFBTUcsYUFBYUMsbUJBQU9BLENBQUMsZ0ZBQWtCO0FBQzdDLE1BQU1DLGFBQWFELG1CQUFPQSxDQUFDLGtGQUFtQjtBQUM5QyxNQUFNRSxnQkFBZ0JGLG1CQUFPQSxDQUFDLHFGQUFlO0FBQzdDLE1BQU1HLE9BQU87QUFDYixNQUFNQyxZQUFZO0FBQ2xCLE1BQU1DLFlBQVk7SUFDZEMsT0FBTztJQUNQQyxPQUFPO0FBQ1g7QUFDQSxNQUFNQyxTQUFTO0lBQ1hGLE9BQU87SUFDUEMsT0FBTztBQUNYO0FBQ0EsTUFBTUUsUUFBUTtBQUNkLE1BQU1DLFFBQVE7QUFDZCxTQUFTQyxVQUFVQyxNQUFNO0lBQ3JCLElBQUlQLFNBQVMsQ0FBQ08sT0FBTyxJQUFJLE1BQU07UUFDM0IsT0FBT1AsU0FBUyxDQUFDTyxPQUFPO0lBQzVCO0lBQ0EsTUFBTUMsV0FBVyxFQUFFO0lBQ25CLElBQUlDLGNBQWM7SUFDbEIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUksTUFBTUEsSUFBSztRQUMzQixNQUFNQyxJQUFJTixNQUFNTyxPQUFPLENBQUNkLElBQUksQ0FBQ1ksSUFBSSxFQUFFO1FBQ25DLE1BQU1HLFFBQVE7WUFDVixNQUFPRixDQUFBQSxLQUFLO1lBQ1osTUFBTVAsTUFBTVEsT0FBTyxDQUFDZCxJQUFJLENBQUNZLElBQUksSUFBSSxFQUFFO1lBQ25DLE1BQU1OLE1BQU1RLE9BQU8sQ0FBQ2QsSUFBSSxDQUFDWSxJQUFJLElBQUksRUFBRTtTQUN0QztRQUNELElBQUlILFdBQVcsU0FBUztZQUNwQixNQUFNTyxTQUFTSCxJQUFJO1lBQ25CLElBQUssSUFBSUQsSUFBSUksUUFBUUosSUFBSSxHQUFHQSxJQUFLO2dCQUM3QkcsS0FBSyxDQUFDSCxFQUFFLEdBQUdOLE1BQU1RLE9BQU8sQ0FBQ2IsU0FBUyxDQUFDVSxjQUFjLElBQUssTUFBTSxJQUFLLE1BQU0sR0FBRTtZQUM3RTtRQUNKO1FBQ0FELFNBQVNPLElBQUksQ0FBQyxDQUFDLEdBQUduQixXQUFXb0IsWUFBWSxFQUFFLElBQUlDLFdBQVdKO0lBQzlEO0lBQ0EscURBQXFEO0lBQ3JELE1BQU1LLFdBQVcsQ0FBQyxHQUFHeEIsV0FBV3lCLEVBQUUsRUFBRVgsU0FBU1ksSUFBSSxDQUFDLFFBQVE7SUFDMUQsbUJBQW1CLEdBQ25CLElBQUlGLGFBQWFmLE1BQU0sQ0FBQ0ksT0FBTyxFQUFFO1FBQzdCLE1BQU0sSUFBSWMsTUFBTSxDQUFDLG1CQUFtQixFQUFFZCxPQUFPLGlCQUFpQixDQUFDO0lBQ25FO0lBQ0Esa0JBQWtCLEdBQ2xCUCxTQUFTLENBQUNPLE9BQU8sR0FBR0M7SUFDcEIsT0FBT0E7QUFDWDtBQUNBLE1BQU1jLFlBQVksQ0FBQztBQUNuQjs7Ozs7Q0FLQyxHQUNELE1BQU03QixlQUFlSSxjQUFjMEIsUUFBUTtJQUN2Qzs7Ozs7Ozs7O0tBU0MsR0FDREMsWUFBWUMsT0FBTyxDQUFFO1FBQUUsS0FBSyxDQUFDLFFBQVFBO0lBQVU7SUFDL0NDLFFBQVFDLEtBQUssRUFBRTtRQUNYLE1BQU1DLFFBQVF0QixVQUFVLElBQUksQ0FBQ0MsTUFBTTtRQUNsQyxJQUFHWCxXQUFXaUMsY0FBYyxFQUFFRixTQUFTLEtBQUtBLFFBQVFDLE1BQU1FLE1BQU0sRUFBRSxDQUFDLG9CQUFvQixFQUFFSCxNQUFNLENBQUMsRUFBRSxTQUFTQTtRQUM1RyxPQUFPQyxLQUFLLENBQUNELE1BQU07SUFDdkI7SUFDQUksYUFBYUMsSUFBSSxFQUFFO1FBQ2YsT0FBTzFCLFVBQVUsSUFBSSxDQUFDQyxNQUFNLEVBQUVLLE9BQU8sQ0FBQ29CO0lBQzFDO0lBQ0FDLE1BQU1DLE1BQU0sRUFBRTtRQUNWQSxTQUFTQSxPQUFPQyxPQUFPLENBQUMsa0JBQWtCO1FBQzFDLE9BQU9ELE9BQU9ELEtBQUssQ0FBQztJQUN4QjtJQUNBOzs7Ozs7S0FNQyxHQUNELE9BQU96QixTQUFTaUIsT0FBTyxFQUFFO1FBQ3JCLElBQUlILFNBQVMsQ0FBQ0csUUFBUSxJQUFJLE1BQU07WUFDNUJILFNBQVMsQ0FBQ0csUUFBUSxHQUFHLElBQUloQyxPQUFPZ0M7UUFDcEM7UUFDQSxPQUFPSCxTQUFTLENBQUNHLFFBQVE7SUFDN0I7QUFDSjtBQUNBbEMsY0FBYyxHQUFHRSxRQUNqQixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93b3JkbGlzdHMvbGFuZy16aC5qcz80OTY1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MYW5nWmggPSB2b2lkIDA7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4uL2hhc2gvaW5kZXguanNcIik7XG5jb25zdCBpbmRleF9qc18yID0gcmVxdWlyZShcIi4uL3V0aWxzL2luZGV4LmpzXCIpO1xuY29uc3Qgd29yZGxpc3RfanNfMSA9IHJlcXVpcmUoXCIuL3dvcmRsaXN0LmpzXCIpO1xuY29uc3QgZGF0YSA9IFwifWFFIzRBPVl2JmNvIzROIzZHPWNKJlNNIzY2fC9aIzR0JmtufjQ2IzRLfjRxJWI5PUlSIzdsLG1CIzdXX1gyKmRsfVVvfjdzfVVmJkl3IzljJmN3fjZPJkg2Jnd4JklHJXY1PUlRfjhhJlB2IzQ3JFBSJjUwJUtvJlFNJjNsIzVmLEQ5IzRMfC9IJnRRO3YwfjZuXW5OPGRpLEFNPVc1JVFPJmthJnVhLGhNXnRtPXpWPUpBPXdSJitYXTdQJk5CIzRKIzVMfC9iW2RBfXRKPERvJjZtJnUyW1UxJktiLkhNJm1DPXcwJk1XPHJZLEhxIzZNfVFHLDEzJndQfUpwXU93JXVlJktnPEhQPEQ5fjRrfjlUJkkyX2M2JDlUIzkvW0M1fjdPfjRhPWNzJk83PUtLPUFuJmw5JDZVJDhBJnVEJlFJfC9ZJmJnfVV4JkYyIzZifUUyJkpOJmtXJmtwPVUvJmJiPVhsPENqfWsrfjVKIzZMJjV6JjlpfWI0JkZvLGhvKFgwX2czfjRPJEZ6JlFFPEhOPVd3XTYvJUdGLVZ3PXRqJi9EJlBOIzlnPVlPfWNMJk9mJlBJfjVJJklwPXZVPUlXIzlHOzBvLXdVfXNzJlFSPEJUJlI5PXRrJFBZX2RoJlBxLXloXTdULG5qLlh1PUVQJjc2PWNJJkZzKlhnfXo3JEdiJitJPURGLEFGPWNBfXJMIzdqPUR6JjN5PEFhJDUyPVBRfWIwKGlZJEZhfW9MJnhWIzZVPWVjPVdaLHhoJVJZPGRwIzlOJkZsJjQ0PVdIKkE3PXNoJlRCJjhQPTA3O3UrJlBLfXVofUo1IzcyKVYvPXhDLEFCJGswJmY2OzFFfCs1PTFCLDN2XTZuJndSJWIrJnh4XTdmPU9sfWZsOytEXndHXTdFO25CO3VoXklyJmw1PUpMLG5TPWNmPWc1O3U2fC9RJEdjPU1IJUhnIzVkJU02Xjg2PVUrJEd6LGwvLGlyXjV5JkJhJi9GLUlZJkZJJmJlJUlaIzc3JlBXX051JGtFKFlmJk5YXTdaLEp5JkZKKFhvJk56Iy9kPXk3Jk1YPEFnfVorO25FXUR0KGlHIzREPTEzJlBqfjRjJXY4JlpvJU9MJi9YIzRXPEhSJmllfjZKXzFPKFkyPXk1PUFkKmN2X2VCIzZrJlBYOkJVIzdBO3VrJkZ0JkZ4X2REPVUyO3ZCPVU1PTRGfStPJkdOLkhIOjlzPWIwJU5WKGpPJklIPUpUfVo5PVZaPEFmLEt4XjRtJnVKJWM2LDZyOzltIytMfWNmJUtoJkYzfjRIPXZQfWJ1LEh6fCsrLDF3XW52fWs2O3V1JGp3KktsKldYJnVNW3g3JkZyW203JE5PJlFOXWh1PUpOfW5SXjhnIy9oKHBzfEtDO3ZkfXh6PVYwfXA2JkZEJEcxIzdLPGJHXzRwfjhnJmNmO3U0PXRsfStrJTUvfWZ6O3V3PGNBPXUxfWdVfVZNPUxKPWVYJitMJlByIzRVfXAyOm5DLDJLXTdIOmpGJjl4fXVYIzlPPU1CPGZ6fjhYfjVtJjREJmtOJnU1JUUvKGg3KFpGJlZHPGRlKHFNfC9lLVd0PTN4KGErLC9SXWYvJk5EJFJvJm5VfTBnPUtBJWtIJk5LJEtlPGRTfWNCJklYfjVnJFROXTZtPVV2LElzJlB5PUVmJUt6IysvJWJpJitBPEY0JE9HJjRDJkZMIzlWPFprPTJJX2VFJjZjXW53JmtxJEhHfXkrJkE4JFAzfU9IPVhQXTcwJUlTKEFKX2dIJUdaJnRZJkFaPXZifjZ5Ji9yPVZJPVd2PFppPWZsPXhmJmVMfWM4fU9MPU1KPWc4JEY3PVlUfTl1PTArXnhDfUpIJm5MXk4wfjRUXUsyLEN5JU9DIzZzO3ZHKEFDXnhlXmNHJk1GfUJyIzlQO3dELTdoJE8vJnhBfUZuXlBDXTZpXTdHJjhWJFFzO3ZsKFRCfjczfjRsPG1XJjZWPTJ5JnVZJiszKWFQfVhGO0xQJmt4JHdVPXQ3O3V5PEZOJmx6KTdFPU9vKlkrO3dJfTlxfWxlO0o2JlJpJjR0JlFyIzhCPWNiJnZHPUo1fFFsKGg1PFl5fjQrfVFELEx4PXduJUsvJlJLPWRPJlB3LFE5PWNvJTR1Ozl1fWcwQDZhXjRJJWIwPXpvfC9jJnRYPWRRPU9TIytiPXl6X0FCJndCJlBtPVc5JEhQX2dSPTYyPUFPPXRpPWhJLG9BJmpyJmRIPXRtJmI2JFAyKHg4PXppO25HfjdGOzA1XTBuW0l4JjNtfXJnPVhwPWNkJnV6XTd0Ozk3PWNOO3ZWPGpmJkZGJkYxPTZRJklrKktrJlA0LDJ6PWZRXTdEJjN1LEgwPWQvfVV3PFpOPDdSfUt2OzBmJEg3LE1EXTduJEYwIzg4fjlaJWRhPWJ5OytUIy91PVZGJmZPJmtyXmtmPEFCXXNVLEk1JE5nJlB6OzBpJlFEJnZNPVlsOkJNO25KX3hKXVU3JktmJjMwLDNmfFo5KmRDKWplX2pBJlE0JktwJE5IKFl6IzZTJklkJUliPUtYLEFEPUtWJWRQfXRXJlBrXitFX05pPWNxLDNSfVZaKFNpPWIrfXJ2OzBqfXJaXXVBLC93KFN4Jkp2JHc5JjRkJndFLE5KJEd5PUovXUxzIzdrPFpRPFkvJnVqXU92JFBNO3YzLDJGJit1OnVwPU9uJjNlLEp2OzkwPUorJlFtXTZxfWJLIytkfjhZKGgyXWhBOzk5JkFTPUkvfXFCJmRRfXlKLVZNfVZsJnVpLGlCJkczfERjXTdkPWVRJWRYJUpDXzFMfjRkXk5QO3ZKJi8xKVpJIzdOXTlYW2JRJlBMPTBMKFVaLExtJmtjJklSfW43KGlSPEFRPGRnPTMzPXZOfWZ0fWF1XTdJLEJhPXg5PWRSfjZSJlRxPVhpLDNkJE5yJkJjfURJJmt1JnZmXURuLC9GJmlELExsJk53PTB5Jkk3PUxzPS9BJnRVPVFlfVVhJnVrJitGPWc0PWdoPVZqIysxJlFufVV5KjQ0IzVGLFBjJlJ6KlhuPW9oPTVXOzBuX05mKGlFPFk3PXZyPVp1XW96IzVaJW1JPWtOPUJ2X0pwKFQyO3Z0X01sPEZTJnVJPUwvJjZQXTY0JE03fTg2PGJvJVFYKFNJJUlZJlZLPUFsJlV4O3Z2O3V0KkUvJXVoPFpFfE8zLE0yKHljXXl1PVdrJnRwOkV4fWhyLENsJldFKStaPThVfUkyXzRRLGhBX3NpPWl3PU9NPXRNPXlaJUlhPVU3O3dUfWIrO3VvPVphfXlTITV4fUhEfWZiIzVPX2RBO052JXVCKHlCOzAxKFNmfUZrO3Y3fVB0Izh2PG1aIzdMLC9yJlBsfjR3JmY1PVBoJEZ3X0xGJjhtLGJMPXlKJkJIfXAvKkpufXRVfjVRO3dCKGg2XURmXThwXitCO0U0JldjPWQrO0VhJmJ3JDhDJkZOLERNPVlmfW1QfjV3PWZUIzZWPW1DPUZpPUFWfWpCJkFOfWxXfWFIIy9EKWRaO2hsO3ZFfS83LENKOzMxJnc4LGhqJXU5X0pzPWpKJjRNfjhrPVROJmVDfW5MJnVjLXdpJmxYfWRqPU12PWUyIzZ1PWNyJHVxJDZHXThXfUpiOm5tPVlnPGIzKFVBO3ZYJjZuJnhGPUtULGpDLERlJlI4Jm9ZPVp2Jm9CXTcvPVoyJk9hfWJmLGhoKDRoXnRaJjcyJk54O0QyJnhMfjVofjQwKVpHKWgrPU9KJlJBXUJ2JHlCPU9xPWRmLEFRJUpufU9KOzExLDN6JlRsJnRqO3YrXkh2LERoKGlkPXMrXTdOJk4zKTlRfjhmLFM0PXVXPXc0JnVYLExYJjNkXUNKJnlwJjh4PGIyX2RvJmxQPXkvPGN5X2RHPU9pPTdSKFZIKGx0XzFULElxX0FBOzEyXjZUJWs2IzhLW0Ixe29PPEFVW0J0OzFiJDlTJlBzPDhUPVN0e2JZLGpCKFpwJjYzJlV2JDlWLFBNXTZ2JkFmfXpXW2JXX29xfXNtfW5CJktxJmdDJmZmX2VxXzJtJjVGJlRJfXJmfUdmO1pyX3o5O0VSJmprfWl6X3NuPEJOfituJnZvPVZpJTk3fFpSPVdjLFdFJjZ0XTZ6JTg1KGx5Izg0PUtZKTZtXzUvPWFYLE4zfVRtJmhlJjZLXXRSX0IyLUkzO3UvJmhVJmxIPEFQPWlCJklBPVhMOy81Jk5oPXd2PEJIIzc5PXZTPXpsPEFBPTBYX1JHfUJ3JjlwJE5XLEFYJmtQX0xwJi9aKFRjXU11fWhzIzZJfTVCJmNJPGJxJkg5IzZtPUs5fXZIKFkxKFkwIzRCJnc2LC85JmdHPGJFLC9PPXpifUk0X2w4PEIvO3dMJVFvPEhPW01xPVhYfTB2JkJQJkY0KG1HfTBpfW5tLEVDPTl1e0kzLHhHJi85PUpZKkRLJmhSKUJYPUVJPWN4PWIvezZrfXlYJUErJndhfVhiPWxhO3dpXmxMOzB0fWpvJlFiPXhnPVhCfWlPPHFve2JSPU5WJjhmPWEwJkp5OzB2PXVLKUhLO3ZOIzZoJmpCKGgvJXVkJk5JJXdZLlg3PVB0fUN1LXVMJkdzX2hsJW1ILHRtXTc4PUxiXlEwIzdZPTF1PEJ0JitRPUNvX1JILHczOzFlfXV4PGFVO3VpfVUzJlE1JWJ0XTYzJlVRfDBsJnVMfU83JjNvLEFWJmRtfE5qKFh0KjUrKFV1JkhoKHA3KFVGPVZSPUJwXkpsJkhkW2l4KTkvPUlxXUM4PDY3XTY2fW1CJTZmfWJifUpJXThUJEhBfWRiPVlNJnBhPTJKfXRTJlkwPVBTJnk0PWNYJDZFLGhYLFhQJm5SOzA0LEZRJmwwJlZtX0R2IzVZfjhaPUJpJU1BXTZ4PUpPOitwLEF6JjlxLEhqfjYvfVNEPUsxOkVKfW5BO1FvIy9FXTlSLEllJjZYJVczXTYxJnY0PXhYX01DPTBxOzA2KFhxPWZzfUlHfUR2PTBsfW83JGlaOzl2JkxIJkRQLTdhJk9ZLFNaLEt6LEN2JmRoPWZ4fE5oLEYvfjdxPVhGJncrOzluJkd3OzBofVo3PDdPJkpLKFM3JkxTPEFEPGFjPXdvPER0Jnp3JTRCPTR2IzhQOzlvfjZwKnZWPVRtLE9yJkk2PTFxfW5ZPVAwPWdxJkJsJlV1LENoJXlifVVZPXpofWRofXJsKFQ0X3hrKFlBIzhSKnhILElOfUpuXTdWfUM0JlR5fWozXTdwPWNMPTNoJndXJVF2PFozPWYwJlJJJitTKGljX3pxfW9OJi9ZPXoxO1RkPUxXPTBlPU9JKFZjLCtiXmp1KFVMOzByOlphJTh2PVJwPXp3JjU4JjczJndLfXFYXTZ5JjhFKWEyfVdSPXdQXnVyJm5RPGNIfVJlPUFxJndrfVEwJitxPVBQLEdjfC9kXms1LEZ3XThZfVBnXXAzPWp1PWVkfXI1X3lmJkNzXTd6JC9HPENtJkpwJjU0XzFHX2dQX0xsfUpaOzB1XWs4XzdrKFNnXTY1ezlpPUxOJlN4JldLLGlXJmZEJkxrezlhfUVtLTljIzhOJmlvPXN5XThkJm5UJklLKGx4IzcvJGxXKFRkPHM4fjQ5LDNvPDdZPU1XKFQrX0pyJldkLGlMfUN0PXhoJjVWO3Y0JjhuJUt4PWlGJmwyXzBCe0IrLElmKEowLEx2O3U4PUt4LXZCPUhDJnZTPVo2JmZVJnZFXnhLOzNEPTRoPU1SIzQ1Okp3OzBkfWl3PUxVfUk1PUkwXWdCKmltLEs5fUdVLDFrXzRVJlR0PVZzKGlYJmxVKFRGIzd5LFpPfW9BJm01IzVQfVBOfVV6PWhNPEIxJkZCPGFHLGU2fjdUPHRQKFVRX1pUPXd1JkY4KWFRXWlOLDFyX0xvJi9nOkNEfTg0e0oxX0tpJk5hJjNuJGp6JkZFPWRjO3V2O3ZhfWlufWxsPWZ2KGgxJjNofWZwPUN5fUJNKCtFfjhtfWxvJXY3PWhDKFQ2JGNqPUJRPUJ3KERSLDJqPUtzLE5TfEYrOzAwPWZVPTcwfU1iKFlVOytHJm03JmhyPVNrJUNvXXQrKFg1X0p3fTByfWdDKEFTLUlQJlFLPFoyIzhRJFdDXVdYfVQyJnBHX0thLEhDPVI0Ji9OO1orO2NoKEM3LEQ0JDNwX01rJkIyJDhEPW45JUt5IzV6KENUJlFKIzdCXURDXWdXfW5mfjVNO0l3IzgwfVRjXzFGIzRaLWFDfUhsPXBoPWZ6LC8zPWFXfUpNfW5uO0RHO3ZtfXduLDRQfVQzO3d4JlJHJHUrfXpLPTBiOytKX0Vre3JlPGFaPUFTfXlZIzVEXTdxLENwfXhOPVZQKjJDfUdafWFHfittX0NzPU9ZIzZyXTZnPEdTfUxDKFVCPTNBPUJvfUp5PGM0fUlzOzFQPEFHfU9wPFoxfWxkfW5TPTFaLHlNJjk1Jjk4PUNKKDR0OjJMJEhrPVpvfVZjOytJfW5wJk4xfTl5PWl2fUNPKjdwPWpMKXB4XXRiXnpoJkdTJlZsJXYvO3ZSPTE0PXpKJjQ5fC9mXWhGfVdHOzAzPThQfW8vJkdnJnJwO0RCLEt2fUppJlBiO2FBXmxsKDRqJXl0fStLJEh0IzR5JmhZXTdZPEYxLGVOfWJHKFVoJTZaXXQ1JUc3OytGX1JFO2l0fXRMPUxTJkRhPVh4KFMrKDRmPThHPXlJfWNKfVdQPTM3PWpTfXBYfWhkKWZwPEE4PUp0fitvJEhKPU02fWlYPWc5fUNTPWR2PUNqKG1QJUtkLHhxfCs5JkxEKDQvPVhtJlFQPUxjfUxYJmZMOytLPU9wKGx1PVFzLnFDOitlJkwrPUpqIzh3O1NMXTdTKGIrIzRJPWMxJm5HX0xmJnVIOytSKVpWPGJWJUIvLFRFJjBIJkpxJkFoJU9GJlNzKHAyLFd2JkkzPVdsfVZxOzFMJmxKIzliXzFIPThyPWI4PUpIKFNaPWhEPUoyIzdVLC9VIy9YfjZQLEZVPGVMPWp4LG1HPWhHPUNFJlBVPVNlKHFYJkxZPVg2PXk0JnRrJlFRJnRmPTRnJnhJfVcrJm1aPURjIzd3fUxnO0RBO3dRX0tiKGNKPWhSJXlYJlliLGh3e2JYXzRYO0VQOzFXXzJNfVVjPWI1KFlGLENNJlRwXk9Ke0REXTZzPXZGPVlvfjhxfVhIfUZ1JVA1KFNKPVF0O01PXXM4PEYzJkIzJjhUKFVsLUJTKmR3JmRSPDg3fS84XTYyJFBaXUx4PEF1fTlRXTdjPWphPUtSLEdvLFVzJnY2KHFrfXBHJkcyPWV2XkdNJXc0Jkg0XTdGJmR2XUo2fUV3Ojl3PXNqLVpMfVltJCtoKFV0KFVtfjRuPVhzKFU3JWVFPVFjX0pSPENBIzZ0PEZ2fC9JLElTLEVHPEYyKFh5JC9uPEZhKGg5fSs5XzJvJk40IzdYPFpxfCtmX0RwPWR0Jm5hLENhPU5KKWpZPThDPVlHPXM2JlErPERPfUQzPXhCJlIxKGx3O1FuPGJGKEN1fC9CfUhWPVNTJm43LDEwJnUwXURtJUE2XjRRPVdSKFREPVhvPEdILFJqKGw4KWJQJm4vPUxNJkNGLEY1Jm1sPVBKOzBrPUxHPXRxLFJoLEQ2QDRpPTFwJis5PVlDJWVyX01oO25JOzBxPUZ3XTgwPXhxPUZNJEd2O3Y2Jm5jO3dLJUgyJktqO3ZzLEFBPVlQLDY2fWJJKHFSfjVVPTZxfjRiJE5pPUs1LlgzJFNvJkl1KHArXThHPUNmPVJZKFRTX08zKGlIJjU3PWZFPURnX0RvIzl6IzdIO0ZLe3FkXzJrJUpSfWVuJmdoX3o4O1J4fTlwPGNOX05lLERPO0xOXzdvfi9wPU5GPTVZfWdOPGNlPEMxLFFFXVd2PTN1PEJDfUdLXXlxfURZJnUvX2hqPUlJKHB6JnJDLGpWJitafXV0PU5RO0NnLVNSX1pTLCtvPXUvO095X1JLX1FGKEZ4JnhQfVdyJlRBLFVoJmcxPXlye2F4W1ZGJFBnKFlCO094PVZ5OytXKFNwfVhWJWRkJjMzKGwvXWw0IzRZfU9FPTZjPWJ3KEE3Jjl0JXdkJk4vJm1vLEpIJlFlKWZtPUFvfWZ1PXRIXCI7XG5jb25zdCBkZWx0YURhdGEgPSBcIkZBWkRDNkJBTGNMWkNBK0dCQVJDVzh3TkNjRERaOExWRkJPcXFEVWlvdStNNDJURkF5RVJYRmI3RWpoUCt2bUJGcEZyVXBmRFYyRjdlQitlQ2x0Q0hKRldMRkNFRCtwV1RvakVJSEZYYzNhRm40RjY4enFqRXVLaWRTMVFCVlBERWhFN05BNG1oTUY3b1RoRDQ5b3QzRmd0ekhGQ0swYWNXMXg4REgxRW1Mb0lscldGQkxFK3k1K05BM0N4NjV3SkhUYUVaVmFLMW1XQW1QR3hnWUNkeHdPalRESXQvZmFPRWhUbDF2cU5zS3RKQ09oSld1aW8yZzA3S0xaRVFzRkJVcE50d0VCeUJneEZzbEZoZUZiaUVQdmk2MW1zRHZBcHhDekI2ckJDem94N2pvWUE1VWREYytDYjRGU2dJYWJwWEZBajNiamttRkF4Q1pFK21EL1NGZi8wRUxlY1lDdDNuTG94QzZXRVpmMnRLREI0b1p2ckVtcUZrS2s3QndJTEE3Z3RZQnBzVHEvL0Q0akQwRjB3RUI5cHlRMUJENUJhMG9ZSERJK3NiREZodnJIWGRESGZnRkVJSkxpNXI4cWVyY05GQmdGTEM0Ym81RVJKdGFtV0JERnk3M0tDRWI2TThWcG1FdDMzMHlnQ1RLNThFSUlGa1lnRjg0Z3RHQTlVeWgzbTY4aVZyRmJXRmJjYnFpQ1lIWjlKMWplUlBiTDh5c3doTWlEYmhFaGROb1N3RmJackxUNzQwQUJFcWdDa084SjFCTGQxVmhLS1I0c0QxeVVvMHorRkY1OU12ZzcxQ0ZieUVoYkhTRkJLRUlLeW9RTmdRcHBxOVQwS0FxZVB1MFpGR3JYT0hkS0pxa29URmhZdnBETnl1dXpuck44NHRoSmJzQ29PNkN1Nlhsdm50dnkwUVl1QUV4UUVZdFRVQmYzQ29DcXdnR0ZaNHUxSEpGekRWd0V5M2NqY3BWNFF2c1BhQkMzckNHeUNGMjNvNEszcHAyZ2JlckdnRkVKRUhvNG5ISUN0eUtIMlpxeXhoTjA1S0JCSklRbEtoL091anYvREgzMlZybHFGZElGQzdGejlDdDRrYXFGTUUwVUVUTHBybk45a2Z5K2tGbXRRQkIwKzVDRnUwTjlJajhsL1Z2SkRoMm9xM2hUNkV6alRIS0ZON1pqWndvVHNBWjRFeHNrbzZGcGE2V0Mrc2R1ejhqeXJMcGVnVHYyaDFFQmVZcExwbTJjelFXMEtvQ2NTMGJDVlhDbXVXSkRCak4xblFOTGRGNThTRkowaDdpM3BDM29FT0t5L0ZqQmtsTDcwWHZCRUVJV3AyeVowNHhPYnpBV0RESkc3ZitEYnFCRUE3THlpUjk1ajdNRFZkRFZpejJSRTV2V2xCTXY1ZTQrVmZoUDNhWE5QaHZMU3luYjlPMng0dUZCViszanF1NmQ1cENHMjgvc0VUQnl2bXUvK0lKMEwzd2I0cmo5RE5PTEJGNlhQSU9EcjRMMTlVOVJSb2ZBRzZOeHlkaThCa2k4QmhHSmJCQUpLemJKeGtaU2xGOVEyQ3U4b0txZ2dCOWhCQXJ3TExxRUJXRXRGb3d5OFhLOGJFeXc5c25UK0JleUZrMVpDU3JkbWdmRXdGZVBUZ0NqRUxCRW5JYmphRERQSm0zNnJHOXB6dGNFelQ4ZEdrMjNTQmhYQkIxSDR6K09XemUwb29Geno4cERCWUZ2cDlqOXR2RkJ5Zjl5NEVGZFZuejAyNkNHUjVxTXI3ZnhNSE44VVVkbHlKQXpsVEJEUkMyOGsrTDRGQjgwNzhsanlEOTF0VWoxb2NuVHM4dmRFZjd6bmJ6bStHSWpFWm5vWkU1cm5MTDcwMFhjN3lIZnowNW5XeHkwM3ZCQjlZR0hZT1d4Z01RR0JDUjI0Q1ZZTkUxaHBmS3hOMHpLbmZKRG1tTWdNbUJXcU5iamZTeUZDQldTQ0dDZ1I4eUZYaUh5RWorVnREMUZCM0ZwQzF6STBrRmJ6aWZpS1RMbTl5cTV6Rm11citxOEZIcWpvT0JXc0JQaURibkNDMkVydW5WNmNKNlR5Z1hGWUhZcDdNS045UlVsU0lTOC94QkFHWUx6ZXFVbkJGNFFic1R1VWtVcUdzNkNhaURXS1dqUUs5RUpranBrVG1OQ1BZWExcIjtcbmNvbnN0IF93b3JkbGlzdCA9IHtcbiAgICB6aF9jbjogbnVsbCxcbiAgICB6aF90dzogbnVsbFxufTtcbmNvbnN0IENoZWNrcyA9IHtcbiAgICB6aF9jbjogXCIweDE3YmNjNGQ4NTQ3ZTVhNzEzNWUzNjVkMWFiNDQzYWFhZTk1ZTc2ZDgyMzBjMjc4MmM2NzMwNWQ0ZjIxNDk3YTFcIixcbiAgICB6aF90dzogXCIweDUxZTcyMGU5MGM3Yjg3YmVjMWQ3MGViNmU3NGEyMWE0NDliZDNlYzljMDIwYjAxZDNhNDBlZDk5MWI2MGNlNWRcIlxufTtcbmNvbnN0IGNvZGVzID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG5jb25zdCBzdHlsZSA9IFwifiFAIyQlXiYqXy09W117fXw7OiwuKCk8Pj9cIjtcbmZ1bmN0aW9uIGxvYWRXb3Jkcyhsb2NhbGUpIHtcbiAgICBpZiAoX3dvcmRsaXN0W2xvY2FsZV0gIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gX3dvcmRsaXN0W2xvY2FsZV07XG4gICAgfVxuICAgIGNvbnN0IHdvcmRsaXN0ID0gW107XG4gICAgbGV0IGRlbHRhT2Zmc2V0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDIwNDg7IGkrKykge1xuICAgICAgICBjb25zdCBzID0gc3R5bGUuaW5kZXhPZihkYXRhW2kgKiAzXSk7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gW1xuICAgICAgICAgICAgMjI4ICsgKHMgPj4gMiksXG4gICAgICAgICAgICAxMjggKyBjb2Rlcy5pbmRleE9mKGRhdGFbaSAqIDMgKyAxXSksXG4gICAgICAgICAgICAxMjggKyBjb2Rlcy5pbmRleE9mKGRhdGFbaSAqIDMgKyAyXSksXG4gICAgICAgIF07XG4gICAgICAgIGlmIChsb2NhbGUgPT09IFwiemhfdHdcIikge1xuICAgICAgICAgICAgY29uc3QgY29tbW9uID0gcyAlIDQ7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gY29tbW9uOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYnl0ZXNbaV0gPSBjb2Rlcy5pbmRleE9mKGRlbHRhRGF0YVtkZWx0YU9mZnNldCsrXSkgKyAoKGkgPT0gMCkgPyAyMjggOiAxMjgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdvcmRsaXN0LnB1c2goKDAsIGluZGV4X2pzXzIudG9VdGY4U3RyaW5nKShuZXcgVWludDhBcnJheShieXRlcykpKTtcbiAgICB9XG4gICAgLy8gVmVyaWZ5IHRoZSBjb21wdXRlZCBsaXN0IG1hdGNoZXMgdGhlIG9mZmljaWFsIGxpc3RcbiAgICBjb25zdCBjaGVja3N1bSA9ICgwLCBpbmRleF9qc18xLmlkKSh3b3JkbGlzdC5qb2luKFwiXFxuXCIpICsgXCJcXG5cIik7XG4gICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgaWYgKGNoZWNrc3VtICE9PSBDaGVja3NbbG9jYWxlXSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEJJUDM5IFdvcmRsaXN0IGZvciAke2xvY2FsZX0gKENoaW5lc2UpIEZBSUxFRGApO1xuICAgIH1cbiAgICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuICAgIF93b3JkbGlzdFtsb2NhbGVdID0gd29yZGxpc3Q7XG4gICAgcmV0dXJuIHdvcmRsaXN0O1xufVxuY29uc3Qgd29yZGxpc3RzID0ge307XG4vKipcbiAqICBUaGUgW1tsaW5rLWJpcDM5LXpoX2NuXV0gYW5kIFtbbGluay1iaXAzOS16aF90d11dIGZvclxuICogIFttbmVtb25pYyBwaHJhc2VzXShsaW5rLWJpcC0zOSkuXG4gKlxuICogIEBfZG9jbG9jOiBhcGkvd29yZGxpc3RzXG4gKi9cbmNsYXNzIExhbmdaaCBleHRlbmRzIHdvcmRsaXN0X2pzXzEuV29yZGxpc3Qge1xuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBDaGluZXNlIGxhbmd1YWdlIFdvcmRsaXN0IGZvclxuICAgICAqICB0aGUgJSVkaWFsZWN0JSUsIGVpdGhlciBgYFwiY25cImBgIG9yIGBgXCJ0d1wiYGAgZm9yIHNpbXBsaWZpZWRcbiAgICAgKiAgb3IgdHJhZGl0aW9uYWwsIHJlc3BlY3RpdmVseS5cbiAgICAgKlxuICAgICAqICBUaGlzIHNob3VsZCBiZSB1bm5lY2Vzc2FyeSBtb3N0IG9mIHRoZSB0aW1lIGFzIHRoZSBleHBvcnRlZFxuICAgICAqICBbW2xhbmdaaENuXV0gYW5kIFtbbGFuZ1poVHddXSBzaG91bGQgc3VmZmljZS5cbiAgICAgKlxuICAgICAqICBAX2lnbm9yZTpcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihkaWFsZWN0KSB7IHN1cGVyKFwiemhfXCIgKyBkaWFsZWN0KTsgfVxuICAgIGdldFdvcmQoaW5kZXgpIHtcbiAgICAgICAgY29uc3Qgd29yZHMgPSBsb2FkV29yZHModGhpcy5sb2NhbGUpO1xuICAgICAgICAoMCwgaW5kZXhfanNfMi5hc3NlcnRBcmd1bWVudCkoaW5kZXggPj0gMCAmJiBpbmRleCA8IHdvcmRzLmxlbmd0aCwgYGludmFsaWQgd29yZCBpbmRleDogJHtpbmRleH1gLCBcImluZGV4XCIsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHdvcmRzW2luZGV4XTtcbiAgICB9XG4gICAgZ2V0V29yZEluZGV4KHdvcmQpIHtcbiAgICAgICAgcmV0dXJuIGxvYWRXb3Jkcyh0aGlzLmxvY2FsZSkuaW5kZXhPZih3b3JkKTtcbiAgICB9XG4gICAgc3BsaXQocGhyYXNlKSB7XG4gICAgICAgIHBocmFzZSA9IHBocmFzZS5yZXBsYWNlKC8oPzpcXHUzMDAwfCApKy9nLCBcIlwiKTtcbiAgICAgICAgcmV0dXJuIHBocmFzZS5zcGxpdChcIlwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgYSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgYSBgYExhbmdaaGBgIGZvciAlJWRpYWxlY3QlJSxcbiAgICAgKiAgY3JlYXRpbmcgaXQgaWYgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSBiZWluZyBjYWxsZWQuXG4gICAgICpcbiAgICAgKiAgVXNlIHRoZSAlJWRpYWxlY3QlJSBgYFwiY25cImBgIG9yIGBgXCJ0d1wiYGAgZm9yIHNpbXBsaWZpZWQgb3JcbiAgICAgKiAgdHJhZGl0aW9uYWwsIHJlc3BlY3RpdmVseS5cbiAgICAgKi9cbiAgICBzdGF0aWMgd29yZGxpc3QoZGlhbGVjdCkge1xuICAgICAgICBpZiAod29yZGxpc3RzW2RpYWxlY3RdID09IG51bGwpIHtcbiAgICAgICAgICAgIHdvcmRsaXN0c1tkaWFsZWN0XSA9IG5ldyBMYW5nWmgoZGlhbGVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdvcmRsaXN0c1tkaWFsZWN0XTtcbiAgICB9XG59XG5leHBvcnRzLkxhbmdaaCA9IExhbmdaaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxhbmctemguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTGFuZ1poIiwiaW5kZXhfanNfMSIsInJlcXVpcmUiLCJpbmRleF9qc18yIiwid29yZGxpc3RfanNfMSIsImRhdGEiLCJkZWx0YURhdGEiLCJfd29yZGxpc3QiLCJ6aF9jbiIsInpoX3R3IiwiQ2hlY2tzIiwiY29kZXMiLCJzdHlsZSIsImxvYWRXb3JkcyIsImxvY2FsZSIsIndvcmRsaXN0IiwiZGVsdGFPZmZzZXQiLCJpIiwicyIsImluZGV4T2YiLCJieXRlcyIsImNvbW1vbiIsInB1c2giLCJ0b1V0ZjhTdHJpbmciLCJVaW50OEFycmF5IiwiY2hlY2tzdW0iLCJpZCIsImpvaW4iLCJFcnJvciIsIndvcmRsaXN0cyIsIldvcmRsaXN0IiwiY29uc3RydWN0b3IiLCJkaWFsZWN0IiwiZ2V0V29yZCIsImluZGV4Iiwid29yZHMiLCJhc3NlcnRBcmd1bWVudCIsImxlbmd0aCIsImdldFdvcmRJbmRleCIsIndvcmQiLCJzcGxpdCIsInBocmFzZSIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-zh.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist-owl.js":
/*!********************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wordlists/wordlist-owl.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Use the encode-latin.js script to create the necessary\n// data files to be consumed by this class\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WordlistOwl = void 0;\nconst index_js_1 = __webpack_require__(/*! ../hash/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/hash/index.js\");\nconst index_js_2 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\nconst decode_owl_js_1 = __webpack_require__(/*! ./decode-owl.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/decode-owl.js\");\nconst wordlist_js_1 = __webpack_require__(/*! ./wordlist.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist.js\");\n/**\n *  An OWL format Wordlist is an encoding method that exploits\n *  the general locality of alphabetically sorted words to\n *  achieve a simple but effective means of compression.\n *\n *  This class is generally not useful to most developers as\n *  it is used mainly internally to keep Wordlists for languages\n *  based on ASCII-7 small.\n *\n *  If necessary, there are tools within the ``generation/`` folder\n *  to create the necessary data.\n */ class WordlistOwl extends wordlist_js_1.Wordlist {\n    #data;\n    #checksum;\n    /**\n     *  Creates a new Wordlist for %%locale%% using the OWL %%data%%\n     *  and validated against the %%checksum%%.\n     */ constructor(locale, data, checksum){\n        super(locale);\n        this.#data = data;\n        this.#checksum = checksum;\n        this.#words = null;\n    }\n    /**\n     *  The OWL-encoded data.\n     */ get _data() {\n        return this.#data;\n    }\n    /**\n     *  Decode all the words for the wordlist.\n     */ _decodeWords() {\n        return (0, decode_owl_js_1.decodeOwl)(this.#data);\n    }\n    #words;\n    #loadWords() {\n        if (this.#words == null) {\n            const words = this._decodeWords();\n            // Verify the computed list matches the official list\n            const checksum = (0, index_js_1.id)(words.join(\"\\n\") + \"\\n\");\n            /* c8 ignore start */ if (checksum !== this.#checksum) {\n                throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);\n            }\n            /* c8 ignore stop */ this.#words = words;\n        }\n        return this.#words;\n    }\n    getWord(index) {\n        const words = this.#loadWords();\n        (0, index_js_2.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, \"index\", index);\n        return words[index];\n    }\n    getWordIndex(word) {\n        return this.#loadWords().indexOf(word);\n    }\n}\nexports.WordlistOwl = WordlistOwl; //# sourceMappingURL=wordlist-owl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93b3JkbGlzdHMvd29yZGxpc3Qtb3dsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IseURBQXlEO0FBQ3pELDBDQUEwQztBQUMxQ0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1CQUFtQixHQUFHLEtBQUs7QUFDM0IsTUFBTUcsYUFBYUMsbUJBQU9BLENBQUMsZ0ZBQWtCO0FBQzdDLE1BQU1DLGFBQWFELG1CQUFPQSxDQUFDLGtGQUFtQjtBQUM5QyxNQUFNRSxrQkFBa0JGLG1CQUFPQSxDQUFDLHlGQUFpQjtBQUNqRCxNQUFNRyxnQkFBZ0JILG1CQUFPQSxDQUFDLHFGQUFlO0FBQzdDOzs7Ozs7Ozs7OztDQVdDLEdBQ0QsTUFBTUYsb0JBQW9CSyxjQUFjQyxRQUFRO0lBQzVDLENBQUNDLElBQUksQ0FBQztJQUNOLENBQUNDLFFBQVEsQ0FBQztJQUNWOzs7S0FHQyxHQUNEQyxZQUFZQyxNQUFNLEVBQUVILElBQUksRUFBRUMsUUFBUSxDQUFFO1FBQ2hDLEtBQUssQ0FBQ0U7UUFDTixJQUFJLENBQUMsQ0FBQ0gsSUFBSSxHQUFHQTtRQUNiLElBQUksQ0FBQyxDQUFDQyxRQUFRLEdBQUdBO1FBQ2pCLElBQUksQ0FBQyxDQUFDRyxLQUFLLEdBQUc7SUFDbEI7SUFDQTs7S0FFQyxHQUNELElBQUlDLFFBQVE7UUFBRSxPQUFPLElBQUksQ0FBQyxDQUFDTCxJQUFJO0lBQUU7SUFDakM7O0tBRUMsR0FDRE0sZUFBZTtRQUNYLE9BQU8sQ0FBQyxHQUFHVCxnQkFBZ0JVLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQ1AsSUFBSTtJQUNwRDtJQUNBLENBQUNJLEtBQUssQ0FBQztJQUNQLENBQUNJLFNBQVM7UUFDTixJQUFJLElBQUksQ0FBQyxDQUFDSixLQUFLLElBQUksTUFBTTtZQUNyQixNQUFNQSxRQUFRLElBQUksQ0FBQ0UsWUFBWTtZQUMvQixxREFBcUQ7WUFDckQsTUFBTUwsV0FBVyxDQUFDLEdBQUdQLFdBQVdlLEVBQUUsRUFBRUwsTUFBTU0sSUFBSSxDQUFDLFFBQVE7WUFDdkQsbUJBQW1CLEdBQ25CLElBQUlULGFBQWEsSUFBSSxDQUFDLENBQUNBLFFBQVEsRUFBRTtnQkFDN0IsTUFBTSxJQUFJVSxNQUFNLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDUixNQUFNLENBQUMsT0FBTyxDQUFDO1lBQzlEO1lBQ0Esa0JBQWtCLEdBQ2xCLElBQUksQ0FBQyxDQUFDQyxLQUFLLEdBQUdBO1FBQ2xCO1FBQ0EsT0FBTyxJQUFJLENBQUMsQ0FBQ0EsS0FBSztJQUN0QjtJQUNBUSxRQUFRQyxLQUFLLEVBQUU7UUFDWCxNQUFNVCxRQUFRLElBQUksQ0FBQyxDQUFDSSxTQUFTO1FBQzVCLElBQUdaLFdBQVdrQixjQUFjLEVBQUVELFNBQVMsS0FBS0EsUUFBUVQsTUFBTVcsTUFBTSxFQUFFLENBQUMsb0JBQW9CLEVBQUVGLE1BQU0sQ0FBQyxFQUFFLFNBQVNBO1FBQzVHLE9BQU9ULEtBQUssQ0FBQ1MsTUFBTTtJQUN2QjtJQUNBRyxhQUFhQyxJQUFJLEVBQUU7UUFDZixPQUFPLElBQUksQ0FBQyxDQUFDVCxTQUFTLEdBQUdVLE9BQU8sQ0FBQ0Q7SUFDckM7QUFDSjtBQUNBMUIsbUJBQW1CLEdBQUdFLGFBQ3RCLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmNvbW1vbmpzL3dvcmRsaXN0cy93b3JkbGlzdC1vd2wuanM/NGZhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIFVzZSB0aGUgZW5jb2RlLWxhdGluLmpzIHNjcmlwdCB0byBjcmVhdGUgdGhlIG5lY2Vzc2FyeVxuLy8gZGF0YSBmaWxlcyB0byBiZSBjb25zdW1lZCBieSB0aGlzIGNsYXNzXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldvcmRsaXN0T3dsID0gdm9pZCAwO1xuY29uc3QgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuLi9oYXNoL2luZGV4LmpzXCIpO1xuY29uc3QgaW5kZXhfanNfMiA9IHJlcXVpcmUoXCIuLi91dGlscy9pbmRleC5qc1wiKTtcbmNvbnN0IGRlY29kZV9vd2xfanNfMSA9IHJlcXVpcmUoXCIuL2RlY29kZS1vd2wuanNcIik7XG5jb25zdCB3b3JkbGlzdF9qc18xID0gcmVxdWlyZShcIi4vd29yZGxpc3QuanNcIik7XG4vKipcbiAqICBBbiBPV0wgZm9ybWF0IFdvcmRsaXN0IGlzIGFuIGVuY29kaW5nIG1ldGhvZCB0aGF0IGV4cGxvaXRzXG4gKiAgdGhlIGdlbmVyYWwgbG9jYWxpdHkgb2YgYWxwaGFiZXRpY2FsbHkgc29ydGVkIHdvcmRzIHRvXG4gKiAgYWNoaWV2ZSBhIHNpbXBsZSBidXQgZWZmZWN0aXZlIG1lYW5zIG9mIGNvbXByZXNzaW9uLlxuICpcbiAqICBUaGlzIGNsYXNzIGlzIGdlbmVyYWxseSBub3QgdXNlZnVsIHRvIG1vc3QgZGV2ZWxvcGVycyBhc1xuICogIGl0IGlzIHVzZWQgbWFpbmx5IGludGVybmFsbHkgdG8ga2VlcCBXb3JkbGlzdHMgZm9yIGxhbmd1YWdlc1xuICogIGJhc2VkIG9uIEFTQ0lJLTcgc21hbGwuXG4gKlxuICogIElmIG5lY2Vzc2FyeSwgdGhlcmUgYXJlIHRvb2xzIHdpdGhpbiB0aGUgYGBnZW5lcmF0aW9uL2BgIGZvbGRlclxuICogIHRvIGNyZWF0ZSB0aGUgbmVjZXNzYXJ5IGRhdGEuXG4gKi9cbmNsYXNzIFdvcmRsaXN0T3dsIGV4dGVuZHMgd29yZGxpc3RfanNfMS5Xb3JkbGlzdCB7XG4gICAgI2RhdGE7XG4gICAgI2NoZWNrc3VtO1xuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3IFdvcmRsaXN0IGZvciAlJWxvY2FsZSUlIHVzaW5nIHRoZSBPV0wgJSVkYXRhJSVcbiAgICAgKiAgYW5kIHZhbGlkYXRlZCBhZ2FpbnN0IHRoZSAlJWNoZWNrc3VtJSUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobG9jYWxlLCBkYXRhLCBjaGVja3N1bSkge1xuICAgICAgICBzdXBlcihsb2NhbGUpO1xuICAgICAgICB0aGlzLiNkYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy4jY2hlY2tzdW0gPSBjaGVja3N1bTtcbiAgICAgICAgdGhpcy4jd29yZHMgPSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIE9XTC1lbmNvZGVkIGRhdGEuXG4gICAgICovXG4gICAgZ2V0IF9kYXRhKCkgeyByZXR1cm4gdGhpcy4jZGF0YTsgfVxuICAgIC8qKlxuICAgICAqICBEZWNvZGUgYWxsIHRoZSB3b3JkcyBmb3IgdGhlIHdvcmRsaXN0LlxuICAgICAqL1xuICAgIF9kZWNvZGVXb3JkcygpIHtcbiAgICAgICAgcmV0dXJuICgwLCBkZWNvZGVfb3dsX2pzXzEuZGVjb2RlT3dsKSh0aGlzLiNkYXRhKTtcbiAgICB9XG4gICAgI3dvcmRzO1xuICAgICNsb2FkV29yZHMoKSB7XG4gICAgICAgIGlmICh0aGlzLiN3b3JkcyA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCB3b3JkcyA9IHRoaXMuX2RlY29kZVdvcmRzKCk7XG4gICAgICAgICAgICAvLyBWZXJpZnkgdGhlIGNvbXB1dGVkIGxpc3QgbWF0Y2hlcyB0aGUgb2ZmaWNpYWwgbGlzdFxuICAgICAgICAgICAgY29uc3QgY2hlY2tzdW0gPSAoMCwgaW5kZXhfanNfMS5pZCkod29yZHMuam9pbihcIlxcblwiKSArIFwiXFxuXCIpO1xuICAgICAgICAgICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgICAgICAgICBpZiAoY2hlY2tzdW0gIT09IHRoaXMuI2NoZWNrc3VtKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBCSVAzOSBXb3JkbGlzdCBmb3IgJHt0aGlzLmxvY2FsZX0gRkFJTEVEYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuICAgICAgICAgICAgdGhpcy4jd29yZHMgPSB3b3JkcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy4jd29yZHM7XG4gICAgfVxuICAgIGdldFdvcmQoaW5kZXgpIHtcbiAgICAgICAgY29uc3Qgd29yZHMgPSB0aGlzLiNsb2FkV29yZHMoKTtcbiAgICAgICAgKDAsIGluZGV4X2pzXzIuYXNzZXJ0QXJndW1lbnQpKGluZGV4ID49IDAgJiYgaW5kZXggPCB3b3Jkcy5sZW5ndGgsIGBpbnZhbGlkIHdvcmQgaW5kZXg6ICR7aW5kZXh9YCwgXCJpbmRleFwiLCBpbmRleCk7XG4gICAgICAgIHJldHVybiB3b3Jkc1tpbmRleF07XG4gICAgfVxuICAgIGdldFdvcmRJbmRleCh3b3JkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNsb2FkV29yZHMoKS5pbmRleE9mKHdvcmQpO1xuICAgIH1cbn1cbmV4cG9ydHMuV29yZGxpc3RPd2wgPSBXb3JkbGlzdE93bDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdvcmRsaXN0LW93bC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJXb3JkbGlzdE93bCIsImluZGV4X2pzXzEiLCJyZXF1aXJlIiwiaW5kZXhfanNfMiIsImRlY29kZV9vd2xfanNfMSIsIndvcmRsaXN0X2pzXzEiLCJXb3JkbGlzdCIsImRhdGEiLCJjaGVja3N1bSIsImNvbnN0cnVjdG9yIiwibG9jYWxlIiwid29yZHMiLCJfZGF0YSIsIl9kZWNvZGVXb3JkcyIsImRlY29kZU93bCIsImxvYWRXb3JkcyIsImlkIiwiam9pbiIsIkVycm9yIiwiZ2V0V29yZCIsImluZGV4IiwiYXNzZXJ0QXJndW1lbnQiLCJsZW5ndGgiLCJnZXRXb3JkSW5kZXgiLCJ3b3JkIiwiaW5kZXhPZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist-owl.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist-owla.js":
/*!*********************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wordlists/wordlist-owla.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WordlistOwlA = void 0;\nconst wordlist_owl_js_1 = __webpack_require__(/*! ./wordlist-owl.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist-owl.js\");\nconst decode_owla_js_1 = __webpack_require__(/*! ./decode-owla.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/decode-owla.js\");\n/**\n *  An OWL-A format Wordlist extends the OWL format to add an\n *  overlay onto an OWL format Wordlist to support diacritic\n *  marks.\n *\n *  This class is generally not useful to most developers as\n *  it is used mainly internally to keep Wordlists for languages\n *  based on latin-1 small.\n *\n *  If necessary, there are tools within the ``generation/`` folder\n *  to create the necessary data.\n */ class WordlistOwlA extends wordlist_owl_js_1.WordlistOwl {\n    #accent;\n    /**\n     *  Creates a new Wordlist for %%locale%% using the OWLA %%data%%\n     *  and %%accent%% data and validated against the %%checksum%%.\n     */ constructor(locale, data, accent, checksum){\n        super(locale, data, checksum);\n        this.#accent = accent;\n    }\n    /**\n     *  The OWLA-encoded accent data.\n     */ get _accent() {\n        return this.#accent;\n    }\n    /**\n     *  Decode all the words for the wordlist.\n     */ _decodeWords() {\n        return (0, decode_owla_js_1.decodeOwlA)(this._data, this._accent);\n    }\n}\nexports.WordlistOwlA = WordlistOwlA; //# sourceMappingURL=wordlist-owla.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93b3JkbGlzdHMvd29yZGxpc3Qtb3dsYS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0JBQW9CLEdBQUcsS0FBSztBQUM1QixNQUFNRyxvQkFBb0JDLG1CQUFPQSxDQUFDLDZGQUFtQjtBQUNyRCxNQUFNQyxtQkFBbUJELG1CQUFPQSxDQUFDLDJGQUFrQjtBQUNuRDs7Ozs7Ozs7Ozs7Q0FXQyxHQUNELE1BQU1GLHFCQUFxQkMsa0JBQWtCRyxXQUFXO0lBQ3BELENBQUNDLE1BQU0sQ0FBQztJQUNSOzs7S0FHQyxHQUNEQyxZQUFZQyxNQUFNLEVBQUVDLElBQUksRUFBRUgsTUFBTSxFQUFFSSxRQUFRLENBQUU7UUFDeEMsS0FBSyxDQUFDRixRQUFRQyxNQUFNQztRQUNwQixJQUFJLENBQUMsQ0FBQ0osTUFBTSxHQUFHQTtJQUNuQjtJQUNBOztLQUVDLEdBQ0QsSUFBSUssVUFBVTtRQUFFLE9BQU8sSUFBSSxDQUFDLENBQUNMLE1BQU07SUFBRTtJQUNyQzs7S0FFQyxHQUNETSxlQUFlO1FBQ1gsT0FBTyxDQUFDLEdBQUdSLGlCQUFpQlMsVUFBVSxFQUFFLElBQUksQ0FBQ0MsS0FBSyxFQUFFLElBQUksQ0FBQ0gsT0FBTztJQUNwRTtBQUNKO0FBQ0FaLG9CQUFvQixHQUFHRSxjQUN2Qix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93b3JkbGlzdHMvd29yZGxpc3Qtb3dsYS5qcz82MDhmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Xb3JkbGlzdE93bEEgPSB2b2lkIDA7XG5jb25zdCB3b3JkbGlzdF9vd2xfanNfMSA9IHJlcXVpcmUoXCIuL3dvcmRsaXN0LW93bC5qc1wiKTtcbmNvbnN0IGRlY29kZV9vd2xhX2pzXzEgPSByZXF1aXJlKFwiLi9kZWNvZGUtb3dsYS5qc1wiKTtcbi8qKlxuICogIEFuIE9XTC1BIGZvcm1hdCBXb3JkbGlzdCBleHRlbmRzIHRoZSBPV0wgZm9ybWF0IHRvIGFkZCBhblxuICogIG92ZXJsYXkgb250byBhbiBPV0wgZm9ybWF0IFdvcmRsaXN0IHRvIHN1cHBvcnQgZGlhY3JpdGljXG4gKiAgbWFya3MuXG4gKlxuICogIFRoaXMgY2xhc3MgaXMgZ2VuZXJhbGx5IG5vdCB1c2VmdWwgdG8gbW9zdCBkZXZlbG9wZXJzIGFzXG4gKiAgaXQgaXMgdXNlZCBtYWlubHkgaW50ZXJuYWxseSB0byBrZWVwIFdvcmRsaXN0cyBmb3IgbGFuZ3VhZ2VzXG4gKiAgYmFzZWQgb24gbGF0aW4tMSBzbWFsbC5cbiAqXG4gKiAgSWYgbmVjZXNzYXJ5LCB0aGVyZSBhcmUgdG9vbHMgd2l0aGluIHRoZSBgYGdlbmVyYXRpb24vYGAgZm9sZGVyXG4gKiAgdG8gY3JlYXRlIHRoZSBuZWNlc3NhcnkgZGF0YS5cbiAqL1xuY2xhc3MgV29yZGxpc3RPd2xBIGV4dGVuZHMgd29yZGxpc3Rfb3dsX2pzXzEuV29yZGxpc3RPd2wge1xuICAgICNhY2NlbnQ7XG4gICAgLyoqXG4gICAgICogIENyZWF0ZXMgYSBuZXcgV29yZGxpc3QgZm9yICUlbG9jYWxlJSUgdXNpbmcgdGhlIE9XTEEgJSVkYXRhJSVcbiAgICAgKiAgYW5kICUlYWNjZW50JSUgZGF0YSBhbmQgdmFsaWRhdGVkIGFnYWluc3QgdGhlICUlY2hlY2tzdW0lJS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihsb2NhbGUsIGRhdGEsIGFjY2VudCwgY2hlY2tzdW0pIHtcbiAgICAgICAgc3VwZXIobG9jYWxlLCBkYXRhLCBjaGVja3N1bSk7XG4gICAgICAgIHRoaXMuI2FjY2VudCA9IGFjY2VudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBPV0xBLWVuY29kZWQgYWNjZW50IGRhdGEuXG4gICAgICovXG4gICAgZ2V0IF9hY2NlbnQoKSB7IHJldHVybiB0aGlzLiNhY2NlbnQ7IH1cbiAgICAvKipcbiAgICAgKiAgRGVjb2RlIGFsbCB0aGUgd29yZHMgZm9yIHRoZSB3b3JkbGlzdC5cbiAgICAgKi9cbiAgICBfZGVjb2RlV29yZHMoKSB7XG4gICAgICAgIHJldHVybiAoMCwgZGVjb2RlX293bGFfanNfMS5kZWNvZGVPd2xBKSh0aGlzLl9kYXRhLCB0aGlzLl9hY2NlbnQpO1xuICAgIH1cbn1cbmV4cG9ydHMuV29yZGxpc3RPd2xBID0gV29yZGxpc3RPd2xBO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d29yZGxpc3Qtb3dsYS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJXb3JkbGlzdE93bEEiLCJ3b3JkbGlzdF9vd2xfanNfMSIsInJlcXVpcmUiLCJkZWNvZGVfb3dsYV9qc18xIiwiV29yZGxpc3RPd2wiLCJhY2NlbnQiLCJjb25zdHJ1Y3RvciIsImxvY2FsZSIsImRhdGEiLCJjaGVja3N1bSIsIl9hY2NlbnQiLCJfZGVjb2RlV29yZHMiLCJkZWNvZGVPd2xBIiwiX2RhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist-owla.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist.js":
/*!****************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wordlists/wordlist.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Wordlist = void 0;\nconst index_js_1 = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/utils/index.js\");\n/**\n *  A Wordlist represents a collection of language-specific\n *  words used to encode and devoce [[link-bip-39]] encoded data\n *  by mapping words to 11-bit values and vice versa.\n */ class Wordlist {\n    /**\n     *  Creates a new Wordlist instance.\n     *\n     *  Sub-classes MUST call this if they provide their own constructor,\n     *  passing in the locale string of the language.\n     *\n     *  Generally there is no need to create instances of a Wordlist,\n     *  since each language-specific Wordlist creates an instance and\n     *  there is no state kept internally, so they are safe to share.\n     */ constructor(locale){\n        (0, index_js_1.defineProperties)(this, {\n            locale\n        });\n    }\n    /**\n     *  Sub-classes may override this to provide a language-specific\n     *  method for spliting %%phrase%% into individual words.\n     *\n     *  By default, %%phrase%% is split using any sequences of\n     *  white-space as defined by regular expressions (i.e. ``/\\s+/``).\n     */ split(phrase) {\n        return phrase.toLowerCase().split(/\\s+/g);\n    }\n    /**\n     *  Sub-classes may override this to provider a language-specific\n     *  method for joining %%words%% into a phrase.\n     *\n     *  By default, %%words%% are joined by a single space.\n     */ join(words) {\n        return words.join(\" \");\n    }\n}\nexports.Wordlist = Wordlist; //# sourceMappingURL=wordlist.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93b3JkbGlzdHMvd29yZGxpc3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdCQUFnQixHQUFHLEtBQUs7QUFDeEIsTUFBTUcsYUFBYUMsbUJBQU9BLENBQUMsa0ZBQW1CO0FBQzlDOzs7O0NBSUMsR0FDRCxNQUFNRjtJQUVGOzs7Ozs7Ozs7S0FTQyxHQUNERyxZQUFZQyxNQUFNLENBQUU7UUFDZixJQUFHSCxXQUFXSSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUU7WUFBRUQ7UUFBTztJQUNwRDtJQUNBOzs7Ozs7S0FNQyxHQUNERSxNQUFNQyxNQUFNLEVBQUU7UUFDVixPQUFPQSxPQUFPQyxXQUFXLEdBQUdGLEtBQUssQ0FBQztJQUN0QztJQUNBOzs7OztLQUtDLEdBQ0RHLEtBQUtDLEtBQUssRUFBRTtRQUNSLE9BQU9BLE1BQU1ELElBQUksQ0FBQztJQUN0QjtBQUNKO0FBQ0FYLGdCQUFnQixHQUFHRSxVQUNuQixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93b3JkbGlzdHMvd29yZGxpc3QuanM/ZmJkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV29yZGxpc3QgPSB2b2lkIDA7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4uL3V0aWxzL2luZGV4LmpzXCIpO1xuLyoqXG4gKiAgQSBXb3JkbGlzdCByZXByZXNlbnRzIGEgY29sbGVjdGlvbiBvZiBsYW5ndWFnZS1zcGVjaWZpY1xuICogIHdvcmRzIHVzZWQgdG8gZW5jb2RlIGFuZCBkZXZvY2UgW1tsaW5rLWJpcC0zOV1dIGVuY29kZWQgZGF0YVxuICogIGJ5IG1hcHBpbmcgd29yZHMgdG8gMTEtYml0IHZhbHVlcyBhbmQgdmljZSB2ZXJzYS5cbiAqL1xuY2xhc3MgV29yZGxpc3Qge1xuICAgIGxvY2FsZTtcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyBXb3JkbGlzdCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqICBTdWItY2xhc3NlcyBNVVNUIGNhbGwgdGhpcyBpZiB0aGV5IHByb3ZpZGUgdGhlaXIgb3duIGNvbnN0cnVjdG9yLFxuICAgICAqICBwYXNzaW5nIGluIHRoZSBsb2NhbGUgc3RyaW5nIG9mIHRoZSBsYW5ndWFnZS5cbiAgICAgKlxuICAgICAqICBHZW5lcmFsbHkgdGhlcmUgaXMgbm8gbmVlZCB0byBjcmVhdGUgaW5zdGFuY2VzIG9mIGEgV29yZGxpc3QsXG4gICAgICogIHNpbmNlIGVhY2ggbGFuZ3VhZ2Utc3BlY2lmaWMgV29yZGxpc3QgY3JlYXRlcyBhbiBpbnN0YW5jZSBhbmRcbiAgICAgKiAgdGhlcmUgaXMgbm8gc3RhdGUga2VwdCBpbnRlcm5hbGx5LCBzbyB0aGV5IGFyZSBzYWZlIHRvIHNoYXJlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxvY2FsZSkge1xuICAgICAgICAoMCwgaW5kZXhfanNfMS5kZWZpbmVQcm9wZXJ0aWVzKSh0aGlzLCB7IGxvY2FsZSB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFN1Yi1jbGFzc2VzIG1heSBvdmVycmlkZSB0aGlzIHRvIHByb3ZpZGUgYSBsYW5ndWFnZS1zcGVjaWZpY1xuICAgICAqICBtZXRob2QgZm9yIHNwbGl0aW5nICUlcGhyYXNlJSUgaW50byBpbmRpdmlkdWFsIHdvcmRzLlxuICAgICAqXG4gICAgICogIEJ5IGRlZmF1bHQsICUlcGhyYXNlJSUgaXMgc3BsaXQgdXNpbmcgYW55IHNlcXVlbmNlcyBvZlxuICAgICAqICB3aGl0ZS1zcGFjZSBhcyBkZWZpbmVkIGJ5IHJlZ3VsYXIgZXhwcmVzc2lvbnMgKGkuZS4gYGAvXFxzKy9gYCkuXG4gICAgICovXG4gICAgc3BsaXQocGhyYXNlKSB7XG4gICAgICAgIHJldHVybiBwaHJhc2UudG9Mb3dlckNhc2UoKS5zcGxpdCgvXFxzKy9nKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFN1Yi1jbGFzc2VzIG1heSBvdmVycmlkZSB0aGlzIHRvIHByb3ZpZGVyIGEgbGFuZ3VhZ2Utc3BlY2lmaWNcbiAgICAgKiAgbWV0aG9kIGZvciBqb2luaW5nICUld29yZHMlJSBpbnRvIGEgcGhyYXNlLlxuICAgICAqXG4gICAgICogIEJ5IGRlZmF1bHQsICUld29yZHMlJSBhcmUgam9pbmVkIGJ5IGEgc2luZ2xlIHNwYWNlLlxuICAgICAqL1xuICAgIGpvaW4od29yZHMpIHtcbiAgICAgICAgcmV0dXJuIHdvcmRzLmpvaW4oXCIgXCIpO1xuICAgIH1cbn1cbmV4cG9ydHMuV29yZGxpc3QgPSBXb3JkbGlzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdvcmRsaXN0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIldvcmRsaXN0IiwiaW5kZXhfanNfMSIsInJlcXVpcmUiLCJjb25zdHJ1Y3RvciIsImxvY2FsZSIsImRlZmluZVByb3BlcnRpZXMiLCJzcGxpdCIsInBocmFzZSIsInRvTG93ZXJDYXNlIiwiam9pbiIsIndvcmRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlist.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlists.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ethers/lib.commonjs/wordlists/wordlists.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.wordlists = void 0;\nconst lang_cz_js_1 = __webpack_require__(/*! ./lang-cz.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-cz.js\");\nconst lang_en_js_1 = __webpack_require__(/*! ./lang-en.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-en.js\");\nconst lang_es_js_1 = __webpack_require__(/*! ./lang-es.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-es.js\");\nconst lang_fr_js_1 = __webpack_require__(/*! ./lang-fr.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-fr.js\");\nconst lang_ja_js_1 = __webpack_require__(/*! ./lang-ja.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-ja.js\");\nconst lang_ko_js_1 = __webpack_require__(/*! ./lang-ko.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-ko.js\");\nconst lang_it_js_1 = __webpack_require__(/*! ./lang-it.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-it.js\");\nconst lang_pt_js_1 = __webpack_require__(/*! ./lang-pt.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-pt.js\");\nconst lang_zh_js_1 = __webpack_require__(/*! ./lang-zh.js */ \"(rsc)/./node_modules/ethers/lib.commonjs/wordlists/lang-zh.js\");\n/**\n *  The available Wordlists by their\n *  [ISO 639-1 Language Code](link-wiki-iso639).\n *\n *  (**i.e.** [cz](LangCz), [en](LangEn), [es](LangEs), [fr](LangFr),\n *  [ja](LangJa), [ko](LangKo), [it](LangIt), [pt](LangPt),\n *  [zh_cn](LangZh), [zh_tw](LangZh))\n *\n *  The dist files (in the ``/dist`` folder) have had all languages\n *  except English stripped out, which reduces the library size by\n *  about 80kb. If required, they are available by importing the\n *  included ``wordlists-extra.min.js`` file.\n */ exports.wordlists = {\n    cz: lang_cz_js_1.LangCz.wordlist(),\n    en: lang_en_js_1.LangEn.wordlist(),\n    es: lang_es_js_1.LangEs.wordlist(),\n    fr: lang_fr_js_1.LangFr.wordlist(),\n    it: lang_it_js_1.LangIt.wordlist(),\n    pt: lang_pt_js_1.LangPt.wordlist(),\n    ja: lang_ja_js_1.LangJa.wordlist(),\n    ko: lang_ko_js_1.LangKo.wordlist(),\n    zh_cn: lang_zh_js_1.LangZh.wordlist(\"cn\"),\n    zh_tw: lang_zh_js_1.LangZh.wordlist(\"tw\")\n}; //# sourceMappingURL=wordlists.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5jb21tb25qcy93b3JkbGlzdHMvd29yZGxpc3RzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBRyxLQUFLO0FBQ3pCLE1BQU1HLGVBQWVDLG1CQUFPQSxDQUFDLG1GQUFjO0FBQzNDLE1BQU1DLGVBQWVELG1CQUFPQSxDQUFDLG1GQUFjO0FBQzNDLE1BQU1FLGVBQWVGLG1CQUFPQSxDQUFDLG1GQUFjO0FBQzNDLE1BQU1HLGVBQWVILG1CQUFPQSxDQUFDLG1GQUFjO0FBQzNDLE1BQU1JLGVBQWVKLG1CQUFPQSxDQUFDLG1GQUFjO0FBQzNDLE1BQU1LLGVBQWVMLG1CQUFPQSxDQUFDLG1GQUFjO0FBQzNDLE1BQU1NLGVBQWVOLG1CQUFPQSxDQUFDLG1GQUFjO0FBQzNDLE1BQU1PLGVBQWVQLG1CQUFPQSxDQUFDLG1GQUFjO0FBQzNDLE1BQU1RLGVBQWVSLG1CQUFPQSxDQUFDLG1GQUFjO0FBQzNDOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNESixpQkFBaUIsR0FBRztJQUNoQmEsSUFBSVYsYUFBYVcsTUFBTSxDQUFDQyxRQUFRO0lBQ2hDQyxJQUFJWCxhQUFhWSxNQUFNLENBQUNGLFFBQVE7SUFDaENHLElBQUlaLGFBQWFhLE1BQU0sQ0FBQ0osUUFBUTtJQUNoQ0ssSUFBSWIsYUFBYWMsTUFBTSxDQUFDTixRQUFRO0lBQ2hDTyxJQUFJWixhQUFhYSxNQUFNLENBQUNSLFFBQVE7SUFDaENTLElBQUliLGFBQWFjLE1BQU0sQ0FBQ1YsUUFBUTtJQUNoQ1csSUFBSWxCLGFBQWFtQixNQUFNLENBQUNaLFFBQVE7SUFDaENhLElBQUluQixhQUFhb0IsTUFBTSxDQUFDZCxRQUFRO0lBQ2hDZSxPQUFPbEIsYUFBYW1CLE1BQU0sQ0FBQ2hCLFFBQVEsQ0FBQztJQUNwQ2lCLE9BQU9wQixhQUFhbUIsTUFBTSxDQUFDaEIsUUFBUSxDQUFDO0FBQ3hDLEdBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuY29tbW9uanMvd29yZGxpc3RzL3dvcmRsaXN0cy5qcz9lOTE5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy53b3JkbGlzdHMgPSB2b2lkIDA7XG5jb25zdCBsYW5nX2N6X2pzXzEgPSByZXF1aXJlKFwiLi9sYW5nLWN6LmpzXCIpO1xuY29uc3QgbGFuZ19lbl9qc18xID0gcmVxdWlyZShcIi4vbGFuZy1lbi5qc1wiKTtcbmNvbnN0IGxhbmdfZXNfanNfMSA9IHJlcXVpcmUoXCIuL2xhbmctZXMuanNcIik7XG5jb25zdCBsYW5nX2ZyX2pzXzEgPSByZXF1aXJlKFwiLi9sYW5nLWZyLmpzXCIpO1xuY29uc3QgbGFuZ19qYV9qc18xID0gcmVxdWlyZShcIi4vbGFuZy1qYS5qc1wiKTtcbmNvbnN0IGxhbmdfa29fanNfMSA9IHJlcXVpcmUoXCIuL2xhbmcta28uanNcIik7XG5jb25zdCBsYW5nX2l0X2pzXzEgPSByZXF1aXJlKFwiLi9sYW5nLWl0LmpzXCIpO1xuY29uc3QgbGFuZ19wdF9qc18xID0gcmVxdWlyZShcIi4vbGFuZy1wdC5qc1wiKTtcbmNvbnN0IGxhbmdfemhfanNfMSA9IHJlcXVpcmUoXCIuL2xhbmctemguanNcIik7XG4vKipcbiAqICBUaGUgYXZhaWxhYmxlIFdvcmRsaXN0cyBieSB0aGVpclxuICogIFtJU08gNjM5LTEgTGFuZ3VhZ2UgQ29kZV0obGluay13aWtpLWlzbzYzOSkuXG4gKlxuICogICgqKmkuZS4qKiBbY3pdKExhbmdDeiksIFtlbl0oTGFuZ0VuKSwgW2VzXShMYW5nRXMpLCBbZnJdKExhbmdGciksXG4gKiAgW2phXShMYW5nSmEpLCBba29dKExhbmdLbyksIFtpdF0oTGFuZ0l0KSwgW3B0XShMYW5nUHQpLFxuICogIFt6aF9jbl0oTGFuZ1poKSwgW3poX3R3XShMYW5nWmgpKVxuICpcbiAqICBUaGUgZGlzdCBmaWxlcyAoaW4gdGhlIGBgL2Rpc3RgYCBmb2xkZXIpIGhhdmUgaGFkIGFsbCBsYW5ndWFnZXNcbiAqICBleGNlcHQgRW5nbGlzaCBzdHJpcHBlZCBvdXQsIHdoaWNoIHJlZHVjZXMgdGhlIGxpYnJhcnkgc2l6ZSBieVxuICogIGFib3V0IDgwa2IuIElmIHJlcXVpcmVkLCB0aGV5IGFyZSBhdmFpbGFibGUgYnkgaW1wb3J0aW5nIHRoZVxuICogIGluY2x1ZGVkIGBgd29yZGxpc3RzLWV4dHJhLm1pbi5qc2BgIGZpbGUuXG4gKi9cbmV4cG9ydHMud29yZGxpc3RzID0ge1xuICAgIGN6OiBsYW5nX2N6X2pzXzEuTGFuZ0N6LndvcmRsaXN0KCksXG4gICAgZW46IGxhbmdfZW5fanNfMS5MYW5nRW4ud29yZGxpc3QoKSxcbiAgICBlczogbGFuZ19lc19qc18xLkxhbmdFcy53b3JkbGlzdCgpLFxuICAgIGZyOiBsYW5nX2ZyX2pzXzEuTGFuZ0ZyLndvcmRsaXN0KCksXG4gICAgaXQ6IGxhbmdfaXRfanNfMS5MYW5nSXQud29yZGxpc3QoKSxcbiAgICBwdDogbGFuZ19wdF9qc18xLkxhbmdQdC53b3JkbGlzdCgpLFxuICAgIGphOiBsYW5nX2phX2pzXzEuTGFuZ0phLndvcmRsaXN0KCksXG4gICAga286IGxhbmdfa29fanNfMS5MYW5nS28ud29yZGxpc3QoKSxcbiAgICB6aF9jbjogbGFuZ196aF9qc18xLkxhbmdaaC53b3JkbGlzdChcImNuXCIpLFxuICAgIHpoX3R3OiBsYW5nX3poX2pzXzEuTGFuZ1poLndvcmRsaXN0KFwidHdcIiksXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d29yZGxpc3RzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIndvcmRsaXN0cyIsImxhbmdfY3pfanNfMSIsInJlcXVpcmUiLCJsYW5nX2VuX2pzXzEiLCJsYW5nX2VzX2pzXzEiLCJsYW5nX2ZyX2pzXzEiLCJsYW5nX2phX2pzXzEiLCJsYW5nX2tvX2pzXzEiLCJsYW5nX2l0X2pzXzEiLCJsYW5nX3B0X2pzXzEiLCJsYW5nX3poX2pzXzEiLCJjeiIsIkxhbmdDeiIsIndvcmRsaXN0IiwiZW4iLCJMYW5nRW4iLCJlcyIsIkxhbmdFcyIsImZyIiwiTGFuZ0ZyIiwiaXQiLCJMYW5nSXQiLCJwdCIsIkxhbmdQdCIsImphIiwiTGFuZ0phIiwia28iLCJMYW5nS28iLCJ6aF9jbiIsIkxhbmdaaCIsInpoX3R3Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/lib.commonjs/wordlists/wordlists.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/@adraffy/ens-normalize/dist/index.cjs":
/*!********************************************************************************!*\
  !*** ./node_modules/ethers/node_modules/@adraffy/ens-normalize/dist/index.cjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// created 2023-09-12T22:05:14.211Z\n// compressed base64-encoded blob for include-ens data\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\n// see: https://github.com/adraffy/ens-normalize.js#security\n// SHA-256: 0565ed049b9cf1614bb9e11ba7d8ac6a6fb96c893253d890f7e2b2884b9ded32\nvar COMPRESSED$1 = \"\";\nconst FENCED = new Map([\n    [\n        8217,\n        \"apostrophe\"\n    ],\n    [\n        8260,\n        \"fraction slash\"\n    ],\n    [\n        12539,\n        \"middle dot\"\n    ]\n]);\nconst NSM_MAX = 4;\nfunction decode_arithmetic(bytes) {\n    let pos = 0;\n    function u16() {\n        return bytes[pos++] << 8 | bytes[pos++];\n    }\n    // decode the frequency table\n    let symbol_count = u16();\n    let total = 1;\n    let acc = [\n        0,\n        1\n    ]; // first symbol has frequency 1\n    for(let i = 1; i < symbol_count; i++){\n        acc.push(total += u16());\n    }\n    // skip the sized-payload that the last 3 symbols index into\n    let skip = u16();\n    let pos_payload = pos;\n    pos += skip;\n    let read_width = 0;\n    let read_buffer = 0;\n    function read_bit() {\n        if (read_width == 0) {\n            // this will read beyond end of buffer\n            // but (undefined|0) => zero pad\n            read_buffer = read_buffer << 8 | bytes[pos++];\n            read_width = 8;\n        }\n        return read_buffer >> --read_width & 1;\n    }\n    const N = 31;\n    const FULL = 2 ** N;\n    const HALF = FULL >>> 1;\n    const QRTR = HALF >> 1;\n    const MASK = FULL - 1;\n    // fill register\n    let register = 0;\n    for(let i = 0; i < N; i++)register = register << 1 | read_bit();\n    let symbols = [];\n    let low = 0;\n    let range = FULL; // treat like a float\n    while(true){\n        let value = Math.floor(((register - low + 1) * total - 1) / range);\n        let start = 0;\n        let end = symbol_count;\n        while(end - start > 1){\n            let mid = start + end >>> 1;\n            if (value < acc[mid]) {\n                end = mid;\n            } else {\n                start = mid;\n            }\n        }\n        if (start == 0) break; // first symbol is end mark\n        symbols.push(start);\n        let a = low + Math.floor(range * acc[start] / total);\n        let b = low + Math.floor(range * acc[start + 1] / total) - 1;\n        while(((a ^ b) & HALF) == 0){\n            register = register << 1 & MASK | read_bit();\n            a = a << 1 & MASK;\n            b = b << 1 & MASK | 1;\n        }\n        while(a & ~b & QRTR){\n            register = register & HALF | register << 1 & MASK >>> 1 | read_bit();\n            a = a << 1 ^ HALF;\n            b = (b ^ HALF) << 1 | HALF | 1;\n        }\n        low = a;\n        range = 1 + b - a;\n    }\n    let offset = symbol_count - 4;\n    return symbols.map((x)=>{\n        switch(x - offset){\n            case 3:\n                return offset + 0x10100 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);\n            case 2:\n                return offset + 0x100 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);\n            case 1:\n                return offset + bytes[pos_payload++];\n            default:\n                return x - 1;\n        }\n    });\n}\n// returns an iterator which returns the next symbol\nfunction read_payload(v) {\n    let pos = 0;\n    return ()=>v[pos++];\n}\nfunction read_compressed_payload(s) {\n    return read_payload(decode_arithmetic(unsafe_atob(s)));\n}\n// unsafe in the sense:\n// expected well-formed Base64 w/o padding \n// 20220922: added for https://github.com/adraffy/ens-normalize.js/issues/4\nfunction unsafe_atob(s) {\n    let lookup = [];\n    [\n        ...\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n    ].forEach((c, i)=>lookup[c.charCodeAt(0)] = i);\n    let n = s.length;\n    let ret = new Uint8Array(6 * n >> 3);\n    for(let i = 0, pos = 0, width = 0, carry = 0; i < n; i++){\n        carry = carry << 6 | lookup[s.charCodeAt(i)];\n        width += 6;\n        if (width >= 8) {\n            ret[pos++] = carry >> (width -= 8);\n        }\n    }\n    return ret;\n}\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\nfunction signed(i) {\n    return i & 1 ? ~i >> 1 : i >> 1;\n}\nfunction read_deltas(n, next) {\n    let v = Array(n);\n    for(let i = 0, x = 0; i < n; i++)v[i] = x += signed(next());\n    return v;\n}\n// [123][5] => [0 3] [1 1] [0 0]\nfunction read_sorted(next, prev = 0) {\n    let ret = [];\n    while(true){\n        let x = next();\n        let n = next();\n        if (!n) break;\n        prev += x;\n        for(let i = 0; i < n; i++){\n            ret.push(prev + i);\n        }\n        prev += n + 1;\n    }\n    return ret;\n}\nfunction read_sorted_arrays(next) {\n    return read_array_while(()=>{\n        let v = read_sorted(next);\n        if (v.length) return v;\n    });\n}\n// returns map of x => ys\nfunction read_mapped(next) {\n    let ret = [];\n    while(true){\n        let w = next();\n        if (w == 0) break;\n        ret.push(read_linear_table(w, next));\n    }\n    while(true){\n        let w = next() - 1;\n        if (w < 0) break;\n        ret.push(read_replacement_table(w, next));\n    }\n    return ret.flat();\n}\n// read until next is falsy\n// return array of read values\nfunction read_array_while(next) {\n    let v = [];\n    while(true){\n        let x = next(v.length);\n        if (!x) break;\n        v.push(x);\n    }\n    return v;\n}\n// read w columns of length n\n// return as n rows of length w\nfunction read_transposed(n, w, next) {\n    let m = Array(n).fill().map(()=>[]);\n    for(let i = 0; i < w; i++){\n        read_deltas(n, next).forEach((x, j)=>m[j].push(x));\n    }\n    return m;\n}\n// returns [[x, ys], [x+dx, ys+dy], [x+2*dx, ys+2*dy], ...]\n// where dx/dy = steps, n = run size, w = length of y\nfunction read_linear_table(w, next) {\n    let dx = 1 + next();\n    let dy = next();\n    let vN = read_array_while(next);\n    let m = read_transposed(vN.length, 1 + w, next);\n    return m.flatMap((v, i)=>{\n        let [x, ...ys] = v;\n        return Array(vN[i]).fill().map((_, j)=>{\n            let j_dy = j * dy;\n            return [\n                x + j * dx,\n                ys.map((y)=>y + j_dy)\n            ];\n        });\n    });\n}\n// return [[x, ys...], ...]\n// where w = length of y\nfunction read_replacement_table(w, next) {\n    let n = 1 + next();\n    let m = read_transposed(n, 1 + w, next);\n    return m.map((v)=>[\n            v[0],\n            v.slice(1)\n        ]);\n}\nfunction read_trie(next) {\n    let ret = [];\n    let sorted = read_sorted(next);\n    expand(decode([]), []);\n    return ret; // not sorted\n    function decode(Q) {\n        let S = next(); // state: valid, save, check\n        let B = read_array_while(()=>{\n            let cps = read_sorted(next).map((i)=>sorted[i]);\n            if (cps.length) return decode(cps);\n        });\n        return {\n            S,\n            B,\n            Q\n        };\n    }\n    function expand({ S, B }, cps, saved) {\n        if (S & 4 && saved === cps[cps.length - 1]) return;\n        if (S & 2) saved = cps[cps.length - 1];\n        if (S & 1) ret.push(cps);\n        for (let br of B){\n            for (let cp of br.Q){\n                expand(br, [\n                    ...cps,\n                    cp\n                ], saved);\n            }\n        }\n    }\n}\nfunction hex_cp(cp) {\n    return cp.toString(16).toUpperCase().padStart(2, \"0\");\n}\nfunction quote_cp(cp) {\n    return `{${hex_cp(cp)}}`; // raffy convention: like \"\\u{X}\" w/o the \"\\u\"\n}\n/*\r\nexport function explode_cp(s) {\r\n\treturn [...s].map(c => c.codePointAt(0));\r\n}\r\n*/ function explode_cp(s) {\n    let cps = [];\n    for(let pos = 0, len = s.length; pos < len;){\n        let cp = s.codePointAt(pos);\n        pos += cp < 0x10000 ? 1 : 2;\n        cps.push(cp);\n    }\n    return cps;\n}\nfunction str_from_cps(cps) {\n    const chunk = 4096;\n    let len = cps.length;\n    if (len < chunk) return String.fromCodePoint(...cps);\n    let buf = [];\n    for(let i = 0; i < len;){\n        buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));\n    }\n    return buf.join(\"\");\n}\nfunction compare_arrays(a, b) {\n    let n = a.length;\n    let c = n - b.length;\n    for(let i = 0; c == 0 && i < n; i++)c = a[i] - b[i];\n    return c;\n}\n// created 2023-09-12T22:05:14.211Z\n// compressed base64-encoded blob for include-nf data\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\n// see: https://github.com/adraffy/ens-normalize.js#security\n// SHA-256: a974b6f8541fc29d919bc85118af0a44015851fab5343f8679cb31be2bdb209e\nvar COMPRESSED = \"AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g\";\n// https://unicode.org/reports/tr15/\n// for reference implementation\n// see: /derive/nf.js\n// algorithmic hangul\n// https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf (page 144)\nconst S0 = 0xAC00;\nconst L0 = 0x1100;\nconst V0 = 0x1161;\nconst T0 = 0x11A7;\nconst L_COUNT = 19;\nconst V_COUNT = 21;\nconst T_COUNT = 28;\nconst N_COUNT = V_COUNT * T_COUNT;\nconst S_COUNT = L_COUNT * N_COUNT;\nconst S1 = S0 + S_COUNT;\nconst L1 = L0 + L_COUNT;\nconst V1 = V0 + V_COUNT;\nconst T1 = T0 + T_COUNT;\nfunction unpack_cc(packed) {\n    return packed >> 24 & 0xFF;\n}\nfunction unpack_cp(packed) {\n    return packed & 0xFFFFFF;\n}\nlet SHIFTED_RANK, EXCLUSIONS, DECOMP, RECOMP;\nfunction init$1() {\n    //console.time('nf');\n    let r = read_compressed_payload(COMPRESSED);\n    SHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i)=>v.map((x)=>[\n                x,\n                i + 1 << 24\n            ]))); // pre-shifted\n    EXCLUSIONS = new Set(read_sorted(r));\n    DECOMP = new Map();\n    RECOMP = new Map();\n    for (let [cp, cps] of read_mapped(r)){\n        if (!EXCLUSIONS.has(cp) && cps.length == 2) {\n            let [a, b] = cps;\n            let bucket = RECOMP.get(a);\n            if (!bucket) {\n                bucket = new Map();\n                RECOMP.set(a, bucket);\n            }\n            bucket.set(b, cp);\n        }\n        DECOMP.set(cp, cps.reverse()); // stored reversed\n    }\n//console.timeEnd('nf');\n// 20230905: 11ms\n}\nfunction is_hangul(cp) {\n    return cp >= S0 && cp < S1;\n}\nfunction compose_pair(a, b) {\n    if (a >= L0 && a < L1 && b >= V0 && b < V1) {\n        return S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;\n    } else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) {\n        return a + (b - T0);\n    } else {\n        let recomp = RECOMP.get(a);\n        if (recomp) {\n            recomp = recomp.get(b);\n            if (recomp) {\n                return recomp;\n            }\n        }\n        return -1;\n    }\n}\nfunction decomposed(cps) {\n    if (!SHIFTED_RANK) init$1();\n    let ret = [];\n    let buf = [];\n    let check_order = false;\n    function add(cp) {\n        let cc = SHIFTED_RANK.get(cp);\n        if (cc) {\n            check_order = true;\n            cp |= cc;\n        }\n        ret.push(cp);\n    }\n    for (let cp of cps){\n        while(true){\n            if (cp < 0x80) {\n                ret.push(cp);\n            } else if (is_hangul(cp)) {\n                let s_index = cp - S0;\n                let l_index = s_index / N_COUNT | 0;\n                let v_index = s_index % N_COUNT / T_COUNT | 0;\n                let t_index = s_index % T_COUNT;\n                add(L0 + l_index);\n                add(V0 + v_index);\n                if (t_index > 0) add(T0 + t_index);\n            } else {\n                let mapped = DECOMP.get(cp);\n                if (mapped) {\n                    buf.push(...mapped);\n                } else {\n                    add(cp);\n                }\n            }\n            if (!buf.length) break;\n            cp = buf.pop();\n        }\n    }\n    if (check_order && ret.length > 1) {\n        let prev_cc = unpack_cc(ret[0]);\n        for(let i = 1; i < ret.length; i++){\n            let cc = unpack_cc(ret[i]);\n            if (cc == 0 || prev_cc <= cc) {\n                prev_cc = cc;\n                continue;\n            }\n            let j = i - 1;\n            while(true){\n                let tmp = ret[j + 1];\n                ret[j + 1] = ret[j];\n                ret[j] = tmp;\n                if (!j) break;\n                prev_cc = unpack_cc(ret[--j]);\n                if (prev_cc <= cc) break;\n            }\n            prev_cc = unpack_cc(ret[i]);\n        }\n    }\n    return ret;\n}\nfunction composed_from_decomposed(v) {\n    let ret = [];\n    let stack = [];\n    let prev_cp = -1;\n    let prev_cc = 0;\n    for (let packed of v){\n        let cc = unpack_cc(packed);\n        let cp = unpack_cp(packed);\n        if (prev_cp == -1) {\n            if (cc == 0) {\n                prev_cp = cp;\n            } else {\n                ret.push(cp);\n            }\n        } else if (prev_cc > 0 && prev_cc >= cc) {\n            if (cc == 0) {\n                ret.push(prev_cp, ...stack);\n                stack.length = 0;\n                prev_cp = cp;\n            } else {\n                stack.push(cp);\n            }\n            prev_cc = cc;\n        } else {\n            let composed = compose_pair(prev_cp, cp);\n            if (composed >= 0) {\n                prev_cp = composed;\n            } else if (prev_cc == 0 && cc == 0) {\n                ret.push(prev_cp);\n                prev_cp = cp;\n            } else {\n                stack.push(cp);\n                prev_cc = cc;\n            }\n        }\n    }\n    if (prev_cp >= 0) {\n        ret.push(prev_cp, ...stack);\n    }\n    return ret;\n}\n// note: cps can be iterable\nfunction nfd(cps) {\n    return decomposed(cps).map(unpack_cp);\n}\nfunction nfc(cps) {\n    return composed_from_decomposed(decomposed(cps));\n}\nconst HYPHEN = 0x2D;\nconst STOP = 0x2E;\nconst STOP_CH = \".\";\nconst FE0F = 0xFE0F;\nconst UNIQUE_PH = 1;\n// 20230913: replace [...v] with Array_from(v) to avoid large spreads\nconst Array_from = (x)=>Array.from(x); // Array.from.bind(Array);\nfunction group_has_cp(g, cp) {\n    // 20230913: keep primary and secondary distinct instead of creating valid union\n    return g.P.has(cp) || g.Q.has(cp);\n}\nclass Emoji extends Array {\n    get is_emoji() {\n        return true;\n    }\n}\nlet MAPPED, IGNORED, CM, NSM, ESCAPE, NFC_CHECK, GROUPS, WHOLE_VALID, WHOLE_MAP, VALID, EMOJI_LIST, EMOJI_ROOT;\nfunction init() {\n    if (MAPPED) return;\n    let r = read_compressed_payload(COMPRESSED$1);\n    const read_sorted_array = ()=>read_sorted(r);\n    const read_sorted_set = ()=>new Set(read_sorted_array());\n    MAPPED = new Map(read_mapped(r));\n    IGNORED = read_sorted_set(); // ignored characters are not valid, so just read raw codepoints\n    /*\r\n\t// direct include from payload is smaller than the decompression code\r\n\tconst FENCED = new Map(read_array_while(() => {\r\n\t\tlet cp = r();\r\n\t\tif (cp) return [cp, read_str(r())];\r\n\t}));\r\n\t*/ // 20230217: we still need all CM for proper error formatting\n    // but norm only needs NSM subset that are potentially-valid\n    CM = read_sorted_array();\n    NSM = new Set(read_sorted_array().map((i)=>CM[i]));\n    CM = new Set(CM);\n    ESCAPE = read_sorted_set(); // characters that should not be printed\n    NFC_CHECK = read_sorted_set(); // only needed to illustrate ens_tokenize() transformations\n    let chunks = read_sorted_arrays(r);\n    let unrestricted = r();\n    const read_chunked = ()=>new Set(read_sorted_array().flatMap((i)=>chunks[i]).concat(read_sorted_array()));\n    GROUPS = read_array_while((i)=>{\n        // minifier property mangling seems unsafe\n        // so these are manually renamed to single chars\n        let N = read_array_while(r).map((x)=>x + 0x60);\n        if (N.length) {\n            let R = i >= unrestricted; // first arent restricted\n            N[0] -= 32; // capitalize\n            N = str_from_cps(N);\n            if (R) N = `Restricted[${N}]`;\n            let P = read_chunked(); // primary\n            let Q = read_chunked(); // secondary\n            let M = !r(); // not-whitelisted, check for NSM\n            // *** this code currently isn't needed ***\n            /*\r\n\t\t\tlet V = [...P, ...Q].sort((a, b) => a-b); // derive: sorted valid\r\n\t\t\tlet M = r()-1; // number of combining mark\r\n\t\t\tif (M < 0) { // whitelisted\r\n\t\t\t\tM = new Map(read_array_while(() => {\r\n\t\t\t\t\tlet i = r();\r\n\t\t\t\t\tif (i) return [V[i-1], read_array_while(() => {\r\n\t\t\t\t\t\tlet v = read_array_while(r);\r\n\t\t\t\t\t\tif (v.length) return v.map(x => x-1);\r\n\t\t\t\t\t})];\r\n\t\t\t\t}));\r\n\t\t\t}*/ return {\n                N,\n                P,\n                Q,\n                M,\n                R\n            };\n        }\n    });\n    // decode compressed wholes\n    WHOLE_VALID = read_sorted_set();\n    WHOLE_MAP = new Map();\n    let wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b)=>a - b); // must be sorted\n    wholes.forEach((cp, i)=>{\n        let d = r();\n        let w = wholes[i] = d ? wholes[i - d] : {\n            V: [],\n            M: new Map()\n        };\n        w.V.push(cp); // add to member set\n        if (!WHOLE_VALID.has(cp)) {\n            WHOLE_MAP.set(cp, w); // register with whole map\n        }\n    });\n    // compute confusable-extent complements\n    for (let { V, M } of new Set(WHOLE_MAP.values())){\n        // connect all groups that have each whole character\n        let recs = [];\n        for (let cp of V){\n            let gs = GROUPS.filter((g)=>group_has_cp(g, cp));\n            let rec = recs.find(({ G })=>gs.some((g)=>G.has(g)));\n            if (!rec) {\n                rec = {\n                    G: new Set(),\n                    V: []\n                };\n                recs.push(rec);\n            }\n            rec.V.push(cp);\n            gs.forEach((g)=>rec.G.add(g));\n        }\n        // per character cache groups which are not a member of the extent\n        let union = recs.flatMap((x)=>Array_from(x.G));\n        for (let { G, V } of recs){\n            let complement = new Set(union.filter((g)=>!G.has(g)));\n            for (let cp of V){\n                M.set(cp, complement);\n            }\n        }\n    }\n    // compute valid set\n    let union = new Set(); // exists in 1+ groups\n    let multi = new Set(); // exists in 2+ groups\n    const add_to_union = (cp)=>union.has(cp) ? multi.add(cp) : union.add(cp);\n    for (let g of GROUPS){\n        for (let cp of g.P)add_to_union(cp);\n        for (let cp of g.Q)add_to_union(cp);\n    }\n    // dual purpose WHOLE_MAP: return placeholder if unique non-confusable\n    for (let cp of union){\n        if (!WHOLE_MAP.has(cp) && !multi.has(cp)) {\n            WHOLE_MAP.set(cp, UNIQUE_PH);\n        }\n    }\n    VALID = new Set(Array_from(union).concat(Array_from(nfd(union)))); // possibly valid\n    // decode emoji\n    // 20230719: emoji are now fully-expanded to avoid quirk logic \n    EMOJI_LIST = read_trie(r).map((v)=>Emoji.from(v)).sort(compare_arrays);\n    EMOJI_ROOT = new Map(); // this has approx 7K nodes (2+ per emoji)\n    for (let cps of EMOJI_LIST){\n        // 20230719: change to *slightly* stricter algorithm which disallows \n        // insertion of misplaced FE0F in emoji sequences (matching ENSIP-15)\n        // example: beautified [A B] (eg. flag emoji) \n        //  before: allow: [A FE0F B], error: [A FE0F FE0F B] \n        //   after: error: both\n        // note: this code now matches ENSNormalize.{cs,java} logic\n        let prev = [\n            EMOJI_ROOT\n        ];\n        for (let cp of cps){\n            let next = prev.map((node)=>{\n                let child = node.get(cp);\n                if (!child) {\n                    // should this be object? \n                    // (most have 1-2 items, few have many)\n                    // 20230719: no, v8 default map is 4?\n                    child = new Map();\n                    node.set(cp, child);\n                }\n                return child;\n            });\n            if (cp === FE0F) {\n                prev.push(...next); // less than 20 elements\n            } else {\n                prev = next;\n            }\n        }\n        for (let x of prev){\n            x.V = cps;\n        }\n    }\n}\n// if escaped: {HEX}\n//       else: \"x\" {HEX}\nfunction quoted_cp(cp) {\n    return (should_escape(cp) ? \"\" : `${bidi_qq(safe_str_from_cps([\n        cp\n    ]))} `) + quote_cp(cp);\n}\n// 20230211: some messages can be mixed-directional and result in spillover\n// use 200E after a quoted string to force the remainder of a string from \n// acquring the direction of the quote\n// https://www.w3.org/International/questions/qa-bidi-unicode-controls#exceptions\nfunction bidi_qq(s) {\n    return `\"${s}\"\\u200E`; // strong LTR\n}\nfunction check_label_extension(cps) {\n    if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {\n        throw new Error(`invalid label extension: \"${str_from_cps(cps.slice(0, 4))}\"`);\n    }\n}\nfunction check_leading_underscore(cps) {\n    const UNDERSCORE = 0x5F;\n    for(let i = cps.lastIndexOf(UNDERSCORE); i > 0;){\n        if (cps[--i] !== UNDERSCORE) {\n            throw new Error(\"underscore allowed only at start\");\n        }\n    }\n}\n// check that a fenced cp is not leading, trailing, or touching another fenced cp\nfunction check_fenced(cps) {\n    let cp = cps[0];\n    let prev = FENCED.get(cp);\n    if (prev) throw error_placement(`leading ${prev}`);\n    let n = cps.length;\n    let last = -1; // prevents trailing from throwing\n    for(let i = 1; i < n; i++){\n        cp = cps[i];\n        let match = FENCED.get(cp);\n        if (match) {\n            // since cps[0] isn't fenced, cps[1] cannot throw\n            if (last == i) throw error_placement(`${prev} + ${match}`);\n            last = i + 1;\n            prev = match;\n        }\n    }\n    if (last == n) throw error_placement(`trailing ${prev}`);\n}\n// create a safe to print string \n// invisibles are escaped\n// leading cm uses placeholder\n// quoter(cp) => string, eg. 3000 => \"{3000}\"\n// note: in html, you'd call this function then replace [<>&] with entities\nfunction safe_str_from_cps(cps, quoter = quote_cp) {\n    //if (Number.isInteger(cps)) cps = [cps];\n    //if (!Array.isArray(cps)) throw new TypeError(`expected codepoints`);\n    let buf = [];\n    if (is_combining_mark(cps[0])) buf.push(\"◌\");\n    let prev = 0;\n    let n = cps.length;\n    for(let i = 0; i < n; i++){\n        let cp = cps[i];\n        if (should_escape(cp)) {\n            buf.push(str_from_cps(cps.slice(prev, i)));\n            buf.push(quoter(cp));\n            prev = i + 1;\n        }\n    }\n    buf.push(str_from_cps(cps.slice(prev, n)));\n    return buf.join(\"\");\n}\n// note: set(s) cannot be exposed because they can be modified\n// note: Object.freeze() doesn't work\nfunction is_combining_mark(cp) {\n    init();\n    return CM.has(cp);\n}\nfunction should_escape(cp) {\n    init();\n    return ESCAPE.has(cp);\n}\n// return all supported emoji as fully-qualified emoji \n// ordered by length then lexicographic \nfunction ens_emoji() {\n    init();\n    return EMOJI_LIST.map((x)=>x.slice()); // emoji are exposed so copy\n}\nfunction ens_normalize_fragment(frag, decompose) {\n    init();\n    let nf = decompose ? nfd : nfc;\n    return frag.split(STOP_CH).map((label)=>str_from_cps(tokens_from_str(explode_cp(label), nf, filter_fe0f).flat())).join(STOP_CH);\n}\nfunction ens_normalize(name) {\n    return flatten(split(name, nfc, filter_fe0f));\n}\nfunction ens_beautify(name) {\n    let labels = split(name, nfc, (x)=>x); // emoji not exposed\n    for (let { type, output, error } of labels){\n        if (error) break; // flatten will throw\n        // replace leading/trailing hyphen\n        // 20230121: consider beautifing all or leading/trailing hyphen to unicode variant\n        // not exactly the same in every font, but very similar: \"-\" vs \"‐\"\n        /*\r\n\t\tconst UNICODE_HYPHEN = 0x2010;\r\n\t\t// maybe this should replace all for visual consistancy?\r\n\t\t// `node tools/reg-count.js regex ^-\\{2,\\}` => 592\r\n\t\t//for (let i = 0; i < output.length; i++) if (output[i] == 0x2D) output[i] = 0x2010;\r\n\t\tif (output[0] == HYPHEN) output[0] = UNICODE_HYPHEN;\r\n\t\tlet end = output.length-1;\r\n\t\tif (output[end] == HYPHEN) output[end] = UNICODE_HYPHEN;\r\n\t\t*/ // 20230123: WHATWG URL uses \"CheckHyphens\" false\n        // https://url.spec.whatwg.org/#idna\n        // update ethereum symbol\n        // ξ => Ξ if not greek\n        if (type !== \"Greek\") {\n            let prev = 0;\n            while(true){\n                let next = output.indexOf(0x3BE, prev);\n                if (next < 0) break;\n                output[next] = 0x39E;\n                prev = next + 1;\n            }\n        }\n    // 20221213: fixes bidi subdomain issue, but breaks invariant (200E is disallowed)\n    // could be fixed with special case for: 2D (.) + 200E (LTR)\n    // https://discuss.ens.domains/t/bidi-label-ordering-spoof/15824\n    //output.splice(0, 0, 0x200E);\n    }\n    return flatten(labels);\n}\nfunction ens_split(name, preserve_emoji) {\n    return split(name, nfc, preserve_emoji ? (x)=>x.slice() : filter_fe0f); // emoji are exposed so copy\n}\nfunction split(name, nf, ef) {\n    if (!name) return []; // 20230719: empty name allowance\n    init();\n    let offset = 0;\n    // https://unicode.org/reports/tr46/#Validity_Criteria\n    // 4.) \"The label must not contain a U+002E ( . ) FULL STOP.\"\n    return name.split(STOP_CH).map((label)=>{\n        let input = explode_cp(label);\n        let info = {\n            input,\n            offset\n        };\n        offset += input.length + 1; // + stop\n        try {\n            // 1.) \"The label must be in Unicode Normalization Form NFC\"\n            let tokens = info.tokens = tokens_from_str(input, nf, ef);\n            let token_count = tokens.length;\n            let type;\n            if (!token_count) {\n                //norm = [];\n                //type = 'None'; // use this instead of next match, \"ASCII\"\n                // 20230120: change to strict\n                // https://discuss.ens.domains/t/ens-name-normalization-2nd/14564/59\n                throw new Error(`empty label`);\n            }\n            let norm = info.output = tokens.flat();\n            check_leading_underscore(norm);\n            let emoji = info.emoji = token_count > 1 || tokens[0].is_emoji; // same as: tokens.some(x => x.is_emoji);\n            if (!emoji && norm.every((cp)=>cp < 0x80)) {\n                // 20230123: matches matches WHATWG, see note 3.3\n                check_label_extension(norm); // only needed for ascii\n                // cant have fenced\n                // cant have cm\n                // cant have wholes\n                // see derive: \"Fastpath ASCII\"\n                type = \"ASCII\";\n            } else {\n                let chars = tokens.flatMap((x)=>x.is_emoji ? [] : x); // all of the nfc tokens concat together\n                if (!chars.length) {\n                    type = \"Emoji\";\n                } else {\n                    // 5.) \"The label must not begin with a combining mark, that is: General_Category=Mark.\"\n                    if (CM.has(norm[0])) throw error_placement(\"leading combining mark\");\n                    for(let i = 1; i < token_count; i++){\n                        let cps = tokens[i];\n                        if (!cps.is_emoji && CM.has(cps[0])) {\n                            // bidi_qq() not needed since emoji is LTR and cps is a CM\n                            throw error_placement(`emoji + combining mark: \"${str_from_cps(tokens[i - 1])} + ${safe_str_from_cps([\n                                cps[0]\n                            ])}\"`);\n                        }\n                    }\n                    check_fenced(norm);\n                    let unique = Array_from(new Set(chars));\n                    let [g] = determine_group(unique); // take the first match\n                    // see derive: \"Matching Groups have Same CM Style\"\n                    // alternative: could form a hybrid type: Latin/Japanese/...\t\n                    check_group(g, chars); // need text in order\n                    check_whole(g, unique); // only need unique text (order would be required for multiple-char confusables)\n                    type = g.N;\n                // 20230121: consider exposing restricted flag\n                // it's simpler to just check for 'Restricted'\n                // or even better: type.endsWith(']')\n                //if (g.R) info.restricted = true;\n                }\n            }\n            info.type = type;\n        } catch (err) {\n            info.error = err; // use full error object\n        }\n        return info;\n    });\n}\nfunction check_whole(group, unique) {\n    let maker;\n    let shared = [];\n    for (let cp of unique){\n        let whole = WHOLE_MAP.get(cp);\n        if (whole === UNIQUE_PH) return; // unique, non-confusable\n        if (whole) {\n            let set = whole.M.get(cp); // groups which have a character that look-like this character\n            maker = maker ? maker.filter((g)=>set.has(g)) : Array_from(set);\n            if (!maker.length) return; // confusable intersection is empty\n        } else {\n            shared.push(cp);\n        }\n    }\n    if (maker) {\n        // we have 1+ confusable\n        // check if any of the remaining groups\n        // contain the shared characters too\n        for (let g of maker){\n            if (shared.every((cp)=>group_has_cp(g, cp))) {\n                throw new Error(`whole-script confusable: ${group.N}/${g.N}`);\n            }\n        }\n    }\n}\n// assumption: unique.size > 0\n// returns list of matching groups\nfunction determine_group(unique) {\n    let groups = GROUPS;\n    for (let cp of unique){\n        // note: we need to dodge CM that are whitelisted\n        // but that code isn't currently necessary\n        let gs = groups.filter((g)=>group_has_cp(g, cp));\n        if (!gs.length) {\n            if (!GROUPS.some((g)=>group_has_cp(g, cp))) {\n                // the character was composed of valid parts\n                // but it's NFC form is invalid\n                // 20230716: change to more exact statement, see: ENSNormalize.{cs,java}\n                // note: this doesn't have to be a composition\n                // 20230720: change to full check\n                throw error_disallowed(cp); // this should be rare\n            } else {\n                // there is no group that contains all these characters\n                // throw using the highest priority group that matched\n                // https://www.unicode.org/reports/tr39/#mixed_script_confusables\n                throw error_group_member(groups[0], cp);\n            }\n        }\n        groups = gs;\n        if (gs.length == 1) break; // there is only one group left\n    }\n    // there are at least 1 group(s) with all of these characters\n    return groups;\n}\n// throw on first error\nfunction flatten(split) {\n    return split.map(({ input, error, output })=>{\n        if (error) {\n            // don't print label again if just a single label\n            let msg = error.message;\n            // bidi_qq() only necessary if msg is digits\n            throw new Error(split.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input))}: ${msg}`);\n        }\n        return str_from_cps(output);\n    }).join(STOP_CH);\n}\nfunction error_disallowed(cp) {\n    // TODO: add cp to error?\n    return new Error(`disallowed character: ${quoted_cp(cp)}`);\n}\nfunction error_group_member(g, cp) {\n    let quoted = quoted_cp(cp);\n    let gg = GROUPS.find((g)=>g.P.has(cp)); // only check primary\n    if (gg) {\n        quoted = `${gg.N} ${quoted}`;\n    }\n    return new Error(`illegal mixture: ${g.N} + ${quoted}`);\n}\nfunction error_placement(where) {\n    return new Error(`illegal placement: ${where}`);\n}\n// assumption: cps.length > 0\n// assumption: cps[0] isn't a CM\n// assumption: the previous character isn't an emoji\nfunction check_group(g, cps) {\n    for (let cp of cps){\n        if (!group_has_cp(g, cp)) {\n            // for whitelisted scripts, this will throw illegal mixture on invalid cm, eg. \"e{300}{300}\"\n            // at the moment, it's unnecessary to introduce an extra error type\n            // until there exists a whitelisted multi-character\n            //   eg. if (M < 0 && is_combining_mark(cp)) { ... }\n            // there are 3 cases:\n            //   1. illegal cm for wrong group => mixture error\n            //   2. illegal cm for same group => cm error\n            //       requires set of whitelist cm per group: \n            //        eg. new Set([...g.P, ...g.Q].flatMap(nfc).filter(cp => CM.has(cp)))\n            //   3. wrong group => mixture error\n            throw error_group_member(g, cp);\n        }\n    }\n    //if (M >= 0) { // we have a known fixed cm count\n    if (g.M) {\n        let decomposed = nfd(cps);\n        for(let i = 1, e = decomposed.length; i < e; i++){\n            // 20230210: bugfix: using cps instead of decomposed h/t Carbon225\n            /*\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: ${g.N} ${bidi_qq(str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t\t*/ // 20230217: switch to NSM counting\n            // https://www.unicode.org/reports/tr39/#Optional_Detection\n            if (NSM.has(decomposed[i])) {\n                let j = i + 1;\n                for(let cp; j < e && NSM.has(cp = decomposed[j]); j++){\n                    // a. Forbid sequences of the same nonspacing mark.\n                    for(let k = i; k < j; k++){\n                        if (decomposed[k] == cp) {\n                            throw new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);\n                        }\n                    }\n                }\n                // parse to end so we have full nsm count\n                // b. Forbid sequences of more than 4 nonspacing marks (gc=Mn or gc=Me).\n                if (j - i > NSM_MAX) {\n                    // note: this slice starts with a base char or spacing-mark cm\n                    throw new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed.slice(i - 1, j)))} (${j - i}/${NSM_MAX})`);\n                }\n                i = j;\n            }\n        }\n    }\n// *** this code currently isn't needed ***\n/*\r\n\tlet cm_whitelist = M instanceof Map;\r\n\tfor (let i = 0, e = cps.length; i < e; ) {\r\n\t\tlet cp = cps[i++];\r\n\t\tlet seqs = cm_whitelist && M.get(cp);\r\n\t\tif (seqs) { \r\n\t\t\t// list of codepoints that can follow\r\n\t\t\t// if this exists, this will always be 1+\r\n\t\t\tlet j = i;\r\n\t\t\twhile (j < e && CM.has(cps[j])) j++;\r\n\t\t\tlet cms = cps.slice(i, j);\r\n\t\t\tlet match = seqs.find(seq => !compare_arrays(seq, cms));\r\n\t\t\tif (!match) throw new Error(`disallowed combining mark sequence: \"${safe_str_from_cps([cp, ...cms])}\"`);\r\n\t\t\ti = j;\r\n\t\t} else if (!V.has(cp)) {\r\n\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\tlet quoted = quoted_cp(cp);\r\n\t\t\tfor (let cp of cps) {\r\n\t\t\t\tlet u = UNIQUE.get(cp);\r\n\t\t\t\tif (u && u !== g) {\r\n\t\t\t\t\t// if both scripts are restricted this error is confusing\r\n\t\t\t\t\t// because we don't differentiate RestrictedA from RestrictedB \r\n\t\t\t\t\tif (!u.R) quoted = `${quoted} is ${u.N}`;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow new Error(`disallowed ${g.N} character: ${quoted}`);\r\n\t\t\t//throw new Error(`disallowed character: ${quoted} (expected ${g.N})`);\r\n\t\t\t//throw new Error(`${g.N} does not allow: ${quoted}`);\r\n\t\t}\r\n\t}\r\n\tif (!cm_whitelist) {\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // we know it can't be cm leading\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: \"${str_from_cps(decomposed.slice(i-1, j))}\" (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t*/ }\n// given a list of codepoints\n// returns a list of lists, where emoji are a fully-qualified (as Array subclass)\n// eg. explode_cp(\"abc💩d\") => [[61, 62, 63], Emoji[1F4A9, FE0F], [64]]\n// 20230818: rename for 'process' name collision h/t Javarome\n// https://github.com/adraffy/ens-normalize.js/issues/23\nfunction tokens_from_str(input, nf, ef) {\n    let ret = [];\n    let chars = [];\n    input = input.slice().reverse(); // flip so we can pop\n    while(input.length){\n        let emoji = consume_emoji_reversed(input);\n        if (emoji) {\n            if (chars.length) {\n                ret.push(nf(chars));\n                chars = [];\n            }\n            ret.push(ef(emoji));\n        } else {\n            let cp = input.pop();\n            if (VALID.has(cp)) {\n                chars.push(cp);\n            } else {\n                let cps = MAPPED.get(cp);\n                if (cps) {\n                    chars.push(...cps); // less than 10 elements\n                } else if (!IGNORED.has(cp)) {\n                    // 20230912: unicode 15.1 changed the order of processing such that\n                    // disallowed parts are only rejected after NFC\n                    // https://unicode.org/reports/tr46/#Validity_Criteria\n                    // this doesn't impact normalization as of today\n                    // technically, this error can be removed as the group logic will apply similar logic\n                    // however the error type might be less clear\n                    throw error_disallowed(cp);\n                }\n            }\n        }\n    }\n    if (chars.length) {\n        ret.push(nf(chars));\n    }\n    return ret;\n}\nfunction filter_fe0f(cps) {\n    return cps.filter((cp)=>cp != FE0F);\n}\n// given array of codepoints\n// returns the longest valid emoji sequence (or undefined if no match)\n// *MUTATES* the supplied array\n// disallows interleaved ignored characters\n// fills (optional) eaten array with matched codepoints\nfunction consume_emoji_reversed(cps, eaten) {\n    let node = EMOJI_ROOT;\n    let emoji;\n    let pos = cps.length;\n    while(pos){\n        node = node.get(cps[--pos]);\n        if (!node) break;\n        let { V } = node;\n        if (V) {\n            emoji = V;\n            if (eaten) eaten.push(...cps.slice(pos).reverse()); // (optional) copy input, used for ens_tokenize()\n            cps.length = pos; // truncate\n        }\n    }\n    return emoji;\n}\n// ************************************************************\n// tokenizer \nconst TY_VALID = \"valid\";\nconst TY_MAPPED = \"mapped\";\nconst TY_IGNORED = \"ignored\";\nconst TY_DISALLOWED = \"disallowed\";\nconst TY_EMOJI = \"emoji\";\nconst TY_NFC = \"nfc\";\nconst TY_STOP = \"stop\";\nfunction ens_tokenize(name, { nf = true } = {}) {\n    init();\n    let input = explode_cp(name).reverse();\n    let eaten = [];\n    let tokens = [];\n    while(input.length){\n        let emoji = consume_emoji_reversed(input, eaten);\n        if (emoji) {\n            tokens.push({\n                type: TY_EMOJI,\n                emoji: emoji.slice(),\n                input: eaten,\n                cps: filter_fe0f(emoji)\n            });\n            eaten = []; // reset buffer\n        } else {\n            let cp = input.pop();\n            if (cp == STOP) {\n                tokens.push({\n                    type: TY_STOP,\n                    cp\n                });\n            } else if (VALID.has(cp)) {\n                tokens.push({\n                    type: TY_VALID,\n                    cps: [\n                        cp\n                    ]\n                });\n            } else if (IGNORED.has(cp)) {\n                tokens.push({\n                    type: TY_IGNORED,\n                    cp\n                });\n            } else {\n                let cps = MAPPED.get(cp);\n                if (cps) {\n                    tokens.push({\n                        type: TY_MAPPED,\n                        cp,\n                        cps: cps.slice()\n                    });\n                } else {\n                    tokens.push({\n                        type: TY_DISALLOWED,\n                        cp\n                    });\n                }\n            }\n        }\n    }\n    if (nf) {\n        for(let i = 0, start = -1; i < tokens.length; i++){\n            let token = tokens[i];\n            if (is_valid_or_mapped(token.type)) {\n                if (requires_check(token.cps)) {\n                    let end = i + 1;\n                    for(let pos = end; pos < tokens.length; pos++){\n                        let { type, cps } = tokens[pos];\n                        if (is_valid_or_mapped(type)) {\n                            if (!requires_check(cps)) break;\n                            end = pos + 1;\n                        } else if (type !== TY_IGNORED) {\n                            break;\n                        }\n                    }\n                    if (start < 0) start = i;\n                    let slice = tokens.slice(start, end);\n                    let cps0 = slice.flatMap((x)=>is_valid_or_mapped(x.type) ? x.cps : []); // strip junk tokens\n                    let cps = nfc(cps0);\n                    if (compare_arrays(cps, cps0)) {\n                        tokens.splice(start, end - start, {\n                            type: TY_NFC,\n                            input: cps0,\n                            cps,\n                            tokens0: collapse_valid_tokens(slice),\n                            tokens: ens_tokenize(str_from_cps(cps), {\n                                nf: false\n                            })\n                        });\n                        i = start;\n                    } else {\n                        i = end - 1; // skip to end of slice\n                    }\n                    start = -1; // reset\n                } else {\n                    start = i; // remember last\n                }\n            } else if (token.type !== TY_IGNORED) {\n                start = -1; // reset\n            }\n        }\n    }\n    return collapse_valid_tokens(tokens);\n}\nfunction is_valid_or_mapped(type) {\n    return type == TY_VALID || type == TY_MAPPED;\n}\nfunction requires_check(cps) {\n    return cps.some((cp)=>NFC_CHECK.has(cp));\n}\nfunction collapse_valid_tokens(tokens) {\n    for(let i = 0; i < tokens.length; i++){\n        if (tokens[i].type == TY_VALID) {\n            let j = i + 1;\n            while(j < tokens.length && tokens[j].type == TY_VALID)j++;\n            tokens.splice(i, j - i, {\n                type: TY_VALID,\n                cps: tokens.slice(i, j).flatMap((x)=>x.cps)\n            });\n        }\n    }\n    return tokens;\n}\nexports.ens_beautify = ens_beautify;\nexports.ens_emoji = ens_emoji;\nexports.ens_normalize = ens_normalize;\nexports.ens_normalize_fragment = ens_normalize_fragment;\nexports.ens_split = ens_split;\nexports.ens_tokenize = ens_tokenize;\nexports.is_combining_mark = is_combining_mark;\nexports.nfc = nfc;\nexports.nfd = nfd;\nexports.safe_str_from_cps = safe_str_from_cps;\nexports.should_escape = should_escape;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/@adraffy/ens-normalize/dist/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/aes.js":
/*!*********************************************************************!*\
  !*** ./node_modules/ethers/node_modules/aes-js/lib.commonjs/aes.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */ var __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _AES_key, _AES_Kd, _AES_Ke;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AES = void 0;\n// Number of rounds by keysize\nconst numberOfRounds = {\n    16: 10,\n    24: 12,\n    32: 14\n};\n// Round constant words\nconst rcon = [\n    0x01,\n    0x02,\n    0x04,\n    0x08,\n    0x10,\n    0x20,\n    0x40,\n    0x80,\n    0x1b,\n    0x36,\n    0x6c,\n    0xd8,\n    0xab,\n    0x4d,\n    0x9a,\n    0x2f,\n    0x5e,\n    0xbc,\n    0x63,\n    0xc6,\n    0x97,\n    0x35,\n    0x6a,\n    0xd4,\n    0xb3,\n    0x7d,\n    0xfa,\n    0xef,\n    0xc5,\n    0x91\n];\n// S-box and Inverse S-box (S is for Substitution)\nconst S = [\n    0x63,\n    0x7c,\n    0x77,\n    0x7b,\n    0xf2,\n    0x6b,\n    0x6f,\n    0xc5,\n    0x30,\n    0x01,\n    0x67,\n    0x2b,\n    0xfe,\n    0xd7,\n    0xab,\n    0x76,\n    0xca,\n    0x82,\n    0xc9,\n    0x7d,\n    0xfa,\n    0x59,\n    0x47,\n    0xf0,\n    0xad,\n    0xd4,\n    0xa2,\n    0xaf,\n    0x9c,\n    0xa4,\n    0x72,\n    0xc0,\n    0xb7,\n    0xfd,\n    0x93,\n    0x26,\n    0x36,\n    0x3f,\n    0xf7,\n    0xcc,\n    0x34,\n    0xa5,\n    0xe5,\n    0xf1,\n    0x71,\n    0xd8,\n    0x31,\n    0x15,\n    0x04,\n    0xc7,\n    0x23,\n    0xc3,\n    0x18,\n    0x96,\n    0x05,\n    0x9a,\n    0x07,\n    0x12,\n    0x80,\n    0xe2,\n    0xeb,\n    0x27,\n    0xb2,\n    0x75,\n    0x09,\n    0x83,\n    0x2c,\n    0x1a,\n    0x1b,\n    0x6e,\n    0x5a,\n    0xa0,\n    0x52,\n    0x3b,\n    0xd6,\n    0xb3,\n    0x29,\n    0xe3,\n    0x2f,\n    0x84,\n    0x53,\n    0xd1,\n    0x00,\n    0xed,\n    0x20,\n    0xfc,\n    0xb1,\n    0x5b,\n    0x6a,\n    0xcb,\n    0xbe,\n    0x39,\n    0x4a,\n    0x4c,\n    0x58,\n    0xcf,\n    0xd0,\n    0xef,\n    0xaa,\n    0xfb,\n    0x43,\n    0x4d,\n    0x33,\n    0x85,\n    0x45,\n    0xf9,\n    0x02,\n    0x7f,\n    0x50,\n    0x3c,\n    0x9f,\n    0xa8,\n    0x51,\n    0xa3,\n    0x40,\n    0x8f,\n    0x92,\n    0x9d,\n    0x38,\n    0xf5,\n    0xbc,\n    0xb6,\n    0xda,\n    0x21,\n    0x10,\n    0xff,\n    0xf3,\n    0xd2,\n    0xcd,\n    0x0c,\n    0x13,\n    0xec,\n    0x5f,\n    0x97,\n    0x44,\n    0x17,\n    0xc4,\n    0xa7,\n    0x7e,\n    0x3d,\n    0x64,\n    0x5d,\n    0x19,\n    0x73,\n    0x60,\n    0x81,\n    0x4f,\n    0xdc,\n    0x22,\n    0x2a,\n    0x90,\n    0x88,\n    0x46,\n    0xee,\n    0xb8,\n    0x14,\n    0xde,\n    0x5e,\n    0x0b,\n    0xdb,\n    0xe0,\n    0x32,\n    0x3a,\n    0x0a,\n    0x49,\n    0x06,\n    0x24,\n    0x5c,\n    0xc2,\n    0xd3,\n    0xac,\n    0x62,\n    0x91,\n    0x95,\n    0xe4,\n    0x79,\n    0xe7,\n    0xc8,\n    0x37,\n    0x6d,\n    0x8d,\n    0xd5,\n    0x4e,\n    0xa9,\n    0x6c,\n    0x56,\n    0xf4,\n    0xea,\n    0x65,\n    0x7a,\n    0xae,\n    0x08,\n    0xba,\n    0x78,\n    0x25,\n    0x2e,\n    0x1c,\n    0xa6,\n    0xb4,\n    0xc6,\n    0xe8,\n    0xdd,\n    0x74,\n    0x1f,\n    0x4b,\n    0xbd,\n    0x8b,\n    0x8a,\n    0x70,\n    0x3e,\n    0xb5,\n    0x66,\n    0x48,\n    0x03,\n    0xf6,\n    0x0e,\n    0x61,\n    0x35,\n    0x57,\n    0xb9,\n    0x86,\n    0xc1,\n    0x1d,\n    0x9e,\n    0xe1,\n    0xf8,\n    0x98,\n    0x11,\n    0x69,\n    0xd9,\n    0x8e,\n    0x94,\n    0x9b,\n    0x1e,\n    0x87,\n    0xe9,\n    0xce,\n    0x55,\n    0x28,\n    0xdf,\n    0x8c,\n    0xa1,\n    0x89,\n    0x0d,\n    0xbf,\n    0xe6,\n    0x42,\n    0x68,\n    0x41,\n    0x99,\n    0x2d,\n    0x0f,\n    0xb0,\n    0x54,\n    0xbb,\n    0x16\n];\nconst Si = [\n    0x52,\n    0x09,\n    0x6a,\n    0xd5,\n    0x30,\n    0x36,\n    0xa5,\n    0x38,\n    0xbf,\n    0x40,\n    0xa3,\n    0x9e,\n    0x81,\n    0xf3,\n    0xd7,\n    0xfb,\n    0x7c,\n    0xe3,\n    0x39,\n    0x82,\n    0x9b,\n    0x2f,\n    0xff,\n    0x87,\n    0x34,\n    0x8e,\n    0x43,\n    0x44,\n    0xc4,\n    0xde,\n    0xe9,\n    0xcb,\n    0x54,\n    0x7b,\n    0x94,\n    0x32,\n    0xa6,\n    0xc2,\n    0x23,\n    0x3d,\n    0xee,\n    0x4c,\n    0x95,\n    0x0b,\n    0x42,\n    0xfa,\n    0xc3,\n    0x4e,\n    0x08,\n    0x2e,\n    0xa1,\n    0x66,\n    0x28,\n    0xd9,\n    0x24,\n    0xb2,\n    0x76,\n    0x5b,\n    0xa2,\n    0x49,\n    0x6d,\n    0x8b,\n    0xd1,\n    0x25,\n    0x72,\n    0xf8,\n    0xf6,\n    0x64,\n    0x86,\n    0x68,\n    0x98,\n    0x16,\n    0xd4,\n    0xa4,\n    0x5c,\n    0xcc,\n    0x5d,\n    0x65,\n    0xb6,\n    0x92,\n    0x6c,\n    0x70,\n    0x48,\n    0x50,\n    0xfd,\n    0xed,\n    0xb9,\n    0xda,\n    0x5e,\n    0x15,\n    0x46,\n    0x57,\n    0xa7,\n    0x8d,\n    0x9d,\n    0x84,\n    0x90,\n    0xd8,\n    0xab,\n    0x00,\n    0x8c,\n    0xbc,\n    0xd3,\n    0x0a,\n    0xf7,\n    0xe4,\n    0x58,\n    0x05,\n    0xb8,\n    0xb3,\n    0x45,\n    0x06,\n    0xd0,\n    0x2c,\n    0x1e,\n    0x8f,\n    0xca,\n    0x3f,\n    0x0f,\n    0x02,\n    0xc1,\n    0xaf,\n    0xbd,\n    0x03,\n    0x01,\n    0x13,\n    0x8a,\n    0x6b,\n    0x3a,\n    0x91,\n    0x11,\n    0x41,\n    0x4f,\n    0x67,\n    0xdc,\n    0xea,\n    0x97,\n    0xf2,\n    0xcf,\n    0xce,\n    0xf0,\n    0xb4,\n    0xe6,\n    0x73,\n    0x96,\n    0xac,\n    0x74,\n    0x22,\n    0xe7,\n    0xad,\n    0x35,\n    0x85,\n    0xe2,\n    0xf9,\n    0x37,\n    0xe8,\n    0x1c,\n    0x75,\n    0xdf,\n    0x6e,\n    0x47,\n    0xf1,\n    0x1a,\n    0x71,\n    0x1d,\n    0x29,\n    0xc5,\n    0x89,\n    0x6f,\n    0xb7,\n    0x62,\n    0x0e,\n    0xaa,\n    0x18,\n    0xbe,\n    0x1b,\n    0xfc,\n    0x56,\n    0x3e,\n    0x4b,\n    0xc6,\n    0xd2,\n    0x79,\n    0x20,\n    0x9a,\n    0xdb,\n    0xc0,\n    0xfe,\n    0x78,\n    0xcd,\n    0x5a,\n    0xf4,\n    0x1f,\n    0xdd,\n    0xa8,\n    0x33,\n    0x88,\n    0x07,\n    0xc7,\n    0x31,\n    0xb1,\n    0x12,\n    0x10,\n    0x59,\n    0x27,\n    0x80,\n    0xec,\n    0x5f,\n    0x60,\n    0x51,\n    0x7f,\n    0xa9,\n    0x19,\n    0xb5,\n    0x4a,\n    0x0d,\n    0x2d,\n    0xe5,\n    0x7a,\n    0x9f,\n    0x93,\n    0xc9,\n    0x9c,\n    0xef,\n    0xa0,\n    0xe0,\n    0x3b,\n    0x4d,\n    0xae,\n    0x2a,\n    0xf5,\n    0xb0,\n    0xc8,\n    0xeb,\n    0xbb,\n    0x3c,\n    0x83,\n    0x53,\n    0x99,\n    0x61,\n    0x17,\n    0x2b,\n    0x04,\n    0x7e,\n    0xba,\n    0x77,\n    0xd6,\n    0x26,\n    0xe1,\n    0x69,\n    0x14,\n    0x63,\n    0x55,\n    0x21,\n    0x0c,\n    0x7d\n];\n// Transformations for encryption\nconst T1 = [\n    0xc66363a5,\n    0xf87c7c84,\n    0xee777799,\n    0xf67b7b8d,\n    0xfff2f20d,\n    0xd66b6bbd,\n    0xde6f6fb1,\n    0x91c5c554,\n    0x60303050,\n    0x02010103,\n    0xce6767a9,\n    0x562b2b7d,\n    0xe7fefe19,\n    0xb5d7d762,\n    0x4dababe6,\n    0xec76769a,\n    0x8fcaca45,\n    0x1f82829d,\n    0x89c9c940,\n    0xfa7d7d87,\n    0xeffafa15,\n    0xb25959eb,\n    0x8e4747c9,\n    0xfbf0f00b,\n    0x41adadec,\n    0xb3d4d467,\n    0x5fa2a2fd,\n    0x45afafea,\n    0x239c9cbf,\n    0x53a4a4f7,\n    0xe4727296,\n    0x9bc0c05b,\n    0x75b7b7c2,\n    0xe1fdfd1c,\n    0x3d9393ae,\n    0x4c26266a,\n    0x6c36365a,\n    0x7e3f3f41,\n    0xf5f7f702,\n    0x83cccc4f,\n    0x6834345c,\n    0x51a5a5f4,\n    0xd1e5e534,\n    0xf9f1f108,\n    0xe2717193,\n    0xabd8d873,\n    0x62313153,\n    0x2a15153f,\n    0x0804040c,\n    0x95c7c752,\n    0x46232365,\n    0x9dc3c35e,\n    0x30181828,\n    0x379696a1,\n    0x0a05050f,\n    0x2f9a9ab5,\n    0x0e070709,\n    0x24121236,\n    0x1b80809b,\n    0xdfe2e23d,\n    0xcdebeb26,\n    0x4e272769,\n    0x7fb2b2cd,\n    0xea75759f,\n    0x1209091b,\n    0x1d83839e,\n    0x582c2c74,\n    0x341a1a2e,\n    0x361b1b2d,\n    0xdc6e6eb2,\n    0xb45a5aee,\n    0x5ba0a0fb,\n    0xa45252f6,\n    0x763b3b4d,\n    0xb7d6d661,\n    0x7db3b3ce,\n    0x5229297b,\n    0xdde3e33e,\n    0x5e2f2f71,\n    0x13848497,\n    0xa65353f5,\n    0xb9d1d168,\n    0x00000000,\n    0xc1eded2c,\n    0x40202060,\n    0xe3fcfc1f,\n    0x79b1b1c8,\n    0xb65b5bed,\n    0xd46a6abe,\n    0x8dcbcb46,\n    0x67bebed9,\n    0x7239394b,\n    0x944a4ade,\n    0x984c4cd4,\n    0xb05858e8,\n    0x85cfcf4a,\n    0xbbd0d06b,\n    0xc5efef2a,\n    0x4faaaae5,\n    0xedfbfb16,\n    0x864343c5,\n    0x9a4d4dd7,\n    0x66333355,\n    0x11858594,\n    0x8a4545cf,\n    0xe9f9f910,\n    0x04020206,\n    0xfe7f7f81,\n    0xa05050f0,\n    0x783c3c44,\n    0x259f9fba,\n    0x4ba8a8e3,\n    0xa25151f3,\n    0x5da3a3fe,\n    0x804040c0,\n    0x058f8f8a,\n    0x3f9292ad,\n    0x219d9dbc,\n    0x70383848,\n    0xf1f5f504,\n    0x63bcbcdf,\n    0x77b6b6c1,\n    0xafdada75,\n    0x42212163,\n    0x20101030,\n    0xe5ffff1a,\n    0xfdf3f30e,\n    0xbfd2d26d,\n    0x81cdcd4c,\n    0x180c0c14,\n    0x26131335,\n    0xc3ecec2f,\n    0xbe5f5fe1,\n    0x359797a2,\n    0x884444cc,\n    0x2e171739,\n    0x93c4c457,\n    0x55a7a7f2,\n    0xfc7e7e82,\n    0x7a3d3d47,\n    0xc86464ac,\n    0xba5d5de7,\n    0x3219192b,\n    0xe6737395,\n    0xc06060a0,\n    0x19818198,\n    0x9e4f4fd1,\n    0xa3dcdc7f,\n    0x44222266,\n    0x542a2a7e,\n    0x3b9090ab,\n    0x0b888883,\n    0x8c4646ca,\n    0xc7eeee29,\n    0x6bb8b8d3,\n    0x2814143c,\n    0xa7dede79,\n    0xbc5e5ee2,\n    0x160b0b1d,\n    0xaddbdb76,\n    0xdbe0e03b,\n    0x64323256,\n    0x743a3a4e,\n    0x140a0a1e,\n    0x924949db,\n    0x0c06060a,\n    0x4824246c,\n    0xb85c5ce4,\n    0x9fc2c25d,\n    0xbdd3d36e,\n    0x43acacef,\n    0xc46262a6,\n    0x399191a8,\n    0x319595a4,\n    0xd3e4e437,\n    0xf279798b,\n    0xd5e7e732,\n    0x8bc8c843,\n    0x6e373759,\n    0xda6d6db7,\n    0x018d8d8c,\n    0xb1d5d564,\n    0x9c4e4ed2,\n    0x49a9a9e0,\n    0xd86c6cb4,\n    0xac5656fa,\n    0xf3f4f407,\n    0xcfeaea25,\n    0xca6565af,\n    0xf47a7a8e,\n    0x47aeaee9,\n    0x10080818,\n    0x6fbabad5,\n    0xf0787888,\n    0x4a25256f,\n    0x5c2e2e72,\n    0x381c1c24,\n    0x57a6a6f1,\n    0x73b4b4c7,\n    0x97c6c651,\n    0xcbe8e823,\n    0xa1dddd7c,\n    0xe874749c,\n    0x3e1f1f21,\n    0x964b4bdd,\n    0x61bdbddc,\n    0x0d8b8b86,\n    0x0f8a8a85,\n    0xe0707090,\n    0x7c3e3e42,\n    0x71b5b5c4,\n    0xcc6666aa,\n    0x904848d8,\n    0x06030305,\n    0xf7f6f601,\n    0x1c0e0e12,\n    0xc26161a3,\n    0x6a35355f,\n    0xae5757f9,\n    0x69b9b9d0,\n    0x17868691,\n    0x99c1c158,\n    0x3a1d1d27,\n    0x279e9eb9,\n    0xd9e1e138,\n    0xebf8f813,\n    0x2b9898b3,\n    0x22111133,\n    0xd26969bb,\n    0xa9d9d970,\n    0x078e8e89,\n    0x339494a7,\n    0x2d9b9bb6,\n    0x3c1e1e22,\n    0x15878792,\n    0xc9e9e920,\n    0x87cece49,\n    0xaa5555ff,\n    0x50282878,\n    0xa5dfdf7a,\n    0x038c8c8f,\n    0x59a1a1f8,\n    0x09898980,\n    0x1a0d0d17,\n    0x65bfbfda,\n    0xd7e6e631,\n    0x844242c6,\n    0xd06868b8,\n    0x824141c3,\n    0x299999b0,\n    0x5a2d2d77,\n    0x1e0f0f11,\n    0x7bb0b0cb,\n    0xa85454fc,\n    0x6dbbbbd6,\n    0x2c16163a\n];\nconst T2 = [\n    0xa5c66363,\n    0x84f87c7c,\n    0x99ee7777,\n    0x8df67b7b,\n    0x0dfff2f2,\n    0xbdd66b6b,\n    0xb1de6f6f,\n    0x5491c5c5,\n    0x50603030,\n    0x03020101,\n    0xa9ce6767,\n    0x7d562b2b,\n    0x19e7fefe,\n    0x62b5d7d7,\n    0xe64dabab,\n    0x9aec7676,\n    0x458fcaca,\n    0x9d1f8282,\n    0x4089c9c9,\n    0x87fa7d7d,\n    0x15effafa,\n    0xebb25959,\n    0xc98e4747,\n    0x0bfbf0f0,\n    0xec41adad,\n    0x67b3d4d4,\n    0xfd5fa2a2,\n    0xea45afaf,\n    0xbf239c9c,\n    0xf753a4a4,\n    0x96e47272,\n    0x5b9bc0c0,\n    0xc275b7b7,\n    0x1ce1fdfd,\n    0xae3d9393,\n    0x6a4c2626,\n    0x5a6c3636,\n    0x417e3f3f,\n    0x02f5f7f7,\n    0x4f83cccc,\n    0x5c683434,\n    0xf451a5a5,\n    0x34d1e5e5,\n    0x08f9f1f1,\n    0x93e27171,\n    0x73abd8d8,\n    0x53623131,\n    0x3f2a1515,\n    0x0c080404,\n    0x5295c7c7,\n    0x65462323,\n    0x5e9dc3c3,\n    0x28301818,\n    0xa1379696,\n    0x0f0a0505,\n    0xb52f9a9a,\n    0x090e0707,\n    0x36241212,\n    0x9b1b8080,\n    0x3ddfe2e2,\n    0x26cdebeb,\n    0x694e2727,\n    0xcd7fb2b2,\n    0x9fea7575,\n    0x1b120909,\n    0x9e1d8383,\n    0x74582c2c,\n    0x2e341a1a,\n    0x2d361b1b,\n    0xb2dc6e6e,\n    0xeeb45a5a,\n    0xfb5ba0a0,\n    0xf6a45252,\n    0x4d763b3b,\n    0x61b7d6d6,\n    0xce7db3b3,\n    0x7b522929,\n    0x3edde3e3,\n    0x715e2f2f,\n    0x97138484,\n    0xf5a65353,\n    0x68b9d1d1,\n    0x00000000,\n    0x2cc1eded,\n    0x60402020,\n    0x1fe3fcfc,\n    0xc879b1b1,\n    0xedb65b5b,\n    0xbed46a6a,\n    0x468dcbcb,\n    0xd967bebe,\n    0x4b723939,\n    0xde944a4a,\n    0xd4984c4c,\n    0xe8b05858,\n    0x4a85cfcf,\n    0x6bbbd0d0,\n    0x2ac5efef,\n    0xe54faaaa,\n    0x16edfbfb,\n    0xc5864343,\n    0xd79a4d4d,\n    0x55663333,\n    0x94118585,\n    0xcf8a4545,\n    0x10e9f9f9,\n    0x06040202,\n    0x81fe7f7f,\n    0xf0a05050,\n    0x44783c3c,\n    0xba259f9f,\n    0xe34ba8a8,\n    0xf3a25151,\n    0xfe5da3a3,\n    0xc0804040,\n    0x8a058f8f,\n    0xad3f9292,\n    0xbc219d9d,\n    0x48703838,\n    0x04f1f5f5,\n    0xdf63bcbc,\n    0xc177b6b6,\n    0x75afdada,\n    0x63422121,\n    0x30201010,\n    0x1ae5ffff,\n    0x0efdf3f3,\n    0x6dbfd2d2,\n    0x4c81cdcd,\n    0x14180c0c,\n    0x35261313,\n    0x2fc3ecec,\n    0xe1be5f5f,\n    0xa2359797,\n    0xcc884444,\n    0x392e1717,\n    0x5793c4c4,\n    0xf255a7a7,\n    0x82fc7e7e,\n    0x477a3d3d,\n    0xacc86464,\n    0xe7ba5d5d,\n    0x2b321919,\n    0x95e67373,\n    0xa0c06060,\n    0x98198181,\n    0xd19e4f4f,\n    0x7fa3dcdc,\n    0x66442222,\n    0x7e542a2a,\n    0xab3b9090,\n    0x830b8888,\n    0xca8c4646,\n    0x29c7eeee,\n    0xd36bb8b8,\n    0x3c281414,\n    0x79a7dede,\n    0xe2bc5e5e,\n    0x1d160b0b,\n    0x76addbdb,\n    0x3bdbe0e0,\n    0x56643232,\n    0x4e743a3a,\n    0x1e140a0a,\n    0xdb924949,\n    0x0a0c0606,\n    0x6c482424,\n    0xe4b85c5c,\n    0x5d9fc2c2,\n    0x6ebdd3d3,\n    0xef43acac,\n    0xa6c46262,\n    0xa8399191,\n    0xa4319595,\n    0x37d3e4e4,\n    0x8bf27979,\n    0x32d5e7e7,\n    0x438bc8c8,\n    0x596e3737,\n    0xb7da6d6d,\n    0x8c018d8d,\n    0x64b1d5d5,\n    0xd29c4e4e,\n    0xe049a9a9,\n    0xb4d86c6c,\n    0xfaac5656,\n    0x07f3f4f4,\n    0x25cfeaea,\n    0xafca6565,\n    0x8ef47a7a,\n    0xe947aeae,\n    0x18100808,\n    0xd56fbaba,\n    0x88f07878,\n    0x6f4a2525,\n    0x725c2e2e,\n    0x24381c1c,\n    0xf157a6a6,\n    0xc773b4b4,\n    0x5197c6c6,\n    0x23cbe8e8,\n    0x7ca1dddd,\n    0x9ce87474,\n    0x213e1f1f,\n    0xdd964b4b,\n    0xdc61bdbd,\n    0x860d8b8b,\n    0x850f8a8a,\n    0x90e07070,\n    0x427c3e3e,\n    0xc471b5b5,\n    0xaacc6666,\n    0xd8904848,\n    0x05060303,\n    0x01f7f6f6,\n    0x121c0e0e,\n    0xa3c26161,\n    0x5f6a3535,\n    0xf9ae5757,\n    0xd069b9b9,\n    0x91178686,\n    0x5899c1c1,\n    0x273a1d1d,\n    0xb9279e9e,\n    0x38d9e1e1,\n    0x13ebf8f8,\n    0xb32b9898,\n    0x33221111,\n    0xbbd26969,\n    0x70a9d9d9,\n    0x89078e8e,\n    0xa7339494,\n    0xb62d9b9b,\n    0x223c1e1e,\n    0x92158787,\n    0x20c9e9e9,\n    0x4987cece,\n    0xffaa5555,\n    0x78502828,\n    0x7aa5dfdf,\n    0x8f038c8c,\n    0xf859a1a1,\n    0x80098989,\n    0x171a0d0d,\n    0xda65bfbf,\n    0x31d7e6e6,\n    0xc6844242,\n    0xb8d06868,\n    0xc3824141,\n    0xb0299999,\n    0x775a2d2d,\n    0x111e0f0f,\n    0xcb7bb0b0,\n    0xfca85454,\n    0xd66dbbbb,\n    0x3a2c1616\n];\nconst T3 = [\n    0x63a5c663,\n    0x7c84f87c,\n    0x7799ee77,\n    0x7b8df67b,\n    0xf20dfff2,\n    0x6bbdd66b,\n    0x6fb1de6f,\n    0xc55491c5,\n    0x30506030,\n    0x01030201,\n    0x67a9ce67,\n    0x2b7d562b,\n    0xfe19e7fe,\n    0xd762b5d7,\n    0xabe64dab,\n    0x769aec76,\n    0xca458fca,\n    0x829d1f82,\n    0xc94089c9,\n    0x7d87fa7d,\n    0xfa15effa,\n    0x59ebb259,\n    0x47c98e47,\n    0xf00bfbf0,\n    0xadec41ad,\n    0xd467b3d4,\n    0xa2fd5fa2,\n    0xafea45af,\n    0x9cbf239c,\n    0xa4f753a4,\n    0x7296e472,\n    0xc05b9bc0,\n    0xb7c275b7,\n    0xfd1ce1fd,\n    0x93ae3d93,\n    0x266a4c26,\n    0x365a6c36,\n    0x3f417e3f,\n    0xf702f5f7,\n    0xcc4f83cc,\n    0x345c6834,\n    0xa5f451a5,\n    0xe534d1e5,\n    0xf108f9f1,\n    0x7193e271,\n    0xd873abd8,\n    0x31536231,\n    0x153f2a15,\n    0x040c0804,\n    0xc75295c7,\n    0x23654623,\n    0xc35e9dc3,\n    0x18283018,\n    0x96a13796,\n    0x050f0a05,\n    0x9ab52f9a,\n    0x07090e07,\n    0x12362412,\n    0x809b1b80,\n    0xe23ddfe2,\n    0xeb26cdeb,\n    0x27694e27,\n    0xb2cd7fb2,\n    0x759fea75,\n    0x091b1209,\n    0x839e1d83,\n    0x2c74582c,\n    0x1a2e341a,\n    0x1b2d361b,\n    0x6eb2dc6e,\n    0x5aeeb45a,\n    0xa0fb5ba0,\n    0x52f6a452,\n    0x3b4d763b,\n    0xd661b7d6,\n    0xb3ce7db3,\n    0x297b5229,\n    0xe33edde3,\n    0x2f715e2f,\n    0x84971384,\n    0x53f5a653,\n    0xd168b9d1,\n    0x00000000,\n    0xed2cc1ed,\n    0x20604020,\n    0xfc1fe3fc,\n    0xb1c879b1,\n    0x5bedb65b,\n    0x6abed46a,\n    0xcb468dcb,\n    0xbed967be,\n    0x394b7239,\n    0x4ade944a,\n    0x4cd4984c,\n    0x58e8b058,\n    0xcf4a85cf,\n    0xd06bbbd0,\n    0xef2ac5ef,\n    0xaae54faa,\n    0xfb16edfb,\n    0x43c58643,\n    0x4dd79a4d,\n    0x33556633,\n    0x85941185,\n    0x45cf8a45,\n    0xf910e9f9,\n    0x02060402,\n    0x7f81fe7f,\n    0x50f0a050,\n    0x3c44783c,\n    0x9fba259f,\n    0xa8e34ba8,\n    0x51f3a251,\n    0xa3fe5da3,\n    0x40c08040,\n    0x8f8a058f,\n    0x92ad3f92,\n    0x9dbc219d,\n    0x38487038,\n    0xf504f1f5,\n    0xbcdf63bc,\n    0xb6c177b6,\n    0xda75afda,\n    0x21634221,\n    0x10302010,\n    0xff1ae5ff,\n    0xf30efdf3,\n    0xd26dbfd2,\n    0xcd4c81cd,\n    0x0c14180c,\n    0x13352613,\n    0xec2fc3ec,\n    0x5fe1be5f,\n    0x97a23597,\n    0x44cc8844,\n    0x17392e17,\n    0xc45793c4,\n    0xa7f255a7,\n    0x7e82fc7e,\n    0x3d477a3d,\n    0x64acc864,\n    0x5de7ba5d,\n    0x192b3219,\n    0x7395e673,\n    0x60a0c060,\n    0x81981981,\n    0x4fd19e4f,\n    0xdc7fa3dc,\n    0x22664422,\n    0x2a7e542a,\n    0x90ab3b90,\n    0x88830b88,\n    0x46ca8c46,\n    0xee29c7ee,\n    0xb8d36bb8,\n    0x143c2814,\n    0xde79a7de,\n    0x5ee2bc5e,\n    0x0b1d160b,\n    0xdb76addb,\n    0xe03bdbe0,\n    0x32566432,\n    0x3a4e743a,\n    0x0a1e140a,\n    0x49db9249,\n    0x060a0c06,\n    0x246c4824,\n    0x5ce4b85c,\n    0xc25d9fc2,\n    0xd36ebdd3,\n    0xacef43ac,\n    0x62a6c462,\n    0x91a83991,\n    0x95a43195,\n    0xe437d3e4,\n    0x798bf279,\n    0xe732d5e7,\n    0xc8438bc8,\n    0x37596e37,\n    0x6db7da6d,\n    0x8d8c018d,\n    0xd564b1d5,\n    0x4ed29c4e,\n    0xa9e049a9,\n    0x6cb4d86c,\n    0x56faac56,\n    0xf407f3f4,\n    0xea25cfea,\n    0x65afca65,\n    0x7a8ef47a,\n    0xaee947ae,\n    0x08181008,\n    0xbad56fba,\n    0x7888f078,\n    0x256f4a25,\n    0x2e725c2e,\n    0x1c24381c,\n    0xa6f157a6,\n    0xb4c773b4,\n    0xc65197c6,\n    0xe823cbe8,\n    0xdd7ca1dd,\n    0x749ce874,\n    0x1f213e1f,\n    0x4bdd964b,\n    0xbddc61bd,\n    0x8b860d8b,\n    0x8a850f8a,\n    0x7090e070,\n    0x3e427c3e,\n    0xb5c471b5,\n    0x66aacc66,\n    0x48d89048,\n    0x03050603,\n    0xf601f7f6,\n    0x0e121c0e,\n    0x61a3c261,\n    0x355f6a35,\n    0x57f9ae57,\n    0xb9d069b9,\n    0x86911786,\n    0xc15899c1,\n    0x1d273a1d,\n    0x9eb9279e,\n    0xe138d9e1,\n    0xf813ebf8,\n    0x98b32b98,\n    0x11332211,\n    0x69bbd269,\n    0xd970a9d9,\n    0x8e89078e,\n    0x94a73394,\n    0x9bb62d9b,\n    0x1e223c1e,\n    0x87921587,\n    0xe920c9e9,\n    0xce4987ce,\n    0x55ffaa55,\n    0x28785028,\n    0xdf7aa5df,\n    0x8c8f038c,\n    0xa1f859a1,\n    0x89800989,\n    0x0d171a0d,\n    0xbfda65bf,\n    0xe631d7e6,\n    0x42c68442,\n    0x68b8d068,\n    0x41c38241,\n    0x99b02999,\n    0x2d775a2d,\n    0x0f111e0f,\n    0xb0cb7bb0,\n    0x54fca854,\n    0xbbd66dbb,\n    0x163a2c16\n];\nconst T4 = [\n    0x6363a5c6,\n    0x7c7c84f8,\n    0x777799ee,\n    0x7b7b8df6,\n    0xf2f20dff,\n    0x6b6bbdd6,\n    0x6f6fb1de,\n    0xc5c55491,\n    0x30305060,\n    0x01010302,\n    0x6767a9ce,\n    0x2b2b7d56,\n    0xfefe19e7,\n    0xd7d762b5,\n    0xababe64d,\n    0x76769aec,\n    0xcaca458f,\n    0x82829d1f,\n    0xc9c94089,\n    0x7d7d87fa,\n    0xfafa15ef,\n    0x5959ebb2,\n    0x4747c98e,\n    0xf0f00bfb,\n    0xadadec41,\n    0xd4d467b3,\n    0xa2a2fd5f,\n    0xafafea45,\n    0x9c9cbf23,\n    0xa4a4f753,\n    0x727296e4,\n    0xc0c05b9b,\n    0xb7b7c275,\n    0xfdfd1ce1,\n    0x9393ae3d,\n    0x26266a4c,\n    0x36365a6c,\n    0x3f3f417e,\n    0xf7f702f5,\n    0xcccc4f83,\n    0x34345c68,\n    0xa5a5f451,\n    0xe5e534d1,\n    0xf1f108f9,\n    0x717193e2,\n    0xd8d873ab,\n    0x31315362,\n    0x15153f2a,\n    0x04040c08,\n    0xc7c75295,\n    0x23236546,\n    0xc3c35e9d,\n    0x18182830,\n    0x9696a137,\n    0x05050f0a,\n    0x9a9ab52f,\n    0x0707090e,\n    0x12123624,\n    0x80809b1b,\n    0xe2e23ddf,\n    0xebeb26cd,\n    0x2727694e,\n    0xb2b2cd7f,\n    0x75759fea,\n    0x09091b12,\n    0x83839e1d,\n    0x2c2c7458,\n    0x1a1a2e34,\n    0x1b1b2d36,\n    0x6e6eb2dc,\n    0x5a5aeeb4,\n    0xa0a0fb5b,\n    0x5252f6a4,\n    0x3b3b4d76,\n    0xd6d661b7,\n    0xb3b3ce7d,\n    0x29297b52,\n    0xe3e33edd,\n    0x2f2f715e,\n    0x84849713,\n    0x5353f5a6,\n    0xd1d168b9,\n    0x00000000,\n    0xeded2cc1,\n    0x20206040,\n    0xfcfc1fe3,\n    0xb1b1c879,\n    0x5b5bedb6,\n    0x6a6abed4,\n    0xcbcb468d,\n    0xbebed967,\n    0x39394b72,\n    0x4a4ade94,\n    0x4c4cd498,\n    0x5858e8b0,\n    0xcfcf4a85,\n    0xd0d06bbb,\n    0xefef2ac5,\n    0xaaaae54f,\n    0xfbfb16ed,\n    0x4343c586,\n    0x4d4dd79a,\n    0x33335566,\n    0x85859411,\n    0x4545cf8a,\n    0xf9f910e9,\n    0x02020604,\n    0x7f7f81fe,\n    0x5050f0a0,\n    0x3c3c4478,\n    0x9f9fba25,\n    0xa8a8e34b,\n    0x5151f3a2,\n    0xa3a3fe5d,\n    0x4040c080,\n    0x8f8f8a05,\n    0x9292ad3f,\n    0x9d9dbc21,\n    0x38384870,\n    0xf5f504f1,\n    0xbcbcdf63,\n    0xb6b6c177,\n    0xdada75af,\n    0x21216342,\n    0x10103020,\n    0xffff1ae5,\n    0xf3f30efd,\n    0xd2d26dbf,\n    0xcdcd4c81,\n    0x0c0c1418,\n    0x13133526,\n    0xecec2fc3,\n    0x5f5fe1be,\n    0x9797a235,\n    0x4444cc88,\n    0x1717392e,\n    0xc4c45793,\n    0xa7a7f255,\n    0x7e7e82fc,\n    0x3d3d477a,\n    0x6464acc8,\n    0x5d5de7ba,\n    0x19192b32,\n    0x737395e6,\n    0x6060a0c0,\n    0x81819819,\n    0x4f4fd19e,\n    0xdcdc7fa3,\n    0x22226644,\n    0x2a2a7e54,\n    0x9090ab3b,\n    0x8888830b,\n    0x4646ca8c,\n    0xeeee29c7,\n    0xb8b8d36b,\n    0x14143c28,\n    0xdede79a7,\n    0x5e5ee2bc,\n    0x0b0b1d16,\n    0xdbdb76ad,\n    0xe0e03bdb,\n    0x32325664,\n    0x3a3a4e74,\n    0x0a0a1e14,\n    0x4949db92,\n    0x06060a0c,\n    0x24246c48,\n    0x5c5ce4b8,\n    0xc2c25d9f,\n    0xd3d36ebd,\n    0xacacef43,\n    0x6262a6c4,\n    0x9191a839,\n    0x9595a431,\n    0xe4e437d3,\n    0x79798bf2,\n    0xe7e732d5,\n    0xc8c8438b,\n    0x3737596e,\n    0x6d6db7da,\n    0x8d8d8c01,\n    0xd5d564b1,\n    0x4e4ed29c,\n    0xa9a9e049,\n    0x6c6cb4d8,\n    0x5656faac,\n    0xf4f407f3,\n    0xeaea25cf,\n    0x6565afca,\n    0x7a7a8ef4,\n    0xaeaee947,\n    0x08081810,\n    0xbabad56f,\n    0x787888f0,\n    0x25256f4a,\n    0x2e2e725c,\n    0x1c1c2438,\n    0xa6a6f157,\n    0xb4b4c773,\n    0xc6c65197,\n    0xe8e823cb,\n    0xdddd7ca1,\n    0x74749ce8,\n    0x1f1f213e,\n    0x4b4bdd96,\n    0xbdbddc61,\n    0x8b8b860d,\n    0x8a8a850f,\n    0x707090e0,\n    0x3e3e427c,\n    0xb5b5c471,\n    0x6666aacc,\n    0x4848d890,\n    0x03030506,\n    0xf6f601f7,\n    0x0e0e121c,\n    0x6161a3c2,\n    0x35355f6a,\n    0x5757f9ae,\n    0xb9b9d069,\n    0x86869117,\n    0xc1c15899,\n    0x1d1d273a,\n    0x9e9eb927,\n    0xe1e138d9,\n    0xf8f813eb,\n    0x9898b32b,\n    0x11113322,\n    0x6969bbd2,\n    0xd9d970a9,\n    0x8e8e8907,\n    0x9494a733,\n    0x9b9bb62d,\n    0x1e1e223c,\n    0x87879215,\n    0xe9e920c9,\n    0xcece4987,\n    0x5555ffaa,\n    0x28287850,\n    0xdfdf7aa5,\n    0x8c8c8f03,\n    0xa1a1f859,\n    0x89898009,\n    0x0d0d171a,\n    0xbfbfda65,\n    0xe6e631d7,\n    0x4242c684,\n    0x6868b8d0,\n    0x4141c382,\n    0x9999b029,\n    0x2d2d775a,\n    0x0f0f111e,\n    0xb0b0cb7b,\n    0x5454fca8,\n    0xbbbbd66d,\n    0x16163a2c\n];\n// Transformations for decryption\nconst T5 = [\n    0x51f4a750,\n    0x7e416553,\n    0x1a17a4c3,\n    0x3a275e96,\n    0x3bab6bcb,\n    0x1f9d45f1,\n    0xacfa58ab,\n    0x4be30393,\n    0x2030fa55,\n    0xad766df6,\n    0x88cc7691,\n    0xf5024c25,\n    0x4fe5d7fc,\n    0xc52acbd7,\n    0x26354480,\n    0xb562a38f,\n    0xdeb15a49,\n    0x25ba1b67,\n    0x45ea0e98,\n    0x5dfec0e1,\n    0xc32f7502,\n    0x814cf012,\n    0x8d4697a3,\n    0x6bd3f9c6,\n    0x038f5fe7,\n    0x15929c95,\n    0xbf6d7aeb,\n    0x955259da,\n    0xd4be832d,\n    0x587421d3,\n    0x49e06929,\n    0x8ec9c844,\n    0x75c2896a,\n    0xf48e7978,\n    0x99583e6b,\n    0x27b971dd,\n    0xbee14fb6,\n    0xf088ad17,\n    0xc920ac66,\n    0x7dce3ab4,\n    0x63df4a18,\n    0xe51a3182,\n    0x97513360,\n    0x62537f45,\n    0xb16477e0,\n    0xbb6bae84,\n    0xfe81a01c,\n    0xf9082b94,\n    0x70486858,\n    0x8f45fd19,\n    0x94de6c87,\n    0x527bf8b7,\n    0xab73d323,\n    0x724b02e2,\n    0xe31f8f57,\n    0x6655ab2a,\n    0xb2eb2807,\n    0x2fb5c203,\n    0x86c57b9a,\n    0xd33708a5,\n    0x302887f2,\n    0x23bfa5b2,\n    0x02036aba,\n    0xed16825c,\n    0x8acf1c2b,\n    0xa779b492,\n    0xf307f2f0,\n    0x4e69e2a1,\n    0x65daf4cd,\n    0x0605bed5,\n    0xd134621f,\n    0xc4a6fe8a,\n    0x342e539d,\n    0xa2f355a0,\n    0x058ae132,\n    0xa4f6eb75,\n    0x0b83ec39,\n    0x4060efaa,\n    0x5e719f06,\n    0xbd6e1051,\n    0x3e218af9,\n    0x96dd063d,\n    0xdd3e05ae,\n    0x4de6bd46,\n    0x91548db5,\n    0x71c45d05,\n    0x0406d46f,\n    0x605015ff,\n    0x1998fb24,\n    0xd6bde997,\n    0x894043cc,\n    0x67d99e77,\n    0xb0e842bd,\n    0x07898b88,\n    0xe7195b38,\n    0x79c8eedb,\n    0xa17c0a47,\n    0x7c420fe9,\n    0xf8841ec9,\n    0x00000000,\n    0x09808683,\n    0x322bed48,\n    0x1e1170ac,\n    0x6c5a724e,\n    0xfd0efffb,\n    0x0f853856,\n    0x3daed51e,\n    0x362d3927,\n    0x0a0fd964,\n    0x685ca621,\n    0x9b5b54d1,\n    0x24362e3a,\n    0x0c0a67b1,\n    0x9357e70f,\n    0xb4ee96d2,\n    0x1b9b919e,\n    0x80c0c54f,\n    0x61dc20a2,\n    0x5a774b69,\n    0x1c121a16,\n    0xe293ba0a,\n    0xc0a02ae5,\n    0x3c22e043,\n    0x121b171d,\n    0x0e090d0b,\n    0xf28bc7ad,\n    0x2db6a8b9,\n    0x141ea9c8,\n    0x57f11985,\n    0xaf75074c,\n    0xee99ddbb,\n    0xa37f60fd,\n    0xf701269f,\n    0x5c72f5bc,\n    0x44663bc5,\n    0x5bfb7e34,\n    0x8b432976,\n    0xcb23c6dc,\n    0xb6edfc68,\n    0xb8e4f163,\n    0xd731dcca,\n    0x42638510,\n    0x13972240,\n    0x84c61120,\n    0x854a247d,\n    0xd2bb3df8,\n    0xaef93211,\n    0xc729a16d,\n    0x1d9e2f4b,\n    0xdcb230f3,\n    0x0d8652ec,\n    0x77c1e3d0,\n    0x2bb3166c,\n    0xa970b999,\n    0x119448fa,\n    0x47e96422,\n    0xa8fc8cc4,\n    0xa0f03f1a,\n    0x567d2cd8,\n    0x223390ef,\n    0x87494ec7,\n    0xd938d1c1,\n    0x8ccaa2fe,\n    0x98d40b36,\n    0xa6f581cf,\n    0xa57ade28,\n    0xdab78e26,\n    0x3fadbfa4,\n    0x2c3a9de4,\n    0x5078920d,\n    0x6a5fcc9b,\n    0x547e4662,\n    0xf68d13c2,\n    0x90d8b8e8,\n    0x2e39f75e,\n    0x82c3aff5,\n    0x9f5d80be,\n    0x69d0937c,\n    0x6fd52da9,\n    0xcf2512b3,\n    0xc8ac993b,\n    0x10187da7,\n    0xe89c636e,\n    0xdb3bbb7b,\n    0xcd267809,\n    0x6e5918f4,\n    0xec9ab701,\n    0x834f9aa8,\n    0xe6956e65,\n    0xaaffe67e,\n    0x21bccf08,\n    0xef15e8e6,\n    0xbae79bd9,\n    0x4a6f36ce,\n    0xea9f09d4,\n    0x29b07cd6,\n    0x31a4b2af,\n    0x2a3f2331,\n    0xc6a59430,\n    0x35a266c0,\n    0x744ebc37,\n    0xfc82caa6,\n    0xe090d0b0,\n    0x33a7d815,\n    0xf104984a,\n    0x41ecdaf7,\n    0x7fcd500e,\n    0x1791f62f,\n    0x764dd68d,\n    0x43efb04d,\n    0xccaa4d54,\n    0xe49604df,\n    0x9ed1b5e3,\n    0x4c6a881b,\n    0xc12c1fb8,\n    0x4665517f,\n    0x9d5eea04,\n    0x018c355d,\n    0xfa877473,\n    0xfb0b412e,\n    0xb3671d5a,\n    0x92dbd252,\n    0xe9105633,\n    0x6dd64713,\n    0x9ad7618c,\n    0x37a10c7a,\n    0x59f8148e,\n    0xeb133c89,\n    0xcea927ee,\n    0xb761c935,\n    0xe11ce5ed,\n    0x7a47b13c,\n    0x9cd2df59,\n    0x55f2733f,\n    0x1814ce79,\n    0x73c737bf,\n    0x53f7cdea,\n    0x5ffdaa5b,\n    0xdf3d6f14,\n    0x7844db86,\n    0xcaaff381,\n    0xb968c43e,\n    0x3824342c,\n    0xc2a3405f,\n    0x161dc372,\n    0xbce2250c,\n    0x283c498b,\n    0xff0d9541,\n    0x39a80171,\n    0x080cb3de,\n    0xd8b4e49c,\n    0x6456c190,\n    0x7bcb8461,\n    0xd532b670,\n    0x486c5c74,\n    0xd0b85742\n];\nconst T6 = [\n    0x5051f4a7,\n    0x537e4165,\n    0xc31a17a4,\n    0x963a275e,\n    0xcb3bab6b,\n    0xf11f9d45,\n    0xabacfa58,\n    0x934be303,\n    0x552030fa,\n    0xf6ad766d,\n    0x9188cc76,\n    0x25f5024c,\n    0xfc4fe5d7,\n    0xd7c52acb,\n    0x80263544,\n    0x8fb562a3,\n    0x49deb15a,\n    0x6725ba1b,\n    0x9845ea0e,\n    0xe15dfec0,\n    0x02c32f75,\n    0x12814cf0,\n    0xa38d4697,\n    0xc66bd3f9,\n    0xe7038f5f,\n    0x9515929c,\n    0xebbf6d7a,\n    0xda955259,\n    0x2dd4be83,\n    0xd3587421,\n    0x2949e069,\n    0x448ec9c8,\n    0x6a75c289,\n    0x78f48e79,\n    0x6b99583e,\n    0xdd27b971,\n    0xb6bee14f,\n    0x17f088ad,\n    0x66c920ac,\n    0xb47dce3a,\n    0x1863df4a,\n    0x82e51a31,\n    0x60975133,\n    0x4562537f,\n    0xe0b16477,\n    0x84bb6bae,\n    0x1cfe81a0,\n    0x94f9082b,\n    0x58704868,\n    0x198f45fd,\n    0x8794de6c,\n    0xb7527bf8,\n    0x23ab73d3,\n    0xe2724b02,\n    0x57e31f8f,\n    0x2a6655ab,\n    0x07b2eb28,\n    0x032fb5c2,\n    0x9a86c57b,\n    0xa5d33708,\n    0xf2302887,\n    0xb223bfa5,\n    0xba02036a,\n    0x5ced1682,\n    0x2b8acf1c,\n    0x92a779b4,\n    0xf0f307f2,\n    0xa14e69e2,\n    0xcd65daf4,\n    0xd50605be,\n    0x1fd13462,\n    0x8ac4a6fe,\n    0x9d342e53,\n    0xa0a2f355,\n    0x32058ae1,\n    0x75a4f6eb,\n    0x390b83ec,\n    0xaa4060ef,\n    0x065e719f,\n    0x51bd6e10,\n    0xf93e218a,\n    0x3d96dd06,\n    0xaedd3e05,\n    0x464de6bd,\n    0xb591548d,\n    0x0571c45d,\n    0x6f0406d4,\n    0xff605015,\n    0x241998fb,\n    0x97d6bde9,\n    0xcc894043,\n    0x7767d99e,\n    0xbdb0e842,\n    0x8807898b,\n    0x38e7195b,\n    0xdb79c8ee,\n    0x47a17c0a,\n    0xe97c420f,\n    0xc9f8841e,\n    0x00000000,\n    0x83098086,\n    0x48322bed,\n    0xac1e1170,\n    0x4e6c5a72,\n    0xfbfd0eff,\n    0x560f8538,\n    0x1e3daed5,\n    0x27362d39,\n    0x640a0fd9,\n    0x21685ca6,\n    0xd19b5b54,\n    0x3a24362e,\n    0xb10c0a67,\n    0x0f9357e7,\n    0xd2b4ee96,\n    0x9e1b9b91,\n    0x4f80c0c5,\n    0xa261dc20,\n    0x695a774b,\n    0x161c121a,\n    0x0ae293ba,\n    0xe5c0a02a,\n    0x433c22e0,\n    0x1d121b17,\n    0x0b0e090d,\n    0xadf28bc7,\n    0xb92db6a8,\n    0xc8141ea9,\n    0x8557f119,\n    0x4caf7507,\n    0xbbee99dd,\n    0xfda37f60,\n    0x9ff70126,\n    0xbc5c72f5,\n    0xc544663b,\n    0x345bfb7e,\n    0x768b4329,\n    0xdccb23c6,\n    0x68b6edfc,\n    0x63b8e4f1,\n    0xcad731dc,\n    0x10426385,\n    0x40139722,\n    0x2084c611,\n    0x7d854a24,\n    0xf8d2bb3d,\n    0x11aef932,\n    0x6dc729a1,\n    0x4b1d9e2f,\n    0xf3dcb230,\n    0xec0d8652,\n    0xd077c1e3,\n    0x6c2bb316,\n    0x99a970b9,\n    0xfa119448,\n    0x2247e964,\n    0xc4a8fc8c,\n    0x1aa0f03f,\n    0xd8567d2c,\n    0xef223390,\n    0xc787494e,\n    0xc1d938d1,\n    0xfe8ccaa2,\n    0x3698d40b,\n    0xcfa6f581,\n    0x28a57ade,\n    0x26dab78e,\n    0xa43fadbf,\n    0xe42c3a9d,\n    0x0d507892,\n    0x9b6a5fcc,\n    0x62547e46,\n    0xc2f68d13,\n    0xe890d8b8,\n    0x5e2e39f7,\n    0xf582c3af,\n    0xbe9f5d80,\n    0x7c69d093,\n    0xa96fd52d,\n    0xb3cf2512,\n    0x3bc8ac99,\n    0xa710187d,\n    0x6ee89c63,\n    0x7bdb3bbb,\n    0x09cd2678,\n    0xf46e5918,\n    0x01ec9ab7,\n    0xa8834f9a,\n    0x65e6956e,\n    0x7eaaffe6,\n    0x0821bccf,\n    0xe6ef15e8,\n    0xd9bae79b,\n    0xce4a6f36,\n    0xd4ea9f09,\n    0xd629b07c,\n    0xaf31a4b2,\n    0x312a3f23,\n    0x30c6a594,\n    0xc035a266,\n    0x37744ebc,\n    0xa6fc82ca,\n    0xb0e090d0,\n    0x1533a7d8,\n    0x4af10498,\n    0xf741ecda,\n    0x0e7fcd50,\n    0x2f1791f6,\n    0x8d764dd6,\n    0x4d43efb0,\n    0x54ccaa4d,\n    0xdfe49604,\n    0xe39ed1b5,\n    0x1b4c6a88,\n    0xb8c12c1f,\n    0x7f466551,\n    0x049d5eea,\n    0x5d018c35,\n    0x73fa8774,\n    0x2efb0b41,\n    0x5ab3671d,\n    0x5292dbd2,\n    0x33e91056,\n    0x136dd647,\n    0x8c9ad761,\n    0x7a37a10c,\n    0x8e59f814,\n    0x89eb133c,\n    0xeecea927,\n    0x35b761c9,\n    0xede11ce5,\n    0x3c7a47b1,\n    0x599cd2df,\n    0x3f55f273,\n    0x791814ce,\n    0xbf73c737,\n    0xea53f7cd,\n    0x5b5ffdaa,\n    0x14df3d6f,\n    0x867844db,\n    0x81caaff3,\n    0x3eb968c4,\n    0x2c382434,\n    0x5fc2a340,\n    0x72161dc3,\n    0x0cbce225,\n    0x8b283c49,\n    0x41ff0d95,\n    0x7139a801,\n    0xde080cb3,\n    0x9cd8b4e4,\n    0x906456c1,\n    0x617bcb84,\n    0x70d532b6,\n    0x74486c5c,\n    0x42d0b857\n];\nconst T7 = [\n    0xa75051f4,\n    0x65537e41,\n    0xa4c31a17,\n    0x5e963a27,\n    0x6bcb3bab,\n    0x45f11f9d,\n    0x58abacfa,\n    0x03934be3,\n    0xfa552030,\n    0x6df6ad76,\n    0x769188cc,\n    0x4c25f502,\n    0xd7fc4fe5,\n    0xcbd7c52a,\n    0x44802635,\n    0xa38fb562,\n    0x5a49deb1,\n    0x1b6725ba,\n    0x0e9845ea,\n    0xc0e15dfe,\n    0x7502c32f,\n    0xf012814c,\n    0x97a38d46,\n    0xf9c66bd3,\n    0x5fe7038f,\n    0x9c951592,\n    0x7aebbf6d,\n    0x59da9552,\n    0x832dd4be,\n    0x21d35874,\n    0x692949e0,\n    0xc8448ec9,\n    0x896a75c2,\n    0x7978f48e,\n    0x3e6b9958,\n    0x71dd27b9,\n    0x4fb6bee1,\n    0xad17f088,\n    0xac66c920,\n    0x3ab47dce,\n    0x4a1863df,\n    0x3182e51a,\n    0x33609751,\n    0x7f456253,\n    0x77e0b164,\n    0xae84bb6b,\n    0xa01cfe81,\n    0x2b94f908,\n    0x68587048,\n    0xfd198f45,\n    0x6c8794de,\n    0xf8b7527b,\n    0xd323ab73,\n    0x02e2724b,\n    0x8f57e31f,\n    0xab2a6655,\n    0x2807b2eb,\n    0xc2032fb5,\n    0x7b9a86c5,\n    0x08a5d337,\n    0x87f23028,\n    0xa5b223bf,\n    0x6aba0203,\n    0x825ced16,\n    0x1c2b8acf,\n    0xb492a779,\n    0xf2f0f307,\n    0xe2a14e69,\n    0xf4cd65da,\n    0xbed50605,\n    0x621fd134,\n    0xfe8ac4a6,\n    0x539d342e,\n    0x55a0a2f3,\n    0xe132058a,\n    0xeb75a4f6,\n    0xec390b83,\n    0xefaa4060,\n    0x9f065e71,\n    0x1051bd6e,\n    0x8af93e21,\n    0x063d96dd,\n    0x05aedd3e,\n    0xbd464de6,\n    0x8db59154,\n    0x5d0571c4,\n    0xd46f0406,\n    0x15ff6050,\n    0xfb241998,\n    0xe997d6bd,\n    0x43cc8940,\n    0x9e7767d9,\n    0x42bdb0e8,\n    0x8b880789,\n    0x5b38e719,\n    0xeedb79c8,\n    0x0a47a17c,\n    0x0fe97c42,\n    0x1ec9f884,\n    0x00000000,\n    0x86830980,\n    0xed48322b,\n    0x70ac1e11,\n    0x724e6c5a,\n    0xfffbfd0e,\n    0x38560f85,\n    0xd51e3dae,\n    0x3927362d,\n    0xd9640a0f,\n    0xa621685c,\n    0x54d19b5b,\n    0x2e3a2436,\n    0x67b10c0a,\n    0xe70f9357,\n    0x96d2b4ee,\n    0x919e1b9b,\n    0xc54f80c0,\n    0x20a261dc,\n    0x4b695a77,\n    0x1a161c12,\n    0xba0ae293,\n    0x2ae5c0a0,\n    0xe0433c22,\n    0x171d121b,\n    0x0d0b0e09,\n    0xc7adf28b,\n    0xa8b92db6,\n    0xa9c8141e,\n    0x198557f1,\n    0x074caf75,\n    0xddbbee99,\n    0x60fda37f,\n    0x269ff701,\n    0xf5bc5c72,\n    0x3bc54466,\n    0x7e345bfb,\n    0x29768b43,\n    0xc6dccb23,\n    0xfc68b6ed,\n    0xf163b8e4,\n    0xdccad731,\n    0x85104263,\n    0x22401397,\n    0x112084c6,\n    0x247d854a,\n    0x3df8d2bb,\n    0x3211aef9,\n    0xa16dc729,\n    0x2f4b1d9e,\n    0x30f3dcb2,\n    0x52ec0d86,\n    0xe3d077c1,\n    0x166c2bb3,\n    0xb999a970,\n    0x48fa1194,\n    0x642247e9,\n    0x8cc4a8fc,\n    0x3f1aa0f0,\n    0x2cd8567d,\n    0x90ef2233,\n    0x4ec78749,\n    0xd1c1d938,\n    0xa2fe8cca,\n    0x0b3698d4,\n    0x81cfa6f5,\n    0xde28a57a,\n    0x8e26dab7,\n    0xbfa43fad,\n    0x9de42c3a,\n    0x920d5078,\n    0xcc9b6a5f,\n    0x4662547e,\n    0x13c2f68d,\n    0xb8e890d8,\n    0xf75e2e39,\n    0xaff582c3,\n    0x80be9f5d,\n    0x937c69d0,\n    0x2da96fd5,\n    0x12b3cf25,\n    0x993bc8ac,\n    0x7da71018,\n    0x636ee89c,\n    0xbb7bdb3b,\n    0x7809cd26,\n    0x18f46e59,\n    0xb701ec9a,\n    0x9aa8834f,\n    0x6e65e695,\n    0xe67eaaff,\n    0xcf0821bc,\n    0xe8e6ef15,\n    0x9bd9bae7,\n    0x36ce4a6f,\n    0x09d4ea9f,\n    0x7cd629b0,\n    0xb2af31a4,\n    0x23312a3f,\n    0x9430c6a5,\n    0x66c035a2,\n    0xbc37744e,\n    0xcaa6fc82,\n    0xd0b0e090,\n    0xd81533a7,\n    0x984af104,\n    0xdaf741ec,\n    0x500e7fcd,\n    0xf62f1791,\n    0xd68d764d,\n    0xb04d43ef,\n    0x4d54ccaa,\n    0x04dfe496,\n    0xb5e39ed1,\n    0x881b4c6a,\n    0x1fb8c12c,\n    0x517f4665,\n    0xea049d5e,\n    0x355d018c,\n    0x7473fa87,\n    0x412efb0b,\n    0x1d5ab367,\n    0xd25292db,\n    0x5633e910,\n    0x47136dd6,\n    0x618c9ad7,\n    0x0c7a37a1,\n    0x148e59f8,\n    0x3c89eb13,\n    0x27eecea9,\n    0xc935b761,\n    0xe5ede11c,\n    0xb13c7a47,\n    0xdf599cd2,\n    0x733f55f2,\n    0xce791814,\n    0x37bf73c7,\n    0xcdea53f7,\n    0xaa5b5ffd,\n    0x6f14df3d,\n    0xdb867844,\n    0xf381caaf,\n    0xc43eb968,\n    0x342c3824,\n    0x405fc2a3,\n    0xc372161d,\n    0x250cbce2,\n    0x498b283c,\n    0x9541ff0d,\n    0x017139a8,\n    0xb3de080c,\n    0xe49cd8b4,\n    0xc1906456,\n    0x84617bcb,\n    0xb670d532,\n    0x5c74486c,\n    0x5742d0b8\n];\nconst T8 = [\n    0xf4a75051,\n    0x4165537e,\n    0x17a4c31a,\n    0x275e963a,\n    0xab6bcb3b,\n    0x9d45f11f,\n    0xfa58abac,\n    0xe303934b,\n    0x30fa5520,\n    0x766df6ad,\n    0xcc769188,\n    0x024c25f5,\n    0xe5d7fc4f,\n    0x2acbd7c5,\n    0x35448026,\n    0x62a38fb5,\n    0xb15a49de,\n    0xba1b6725,\n    0xea0e9845,\n    0xfec0e15d,\n    0x2f7502c3,\n    0x4cf01281,\n    0x4697a38d,\n    0xd3f9c66b,\n    0x8f5fe703,\n    0x929c9515,\n    0x6d7aebbf,\n    0x5259da95,\n    0xbe832dd4,\n    0x7421d358,\n    0xe0692949,\n    0xc9c8448e,\n    0xc2896a75,\n    0x8e7978f4,\n    0x583e6b99,\n    0xb971dd27,\n    0xe14fb6be,\n    0x88ad17f0,\n    0x20ac66c9,\n    0xce3ab47d,\n    0xdf4a1863,\n    0x1a3182e5,\n    0x51336097,\n    0x537f4562,\n    0x6477e0b1,\n    0x6bae84bb,\n    0x81a01cfe,\n    0x082b94f9,\n    0x48685870,\n    0x45fd198f,\n    0xde6c8794,\n    0x7bf8b752,\n    0x73d323ab,\n    0x4b02e272,\n    0x1f8f57e3,\n    0x55ab2a66,\n    0xeb2807b2,\n    0xb5c2032f,\n    0xc57b9a86,\n    0x3708a5d3,\n    0x2887f230,\n    0xbfa5b223,\n    0x036aba02,\n    0x16825ced,\n    0xcf1c2b8a,\n    0x79b492a7,\n    0x07f2f0f3,\n    0x69e2a14e,\n    0xdaf4cd65,\n    0x05bed506,\n    0x34621fd1,\n    0xa6fe8ac4,\n    0x2e539d34,\n    0xf355a0a2,\n    0x8ae13205,\n    0xf6eb75a4,\n    0x83ec390b,\n    0x60efaa40,\n    0x719f065e,\n    0x6e1051bd,\n    0x218af93e,\n    0xdd063d96,\n    0x3e05aedd,\n    0xe6bd464d,\n    0x548db591,\n    0xc45d0571,\n    0x06d46f04,\n    0x5015ff60,\n    0x98fb2419,\n    0xbde997d6,\n    0x4043cc89,\n    0xd99e7767,\n    0xe842bdb0,\n    0x898b8807,\n    0x195b38e7,\n    0xc8eedb79,\n    0x7c0a47a1,\n    0x420fe97c,\n    0x841ec9f8,\n    0x00000000,\n    0x80868309,\n    0x2bed4832,\n    0x1170ac1e,\n    0x5a724e6c,\n    0x0efffbfd,\n    0x8538560f,\n    0xaed51e3d,\n    0x2d392736,\n    0x0fd9640a,\n    0x5ca62168,\n    0x5b54d19b,\n    0x362e3a24,\n    0x0a67b10c,\n    0x57e70f93,\n    0xee96d2b4,\n    0x9b919e1b,\n    0xc0c54f80,\n    0xdc20a261,\n    0x774b695a,\n    0x121a161c,\n    0x93ba0ae2,\n    0xa02ae5c0,\n    0x22e0433c,\n    0x1b171d12,\n    0x090d0b0e,\n    0x8bc7adf2,\n    0xb6a8b92d,\n    0x1ea9c814,\n    0xf1198557,\n    0x75074caf,\n    0x99ddbbee,\n    0x7f60fda3,\n    0x01269ff7,\n    0x72f5bc5c,\n    0x663bc544,\n    0xfb7e345b,\n    0x4329768b,\n    0x23c6dccb,\n    0xedfc68b6,\n    0xe4f163b8,\n    0x31dccad7,\n    0x63851042,\n    0x97224013,\n    0xc6112084,\n    0x4a247d85,\n    0xbb3df8d2,\n    0xf93211ae,\n    0x29a16dc7,\n    0x9e2f4b1d,\n    0xb230f3dc,\n    0x8652ec0d,\n    0xc1e3d077,\n    0xb3166c2b,\n    0x70b999a9,\n    0x9448fa11,\n    0xe9642247,\n    0xfc8cc4a8,\n    0xf03f1aa0,\n    0x7d2cd856,\n    0x3390ef22,\n    0x494ec787,\n    0x38d1c1d9,\n    0xcaa2fe8c,\n    0xd40b3698,\n    0xf581cfa6,\n    0x7ade28a5,\n    0xb78e26da,\n    0xadbfa43f,\n    0x3a9de42c,\n    0x78920d50,\n    0x5fcc9b6a,\n    0x7e466254,\n    0x8d13c2f6,\n    0xd8b8e890,\n    0x39f75e2e,\n    0xc3aff582,\n    0x5d80be9f,\n    0xd0937c69,\n    0xd52da96f,\n    0x2512b3cf,\n    0xac993bc8,\n    0x187da710,\n    0x9c636ee8,\n    0x3bbb7bdb,\n    0x267809cd,\n    0x5918f46e,\n    0x9ab701ec,\n    0x4f9aa883,\n    0x956e65e6,\n    0xffe67eaa,\n    0xbccf0821,\n    0x15e8e6ef,\n    0xe79bd9ba,\n    0x6f36ce4a,\n    0x9f09d4ea,\n    0xb07cd629,\n    0xa4b2af31,\n    0x3f23312a,\n    0xa59430c6,\n    0xa266c035,\n    0x4ebc3774,\n    0x82caa6fc,\n    0x90d0b0e0,\n    0xa7d81533,\n    0x04984af1,\n    0xecdaf741,\n    0xcd500e7f,\n    0x91f62f17,\n    0x4dd68d76,\n    0xefb04d43,\n    0xaa4d54cc,\n    0x9604dfe4,\n    0xd1b5e39e,\n    0x6a881b4c,\n    0x2c1fb8c1,\n    0x65517f46,\n    0x5eea049d,\n    0x8c355d01,\n    0x877473fa,\n    0x0b412efb,\n    0x671d5ab3,\n    0xdbd25292,\n    0x105633e9,\n    0xd647136d,\n    0xd7618c9a,\n    0xa10c7a37,\n    0xf8148e59,\n    0x133c89eb,\n    0xa927eece,\n    0x61c935b7,\n    0x1ce5ede1,\n    0x47b13c7a,\n    0xd2df599c,\n    0xf2733f55,\n    0x14ce7918,\n    0xc737bf73,\n    0xf7cdea53,\n    0xfdaa5b5f,\n    0x3d6f14df,\n    0x44db8678,\n    0xaff381ca,\n    0x68c43eb9,\n    0x24342c38,\n    0xa3405fc2,\n    0x1dc37216,\n    0xe2250cbc,\n    0x3c498b28,\n    0x0d9541ff,\n    0xa8017139,\n    0x0cb3de08,\n    0xb4e49cd8,\n    0x56c19064,\n    0xcb84617b,\n    0x32b670d5,\n    0x6c5c7448,\n    0xb85742d0\n];\n// Transformations for decryption key expansion\nconst U1 = [\n    0x00000000,\n    0x0e090d0b,\n    0x1c121a16,\n    0x121b171d,\n    0x3824342c,\n    0x362d3927,\n    0x24362e3a,\n    0x2a3f2331,\n    0x70486858,\n    0x7e416553,\n    0x6c5a724e,\n    0x62537f45,\n    0x486c5c74,\n    0x4665517f,\n    0x547e4662,\n    0x5a774b69,\n    0xe090d0b0,\n    0xee99ddbb,\n    0xfc82caa6,\n    0xf28bc7ad,\n    0xd8b4e49c,\n    0xd6bde997,\n    0xc4a6fe8a,\n    0xcaaff381,\n    0x90d8b8e8,\n    0x9ed1b5e3,\n    0x8ccaa2fe,\n    0x82c3aff5,\n    0xa8fc8cc4,\n    0xa6f581cf,\n    0xb4ee96d2,\n    0xbae79bd9,\n    0xdb3bbb7b,\n    0xd532b670,\n    0xc729a16d,\n    0xc920ac66,\n    0xe31f8f57,\n    0xed16825c,\n    0xff0d9541,\n    0xf104984a,\n    0xab73d323,\n    0xa57ade28,\n    0xb761c935,\n    0xb968c43e,\n    0x9357e70f,\n    0x9d5eea04,\n    0x8f45fd19,\n    0x814cf012,\n    0x3bab6bcb,\n    0x35a266c0,\n    0x27b971dd,\n    0x29b07cd6,\n    0x038f5fe7,\n    0x0d8652ec,\n    0x1f9d45f1,\n    0x119448fa,\n    0x4be30393,\n    0x45ea0e98,\n    0x57f11985,\n    0x59f8148e,\n    0x73c737bf,\n    0x7dce3ab4,\n    0x6fd52da9,\n    0x61dc20a2,\n    0xad766df6,\n    0xa37f60fd,\n    0xb16477e0,\n    0xbf6d7aeb,\n    0x955259da,\n    0x9b5b54d1,\n    0x894043cc,\n    0x87494ec7,\n    0xdd3e05ae,\n    0xd33708a5,\n    0xc12c1fb8,\n    0xcf2512b3,\n    0xe51a3182,\n    0xeb133c89,\n    0xf9082b94,\n    0xf701269f,\n    0x4de6bd46,\n    0x43efb04d,\n    0x51f4a750,\n    0x5ffdaa5b,\n    0x75c2896a,\n    0x7bcb8461,\n    0x69d0937c,\n    0x67d99e77,\n    0x3daed51e,\n    0x33a7d815,\n    0x21bccf08,\n    0x2fb5c203,\n    0x058ae132,\n    0x0b83ec39,\n    0x1998fb24,\n    0x1791f62f,\n    0x764dd68d,\n    0x7844db86,\n    0x6a5fcc9b,\n    0x6456c190,\n    0x4e69e2a1,\n    0x4060efaa,\n    0x527bf8b7,\n    0x5c72f5bc,\n    0x0605bed5,\n    0x080cb3de,\n    0x1a17a4c3,\n    0x141ea9c8,\n    0x3e218af9,\n    0x302887f2,\n    0x223390ef,\n    0x2c3a9de4,\n    0x96dd063d,\n    0x98d40b36,\n    0x8acf1c2b,\n    0x84c61120,\n    0xaef93211,\n    0xa0f03f1a,\n    0xb2eb2807,\n    0xbce2250c,\n    0xe6956e65,\n    0xe89c636e,\n    0xfa877473,\n    0xf48e7978,\n    0xdeb15a49,\n    0xd0b85742,\n    0xc2a3405f,\n    0xccaa4d54,\n    0x41ecdaf7,\n    0x4fe5d7fc,\n    0x5dfec0e1,\n    0x53f7cdea,\n    0x79c8eedb,\n    0x77c1e3d0,\n    0x65daf4cd,\n    0x6bd3f9c6,\n    0x31a4b2af,\n    0x3fadbfa4,\n    0x2db6a8b9,\n    0x23bfa5b2,\n    0x09808683,\n    0x07898b88,\n    0x15929c95,\n    0x1b9b919e,\n    0xa17c0a47,\n    0xaf75074c,\n    0xbd6e1051,\n    0xb3671d5a,\n    0x99583e6b,\n    0x97513360,\n    0x854a247d,\n    0x8b432976,\n    0xd134621f,\n    0xdf3d6f14,\n    0xcd267809,\n    0xc32f7502,\n    0xe9105633,\n    0xe7195b38,\n    0xf5024c25,\n    0xfb0b412e,\n    0x9ad7618c,\n    0x94de6c87,\n    0x86c57b9a,\n    0x88cc7691,\n    0xa2f355a0,\n    0xacfa58ab,\n    0xbee14fb6,\n    0xb0e842bd,\n    0xea9f09d4,\n    0xe49604df,\n    0xf68d13c2,\n    0xf8841ec9,\n    0xd2bb3df8,\n    0xdcb230f3,\n    0xcea927ee,\n    0xc0a02ae5,\n    0x7a47b13c,\n    0x744ebc37,\n    0x6655ab2a,\n    0x685ca621,\n    0x42638510,\n    0x4c6a881b,\n    0x5e719f06,\n    0x5078920d,\n    0x0a0fd964,\n    0x0406d46f,\n    0x161dc372,\n    0x1814ce79,\n    0x322bed48,\n    0x3c22e043,\n    0x2e39f75e,\n    0x2030fa55,\n    0xec9ab701,\n    0xe293ba0a,\n    0xf088ad17,\n    0xfe81a01c,\n    0xd4be832d,\n    0xdab78e26,\n    0xc8ac993b,\n    0xc6a59430,\n    0x9cd2df59,\n    0x92dbd252,\n    0x80c0c54f,\n    0x8ec9c844,\n    0xa4f6eb75,\n    0xaaffe67e,\n    0xb8e4f163,\n    0xb6edfc68,\n    0x0c0a67b1,\n    0x02036aba,\n    0x10187da7,\n    0x1e1170ac,\n    0x342e539d,\n    0x3a275e96,\n    0x283c498b,\n    0x26354480,\n    0x7c420fe9,\n    0x724b02e2,\n    0x605015ff,\n    0x6e5918f4,\n    0x44663bc5,\n    0x4a6f36ce,\n    0x587421d3,\n    0x567d2cd8,\n    0x37a10c7a,\n    0x39a80171,\n    0x2bb3166c,\n    0x25ba1b67,\n    0x0f853856,\n    0x018c355d,\n    0x13972240,\n    0x1d9e2f4b,\n    0x47e96422,\n    0x49e06929,\n    0x5bfb7e34,\n    0x55f2733f,\n    0x7fcd500e,\n    0x71c45d05,\n    0x63df4a18,\n    0x6dd64713,\n    0xd731dcca,\n    0xd938d1c1,\n    0xcb23c6dc,\n    0xc52acbd7,\n    0xef15e8e6,\n    0xe11ce5ed,\n    0xf307f2f0,\n    0xfd0efffb,\n    0xa779b492,\n    0xa970b999,\n    0xbb6bae84,\n    0xb562a38f,\n    0x9f5d80be,\n    0x91548db5,\n    0x834f9aa8,\n    0x8d4697a3\n];\nconst U2 = [\n    0x00000000,\n    0x0b0e090d,\n    0x161c121a,\n    0x1d121b17,\n    0x2c382434,\n    0x27362d39,\n    0x3a24362e,\n    0x312a3f23,\n    0x58704868,\n    0x537e4165,\n    0x4e6c5a72,\n    0x4562537f,\n    0x74486c5c,\n    0x7f466551,\n    0x62547e46,\n    0x695a774b,\n    0xb0e090d0,\n    0xbbee99dd,\n    0xa6fc82ca,\n    0xadf28bc7,\n    0x9cd8b4e4,\n    0x97d6bde9,\n    0x8ac4a6fe,\n    0x81caaff3,\n    0xe890d8b8,\n    0xe39ed1b5,\n    0xfe8ccaa2,\n    0xf582c3af,\n    0xc4a8fc8c,\n    0xcfa6f581,\n    0xd2b4ee96,\n    0xd9bae79b,\n    0x7bdb3bbb,\n    0x70d532b6,\n    0x6dc729a1,\n    0x66c920ac,\n    0x57e31f8f,\n    0x5ced1682,\n    0x41ff0d95,\n    0x4af10498,\n    0x23ab73d3,\n    0x28a57ade,\n    0x35b761c9,\n    0x3eb968c4,\n    0x0f9357e7,\n    0x049d5eea,\n    0x198f45fd,\n    0x12814cf0,\n    0xcb3bab6b,\n    0xc035a266,\n    0xdd27b971,\n    0xd629b07c,\n    0xe7038f5f,\n    0xec0d8652,\n    0xf11f9d45,\n    0xfa119448,\n    0x934be303,\n    0x9845ea0e,\n    0x8557f119,\n    0x8e59f814,\n    0xbf73c737,\n    0xb47dce3a,\n    0xa96fd52d,\n    0xa261dc20,\n    0xf6ad766d,\n    0xfda37f60,\n    0xe0b16477,\n    0xebbf6d7a,\n    0xda955259,\n    0xd19b5b54,\n    0xcc894043,\n    0xc787494e,\n    0xaedd3e05,\n    0xa5d33708,\n    0xb8c12c1f,\n    0xb3cf2512,\n    0x82e51a31,\n    0x89eb133c,\n    0x94f9082b,\n    0x9ff70126,\n    0x464de6bd,\n    0x4d43efb0,\n    0x5051f4a7,\n    0x5b5ffdaa,\n    0x6a75c289,\n    0x617bcb84,\n    0x7c69d093,\n    0x7767d99e,\n    0x1e3daed5,\n    0x1533a7d8,\n    0x0821bccf,\n    0x032fb5c2,\n    0x32058ae1,\n    0x390b83ec,\n    0x241998fb,\n    0x2f1791f6,\n    0x8d764dd6,\n    0x867844db,\n    0x9b6a5fcc,\n    0x906456c1,\n    0xa14e69e2,\n    0xaa4060ef,\n    0xb7527bf8,\n    0xbc5c72f5,\n    0xd50605be,\n    0xde080cb3,\n    0xc31a17a4,\n    0xc8141ea9,\n    0xf93e218a,\n    0xf2302887,\n    0xef223390,\n    0xe42c3a9d,\n    0x3d96dd06,\n    0x3698d40b,\n    0x2b8acf1c,\n    0x2084c611,\n    0x11aef932,\n    0x1aa0f03f,\n    0x07b2eb28,\n    0x0cbce225,\n    0x65e6956e,\n    0x6ee89c63,\n    0x73fa8774,\n    0x78f48e79,\n    0x49deb15a,\n    0x42d0b857,\n    0x5fc2a340,\n    0x54ccaa4d,\n    0xf741ecda,\n    0xfc4fe5d7,\n    0xe15dfec0,\n    0xea53f7cd,\n    0xdb79c8ee,\n    0xd077c1e3,\n    0xcd65daf4,\n    0xc66bd3f9,\n    0xaf31a4b2,\n    0xa43fadbf,\n    0xb92db6a8,\n    0xb223bfa5,\n    0x83098086,\n    0x8807898b,\n    0x9515929c,\n    0x9e1b9b91,\n    0x47a17c0a,\n    0x4caf7507,\n    0x51bd6e10,\n    0x5ab3671d,\n    0x6b99583e,\n    0x60975133,\n    0x7d854a24,\n    0x768b4329,\n    0x1fd13462,\n    0x14df3d6f,\n    0x09cd2678,\n    0x02c32f75,\n    0x33e91056,\n    0x38e7195b,\n    0x25f5024c,\n    0x2efb0b41,\n    0x8c9ad761,\n    0x8794de6c,\n    0x9a86c57b,\n    0x9188cc76,\n    0xa0a2f355,\n    0xabacfa58,\n    0xb6bee14f,\n    0xbdb0e842,\n    0xd4ea9f09,\n    0xdfe49604,\n    0xc2f68d13,\n    0xc9f8841e,\n    0xf8d2bb3d,\n    0xf3dcb230,\n    0xeecea927,\n    0xe5c0a02a,\n    0x3c7a47b1,\n    0x37744ebc,\n    0x2a6655ab,\n    0x21685ca6,\n    0x10426385,\n    0x1b4c6a88,\n    0x065e719f,\n    0x0d507892,\n    0x640a0fd9,\n    0x6f0406d4,\n    0x72161dc3,\n    0x791814ce,\n    0x48322bed,\n    0x433c22e0,\n    0x5e2e39f7,\n    0x552030fa,\n    0x01ec9ab7,\n    0x0ae293ba,\n    0x17f088ad,\n    0x1cfe81a0,\n    0x2dd4be83,\n    0x26dab78e,\n    0x3bc8ac99,\n    0x30c6a594,\n    0x599cd2df,\n    0x5292dbd2,\n    0x4f80c0c5,\n    0x448ec9c8,\n    0x75a4f6eb,\n    0x7eaaffe6,\n    0x63b8e4f1,\n    0x68b6edfc,\n    0xb10c0a67,\n    0xba02036a,\n    0xa710187d,\n    0xac1e1170,\n    0x9d342e53,\n    0x963a275e,\n    0x8b283c49,\n    0x80263544,\n    0xe97c420f,\n    0xe2724b02,\n    0xff605015,\n    0xf46e5918,\n    0xc544663b,\n    0xce4a6f36,\n    0xd3587421,\n    0xd8567d2c,\n    0x7a37a10c,\n    0x7139a801,\n    0x6c2bb316,\n    0x6725ba1b,\n    0x560f8538,\n    0x5d018c35,\n    0x40139722,\n    0x4b1d9e2f,\n    0x2247e964,\n    0x2949e069,\n    0x345bfb7e,\n    0x3f55f273,\n    0x0e7fcd50,\n    0x0571c45d,\n    0x1863df4a,\n    0x136dd647,\n    0xcad731dc,\n    0xc1d938d1,\n    0xdccb23c6,\n    0xd7c52acb,\n    0xe6ef15e8,\n    0xede11ce5,\n    0xf0f307f2,\n    0xfbfd0eff,\n    0x92a779b4,\n    0x99a970b9,\n    0x84bb6bae,\n    0x8fb562a3,\n    0xbe9f5d80,\n    0xb591548d,\n    0xa8834f9a,\n    0xa38d4697\n];\nconst U3 = [\n    0x00000000,\n    0x0d0b0e09,\n    0x1a161c12,\n    0x171d121b,\n    0x342c3824,\n    0x3927362d,\n    0x2e3a2436,\n    0x23312a3f,\n    0x68587048,\n    0x65537e41,\n    0x724e6c5a,\n    0x7f456253,\n    0x5c74486c,\n    0x517f4665,\n    0x4662547e,\n    0x4b695a77,\n    0xd0b0e090,\n    0xddbbee99,\n    0xcaa6fc82,\n    0xc7adf28b,\n    0xe49cd8b4,\n    0xe997d6bd,\n    0xfe8ac4a6,\n    0xf381caaf,\n    0xb8e890d8,\n    0xb5e39ed1,\n    0xa2fe8cca,\n    0xaff582c3,\n    0x8cc4a8fc,\n    0x81cfa6f5,\n    0x96d2b4ee,\n    0x9bd9bae7,\n    0xbb7bdb3b,\n    0xb670d532,\n    0xa16dc729,\n    0xac66c920,\n    0x8f57e31f,\n    0x825ced16,\n    0x9541ff0d,\n    0x984af104,\n    0xd323ab73,\n    0xde28a57a,\n    0xc935b761,\n    0xc43eb968,\n    0xe70f9357,\n    0xea049d5e,\n    0xfd198f45,\n    0xf012814c,\n    0x6bcb3bab,\n    0x66c035a2,\n    0x71dd27b9,\n    0x7cd629b0,\n    0x5fe7038f,\n    0x52ec0d86,\n    0x45f11f9d,\n    0x48fa1194,\n    0x03934be3,\n    0x0e9845ea,\n    0x198557f1,\n    0x148e59f8,\n    0x37bf73c7,\n    0x3ab47dce,\n    0x2da96fd5,\n    0x20a261dc,\n    0x6df6ad76,\n    0x60fda37f,\n    0x77e0b164,\n    0x7aebbf6d,\n    0x59da9552,\n    0x54d19b5b,\n    0x43cc8940,\n    0x4ec78749,\n    0x05aedd3e,\n    0x08a5d337,\n    0x1fb8c12c,\n    0x12b3cf25,\n    0x3182e51a,\n    0x3c89eb13,\n    0x2b94f908,\n    0x269ff701,\n    0xbd464de6,\n    0xb04d43ef,\n    0xa75051f4,\n    0xaa5b5ffd,\n    0x896a75c2,\n    0x84617bcb,\n    0x937c69d0,\n    0x9e7767d9,\n    0xd51e3dae,\n    0xd81533a7,\n    0xcf0821bc,\n    0xc2032fb5,\n    0xe132058a,\n    0xec390b83,\n    0xfb241998,\n    0xf62f1791,\n    0xd68d764d,\n    0xdb867844,\n    0xcc9b6a5f,\n    0xc1906456,\n    0xe2a14e69,\n    0xefaa4060,\n    0xf8b7527b,\n    0xf5bc5c72,\n    0xbed50605,\n    0xb3de080c,\n    0xa4c31a17,\n    0xa9c8141e,\n    0x8af93e21,\n    0x87f23028,\n    0x90ef2233,\n    0x9de42c3a,\n    0x063d96dd,\n    0x0b3698d4,\n    0x1c2b8acf,\n    0x112084c6,\n    0x3211aef9,\n    0x3f1aa0f0,\n    0x2807b2eb,\n    0x250cbce2,\n    0x6e65e695,\n    0x636ee89c,\n    0x7473fa87,\n    0x7978f48e,\n    0x5a49deb1,\n    0x5742d0b8,\n    0x405fc2a3,\n    0x4d54ccaa,\n    0xdaf741ec,\n    0xd7fc4fe5,\n    0xc0e15dfe,\n    0xcdea53f7,\n    0xeedb79c8,\n    0xe3d077c1,\n    0xf4cd65da,\n    0xf9c66bd3,\n    0xb2af31a4,\n    0xbfa43fad,\n    0xa8b92db6,\n    0xa5b223bf,\n    0x86830980,\n    0x8b880789,\n    0x9c951592,\n    0x919e1b9b,\n    0x0a47a17c,\n    0x074caf75,\n    0x1051bd6e,\n    0x1d5ab367,\n    0x3e6b9958,\n    0x33609751,\n    0x247d854a,\n    0x29768b43,\n    0x621fd134,\n    0x6f14df3d,\n    0x7809cd26,\n    0x7502c32f,\n    0x5633e910,\n    0x5b38e719,\n    0x4c25f502,\n    0x412efb0b,\n    0x618c9ad7,\n    0x6c8794de,\n    0x7b9a86c5,\n    0x769188cc,\n    0x55a0a2f3,\n    0x58abacfa,\n    0x4fb6bee1,\n    0x42bdb0e8,\n    0x09d4ea9f,\n    0x04dfe496,\n    0x13c2f68d,\n    0x1ec9f884,\n    0x3df8d2bb,\n    0x30f3dcb2,\n    0x27eecea9,\n    0x2ae5c0a0,\n    0xb13c7a47,\n    0xbc37744e,\n    0xab2a6655,\n    0xa621685c,\n    0x85104263,\n    0x881b4c6a,\n    0x9f065e71,\n    0x920d5078,\n    0xd9640a0f,\n    0xd46f0406,\n    0xc372161d,\n    0xce791814,\n    0xed48322b,\n    0xe0433c22,\n    0xf75e2e39,\n    0xfa552030,\n    0xb701ec9a,\n    0xba0ae293,\n    0xad17f088,\n    0xa01cfe81,\n    0x832dd4be,\n    0x8e26dab7,\n    0x993bc8ac,\n    0x9430c6a5,\n    0xdf599cd2,\n    0xd25292db,\n    0xc54f80c0,\n    0xc8448ec9,\n    0xeb75a4f6,\n    0xe67eaaff,\n    0xf163b8e4,\n    0xfc68b6ed,\n    0x67b10c0a,\n    0x6aba0203,\n    0x7da71018,\n    0x70ac1e11,\n    0x539d342e,\n    0x5e963a27,\n    0x498b283c,\n    0x44802635,\n    0x0fe97c42,\n    0x02e2724b,\n    0x15ff6050,\n    0x18f46e59,\n    0x3bc54466,\n    0x36ce4a6f,\n    0x21d35874,\n    0x2cd8567d,\n    0x0c7a37a1,\n    0x017139a8,\n    0x166c2bb3,\n    0x1b6725ba,\n    0x38560f85,\n    0x355d018c,\n    0x22401397,\n    0x2f4b1d9e,\n    0x642247e9,\n    0x692949e0,\n    0x7e345bfb,\n    0x733f55f2,\n    0x500e7fcd,\n    0x5d0571c4,\n    0x4a1863df,\n    0x47136dd6,\n    0xdccad731,\n    0xd1c1d938,\n    0xc6dccb23,\n    0xcbd7c52a,\n    0xe8e6ef15,\n    0xe5ede11c,\n    0xf2f0f307,\n    0xfffbfd0e,\n    0xb492a779,\n    0xb999a970,\n    0xae84bb6b,\n    0xa38fb562,\n    0x80be9f5d,\n    0x8db59154,\n    0x9aa8834f,\n    0x97a38d46\n];\nconst U4 = [\n    0x00000000,\n    0x090d0b0e,\n    0x121a161c,\n    0x1b171d12,\n    0x24342c38,\n    0x2d392736,\n    0x362e3a24,\n    0x3f23312a,\n    0x48685870,\n    0x4165537e,\n    0x5a724e6c,\n    0x537f4562,\n    0x6c5c7448,\n    0x65517f46,\n    0x7e466254,\n    0x774b695a,\n    0x90d0b0e0,\n    0x99ddbbee,\n    0x82caa6fc,\n    0x8bc7adf2,\n    0xb4e49cd8,\n    0xbde997d6,\n    0xa6fe8ac4,\n    0xaff381ca,\n    0xd8b8e890,\n    0xd1b5e39e,\n    0xcaa2fe8c,\n    0xc3aff582,\n    0xfc8cc4a8,\n    0xf581cfa6,\n    0xee96d2b4,\n    0xe79bd9ba,\n    0x3bbb7bdb,\n    0x32b670d5,\n    0x29a16dc7,\n    0x20ac66c9,\n    0x1f8f57e3,\n    0x16825ced,\n    0x0d9541ff,\n    0x04984af1,\n    0x73d323ab,\n    0x7ade28a5,\n    0x61c935b7,\n    0x68c43eb9,\n    0x57e70f93,\n    0x5eea049d,\n    0x45fd198f,\n    0x4cf01281,\n    0xab6bcb3b,\n    0xa266c035,\n    0xb971dd27,\n    0xb07cd629,\n    0x8f5fe703,\n    0x8652ec0d,\n    0x9d45f11f,\n    0x9448fa11,\n    0xe303934b,\n    0xea0e9845,\n    0xf1198557,\n    0xf8148e59,\n    0xc737bf73,\n    0xce3ab47d,\n    0xd52da96f,\n    0xdc20a261,\n    0x766df6ad,\n    0x7f60fda3,\n    0x6477e0b1,\n    0x6d7aebbf,\n    0x5259da95,\n    0x5b54d19b,\n    0x4043cc89,\n    0x494ec787,\n    0x3e05aedd,\n    0x3708a5d3,\n    0x2c1fb8c1,\n    0x2512b3cf,\n    0x1a3182e5,\n    0x133c89eb,\n    0x082b94f9,\n    0x01269ff7,\n    0xe6bd464d,\n    0xefb04d43,\n    0xf4a75051,\n    0xfdaa5b5f,\n    0xc2896a75,\n    0xcb84617b,\n    0xd0937c69,\n    0xd99e7767,\n    0xaed51e3d,\n    0xa7d81533,\n    0xbccf0821,\n    0xb5c2032f,\n    0x8ae13205,\n    0x83ec390b,\n    0x98fb2419,\n    0x91f62f17,\n    0x4dd68d76,\n    0x44db8678,\n    0x5fcc9b6a,\n    0x56c19064,\n    0x69e2a14e,\n    0x60efaa40,\n    0x7bf8b752,\n    0x72f5bc5c,\n    0x05bed506,\n    0x0cb3de08,\n    0x17a4c31a,\n    0x1ea9c814,\n    0x218af93e,\n    0x2887f230,\n    0x3390ef22,\n    0x3a9de42c,\n    0xdd063d96,\n    0xd40b3698,\n    0xcf1c2b8a,\n    0xc6112084,\n    0xf93211ae,\n    0xf03f1aa0,\n    0xeb2807b2,\n    0xe2250cbc,\n    0x956e65e6,\n    0x9c636ee8,\n    0x877473fa,\n    0x8e7978f4,\n    0xb15a49de,\n    0xb85742d0,\n    0xa3405fc2,\n    0xaa4d54cc,\n    0xecdaf741,\n    0xe5d7fc4f,\n    0xfec0e15d,\n    0xf7cdea53,\n    0xc8eedb79,\n    0xc1e3d077,\n    0xdaf4cd65,\n    0xd3f9c66b,\n    0xa4b2af31,\n    0xadbfa43f,\n    0xb6a8b92d,\n    0xbfa5b223,\n    0x80868309,\n    0x898b8807,\n    0x929c9515,\n    0x9b919e1b,\n    0x7c0a47a1,\n    0x75074caf,\n    0x6e1051bd,\n    0x671d5ab3,\n    0x583e6b99,\n    0x51336097,\n    0x4a247d85,\n    0x4329768b,\n    0x34621fd1,\n    0x3d6f14df,\n    0x267809cd,\n    0x2f7502c3,\n    0x105633e9,\n    0x195b38e7,\n    0x024c25f5,\n    0x0b412efb,\n    0xd7618c9a,\n    0xde6c8794,\n    0xc57b9a86,\n    0xcc769188,\n    0xf355a0a2,\n    0xfa58abac,\n    0xe14fb6be,\n    0xe842bdb0,\n    0x9f09d4ea,\n    0x9604dfe4,\n    0x8d13c2f6,\n    0x841ec9f8,\n    0xbb3df8d2,\n    0xb230f3dc,\n    0xa927eece,\n    0xa02ae5c0,\n    0x47b13c7a,\n    0x4ebc3774,\n    0x55ab2a66,\n    0x5ca62168,\n    0x63851042,\n    0x6a881b4c,\n    0x719f065e,\n    0x78920d50,\n    0x0fd9640a,\n    0x06d46f04,\n    0x1dc37216,\n    0x14ce7918,\n    0x2bed4832,\n    0x22e0433c,\n    0x39f75e2e,\n    0x30fa5520,\n    0x9ab701ec,\n    0x93ba0ae2,\n    0x88ad17f0,\n    0x81a01cfe,\n    0xbe832dd4,\n    0xb78e26da,\n    0xac993bc8,\n    0xa59430c6,\n    0xd2df599c,\n    0xdbd25292,\n    0xc0c54f80,\n    0xc9c8448e,\n    0xf6eb75a4,\n    0xffe67eaa,\n    0xe4f163b8,\n    0xedfc68b6,\n    0x0a67b10c,\n    0x036aba02,\n    0x187da710,\n    0x1170ac1e,\n    0x2e539d34,\n    0x275e963a,\n    0x3c498b28,\n    0x35448026,\n    0x420fe97c,\n    0x4b02e272,\n    0x5015ff60,\n    0x5918f46e,\n    0x663bc544,\n    0x6f36ce4a,\n    0x7421d358,\n    0x7d2cd856,\n    0xa10c7a37,\n    0xa8017139,\n    0xb3166c2b,\n    0xba1b6725,\n    0x8538560f,\n    0x8c355d01,\n    0x97224013,\n    0x9e2f4b1d,\n    0xe9642247,\n    0xe0692949,\n    0xfb7e345b,\n    0xf2733f55,\n    0xcd500e7f,\n    0xc45d0571,\n    0xdf4a1863,\n    0xd647136d,\n    0x31dccad7,\n    0x38d1c1d9,\n    0x23c6dccb,\n    0x2acbd7c5,\n    0x15e8e6ef,\n    0x1ce5ede1,\n    0x07f2f0f3,\n    0x0efffbfd,\n    0x79b492a7,\n    0x70b999a9,\n    0x6bae84bb,\n    0x62a38fb5,\n    0x5d80be9f,\n    0x548db591,\n    0x4f9aa883,\n    0x4697a38d\n];\nfunction convertToInt32(bytes) {\n    const result = [];\n    for(let i = 0; i < bytes.length; i += 4){\n        result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);\n    }\n    return result;\n}\nclass AES {\n    get key() {\n        return __classPrivateFieldGet(this, _AES_key, \"f\").slice();\n    }\n    constructor(key){\n        _AES_key.set(this, void 0);\n        _AES_Kd.set(this, void 0);\n        _AES_Ke.set(this, void 0);\n        if (!(this instanceof AES)) {\n            throw Error(\"AES must be instanitated with `new`\");\n        }\n        __classPrivateFieldSet(this, _AES_key, new Uint8Array(key), \"f\");\n        const rounds = numberOfRounds[this.key.length];\n        if (rounds == null) {\n            throw new TypeError(\"invalid key size (must be 16, 24 or 32 bytes)\");\n        }\n        // encryption round keys\n        __classPrivateFieldSet(this, _AES_Ke, [], \"f\");\n        // decryption round keys\n        __classPrivateFieldSet(this, _AES_Kd, [], \"f\");\n        for(let i = 0; i <= rounds; i++){\n            __classPrivateFieldGet(this, _AES_Ke, \"f\").push([\n                0,\n                0,\n                0,\n                0\n            ]);\n            __classPrivateFieldGet(this, _AES_Kd, \"f\").push([\n                0,\n                0,\n                0,\n                0\n            ]);\n        }\n        const roundKeyCount = (rounds + 1) * 4;\n        const KC = this.key.length / 4;\n        // convert the key into ints\n        const tk = convertToInt32(this.key);\n        // copy values into round key arrays\n        let index;\n        for(let i = 0; i < KC; i++){\n            index = i >> 2;\n            __classPrivateFieldGet(this, _AES_Ke, \"f\")[index][i % 4] = tk[i];\n            __classPrivateFieldGet(this, _AES_Kd, \"f\")[rounds - index][i % 4] = tk[i];\n        }\n        // key expansion (fips-197 section 5.2)\n        let rconpointer = 0;\n        let t = KC, tt;\n        while(t < roundKeyCount){\n            tt = tk[KC - 1];\n            tk[0] ^= S[tt >> 16 & 0xFF] << 24 ^ S[tt >> 8 & 0xFF] << 16 ^ S[tt & 0xFF] << 8 ^ S[tt >> 24 & 0xFF] ^ rcon[rconpointer] << 24;\n            rconpointer += 1;\n            // key expansion (for non-256 bit)\n            if (KC != 8) {\n                for(let i = 1; i < KC; i++){\n                    tk[i] ^= tk[i - 1];\n                }\n            // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n            } else {\n                for(let i = 1; i < KC / 2; i++){\n                    tk[i] ^= tk[i - 1];\n                }\n                tt = tk[KC / 2 - 1];\n                tk[KC / 2] ^= S[tt & 0xFF] ^ S[tt >> 8 & 0xFF] << 8 ^ S[tt >> 16 & 0xFF] << 16 ^ S[tt >> 24 & 0xFF] << 24;\n                for(let i = KC / 2 + 1; i < KC; i++){\n                    tk[i] ^= tk[i - 1];\n                }\n            }\n            // copy values into round key arrays\n            let i = 0, r, c;\n            while(i < KC && t < roundKeyCount){\n                r = t >> 2;\n                c = t % 4;\n                __classPrivateFieldGet(this, _AES_Ke, \"f\")[r][c] = tk[i];\n                __classPrivateFieldGet(this, _AES_Kd, \"f\")[rounds - r][c] = tk[i++];\n                t++;\n            }\n        }\n        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n        for(let r = 1; r < rounds; r++){\n            for(let c = 0; c < 4; c++){\n                tt = __classPrivateFieldGet(this, _AES_Kd, \"f\")[r][c];\n                __classPrivateFieldGet(this, _AES_Kd, \"f\")[r][c] = U1[tt >> 24 & 0xFF] ^ U2[tt >> 16 & 0xFF] ^ U3[tt >> 8 & 0xFF] ^ U4[tt & 0xFF];\n            }\n        }\n    }\n    encrypt(plaintext) {\n        if (plaintext.length != 16) {\n            throw new TypeError(\"invalid plaintext size (must be 16 bytes)\");\n        }\n        const rounds = __classPrivateFieldGet(this, _AES_Ke, \"f\").length - 1;\n        const a = [\n            0,\n            0,\n            0,\n            0\n        ];\n        // convert plaintext to (ints ^ key)\n        let t = convertToInt32(plaintext);\n        for(let i = 0; i < 4; i++){\n            t[i] ^= __classPrivateFieldGet(this, _AES_Ke, \"f\")[0][i];\n        }\n        // apply round transforms\n        for(let r = 1; r < rounds; r++){\n            for(let i = 0; i < 4; i++){\n                a[i] = T1[t[i] >> 24 & 0xff] ^ T2[t[(i + 1) % 4] >> 16 & 0xff] ^ T3[t[(i + 2) % 4] >> 8 & 0xff] ^ T4[t[(i + 3) % 4] & 0xff] ^ __classPrivateFieldGet(this, _AES_Ke, \"f\")[r][i];\n            }\n            t = a.slice();\n        }\n        // the last round is special\n        const result = new Uint8Array(16);\n        let tt = 0;\n        for(let i = 0; i < 4; i++){\n            tt = __classPrivateFieldGet(this, _AES_Ke, \"f\")[rounds][i];\n            result[4 * i] = (S[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;\n            result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;\n            result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;\n            result[4 * i + 3] = (S[t[(i + 3) % 4] & 0xff] ^ tt) & 0xff;\n        }\n        return result;\n    }\n    decrypt(ciphertext) {\n        if (ciphertext.length != 16) {\n            throw new TypeError(\"invalid ciphertext size (must be 16 bytes)\");\n        }\n        const rounds = __classPrivateFieldGet(this, _AES_Kd, \"f\").length - 1;\n        const a = [\n            0,\n            0,\n            0,\n            0\n        ];\n        // convert plaintext to (ints ^ key)\n        let t = convertToInt32(ciphertext);\n        for(let i = 0; i < 4; i++){\n            t[i] ^= __classPrivateFieldGet(this, _AES_Kd, \"f\")[0][i];\n        }\n        // apply round transforms\n        for(let r = 1; r < rounds; r++){\n            for(let i = 0; i < 4; i++){\n                a[i] = T5[t[i] >> 24 & 0xff] ^ T6[t[(i + 3) % 4] >> 16 & 0xff] ^ T7[t[(i + 2) % 4] >> 8 & 0xff] ^ T8[t[(i + 1) % 4] & 0xff] ^ __classPrivateFieldGet(this, _AES_Kd, \"f\")[r][i];\n            }\n            t = a.slice();\n        }\n        // the last round is special\n        const result = new Uint8Array(16);\n        let tt = 0;\n        for(let i = 0; i < 4; i++){\n            tt = __classPrivateFieldGet(this, _AES_Kd, \"f\")[rounds][i];\n            result[4 * i] = (Si[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;\n            result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;\n            result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;\n            result[4 * i + 3] = (Si[t[(i + 1) % 4] & 0xff] ^ tt) & 0xff;\n        }\n        return result;\n    }\n}\nexports.AES = AES;\n_AES_key = new WeakMap(), _AES_Kd = new WeakMap(), _AES_Ke = new WeakMap(); //# sourceMappingURL=aes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL25vZGVfbW9kdWxlcy9hZXMtanMvbGliLmNvbW1vbmpzL2Flcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLHFGQUFxRixHQUNyRixJQUFJQSx5QkFBeUIsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxzQkFBc0IsSUFBSyxTQUFVQyxRQUFRLEVBQUVDLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxDQUFDO0lBQ3BHLElBQUlELFNBQVMsT0FBTyxDQUFDQyxHQUFHLE1BQU0sSUFBSUMsVUFBVTtJQUM1QyxJQUFJLE9BQU9ILFVBQVUsYUFBYUQsYUFBYUMsU0FBUyxDQUFDRSxJQUFJLENBQUNGLE1BQU1JLEdBQUcsQ0FBQ0wsV0FBVyxNQUFNLElBQUlJLFVBQVU7SUFDdkcsT0FBT0YsU0FBUyxNQUFNQyxJQUFJRCxTQUFTLE1BQU1DLEVBQUVHLElBQUksQ0FBQ04sWUFBWUcsSUFBSUEsRUFBRUksS0FBSyxHQUFHTixNQUFNTyxHQUFHLENBQUNSO0FBQ3hGO0FBQ0EsSUFBSVMseUJBQXlCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsc0JBQXNCLElBQUssU0FBVVQsUUFBUSxFQUFFQyxLQUFLLEVBQUVNLEtBQUssRUFBRUwsSUFBSSxFQUFFQyxDQUFDO0lBQzNHLElBQUlELFNBQVMsS0FBSyxNQUFNLElBQUlFLFVBQVU7SUFDdEMsSUFBSUYsU0FBUyxPQUFPLENBQUNDLEdBQUcsTUFBTSxJQUFJQyxVQUFVO0lBQzVDLElBQUksT0FBT0gsVUFBVSxhQUFhRCxhQUFhQyxTQUFTLENBQUNFLElBQUksQ0FBQ0YsTUFBTUksR0FBRyxDQUFDTCxXQUFXLE1BQU0sSUFBSUksVUFBVTtJQUN2RyxPQUFPLFNBQVUsTUFBTUQsRUFBRUcsSUFBSSxDQUFDTixVQUFVTyxTQUFTSixJQUFJQSxFQUFFSSxLQUFLLEdBQUdBLFFBQVFOLE1BQU1TLEdBQUcsQ0FBQ1YsVUFBVU8sUUFBU0E7QUFDeEc7QUFDQSxJQUFJSSxVQUFVQyxTQUFTQztBQUN2QkMsOENBQTZDO0lBQUVQLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RTLFdBQVcsR0FBRyxLQUFLO0FBQ25CLDhCQUE4QjtBQUM5QixNQUFNRSxpQkFBaUI7SUFBRSxJQUFJO0lBQUksSUFBSTtJQUFJLElBQUk7QUFBRztBQUNoRCx1QkFBdUI7QUFDdkIsTUFBTUMsT0FBTztJQUFDO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtDQUFLO0FBQ2pNLGtEQUFrRDtBQUNsRCxNQUFNQyxJQUFJO0lBQUM7SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07Q0FBSztBQUMxZ0QsTUFBTUMsS0FBSztJQUFDO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0NBQUs7QUFDM2dELGlDQUFpQztBQUNqQyxNQUFNQyxLQUFLO0lBQUM7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7Q0FBVztBQUMzZ0csTUFBTUMsS0FBSztJQUFDO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0NBQVc7QUFDM2dHLE1BQU1DLEtBQUs7SUFBQztJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtDQUFXO0FBQzNnRyxNQUFNQyxLQUFLO0lBQUM7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7Q0FBVztBQUMzZ0csaUNBQWlDO0FBQ2pDLE1BQU1DLEtBQUs7SUFBQztJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtDQUFXO0FBQzNnRyxNQUFNQyxLQUFLO0lBQUM7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7Q0FBVztBQUMzZ0csTUFBTUMsS0FBSztJQUFDO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0NBQVc7QUFDM2dHLE1BQU1DLEtBQUs7SUFBQztJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtDQUFXO0FBQzNnRywrQ0FBK0M7QUFDL0MsTUFBTUMsS0FBSztJQUFDO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0NBQVc7QUFDM2dHLE1BQU1DLEtBQUs7SUFBQztJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtDQUFXO0FBQzNnRyxNQUFNQyxLQUFLO0lBQUM7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7Q0FBVztBQUMzZ0csTUFBTUMsS0FBSztJQUFDO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJQUFZO0lBQVk7SUFBWTtJ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SUMsSUFBSSxFQUFFLEdBQUcsQ0FBQ2hCLEVBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBQ2dCLElBQUksS0FBSyxFQUFFLElBQUksSUFBSyxLQUFLLEdBQUllLE1BQU0sQ0FBQyxJQUFLO1lBQ3JFaEIsTUFBTSxDQUFDLElBQUlDLElBQUksRUFBRSxHQUFHLENBQUNoQixFQUFFLENBQUM4QixDQUFDLENBQUMsQ0FBQ2QsSUFBSSxLQUFLLEVBQUUsR0FBRyxLQUFLLEdBQUdlLEVBQUMsSUFBSztRQUMzRDtRQUNBLE9BQU9oQjtJQUNYO0FBQ0o7QUFDQXBCLFdBQVcsR0FBR0M7QUFDZE4sV0FBVyxJQUFJaUQsV0FBV2hELFVBQVUsSUFBSWdELFdBQVcvQyxVQUFVLElBQUkrQyxXQUNqRSwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL25vZGVfbW9kdWxlcy9hZXMtanMvbGliLmNvbW1vbmpzL2Flcy5qcz8zMTQ4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyohIE1JVCBMaWNlbnNlLiBDb3B5cmlnaHQgMjAxNS0yMDIyIFJpY2hhcmQgTW9vcmUgPG1lQHJpY21vby5jb20+LiBTZWUgTElDRU5TRS50eHQuICovXG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX0FFU19rZXksIF9BRVNfS2QsIF9BRVNfS2U7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFFUyA9IHZvaWQgMDtcbi8vIE51bWJlciBvZiByb3VuZHMgYnkga2V5c2l6ZVxuY29uc3QgbnVtYmVyT2ZSb3VuZHMgPSB7IDE2OiAxMCwgMjQ6IDEyLCAzMjogMTQgfTtcbi8vIFJvdW5kIGNvbnN0YW50IHdvcmRzXG5jb25zdCByY29uID0gWzB4MDEsIDB4MDIsIDB4MDQsIDB4MDgsIDB4MTAsIDB4MjAsIDB4NDAsIDB4ODAsIDB4MWIsIDB4MzYsIDB4NmMsIDB4ZDgsIDB4YWIsIDB4NGQsIDB4OWEsIDB4MmYsIDB4NWUsIDB4YmMsIDB4NjMsIDB4YzYsIDB4OTcsIDB4MzUsIDB4NmEsIDB4ZDQsIDB4YjMsIDB4N2QsIDB4ZmEsIDB4ZWYsIDB4YzUsIDB4OTFdO1xuLy8gUy1ib3ggYW5kIEludmVyc2UgUy1ib3ggKFMgaXMgZm9yIFN1YnN0aXR1dGlvbilcbmNvbnN0IFMgPSBbMHg2MywgMHg3YywgMHg3NywgMHg3YiwgMHhmMiwgMHg2YiwgMHg2ZiwgMHhjNSwgMHgzMCwgMHgwMSwgMHg2NywgMHgyYiwgMHhmZSwgMHhkNywgMHhhYiwgMHg3NiwgMHhjYSwgMHg4MiwgMHhjOSwgMHg3ZCwgMHhmYSwgMHg1OSwgMHg0NywgMHhmMCwgMHhhZCwgMHhkNCwgMHhhMiwgMHhhZiwgMHg5YywgMHhhNCwgMHg3MiwgMHhjMCwgMHhiNywgMHhmZCwgMHg5MywgMHgyNiwgMHgzNiwgMHgzZiwgMHhmNywgMHhjYywgMHgzNCwgMHhhNSwgMHhlNSwgMHhmMSwgMHg3MSwgMHhkOCwgMHgzMSwgMHgxNSwgMHgwNCwgMHhjNywgMHgyMywgMHhjMywgMHgxOCwgMHg5NiwgMHgwNSwgMHg5YSwgMHgwNywgMHgxMiwgMHg4MCwgMHhlMiwgMHhlYiwgMHgyNywgMHhiMiwgMHg3NSwgMHgwOSwgMHg4MywgMHgyYywgMHgxYSwgMHgxYiwgMHg2ZSwgMHg1YSwgMHhhMCwgMHg1MiwgMHgzYiwgMHhkNiwgMHhiMywgMHgyOSwgMHhlMywgMHgyZiwgMHg4NCwgMHg1MywgMHhkMSwgMHgwMCwgMHhlZCwgMHgyMCwgMHhmYywgMHhiMSwgMHg1YiwgMHg2YSwgMHhjYiwgMHhiZSwgMHgzOSwgMHg0YSwgMHg0YywgMHg1OCwgMHhjZiwgMHhkMCwgMHhlZiwgMHhhYSwgMHhmYiwgMHg0MywgMHg0ZCwgMHgzMywgMHg4NSwgMHg0NSwgMHhmOSwgMHgwMiwgMHg3ZiwgMHg1MCwgMHgzYywgMHg5ZiwgMHhhOCwgMHg1MSwgMHhhMywgMHg0MCwgMHg4ZiwgMHg5MiwgMHg5ZCwgMHgzOCwgMHhmNSwgMHhiYywgMHhiNiwgMHhkYSwgMHgyMSwgMHgxMCwgMHhmZiwgMHhmMywgMHhkMiwgMHhjZCwgMHgwYywgMHgxMywgMHhlYywgMHg1ZiwgMHg5NywgMHg0NCwgMHgxNywgMHhjNCwgMHhhNywgMHg3ZSwgMHgzZCwgMHg2NCwgMHg1ZCwgMHgxOSwgMHg3MywgMHg2MCwgMHg4MSwgMHg0ZiwgMHhkYywgMHgyMiwgMHgyYSwgMHg5MCwgMHg4OCwgMHg0NiwgMHhlZSwgMHhiOCwgMHgxNCwgMHhkZSwgMHg1ZSwgMHgwYiwgMHhkYiwgMHhlMCwgMHgzMiwgMHgzYSwgMHgwYSwgMHg0OSwgMHgwNiwgMHgyNCwgMHg1YywgMHhjMiwgMHhkMywgMHhhYywgMHg2MiwgMHg5MSwgMHg5NSwgMHhlNCwgMHg3OSwgMHhlNywgMHhjOCwgMHgzNywgMHg2ZCwgMHg4ZCwgMHhkNSwgMHg0ZSwgMHhhOSwgMHg2YywgMHg1NiwgMHhmNCwgMHhlYSwgMHg2NSwgMHg3YSwgMHhhZSwgMHgwOCwgMHhiYSwgMHg3OCwgMHgyNSwgMHgyZSwgMHgxYywgMHhhNiwgMHhiNCwgMHhjNiwgMHhlOCwgMHhkZCwgMHg3NCwgMHgxZiwgMHg0YiwgMHhiZCwgMHg4YiwgMHg4YSwgMHg3MCwgMHgzZSwgMHhiNSwgMHg2NiwgMHg0OCwgMHgwMywgMHhmNiwgMHgwZSwgMHg2MSwgMHgzNSwgMHg1NywgMHhiOSwgMHg4NiwgMHhjMSwgMHgxZCwgMHg5ZSwgMHhlMSwgMHhmOCwgMHg5OCwgMHgxMSwgMHg2OSwgMHhkOSwgMHg4ZSwgMHg5NCwgMHg5YiwgMHgxZSwgMHg4NywgMHhlOSwgMHhjZSwgMHg1NSwgMHgyOCwgMHhkZiwgMHg4YywgMHhhMSwgMHg4OSwgMHgwZCwgMHhiZiwgMHhlNiwgMHg0MiwgMHg2OCwgMHg0MSwgMHg5OSwgMHgyZCwgMHgwZiwgMHhiMCwgMHg1NCwgMHhiYiwgMHgxNl07XG5jb25zdCBTaSA9IFsweDUyLCAweDA5LCAweDZhLCAweGQ1LCAweDMwLCAweDM2LCAweGE1LCAweDM4LCAweGJmLCAweDQwLCAweGEzLCAweDllLCAweDgxLCAweGYzLCAweGQ3LCAweGZiLCAweDdjLCAweGUzLCAweDM5LCAweDgyLCAweDliLCAweDJmLCAweGZmLCAweDg3LCAweDM0LCAweDhlLCAweDQzLCAweDQ0LCAweGM0LCAweGRlLCAweGU5LCAweGNiLCAweDU0LCAweDdiLCAweDk0LCAweDMyLCAweGE2LCAweGMyLCAweDIzLCAweDNkLCAweGVlLCAweDRjLCAweDk1LCAweDBiLCAweDQyLCAweGZhLCAweGMzLCAweDRlLCAweDA4LCAweDJlLCAweGExLCAweDY2LCAweDI4LCAweGQ5LCAweDI0LCAweGIyLCAweDc2LCAweDViLCAweGEyLCAweDQ5LCAweDZkLCAweDhiLCAweGQxLCAweDI1LCAweDcyLCAweGY4LCAweGY2LCAweDY0LCAweDg2LCAweDY4LCAweDk4LCAweDE2LCAweGQ0LCAweGE0LCAweDVjLCAweGNjLCAweDVkLCAweDY1LCAweGI2LCAweDkyLCAweDZjLCAweDcwLCAweDQ4LCAweDUwLCAweGZkLCAweGVkLCAweGI5LCAweGRhLCAweDVlLCAweDE1LCAweDQ2LCAweDU3LCAweGE3LCAweDhkLCAweDlkLCAweDg0LCAweDkwLCAweGQ4LCAweGFiLCAweDAwLCAweDhjLCAweGJjLCAweGQzLCAweDBhLCAweGY3LCAweGU0LCAweDU4LCAweDA1LCAweGI4LCAweGIzLCAweDQ1LCAweDA2LCAweGQwLCAweDJjLCAweDFlLCAweDhmLCAweGNhLCAweDNmLCAweDBmLCAweDAyLCAweGMxLCAweGFmLCAweGJkLCAweDAzLCAweDAxLCAweDEzLCAweDhhLCAweDZiLCAweDNhLCAweDkxLCAweDExLCAweDQxLCAweDRmLCAweDY3LCAweGRjLCAweGVhLCAweDk3LCAweGYyLCAweGNmLCAweGNlLCAweGYwLCAweGI0LCAweGU2LCAweDczLCAweDk2LCAweGFjLCAweDc0LCAweDIyLCAweGU3LCAweGFkLCAweDM1LCAweDg1LCAweGUyLCAweGY5LCAweDM3LCAweGU4LCAweDFjLCAweDc1LCAweGRmLCAweDZlLCAweDQ3LCAweGYxLCAweDFhLCAweDcxLCAweDFkLCAweDI5LCAweGM1LCAweDg5LCAweDZmLCAweGI3LCAweDYyLCAweDBlLCAweGFhLCAweDE4LCAweGJlLCAweDFiLCAweGZjLCAweDU2LCAweDNlLCAweDRiLCAweGM2LCAweGQyLCAweDc5LCAweDIwLCAweDlhLCAweGRiLCAweGMwLCAweGZlLCAweDc4LCAweGNkLCAweDVhLCAweGY0LCAweDFmLCAweGRkLCAweGE4LCAweDMzLCAweDg4LCAweDA3LCAweGM3LCAweDMxLCAweGIxLCAweDEyLCAweDEwLCAweDU5LCAweDI3LCAweDgwLCAweGVjLCAweDVmLCAweDYwLCAweDUxLCAweDdmLCAweGE5LCAweDE5LCAweGI1LCAweDRhLCAweDBkLCAweDJkLCAweGU1LCAweDdhLCAweDlmLCAweDkzLCAweGM5LCAweDljLCAweGVmLCAweGEwLCAweGUwLCAweDNiLCAweDRkLCAweGFlLCAweDJhLCAweGY1LCAweGIwLCAweGM4LCAweGViLCAweGJiLCAweDNjLCAweDgzLCAweDUzLCAweDk5LCAweDYxLCAweDE3LCAweDJiLCAweDA0LCAweDdlLCAweGJhLCAweDc3LCAweGQ2LCAweDI2LCAweGUxLCAweDY5LCAweDE0LCAweDYzLCAweDU1LCAweDIxLCAweDBjLCAweDdkXTtcbi8vIFRyYW5zZm9ybWF0aW9ucyBmb3IgZW5jcnlwdGlvblxuY29uc3QgVDEgPSBbMHhjNjYzNjNhNSwgMHhmODdjN2M4NCwgMHhlZTc3Nzc5OSwgMHhmNjdiN2I4ZCwgMHhmZmYyZjIwZCwgMHhkNjZiNmJiZCwgMHhkZTZmNmZiMSwgMHg5MWM1YzU1NCwgMHg2MDMwMzA1MCwgMHgwMjAxMDEwMywgMHhjZTY3NjdhOSwgMHg1NjJiMmI3ZCwgMHhlN2ZlZmUxOSwgMHhiNWQ3ZDc2MiwgMHg0ZGFiYWJlNiwgMHhlYzc2NzY5YSwgMHg4ZmNhY2E0NSwgMHgxZjgyODI5ZCwgMHg4OWM5Yzk0MCwgMHhmYTdkN2Q4NywgMHhlZmZhZmExNSwgMHhiMjU5NTllYiwgMHg4ZTQ3NDdjOSwgMHhmYmYwZjAwYiwgMHg0MWFkYWRlYywgMHhiM2Q0ZDQ2NywgMHg1ZmEyYTJmZCwgMHg0NWFmYWZlYSwgMHgyMzljOWNiZiwgMHg1M2E0YTRmNywgMHhlNDcyNzI5NiwgMHg5YmMwYzA1YiwgMHg3NWI3YjdjMiwgMHhlMWZkZmQxYywgMHgzZDkzOTNhZSwgMHg0YzI2MjY2YSwgMHg2YzM2MzY1YSwgMHg3ZTNmM2Y0MSwgMHhmNWY3ZjcwMiwgMHg4M2NjY2M0ZiwgMHg2ODM0MzQ1YywgMHg1MWE1YTVmNCwgMHhkMWU1ZTUzNCwgMHhmOWYxZjEwOCwgMHhlMjcxNzE5MywgMHhhYmQ4ZDg3MywgMHg2MjMxMzE1MywgMHgyYTE1MTUzZiwgMHgwODA0MDQwYywgMHg5NWM3Yzc1MiwgMHg0NjIzMjM2NSwgMHg5ZGMzYzM1ZSwgMHgzMDE4MTgyOCwgMHgzNzk2OTZhMSwgMHgwYTA1MDUwZiwgMHgyZjlhOWFiNSwgMHgwZTA3MDcwOSwgMHgyNDEyMTIzNiwgMHgxYjgwODA5YiwgMHhkZmUyZTIzZCwgMHhjZGViZWIyNiwgMHg0ZTI3Mjc2OSwgMHg3ZmIyYjJjZCwgMHhlYTc1NzU5ZiwgMHgxMjA5MDkxYiwgMHgxZDgzODM5ZSwgMHg1ODJjMmM3NCwgMHgzNDFhMWEyZSwgMHgzNjFiMWIyZCwgMHhkYzZlNmViMiwgMHhiNDVhNWFlZSwgMHg1YmEwYTBmYiwgMHhhNDUyNTJmNiwgMHg3NjNiM2I0ZCwgMHhiN2Q2ZDY2MSwgMHg3ZGIzYjNjZSwgMHg1MjI5Mjk3YiwgMHhkZGUzZTMzZSwgMHg1ZTJmMmY3MSwgMHgxMzg0ODQ5NywgMHhhNjUzNTNmNSwgMHhiOWQxZDE2OCwgMHgwMDAwMDAwMCwgMHhjMWVkZWQyYywgMHg0MDIwMjA2MCwgMHhlM2ZjZmMxZiwgMHg3OWIxYjFjOCwgMHhiNjViNWJlZCwgMHhkNDZhNmFiZSwgMHg4ZGNiY2I0NiwgMHg2N2JlYmVkOSwgMHg3MjM5Mzk0YiwgMHg5NDRhNGFkZSwgMHg5ODRjNGNkNCwgMHhiMDU4NThlOCwgMHg4NWNmY2Y0YSwgMHhiYmQwZDA2YiwgMHhjNWVmZWYyYSwgMHg0ZmFhYWFlNSwgMHhlZGZiZmIxNiwgMHg4NjQzNDNjNSwgMHg5YTRkNGRkNywgMHg2NjMzMzM1NSwgMHgxMTg1ODU5NCwgMHg4YTQ1NDVjZiwgMHhlOWY5ZjkxMCwgMHgwNDAyMDIwNiwgMHhmZTdmN2Y4MSwgMHhhMDUwNTBmMCwgMHg3ODNjM2M0NCwgMHgyNTlmOWZiYSwgMHg0YmE4YThlMywgMHhhMjUxNTFmMywgMHg1ZGEzYTNmZSwgMHg4MDQwNDBjMCwgMHgwNThmOGY4YSwgMHgzZjkyOTJhZCwgMHgyMTlkOWRiYywgMHg3MDM4Mzg0OCwgMHhmMWY1ZjUwNCwgMHg2M2JjYmNkZiwgMHg3N2I2YjZjMSwgMHhhZmRhZGE3NSwgMHg0MjIxMjE2MywgMHgyMDEwMTAzMCwgMHhlNWZmZmYxYSwgMHhmZGYzZjMwZSwgMHhiZmQyZDI2ZCwgMHg4MWNkY2Q0YywgMHgxODBjMGMxNCwgMHgyNjEzMTMzNSwgMHhjM2VjZWMyZiwgMHhiZTVmNWZlMSwgMHgzNTk3OTdhMiwgMHg4ODQ0NDRjYywgMHgyZTE3MTczOSwgMHg5M2M0YzQ1NywgMHg1NWE3YTdmMiwgMHhmYzdlN2U4MiwgMHg3YTNkM2Q0NywgMHhjODY0NjRhYywgMHhiYTVkNWRlNywgMHgzMjE5MTkyYiwgMHhlNjczNzM5NSwgMHhjMDYwNjBhMCwgMHgxOTgxODE5OCwgMHg5ZTRmNGZkMSwgMHhhM2RjZGM3ZiwgMHg0NDIyMjI2NiwgMHg1NDJhMmE3ZSwgMHgzYjkwOTBhYiwgMHgwYjg4ODg4MywgMHg4YzQ2NDZjYSwgMHhjN2VlZWUyOSwgMHg2YmI4YjhkMywgMHgyODE0MTQzYywgMHhhN2RlZGU3OSwgMHhiYzVlNWVlMiwgMHgxNjBiMGIxZCwgMHhhZGRiZGI3NiwgMHhkYmUwZTAzYiwgMHg2NDMyMzI1NiwgMHg3NDNhM2E0ZSwgMHgxNDBhMGExZSwgMHg5MjQ5NDlkYiwgMHgwYzA2MDYwYSwgMHg0ODI0MjQ2YywgMHhiODVjNWNlNCwgMHg5ZmMyYzI1ZCwgMHhiZGQzZDM2ZSwgMHg0M2FjYWNlZiwgMHhjNDYyNjJhNiwgMHgzOTkxOTFhOCwgMHgzMTk1OTVhNCwgMHhkM2U0ZTQzNywgMHhmMjc5Nzk4YiwgMHhkNWU3ZTczMiwgMHg4YmM4Yzg0MywgMHg2ZTM3Mzc1OSwgMHhkYTZkNmRiNywgMHgwMThkOGQ4YywgMHhiMWQ1ZDU2NCwgMHg5YzRlNGVkMiwgMHg0OWE5YTllMCwgMHhkODZjNmNiNCwgMHhhYzU2NTZmYSwgMHhmM2Y0ZjQwNywgMHhjZmVhZWEyNSwgMHhjYTY1NjVhZiwgMHhmNDdhN2E4ZSwgMHg0N2FlYWVlOSwgMHgxMDA4MDgxOCwgMHg2ZmJhYmFkNSwgMHhmMDc4Nzg4OCwgMHg0YTI1MjU2ZiwgMHg1YzJlMmU3MiwgMHgzODFjMWMyNCwgMHg1N2E2YTZmMSwgMHg3M2I0YjRjNywgMHg5N2M2YzY1MSwgMHhjYmU4ZTgyMywgMHhhMWRkZGQ3YywgMHhlODc0NzQ5YywgMHgzZTFmMWYyMSwgMHg5NjRiNGJkZCwgMHg2MWJkYmRkYywgMHgwZDhiOGI4NiwgMHgwZjhhOGE4NSwgMHhlMDcwNzA5MCwgMHg3YzNlM2U0MiwgMHg3MWI1YjVjNCwgMHhjYzY2NjZhYSwgMHg5MDQ4NDhkOCwgMHgwNjAzMDMwNSwgMHhmN2Y2ZjYwMSwgMHgxYzBlMGUxMiwgMHhjMjYxNjFhMywgMHg2YTM1MzU1ZiwgMHhhZTU3NTdmOSwgMHg2OWI5YjlkMCwgMHgxNzg2ODY5MSwgMHg5OWMxYzE1OCwgMHgzYTFkMWQyNywgMHgyNzllOWViOSwgMHhkOWUxZTEzOCwgMHhlYmY4ZjgxMywgMHgyYjk4OThiMywgMHgyMjExMTEzMywgMHhkMjY5NjliYiwgMHhhOWQ5ZDk3MCwgMHgwNzhlOGU4OSwgMHgzMzk0OTRhNywgMHgyZDliOWJiNiwgMHgzYzFlMWUyMiwgMHgxNTg3ODc5MiwgMHhjOWU5ZTkyMCwgMHg4N2NlY2U0OSwgMHhhYTU1NTVmZiwgMHg1MDI4Mjg3OCwgMHhhNWRmZGY3YSwgMHgwMzhjOGM4ZiwgMHg1OWExYTFmOCwgMHgwOTg5ODk4MCwgMHgxYTBkMGQxNywgMHg2NWJmYmZkYSwgMHhkN2U2ZTYzMSwgMHg4NDQyNDJjNiwgMHhkMDY4NjhiOCwgMHg4MjQxNDFjMywgMHgyOTk5OTliMCwgMHg1YTJkMmQ3NywgMHgxZTBmMGYxMSwgMHg3YmIwYjBjYiwgMHhhODU0NTRmYywgMHg2ZGJiYmJkNiwgMHgyYzE2MTYzYV07XG5jb25zdCBUMiA9IFsweGE1YzY2MzYzLCAweDg0Zjg3YzdjLCAweDk5ZWU3Nzc3LCAweDhkZjY3YjdiLCAweDBkZmZmMmYyLCAweGJkZDY2YjZiLCAweGIxZGU2ZjZmLCAweDU0OTFjNWM1LCAweDUwNjAzMDMwLCAweDAzMDIwMTAxLCAweGE5Y2U2NzY3LCAweDdkNTYyYjJiLCAweDE5ZTdmZWZlLCAweDYyYjVkN2Q3LCAweGU2NGRhYmFiLCAweDlhZWM3Njc2LCAweDQ1OGZjYWNhLCAweDlkMWY4MjgyLCAweDQwODljOWM5LCAweDg3ZmE3ZDdkLCAweDE1ZWZmYWZhLCAweGViYjI1OTU5LCAweGM5OGU0NzQ3LCAweDBiZmJmMGYwLCAweGVjNDFhZGFkLCAweDY3YjNkNGQ0LCAweGZkNWZhMmEyLCAweGVhNDVhZmFmLCAweGJmMjM5YzljLCAweGY3NTNhNGE0LCAweDk2ZTQ3MjcyLCAweDViOWJjMGMwLCAweGMyNzViN2I3LCAweDFjZTFmZGZkLCAweGFlM2Q5MzkzLCAweDZhNGMyNjI2LCAweDVhNmMzNjM2LCAweDQxN2UzZjNmLCAweDAyZjVmN2Y3LCAweDRmODNjY2NjLCAweDVjNjgzNDM0LCAweGY0NTFhNWE1LCAweDM0ZDFlNWU1LCAweDA4ZjlmMWYxLCAweDkzZTI3MTcxLCAweDczYWJkOGQ4LCAweDUzNjIzMTMxLCAweDNmMmExNTE1LCAweDBjMDgwNDA0LCAweDUyOTVjN2M3LCAweDY1NDYyMzIzLCAweDVlOWRjM2MzLCAweDI4MzAxODE4LCAweGExMzc5Njk2LCAweDBmMGEwNTA1LCAweGI1MmY5YTlhLCAweDA5MGUwNzA3LCAweDM2MjQxMjEyLCAweDliMWI4MDgwLCAweDNkZGZlMmUyLCAweDI2Y2RlYmViLCAweDY5NGUyNzI3LCAweGNkN2ZiMmIyLCAweDlmZWE3NTc1LCAweDFiMTIwOTA5LCAweDllMWQ4MzgzLCAweDc0NTgyYzJjLCAweDJlMzQxYTFhLCAweDJkMzYxYjFiLCAweGIyZGM2ZTZlLCAweGVlYjQ1YTVhLCAweGZiNWJhMGEwLCAweGY2YTQ1MjUyLCAweDRkNzYzYjNiLCAweDYxYjdkNmQ2LCAweGNlN2RiM2IzLCAweDdiNTIyOTI5LCAweDNlZGRlM2UzLCAweDcxNWUyZjJmLCAweDk3MTM4NDg0LCAweGY1YTY1MzUzLCAweDY4YjlkMWQxLCAweDAwMDAwMDAwLCAweDJjYzFlZGVkLCAweDYwNDAyMDIwLCAweDFmZTNmY2ZjLCAweGM4NzliMWIxLCAweGVkYjY1YjViLCAweGJlZDQ2YTZhLCAweDQ2OGRjYmNiLCAweGQ5NjdiZWJlLCAweDRiNzIzOTM5LCAweGRlOTQ0YTRhLCAweGQ0OTg0YzRjLCAweGU4YjA1ODU4LCAweDRhODVjZmNmLCAweDZiYmJkMGQwLCAweDJhYzVlZmVmLCAweGU1NGZhYWFhLCAweDE2ZWRmYmZiLCAweGM1ODY0MzQzLCAweGQ3OWE0ZDRkLCAweDU1NjYzMzMzLCAweDk0MTE4NTg1LCAweGNmOGE0NTQ1LCAweDEwZTlmOWY5LCAweDA2MDQwMjAyLCAweDgxZmU3ZjdmLCAweGYwYTA1MDUwLCAweDQ0NzgzYzNjLCAweGJhMjU5ZjlmLCAweGUzNGJhOGE4LCAweGYzYTI1MTUxLCAweGZlNWRhM2EzLCAweGMwODA0MDQwLCAweDhhMDU4ZjhmLCAweGFkM2Y5MjkyLCAweGJjMjE5ZDlkLCAweDQ4NzAzODM4LCAweDA0ZjFmNWY1LCAweGRmNjNiY2JjLCAweGMxNzdiNmI2LCAweDc1YWZkYWRhLCAweDYzNDIyMTIxLCAweDMwMjAxMDEwLCAweDFhZTVmZmZmLCAweDBlZmRmM2YzLCAweDZkYmZkMmQyLCAweDRjODFjZGNkLCAweDE0MTgwYzBjLCAweDM1MjYxMzEzLCAweDJmYzNlY2VjLCAweGUxYmU1ZjVmLCAweGEyMzU5Nzk3LCAweGNjODg0NDQ0LCAweDM5MmUxNzE3LCAweDU3OTNjNGM0LCAweGYyNTVhN2E3LCAweDgyZmM3ZTdlLCAweDQ3N2EzZDNkLCAweGFjYzg2NDY0LCAweGU3YmE1ZDVkLCAweDJiMzIxOTE5LCAweDk1ZTY3MzczLCAweGEwYzA2MDYwLCAweDk4MTk4MTgxLCAweGQxOWU0ZjRmLCAweDdmYTNkY2RjLCAweDY2NDQyMjIyLCAweDdlNTQyYTJhLCAweGFiM2I5MDkwLCAweDgzMGI4ODg4LCAweGNhOGM0NjQ2LCAweDI5YzdlZWVlLCAweGQzNmJiOGI4LCAweDNjMjgxNDE0LCAweDc5YTdkZWRlLCAweGUyYmM1ZTVlLCAweDFkMTYwYjBiLCAweDc2YWRkYmRiLCAweDNiZGJlMGUwLCAweDU2NjQzMjMyLCAweDRlNzQzYTNhLCAweDFlMTQwYTBhLCAweGRiOTI0OTQ5LCAweDBhMGMwNjA2LCAweDZjNDgyNDI0LCAweGU0Yjg1YzVjLCAweDVkOWZjMmMyLCAweDZlYmRkM2QzLCAweGVmNDNhY2FjLCAweGE2YzQ2MjYyLCAweGE4Mzk5MTkxLCAweGE0MzE5NTk1LCAweDM3ZDNlNGU0LCAweDhiZjI3OTc5LCAweDMyZDVlN2U3LCAweDQzOGJjOGM4LCAweDU5NmUzNzM3LCAweGI3ZGE2ZDZkLCAweDhjMDE4ZDhkLCAweDY0YjFkNWQ1LCAweGQyOWM0ZTRlLCAweGUwNDlhOWE5LCAweGI0ZDg2YzZjLCAweGZhYWM1NjU2LCAweDA3ZjNmNGY0LCAweDI1Y2ZlYWVhLCAweGFmY2E2NTY1LCAweDhlZjQ3YTdhLCAweGU5NDdhZWFlLCAweDE4MTAwODA4LCAweGQ1NmZiYWJhLCAweDg4ZjA3ODc4LCAweDZmNGEyNTI1LCAweDcyNWMyZTJlLCAweDI0MzgxYzFjLCAweGYxNTdhNmE2LCAweGM3NzNiNGI0LCAweDUxOTdjNmM2LCAweDIzY2JlOGU4LCAweDdjYTFkZGRkLCAweDljZTg3NDc0LCAweDIxM2UxZjFmLCAweGRkOTY0YjRiLCAweGRjNjFiZGJkLCAweDg2MGQ4YjhiLCAweDg1MGY4YThhLCAweDkwZTA3MDcwLCAweDQyN2MzZTNlLCAweGM0NzFiNWI1LCAweGFhY2M2NjY2LCAweGQ4OTA0ODQ4LCAweDA1MDYwMzAzLCAweDAxZjdmNmY2LCAweDEyMWMwZTBlLCAweGEzYzI2MTYxLCAweDVmNmEzNTM1LCAweGY5YWU1NzU3LCAweGQwNjliOWI5LCAweDkxMTc4Njg2LCAweDU4OTljMWMxLCAweDI3M2ExZDFkLCAweGI5Mjc5ZTllLCAweDM4ZDllMWUxLCAweDEzZWJmOGY4LCAweGIzMmI5ODk4LCAweDMzMjIxMTExLCAweGJiZDI2OTY5LCAweDcwYTlkOWQ5LCAweDg5MDc4ZThlLCAweGE3MzM5NDk0LCAweGI2MmQ5YjliLCAweDIyM2MxZTFlLCAweDkyMTU4Nzg3LCAweDIwYzllOWU5LCAweDQ5ODdjZWNlLCAweGZmYWE1NTU1LCAweDc4NTAyODI4LCAweDdhYTVkZmRmLCAweDhmMDM4YzhjLCAweGY4NTlhMWExLCAweDgwMDk4OTg5LCAweDE3MWEwZDBkLCAweGRhNjViZmJmLCAweDMxZDdlNmU2LCAweGM2ODQ0MjQyLCAweGI4ZDA2ODY4LCAweGMzODI0MTQxLCAweGIwMjk5OTk5LCAweDc3NWEyZDJkLCAweDExMWUwZjBmLCAweGNiN2JiMGIwLCAweGZjYTg1NDU0LCAweGQ2NmRiYmJiLCAweDNhMmMxNjE2XTtcbmNvbnN0IFQzID0gWzB4NjNhNWM2NjMsIDB4N2M4NGY4N2MsIDB4Nzc5OWVlNzcsIDB4N2I4ZGY2N2IsIDB4ZjIwZGZmZjIsIDB4NmJiZGQ2NmIsIDB4NmZiMWRlNmYsIDB4YzU1NDkxYzUsIDB4MzA1MDYwMzAsIDB4MDEwMzAyMDEsIDB4NjdhOWNlNjcsIDB4MmI3ZDU2MmIsIDB4ZmUxOWU3ZmUsIDB4ZDc2MmI1ZDcsIDB4YWJlNjRkYWIsIDB4NzY5YWVjNzYsIDB4Y2E0NThmY2EsIDB4ODI5ZDFmODIsIDB4Yzk0MDg5YzksIDB4N2Q4N2ZhN2QsIDB4ZmExNWVmZmEsIDB4NTllYmIyNTksIDB4NDdjOThlNDcsIDB4ZjAwYmZiZjAsIDB4YWRlYzQxYWQsIDB4ZDQ2N2IzZDQsIDB4YTJmZDVmYTIsIDB4YWZlYTQ1YWYsIDB4OWNiZjIzOWMsIDB4YTRmNzUzYTQsIDB4NzI5NmU0NzIsIDB4YzA1YjliYzAsIDB4YjdjMjc1YjcsIDB4ZmQxY2UxZmQsIDB4OTNhZTNkOTMsIDB4MjY2YTRjMjYsIDB4MzY1YTZjMzYsIDB4M2Y0MTdlM2YsIDB4ZjcwMmY1ZjcsIDB4Y2M0ZjgzY2MsIDB4MzQ1YzY4MzQsIDB4YTVmNDUxYTUsIDB4ZTUzNGQxZTUsIDB4ZjEwOGY5ZjEsIDB4NzE5M2UyNzEsIDB4ZDg3M2FiZDgsIDB4MzE1MzYyMzEsIDB4MTUzZjJhMTUsIDB4MDQwYzA4MDQsIDB4Yzc1Mjk1YzcsIDB4MjM2NTQ2MjMsIDB4YzM1ZTlkYzMsIDB4MTgyODMwMTgsIDB4OTZhMTM3OTYsIDB4MDUwZjBhMDUsIDB4OWFiNTJmOWEsIDB4MDcwOTBlMDcsIDB4MTIzNjI0MTIsIDB4ODA5YjFiODAsIDB4ZTIzZGRmZTIsIDB4ZWIyNmNkZWIsIDB4Mjc2OTRlMjcsIDB4YjJjZDdmYjIsIDB4NzU5ZmVhNzUsIDB4MDkxYjEyMDksIDB4ODM5ZTFkODMsIDB4MmM3NDU4MmMsIDB4MWEyZTM0MWEsIDB4MWIyZDM2MWIsIDB4NmViMmRjNmUsIDB4NWFlZWI0NWEsIDB4YTBmYjViYTAsIDB4NTJmNmE0NTIsIDB4M2I0ZDc2M2IsIDB4ZDY2MWI3ZDYsIDB4YjNjZTdkYjMsIDB4Mjk3YjUyMjksIDB4ZTMzZWRkZTMsIDB4MmY3MTVlMmYsIDB4ODQ5NzEzODQsIDB4NTNmNWE2NTMsIDB4ZDE2OGI5ZDEsIDB4MDAwMDAwMDAsIDB4ZWQyY2MxZWQsIDB4MjA2MDQwMjAsIDB4ZmMxZmUzZmMsIDB4YjFjODc5YjEsIDB4NWJlZGI2NWIsIDB4NmFiZWQ0NmEsIDB4Y2I0NjhkY2IsIDB4YmVkOTY3YmUsIDB4Mzk0YjcyMzksIDB4NGFkZTk0NGEsIDB4NGNkNDk4NGMsIDB4NThlOGIwNTgsIDB4Y2Y0YTg1Y2YsIDB4ZDA2YmJiZDAsIDB4ZWYyYWM1ZWYsIDB4YWFlNTRmYWEsIDB4ZmIxNmVkZmIsIDB4NDNjNTg2NDMsIDB4NGRkNzlhNGQsIDB4MzM1NTY2MzMsIDB4ODU5NDExODUsIDB4NDVjZjhhNDUsIDB4ZjkxMGU5ZjksIDB4MDIwNjA0MDIsIDB4N2Y4MWZlN2YsIDB4NTBmMGEwNTAsIDB4M2M0NDc4M2MsIDB4OWZiYTI1OWYsIDB4YThlMzRiYTgsIDB4NTFmM2EyNTEsIDB4YTNmZTVkYTMsIDB4NDBjMDgwNDAsIDB4OGY4YTA1OGYsIDB4OTJhZDNmOTIsIDB4OWRiYzIxOWQsIDB4Mzg0ODcwMzgsIDB4ZjUwNGYxZjUsIDB4YmNkZjYzYmMsIDB4YjZjMTc3YjYsIDB4ZGE3NWFmZGEsIDB4MjE2MzQyMjEsIDB4MTAzMDIwMTAsIDB4ZmYxYWU1ZmYsIDB4ZjMwZWZkZjMsIDB4ZDI2ZGJmZDIsIDB4Y2Q0YzgxY2QsIDB4MGMxNDE4MGMsIDB4MTMzNTI2MTMsIDB4ZWMyZmMzZWMsIDB4NWZlMWJlNWYsIDB4OTdhMjM1OTcsIDB4NDRjYzg4NDQsIDB4MTczOTJlMTcsIDB4YzQ1NzkzYzQsIDB4YTdmMjU1YTcsIDB4N2U4MmZjN2UsIDB4M2Q0NzdhM2QsIDB4NjRhY2M4NjQsIDB4NWRlN2JhNWQsIDB4MTkyYjMyMTksIDB4NzM5NWU2NzMsIDB4NjBhMGMwNjAsIDB4ODE5ODE5ODEsIDB4NGZkMTllNGYsIDB4ZGM3ZmEzZGMsIDB4MjI2NjQ0MjIsIDB4MmE3ZTU0MmEsIDB4OTBhYjNiOTAsIDB4ODg4MzBiODgsIDB4NDZjYThjNDYsIDB4ZWUyOWM3ZWUsIDB4YjhkMzZiYjgsIDB4MTQzYzI4MTQsIDB4ZGU3OWE3ZGUsIDB4NWVlMmJjNWUsIDB4MGIxZDE2MGIsIDB4ZGI3NmFkZGIsIDB4ZTAzYmRiZTAsIDB4MzI1NjY0MzIsIDB4M2E0ZTc0M2EsIDB4MGExZTE0MGEsIDB4NDlkYjkyNDksIDB4MDYwYTBjMDYsIDB4MjQ2YzQ4MjQsIDB4NWNlNGI4NWMsIDB4YzI1ZDlmYzIsIDB4ZDM2ZWJkZDMsIDB4YWNlZjQzYWMsIDB4NjJhNmM0NjIsIDB4OTFhODM5OTEsIDB4OTVhNDMxOTUsIDB4ZTQzN2QzZTQsIDB4Nzk4YmYyNzksIDB4ZTczMmQ1ZTcsIDB4Yzg0MzhiYzgsIDB4Mzc1OTZlMzcsIDB4NmRiN2RhNmQsIDB4OGQ4YzAxOGQsIDB4ZDU2NGIxZDUsIDB4NGVkMjljNGUsIDB4YTllMDQ5YTksIDB4NmNiNGQ4NmMsIDB4NTZmYWFjNTYsIDB4ZjQwN2YzZjQsIDB4ZWEyNWNmZWEsIDB4NjVhZmNhNjUsIDB4N2E4ZWY0N2EsIDB4YWVlOTQ3YWUsIDB4MDgxODEwMDgsIDB4YmFkNTZmYmEsIDB4Nzg4OGYwNzgsIDB4MjU2ZjRhMjUsIDB4MmU3MjVjMmUsIDB4MWMyNDM4MWMsIDB4YTZmMTU3YTYsIDB4YjRjNzczYjQsIDB4YzY1MTk3YzYsIDB4ZTgyM2NiZTgsIDB4ZGQ3Y2ExZGQsIDB4NzQ5Y2U4NzQsIDB4MWYyMTNlMWYsIDB4NGJkZDk2NGIsIDB4YmRkYzYxYmQsIDB4OGI4NjBkOGIsIDB4OGE4NTBmOGEsIDB4NzA5MGUwNzAsIDB4M2U0MjdjM2UsIDB4YjVjNDcxYjUsIDB4NjZhYWNjNjYsIDB4NDhkODkwNDgsIDB4MDMwNTA2MDMsIDB4ZjYwMWY3ZjYsIDB4MGUxMjFjMGUsIDB4NjFhM2MyNjEsIDB4MzU1ZjZhMzUsIDB4NTdmOWFlNTcsIDB4YjlkMDY5YjksIDB4ODY5MTE3ODYsIDB4YzE1ODk5YzEsIDB4MWQyNzNhMWQsIDB4OWViOTI3OWUsIDB4ZTEzOGQ5ZTEsIDB4ZjgxM2ViZjgsIDB4OThiMzJiOTgsIDB4MTEzMzIyMTEsIDB4NjliYmQyNjksIDB4ZDk3MGE5ZDksIDB4OGU4OTA3OGUsIDB4OTRhNzMzOTQsIDB4OWJiNjJkOWIsIDB4MWUyMjNjMWUsIDB4ODc5MjE1ODcsIDB4ZTkyMGM5ZTksIDB4Y2U0OTg3Y2UsIDB4NTVmZmFhNTUsIDB4Mjg3ODUwMjgsIDB4ZGY3YWE1ZGYsIDB4OGM4ZjAzOGMsIDB4YTFmODU5YTEsIDB4ODk4MDA5ODksIDB4MGQxNzFhMGQsIDB4YmZkYTY1YmYsIDB4ZTYzMWQ3ZTYsIDB4NDJjNjg0NDIsIDB4NjhiOGQwNjgsIDB4NDFjMzgyNDEsIDB4OTliMDI5OTksIDB4MmQ3NzVhMmQsIDB4MGYxMTFlMGYsIDB4YjBjYjdiYjAsIDB4NTRmY2E4NTQsIDB4YmJkNjZkYmIsIDB4MTYzYTJjMTZdO1xuY29uc3QgVDQgPSBbMHg2MzYzYTVjNiwgMHg3YzdjODRmOCwgMHg3Nzc3OTllZSwgMHg3YjdiOGRmNiwgMHhmMmYyMGRmZiwgMHg2YjZiYmRkNiwgMHg2ZjZmYjFkZSwgMHhjNWM1NTQ5MSwgMHgzMDMwNTA2MCwgMHgwMTAxMDMwMiwgMHg2NzY3YTljZSwgMHgyYjJiN2Q1NiwgMHhmZWZlMTllNywgMHhkN2Q3NjJiNSwgMHhhYmFiZTY0ZCwgMHg3Njc2OWFlYywgMHhjYWNhNDU4ZiwgMHg4MjgyOWQxZiwgMHhjOWM5NDA4OSwgMHg3ZDdkODdmYSwgMHhmYWZhMTVlZiwgMHg1OTU5ZWJiMiwgMHg0NzQ3Yzk4ZSwgMHhmMGYwMGJmYiwgMHhhZGFkZWM0MSwgMHhkNGQ0NjdiMywgMHhhMmEyZmQ1ZiwgMHhhZmFmZWE0NSwgMHg5YzljYmYyMywgMHhhNGE0Zjc1MywgMHg3MjcyOTZlNCwgMHhjMGMwNWI5YiwgMHhiN2I3YzI3NSwgMHhmZGZkMWNlMSwgMHg5MzkzYWUzZCwgMHgyNjI2NmE0YywgMHgzNjM2NWE2YywgMHgzZjNmNDE3ZSwgMHhmN2Y3MDJmNSwgMHhjY2NjNGY4MywgMHgzNDM0NWM2OCwgMHhhNWE1ZjQ1MSwgMHhlNWU1MzRkMSwgMHhmMWYxMDhmOSwgMHg3MTcxOTNlMiwgMHhkOGQ4NzNhYiwgMHgzMTMxNTM2MiwgMHgxNTE1M2YyYSwgMHgwNDA0MGMwOCwgMHhjN2M3NTI5NSwgMHgyMzIzNjU0NiwgMHhjM2MzNWU5ZCwgMHgxODE4MjgzMCwgMHg5Njk2YTEzNywgMHgwNTA1MGYwYSwgMHg5YTlhYjUyZiwgMHgwNzA3MDkwZSwgMHgxMjEyMzYyNCwgMHg4MDgwOWIxYiwgMHhlMmUyM2RkZiwgMHhlYmViMjZjZCwgMHgyNzI3Njk0ZSwgMHhiMmIyY2Q3ZiwgMHg3NTc1OWZlYSwgMHgwOTA5MWIxMiwgMHg4MzgzOWUxZCwgMHgyYzJjNzQ1OCwgMHgxYTFhMmUzNCwgMHgxYjFiMmQzNiwgMHg2ZTZlYjJkYywgMHg1YTVhZWViNCwgMHhhMGEwZmI1YiwgMHg1MjUyZjZhNCwgMHgzYjNiNGQ3NiwgMHhkNmQ2NjFiNywgMHhiM2IzY2U3ZCwgMHgyOTI5N2I1MiwgMHhlM2UzM2VkZCwgMHgyZjJmNzE1ZSwgMHg4NDg0OTcxMywgMHg1MzUzZjVhNiwgMHhkMWQxNjhiOSwgMHgwMDAwMDAwMCwgMHhlZGVkMmNjMSwgMHgyMDIwNjA0MCwgMHhmY2ZjMWZlMywgMHhiMWIxYzg3OSwgMHg1YjViZWRiNiwgMHg2YTZhYmVkNCwgMHhjYmNiNDY4ZCwgMHhiZWJlZDk2NywgMHgzOTM5NGI3MiwgMHg0YTRhZGU5NCwgMHg0YzRjZDQ5OCwgMHg1ODU4ZThiMCwgMHhjZmNmNGE4NSwgMHhkMGQwNmJiYiwgMHhlZmVmMmFjNSwgMHhhYWFhZTU0ZiwgMHhmYmZiMTZlZCwgMHg0MzQzYzU4NiwgMHg0ZDRkZDc5YSwgMHgzMzMzNTU2NiwgMHg4NTg1OTQxMSwgMHg0NTQ1Y2Y4YSwgMHhmOWY5MTBlOSwgMHgwMjAyMDYwNCwgMHg3ZjdmODFmZSwgMHg1MDUwZjBhMCwgMHgzYzNjNDQ3OCwgMHg5ZjlmYmEyNSwgMHhhOGE4ZTM0YiwgMHg1MTUxZjNhMiwgMHhhM2EzZmU1ZCwgMHg0MDQwYzA4MCwgMHg4ZjhmOGEwNSwgMHg5MjkyYWQzZiwgMHg5ZDlkYmMyMSwgMHgzODM4NDg3MCwgMHhmNWY1MDRmMSwgMHhiY2JjZGY2MywgMHhiNmI2YzE3NywgMHhkYWRhNzVhZiwgMHgyMTIxNjM0MiwgMHgxMDEwMzAyMCwgMHhmZmZmMWFlNSwgMHhmM2YzMGVmZCwgMHhkMmQyNmRiZiwgMHhjZGNkNGM4MSwgMHgwYzBjMTQxOCwgMHgxMzEzMzUyNiwgMHhlY2VjMmZjMywgMHg1ZjVmZTFiZSwgMHg5Nzk3YTIzNSwgMHg0NDQ0Y2M4OCwgMHgxNzE3MzkyZSwgMHhjNGM0NTc5MywgMHhhN2E3ZjI1NSwgMHg3ZTdlODJmYywgMHgzZDNkNDc3YSwgMHg2NDY0YWNjOCwgMHg1ZDVkZTdiYSwgMHgxOTE5MmIzMiwgMHg3MzczOTVlNiwgMHg2MDYwYTBjMCwgMHg4MTgxOTgxOSwgMHg0ZjRmZDE5ZSwgMHhkY2RjN2ZhMywgMHgyMjIyNjY0NCwgMHgyYTJhN2U1NCwgMHg5MDkwYWIzYiwgMHg4ODg4ODMwYiwgMHg0NjQ2Y2E4YywgMHhlZWVlMjljNywgMHhiOGI4ZDM2YiwgMHgxNDE0M2MyOCwgMHhkZWRlNzlhNywgMHg1ZTVlZTJiYywgMHgwYjBiMWQxNiwgMHhkYmRiNzZhZCwgMHhlMGUwM2JkYiwgMHgzMjMyNTY2NCwgMHgzYTNhNGU3NCwgMHgwYTBhMWUxNCwgMHg0OTQ5ZGI5MiwgMHgwNjA2MGEwYywgMHgyNDI0NmM0OCwgMHg1YzVjZTRiOCwgMHhjMmMyNWQ5ZiwgMHhkM2QzNmViZCwgMHhhY2FjZWY0MywgMHg2MjYyYTZjNCwgMHg5MTkxYTgzOSwgMHg5NTk1YTQzMSwgMHhlNGU0MzdkMywgMHg3OTc5OGJmMiwgMHhlN2U3MzJkNSwgMHhjOGM4NDM4YiwgMHgzNzM3NTk2ZSwgMHg2ZDZkYjdkYSwgMHg4ZDhkOGMwMSwgMHhkNWQ1NjRiMSwgMHg0ZTRlZDI5YywgMHhhOWE5ZTA0OSwgMHg2YzZjYjRkOCwgMHg1NjU2ZmFhYywgMHhmNGY0MDdmMywgMHhlYWVhMjVjZiwgMHg2NTY1YWZjYSwgMHg3YTdhOGVmNCwgMHhhZWFlZTk0NywgMHgwODA4MTgxMCwgMHhiYWJhZDU2ZiwgMHg3ODc4ODhmMCwgMHgyNTI1NmY0YSwgMHgyZTJlNzI1YywgMHgxYzFjMjQzOCwgMHhhNmE2ZjE1NywgMHhiNGI0Yzc3MywgMHhjNmM2NTE5NywgMHhlOGU4MjNjYiwgMHhkZGRkN2NhMSwgMHg3NDc0OWNlOCwgMHgxZjFmMjEzZSwgMHg0YjRiZGQ5NiwgMHhiZGJkZGM2MSwgMHg4YjhiODYwZCwgMHg4YThhODUwZiwgMHg3MDcwOTBlMCwgMHgzZTNlNDI3YywgMHhiNWI1YzQ3MSwgMHg2NjY2YWFjYywgMHg0ODQ4ZDg5MCwgMHgwMzAzMDUwNiwgMHhmNmY2MDFmNywgMHgwZTBlMTIxYywgMHg2MTYxYTNjMiwgMHgzNTM1NWY2YSwgMHg1NzU3ZjlhZSwgMHhiOWI5ZDA2OSwgMHg4Njg2OTExNywgMHhjMWMxNTg5OSwgMHgxZDFkMjczYSwgMHg5ZTllYjkyNywgMHhlMWUxMzhkOSwgMHhmOGY4MTNlYiwgMHg5ODk4YjMyYiwgMHgxMTExMzMyMiwgMHg2OTY5YmJkMiwgMHhkOWQ5NzBhOSwgMHg4ZThlODkwNywgMHg5NDk0YTczMywgMHg5YjliYjYyZCwgMHgxZTFlMjIzYywgMHg4Nzg3OTIxNSwgMHhlOWU5MjBjOSwgMHhjZWNlNDk4NywgMHg1NTU1ZmZhYSwgMHgyODI4Nzg1MCwgMHhkZmRmN2FhNSwgMHg4YzhjOGYwMywgMHhhMWExZjg1OSwgMHg4OTg5ODAwOSwgMHgwZDBkMTcxYSwgMHhiZmJmZGE2NSwgMHhlNmU2MzFkNywgMHg0MjQyYzY4NCwgMHg2ODY4YjhkMCwgMHg0MTQxYzM4MiwgMHg5OTk5YjAyOSwgMHgyZDJkNzc1YSwgMHgwZjBmMTExZSwgMHhiMGIwY2I3YiwgMHg1NDU0ZmNhOCwgMHhiYmJiZDY2ZCwgMHgxNjE2M2EyY107XG4vLyBUcmFuc2Zvcm1hdGlvbnMgZm9yIGRlY3J5cHRpb25cbmNvbnN0IFQ1ID0gWzB4NTFmNGE3NTAsIDB4N2U0MTY1NTMsIDB4MWExN2E0YzMsIDB4M2EyNzVlOTYsIDB4M2JhYjZiY2IsIDB4MWY5ZDQ1ZjEsIDB4YWNmYTU4YWIsIDB4NGJlMzAzOTMsIDB4MjAzMGZhNTUsIDB4YWQ3NjZkZjYsIDB4ODhjYzc2OTEsIDB4ZjUwMjRjMjUsIDB4NGZlNWQ3ZmMsIDB4YzUyYWNiZDcsIDB4MjYzNTQ0ODAsIDB4YjU2MmEzOGYsIDB4ZGViMTVhNDksIDB4MjViYTFiNjcsIDB4NDVlYTBlOTgsIDB4NWRmZWMwZTEsIDB4YzMyZjc1MDIsIDB4ODE0Y2YwMTIsIDB4OGQ0Njk3YTMsIDB4NmJkM2Y5YzYsIDB4MDM4ZjVmZTcsIDB4MTU5MjljOTUsIDB4YmY2ZDdhZWIsIDB4OTU1MjU5ZGEsIDB4ZDRiZTgzMmQsIDB4NTg3NDIxZDMsIDB4NDllMDY5MjksIDB4OGVjOWM4NDQsIDB4NzVjMjg5NmEsIDB4ZjQ4ZTc5NzgsIDB4OTk1ODNlNmIsIDB4MjdiOTcxZGQsIDB4YmVlMTRmYjYsIDB4ZjA4OGFkMTcsIDB4YzkyMGFjNjYsIDB4N2RjZTNhYjQsIDB4NjNkZjRhMTgsIDB4ZTUxYTMxODIsIDB4OTc1MTMzNjAsIDB4NjI1MzdmNDUsIDB4YjE2NDc3ZTAsIDB4YmI2YmFlODQsIDB4ZmU4MWEwMWMsIDB4ZjkwODJiOTQsIDB4NzA0ODY4NTgsIDB4OGY0NWZkMTksIDB4OTRkZTZjODcsIDB4NTI3YmY4YjcsIDB4YWI3M2QzMjMsIDB4NzI0YjAyZTIsIDB4ZTMxZjhmNTcsIDB4NjY1NWFiMmEsIDB4YjJlYjI4MDcsIDB4MmZiNWMyMDMsIDB4ODZjNTdiOWEsIDB4ZDMzNzA4YTUsIDB4MzAyODg3ZjIsIDB4MjNiZmE1YjIsIDB4MDIwMzZhYmEsIDB4ZWQxNjgyNWMsIDB4OGFjZjFjMmIsIDB4YTc3OWI0OTIsIDB4ZjMwN2YyZjAsIDB4NGU2OWUyYTEsIDB4NjVkYWY0Y2QsIDB4MDYwNWJlZDUsIDB4ZDEzNDYyMWYsIDB4YzRhNmZlOGEsIDB4MzQyZTUzOWQsIDB4YTJmMzU1YTAsIDB4MDU4YWUxMzIsIDB4YTRmNmViNzUsIDB4MGI4M2VjMzksIDB4NDA2MGVmYWEsIDB4NWU3MTlmMDYsIDB4YmQ2ZTEwNTEsIDB4M2UyMThhZjksIDB4OTZkZDA2M2QsIDB4ZGQzZTA1YWUsIDB4NGRlNmJkNDYsIDB4OTE1NDhkYjUsIDB4NzFjNDVkMDUsIDB4MDQwNmQ0NmYsIDB4NjA1MDE1ZmYsIDB4MTk5OGZiMjQsIDB4ZDZiZGU5OTcsIDB4ODk0MDQzY2MsIDB4NjdkOTllNzcsIDB4YjBlODQyYmQsIDB4MDc4OThiODgsIDB4ZTcxOTViMzgsIDB4NzljOGVlZGIsIDB4YTE3YzBhNDcsIDB4N2M0MjBmZTksIDB4Zjg4NDFlYzksIDB4MDAwMDAwMDAsIDB4MDk4MDg2ODMsIDB4MzIyYmVkNDgsIDB4MWUxMTcwYWMsIDB4NmM1YTcyNGUsIDB4ZmQwZWZmZmIsIDB4MGY4NTM4NTYsIDB4M2RhZWQ1MWUsIDB4MzYyZDM5MjcsIDB4MGEwZmQ5NjQsIDB4Njg1Y2E2MjEsIDB4OWI1YjU0ZDEsIDB4MjQzNjJlM2EsIDB4MGMwYTY3YjEsIDB4OTM1N2U3MGYsIDB4YjRlZTk2ZDIsIDB4MWI5YjkxOWUsIDB4ODBjMGM1NGYsIDB4NjFkYzIwYTIsIDB4NWE3NzRiNjksIDB4MWMxMjFhMTYsIDB4ZTI5M2JhMGEsIDB4YzBhMDJhZTUsIDB4M2MyMmUwNDMsIDB4MTIxYjE3MWQsIDB4MGUwOTBkMGIsIDB4ZjI4YmM3YWQsIDB4MmRiNmE4YjksIDB4MTQxZWE5YzgsIDB4NTdmMTE5ODUsIDB4YWY3NTA3NGMsIDB4ZWU5OWRkYmIsIDB4YTM3ZjYwZmQsIDB4ZjcwMTI2OWYsIDB4NWM3MmY1YmMsIDB4NDQ2NjNiYzUsIDB4NWJmYjdlMzQsIDB4OGI0MzI5NzYsIDB4Y2IyM2M2ZGMsIDB4YjZlZGZjNjgsIDB4YjhlNGYxNjMsIDB4ZDczMWRjY2EsIDB4NDI2Mzg1MTAsIDB4MTM5NzIyNDAsIDB4ODRjNjExMjAsIDB4ODU0YTI0N2QsIDB4ZDJiYjNkZjgsIDB4YWVmOTMyMTEsIDB4YzcyOWExNmQsIDB4MWQ5ZTJmNGIsIDB4ZGNiMjMwZjMsIDB4MGQ4NjUyZWMsIDB4NzdjMWUzZDAsIDB4MmJiMzE2NmMsIDB4YTk3MGI5OTksIDB4MTE5NDQ4ZmEsIDB4NDdlOTY0MjIsIDB4YThmYzhjYzQsIDB4YTBmMDNmMWEsIDB4NTY3ZDJjZDgsIDB4MjIzMzkwZWYsIDB4ODc0OTRlYzcsIDB4ZDkzOGQxYzEsIDB4OGNjYWEyZmUsIDB4OThkNDBiMzYsIDB4YTZmNTgxY2YsIDB4YTU3YWRlMjgsIDB4ZGFiNzhlMjYsIDB4M2ZhZGJmYTQsIDB4MmMzYTlkZTQsIDB4NTA3ODkyMGQsIDB4NmE1ZmNjOWIsIDB4NTQ3ZTQ2NjIsIDB4ZjY4ZDEzYzIsIDB4OTBkOGI4ZTgsIDB4MmUzOWY3NWUsIDB4ODJjM2FmZjUsIDB4OWY1ZDgwYmUsIDB4NjlkMDkzN2MsIDB4NmZkNTJkYTksIDB4Y2YyNTEyYjMsIDB4YzhhYzk5M2IsIDB4MTAxODdkYTcsIDB4ZTg5YzYzNmUsIDB4ZGIzYmJiN2IsIDB4Y2QyNjc4MDksIDB4NmU1OTE4ZjQsIDB4ZWM5YWI3MDEsIDB4ODM0ZjlhYTgsIDB4ZTY5NTZlNjUsIDB4YWFmZmU2N2UsIDB4MjFiY2NmMDgsIDB4ZWYxNWU4ZTYsIDB4YmFlNzliZDksIDB4NGE2ZjM2Y2UsIDB4ZWE5ZjA5ZDQsIDB4MjliMDdjZDYsIDB4MzFhNGIyYWYsIDB4MmEzZjIzMzEsIDB4YzZhNTk0MzAsIDB4MzVhMjY2YzAsIDB4NzQ0ZWJjMzcsIDB4ZmM4MmNhYTYsIDB4ZTA5MGQwYjAsIDB4MzNhN2Q4MTUsIDB4ZjEwNDk4NGEsIDB4NDFlY2RhZjcsIDB4N2ZjZDUwMGUsIDB4MTc5MWY2MmYsIDB4NzY0ZGQ2OGQsIDB4NDNlZmIwNGQsIDB4Y2NhYTRkNTQsIDB4ZTQ5NjA0ZGYsIDB4OWVkMWI1ZTMsIDB4NGM2YTg4MWIsIDB4YzEyYzFmYjgsIDB4NDY2NTUxN2YsIDB4OWQ1ZWVhMDQsIDB4MDE4YzM1NWQsIDB4ZmE4Nzc0NzMsIDB4ZmIwYjQxMmUsIDB4YjM2NzFkNWEsIDB4OTJkYmQyNTIsIDB4ZTkxMDU2MzMsIDB4NmRkNjQ3MTMsIDB4OWFkNzYxOGMsIDB4MzdhMTBjN2EsIDB4NTlmODE0OGUsIDB4ZWIxMzNjODksIDB4Y2VhOTI3ZWUsIDB4Yjc2MWM5MzUsIDB4ZTExY2U1ZWQsIDB4N2E0N2IxM2MsIDB4OWNkMmRmNTksIDB4NTVmMjczM2YsIDB4MTgxNGNlNzksIDB4NzNjNzM3YmYsIDB4NTNmN2NkZWEsIDB4NWZmZGFhNWIsIDB4ZGYzZDZmMTQsIDB4Nzg0NGRiODYsIDB4Y2FhZmYzODEsIDB4Yjk2OGM0M2UsIDB4MzgyNDM0MmMsIDB4YzJhMzQwNWYsIDB4MTYxZGMzNzIsIDB4YmNlMjI1MGMsIDB4MjgzYzQ5OGIsIDB4ZmYwZDk1NDEsIDB4MzlhODAxNzEsIDB4MDgwY2IzZGUsIDB4ZDhiNGU0OWMsIDB4NjQ1NmMxOTAsIDB4N2JjYjg0NjEsIDB4ZDUzMmI2NzAsIDB4NDg2YzVjNzQsIDB4ZDBiODU3NDJdO1xuY29uc3QgVDYgPSBbMHg1MDUxZjRhNywgMHg1MzdlNDE2NSwgMHhjMzFhMTdhNCwgMHg5NjNhMjc1ZSwgMHhjYjNiYWI2YiwgMHhmMTFmOWQ0NSwgMHhhYmFjZmE1OCwgMHg5MzRiZTMwMywgMHg1NTIwMzBmYSwgMHhmNmFkNzY2ZCwgMHg5MTg4Y2M3NiwgMHgyNWY1MDI0YywgMHhmYzRmZTVkNywgMHhkN2M1MmFjYiwgMHg4MDI2MzU0NCwgMHg4ZmI1NjJhMywgMHg0OWRlYjE1YSwgMHg2NzI1YmExYiwgMHg5ODQ1ZWEwZSwgMHhlMTVkZmVjMCwgMHgwMmMzMmY3NSwgMHgxMjgxNGNmMCwgMHhhMzhkNDY5NywgMHhjNjZiZDNmOSwgMHhlNzAzOGY1ZiwgMHg5NTE1OTI5YywgMHhlYmJmNmQ3YSwgMHhkYTk1NTI1OSwgMHgyZGQ0YmU4MywgMHhkMzU4NzQyMSwgMHgyOTQ5ZTA2OSwgMHg0NDhlYzljOCwgMHg2YTc1YzI4OSwgMHg3OGY0OGU3OSwgMHg2Yjk5NTgzZSwgMHhkZDI3Yjk3MSwgMHhiNmJlZTE0ZiwgMHgxN2YwODhhZCwgMHg2NmM5MjBhYywgMHhiNDdkY2UzYSwgMHgxODYzZGY0YSwgMHg4MmU1MWEzMSwgMHg2MDk3NTEzMywgMHg0NTYyNTM3ZiwgMHhlMGIxNjQ3NywgMHg4NGJiNmJhZSwgMHgxY2ZlODFhMCwgMHg5NGY5MDgyYiwgMHg1ODcwNDg2OCwgMHgxOThmNDVmZCwgMHg4Nzk0ZGU2YywgMHhiNzUyN2JmOCwgMHgyM2FiNzNkMywgMHhlMjcyNGIwMiwgMHg1N2UzMWY4ZiwgMHgyYTY2NTVhYiwgMHgwN2IyZWIyOCwgMHgwMzJmYjVjMiwgMHg5YTg2YzU3YiwgMHhhNWQzMzcwOCwgMHhmMjMwMjg4NywgMHhiMjIzYmZhNSwgMHhiYTAyMDM2YSwgMHg1Y2VkMTY4MiwgMHgyYjhhY2YxYywgMHg5MmE3NzliNCwgMHhmMGYzMDdmMiwgMHhhMTRlNjllMiwgMHhjZDY1ZGFmNCwgMHhkNTA2MDViZSwgMHgxZmQxMzQ2MiwgMHg4YWM0YTZmZSwgMHg5ZDM0MmU1MywgMHhhMGEyZjM1NSwgMHgzMjA1OGFlMSwgMHg3NWE0ZjZlYiwgMHgzOTBiODNlYywgMHhhYTQwNjBlZiwgMHgwNjVlNzE5ZiwgMHg1MWJkNmUxMCwgMHhmOTNlMjE4YSwgMHgzZDk2ZGQwNiwgMHhhZWRkM2UwNSwgMHg0NjRkZTZiZCwgMHhiNTkxNTQ4ZCwgMHgwNTcxYzQ1ZCwgMHg2ZjA0MDZkNCwgMHhmZjYwNTAxNSwgMHgyNDE5OThmYiwgMHg5N2Q2YmRlOSwgMHhjYzg5NDA0MywgMHg3NzY3ZDk5ZSwgMHhiZGIwZTg0MiwgMHg4ODA3ODk4YiwgMHgzOGU3MTk1YiwgMHhkYjc5YzhlZSwgMHg0N2ExN2MwYSwgMHhlOTdjNDIwZiwgMHhjOWY4ODQxZSwgMHgwMDAwMDAwMCwgMHg4MzA5ODA4NiwgMHg0ODMyMmJlZCwgMHhhYzFlMTE3MCwgMHg0ZTZjNWE3MiwgMHhmYmZkMGVmZiwgMHg1NjBmODUzOCwgMHgxZTNkYWVkNSwgMHgyNzM2MmQzOSwgMHg2NDBhMGZkOSwgMHgyMTY4NWNhNiwgMHhkMTliNWI1NCwgMHgzYTI0MzYyZSwgMHhiMTBjMGE2NywgMHgwZjkzNTdlNywgMHhkMmI0ZWU5NiwgMHg5ZTFiOWI5MSwgMHg0ZjgwYzBjNSwgMHhhMjYxZGMyMCwgMHg2OTVhNzc0YiwgMHgxNjFjMTIxYSwgMHgwYWUyOTNiYSwgMHhlNWMwYTAyYSwgMHg0MzNjMjJlMCwgMHgxZDEyMWIxNywgMHgwYjBlMDkwZCwgMHhhZGYyOGJjNywgMHhiOTJkYjZhOCwgMHhjODE0MWVhOSwgMHg4NTU3ZjExOSwgMHg0Y2FmNzUwNywgMHhiYmVlOTlkZCwgMHhmZGEzN2Y2MCwgMHg5ZmY3MDEyNiwgMHhiYzVjNzJmNSwgMHhjNTQ0NjYzYiwgMHgzNDViZmI3ZSwgMHg3NjhiNDMyOSwgMHhkY2NiMjNjNiwgMHg2OGI2ZWRmYywgMHg2M2I4ZTRmMSwgMHhjYWQ3MzFkYywgMHgxMDQyNjM4NSwgMHg0MDEzOTcyMiwgMHgyMDg0YzYxMSwgMHg3ZDg1NGEyNCwgMHhmOGQyYmIzZCwgMHgxMWFlZjkzMiwgMHg2ZGM3MjlhMSwgMHg0YjFkOWUyZiwgMHhmM2RjYjIzMCwgMHhlYzBkODY1MiwgMHhkMDc3YzFlMywgMHg2YzJiYjMxNiwgMHg5OWE5NzBiOSwgMHhmYTExOTQ0OCwgMHgyMjQ3ZTk2NCwgMHhjNGE4ZmM4YywgMHgxYWEwZjAzZiwgMHhkODU2N2QyYywgMHhlZjIyMzM5MCwgMHhjNzg3NDk0ZSwgMHhjMWQ5MzhkMSwgMHhmZThjY2FhMiwgMHgzNjk4ZDQwYiwgMHhjZmE2ZjU4MSwgMHgyOGE1N2FkZSwgMHgyNmRhYjc4ZSwgMHhhNDNmYWRiZiwgMHhlNDJjM2E5ZCwgMHgwZDUwNzg5MiwgMHg5YjZhNWZjYywgMHg2MjU0N2U0NiwgMHhjMmY2OGQxMywgMHhlODkwZDhiOCwgMHg1ZTJlMzlmNywgMHhmNTgyYzNhZiwgMHhiZTlmNWQ4MCwgMHg3YzY5ZDA5MywgMHhhOTZmZDUyZCwgMHhiM2NmMjUxMiwgMHgzYmM4YWM5OSwgMHhhNzEwMTg3ZCwgMHg2ZWU4OWM2MywgMHg3YmRiM2JiYiwgMHgwOWNkMjY3OCwgMHhmNDZlNTkxOCwgMHgwMWVjOWFiNywgMHhhODgzNGY5YSwgMHg2NWU2OTU2ZSwgMHg3ZWFhZmZlNiwgMHgwODIxYmNjZiwgMHhlNmVmMTVlOCwgMHhkOWJhZTc5YiwgMHhjZTRhNmYzNiwgMHhkNGVhOWYwOSwgMHhkNjI5YjA3YywgMHhhZjMxYTRiMiwgMHgzMTJhM2YyMywgMHgzMGM2YTU5NCwgMHhjMDM1YTI2NiwgMHgzNzc0NGViYywgMHhhNmZjODJjYSwgMHhiMGUwOTBkMCwgMHgxNTMzYTdkOCwgMHg0YWYxMDQ5OCwgMHhmNzQxZWNkYSwgMHgwZTdmY2Q1MCwgMHgyZjE3OTFmNiwgMHg4ZDc2NGRkNiwgMHg0ZDQzZWZiMCwgMHg1NGNjYWE0ZCwgMHhkZmU0OTYwNCwgMHhlMzllZDFiNSwgMHgxYjRjNmE4OCwgMHhiOGMxMmMxZiwgMHg3ZjQ2NjU1MSwgMHgwNDlkNWVlYSwgMHg1ZDAxOGMzNSwgMHg3M2ZhODc3NCwgMHgyZWZiMGI0MSwgMHg1YWIzNjcxZCwgMHg1MjkyZGJkMiwgMHgzM2U5MTA1NiwgMHgxMzZkZDY0NywgMHg4YzlhZDc2MSwgMHg3YTM3YTEwYywgMHg4ZTU5ZjgxNCwgMHg4OWViMTMzYywgMHhlZWNlYTkyNywgMHgzNWI3NjFjOSwgMHhlZGUxMWNlNSwgMHgzYzdhNDdiMSwgMHg1OTljZDJkZiwgMHgzZjU1ZjI3MywgMHg3OTE4MTRjZSwgMHhiZjczYzczNywgMHhlYTUzZjdjZCwgMHg1YjVmZmRhYSwgMHgxNGRmM2Q2ZiwgMHg4Njc4NDRkYiwgMHg4MWNhYWZmMywgMHgzZWI5NjhjNCwgMHgyYzM4MjQzNCwgMHg1ZmMyYTM0MCwgMHg3MjE2MWRjMywgMHgwY2JjZTIyNSwgMHg4YjI4M2M0OSwgMHg0MWZmMGQ5NSwgMHg3MTM5YTgwMSwgMHhkZTA4MGNiMywgMHg5Y2Q4YjRlNCwgMHg5MDY0NTZjMSwgMHg2MTdiY2I4NCwgMHg3MGQ1MzJiNiwgMHg3NDQ4NmM1YywgMHg0MmQwYjg1N107XG5jb25zdCBUNyA9IFsweGE3NTA1MWY0LCAweDY1NTM3ZTQxLCAweGE0YzMxYTE3LCAweDVlOTYzYTI3LCAweDZiY2IzYmFiLCAweDQ1ZjExZjlkLCAweDU4YWJhY2ZhLCAweDAzOTM0YmUzLCAweGZhNTUyMDMwLCAweDZkZjZhZDc2LCAweDc2OTE4OGNjLCAweDRjMjVmNTAyLCAweGQ3ZmM0ZmU1LCAweGNiZDdjNTJhLCAweDQ0ODAyNjM1LCAweGEzOGZiNTYyLCAweDVhNDlkZWIxLCAweDFiNjcyNWJhLCAweDBlOTg0NWVhLCAweGMwZTE1ZGZlLCAweDc1MDJjMzJmLCAweGYwMTI4MTRjLCAweDk3YTM4ZDQ2LCAweGY5YzY2YmQzLCAweDVmZTcwMzhmLCAweDljOTUxNTkyLCAweDdhZWJiZjZkLCAweDU5ZGE5NTUyLCAweDgzMmRkNGJlLCAweDIxZDM1ODc0LCAweDY5Mjk0OWUwLCAweGM4NDQ4ZWM5LCAweDg5NmE3NWMyLCAweDc5NzhmNDhlLCAweDNlNmI5OTU4LCAweDcxZGQyN2I5LCAweDRmYjZiZWUxLCAweGFkMTdmMDg4LCAweGFjNjZjOTIwLCAweDNhYjQ3ZGNlLCAweDRhMTg2M2RmLCAweDMxODJlNTFhLCAweDMzNjA5NzUxLCAweDdmNDU2MjUzLCAweDc3ZTBiMTY0LCAweGFlODRiYjZiLCAweGEwMWNmZTgxLCAweDJiOTRmOTA4LCAweDY4NTg3MDQ4LCAweGZkMTk4ZjQ1LCAweDZjODc5NGRlLCAweGY4Yjc1MjdiLCAweGQzMjNhYjczLCAweDAyZTI3MjRiLCAweDhmNTdlMzFmLCAweGFiMmE2NjU1LCAweDI4MDdiMmViLCAweGMyMDMyZmI1LCAweDdiOWE4NmM1LCAweDA4YTVkMzM3LCAweDg3ZjIzMDI4LCAweGE1YjIyM2JmLCAweDZhYmEwMjAzLCAweDgyNWNlZDE2LCAweDFjMmI4YWNmLCAweGI0OTJhNzc5LCAweGYyZjBmMzA3LCAweGUyYTE0ZTY5LCAweGY0Y2Q2NWRhLCAweGJlZDUwNjA1LCAweDYyMWZkMTM0LCAweGZlOGFjNGE2LCAweDUzOWQzNDJlLCAweDU1YTBhMmYzLCAweGUxMzIwNThhLCAweGViNzVhNGY2LCAweGVjMzkwYjgzLCAweGVmYWE0MDYwLCAweDlmMDY1ZTcxLCAweDEwNTFiZDZlLCAweDhhZjkzZTIxLCAweDA2M2Q5NmRkLCAweDA1YWVkZDNlLCAweGJkNDY0ZGU2LCAweDhkYjU5MTU0LCAweDVkMDU3MWM0LCAweGQ0NmYwNDA2LCAweDE1ZmY2MDUwLCAweGZiMjQxOTk4LCAweGU5OTdkNmJkLCAweDQzY2M4OTQwLCAweDllNzc2N2Q5LCAweDQyYmRiMGU4LCAweDhiODgwNzg5LCAweDViMzhlNzE5LCAweGVlZGI3OWM4LCAweDBhNDdhMTdjLCAweDBmZTk3YzQyLCAweDFlYzlmODg0LCAweDAwMDAwMDAwLCAweDg2ODMwOTgwLCAweGVkNDgzMjJiLCAweDcwYWMxZTExLCAweDcyNGU2YzVhLCAweGZmZmJmZDBlLCAweDM4NTYwZjg1LCAweGQ1MWUzZGFlLCAweDM5MjczNjJkLCAweGQ5NjQwYTBmLCAweGE2MjE2ODVjLCAweDU0ZDE5YjViLCAweDJlM2EyNDM2LCAweDY3YjEwYzBhLCAweGU3MGY5MzU3LCAweDk2ZDJiNGVlLCAweDkxOWUxYjliLCAweGM1NGY4MGMwLCAweDIwYTI2MWRjLCAweDRiNjk1YTc3LCAweDFhMTYxYzEyLCAweGJhMGFlMjkzLCAweDJhZTVjMGEwLCAweGUwNDMzYzIyLCAweDE3MWQxMjFiLCAweDBkMGIwZTA5LCAweGM3YWRmMjhiLCAweGE4YjkyZGI2LCAweGE5YzgxNDFlLCAweDE5ODU1N2YxLCAweDA3NGNhZjc1LCAweGRkYmJlZTk5LCAweDYwZmRhMzdmLCAweDI2OWZmNzAxLCAweGY1YmM1YzcyLCAweDNiYzU0NDY2LCAweDdlMzQ1YmZiLCAweDI5NzY4YjQzLCAweGM2ZGNjYjIzLCAweGZjNjhiNmVkLCAweGYxNjNiOGU0LCAweGRjY2FkNzMxLCAweDg1MTA0MjYzLCAweDIyNDAxMzk3LCAweDExMjA4NGM2LCAweDI0N2Q4NTRhLCAweDNkZjhkMmJiLCAweDMyMTFhZWY5LCAweGExNmRjNzI5LCAweDJmNGIxZDllLCAweDMwZjNkY2IyLCAweDUyZWMwZDg2LCAweGUzZDA3N2MxLCAweDE2NmMyYmIzLCAweGI5OTlhOTcwLCAweDQ4ZmExMTk0LCAweDY0MjI0N2U5LCAweDhjYzRhOGZjLCAweDNmMWFhMGYwLCAweDJjZDg1NjdkLCAweDkwZWYyMjMzLCAweDRlYzc4NzQ5LCAweGQxYzFkOTM4LCAweGEyZmU4Y2NhLCAweDBiMzY5OGQ0LCAweDgxY2ZhNmY1LCAweGRlMjhhNTdhLCAweDhlMjZkYWI3LCAweGJmYTQzZmFkLCAweDlkZTQyYzNhLCAweDkyMGQ1MDc4LCAweGNjOWI2YTVmLCAweDQ2NjI1NDdlLCAweDEzYzJmNjhkLCAweGI4ZTg5MGQ4LCAweGY3NWUyZTM5LCAweGFmZjU4MmMzLCAweDgwYmU5ZjVkLCAweDkzN2M2OWQwLCAweDJkYTk2ZmQ1LCAweDEyYjNjZjI1LCAweDk5M2JjOGFjLCAweDdkYTcxMDE4LCAweDYzNmVlODljLCAweGJiN2JkYjNiLCAweDc4MDljZDI2LCAweDE4ZjQ2ZTU5LCAweGI3MDFlYzlhLCAweDlhYTg4MzRmLCAweDZlNjVlNjk1LCAweGU2N2VhYWZmLCAweGNmMDgyMWJjLCAweGU4ZTZlZjE1LCAweDliZDliYWU3LCAweDM2Y2U0YTZmLCAweDA5ZDRlYTlmLCAweDdjZDYyOWIwLCAweGIyYWYzMWE0LCAweDIzMzEyYTNmLCAweDk0MzBjNmE1LCAweDY2YzAzNWEyLCAweGJjMzc3NDRlLCAweGNhYTZmYzgyLCAweGQwYjBlMDkwLCAweGQ4MTUzM2E3LCAweDk4NGFmMTA0LCAweGRhZjc0MWVjLCAweDUwMGU3ZmNkLCAweGY2MmYxNzkxLCAweGQ2OGQ3NjRkLCAweGIwNGQ0M2VmLCAweDRkNTRjY2FhLCAweDA0ZGZlNDk2LCAweGI1ZTM5ZWQxLCAweDg4MWI0YzZhLCAweDFmYjhjMTJjLCAweDUxN2Y0NjY1LCAweGVhMDQ5ZDVlLCAweDM1NWQwMThjLCAweDc0NzNmYTg3LCAweDQxMmVmYjBiLCAweDFkNWFiMzY3LCAweGQyNTI5MmRiLCAweDU2MzNlOTEwLCAweDQ3MTM2ZGQ2LCAweDYxOGM5YWQ3LCAweDBjN2EzN2ExLCAweDE0OGU1OWY4LCAweDNjODllYjEzLCAweDI3ZWVjZWE5LCAweGM5MzViNzYxLCAweGU1ZWRlMTFjLCAweGIxM2M3YTQ3LCAweGRmNTk5Y2QyLCAweDczM2Y1NWYyLCAweGNlNzkxODE0LCAweDM3YmY3M2M3LCAweGNkZWE1M2Y3LCAweGFhNWI1ZmZkLCAweDZmMTRkZjNkLCAweGRiODY3ODQ0LCAweGYzODFjYWFmLCAweGM0M2ViOTY4LCAweDM0MmMzODI0LCAweDQwNWZjMmEzLCAweGMzNzIxNjFkLCAweDI1MGNiY2UyLCAweDQ5OGIyODNjLCAweDk1NDFmZjBkLCAweDAxNzEzOWE4LCAweGIzZGUwODBjLCAweGU0OWNkOGI0LCAweGMxOTA2NDU2LCAweDg0NjE3YmNiLCAweGI2NzBkNTMyLCAweDVjNzQ0ODZjLCAweDU3NDJkMGI4XTtcbmNvbnN0IFQ4ID0gWzB4ZjRhNzUwNTEsIDB4NDE2NTUzN2UsIDB4MTdhNGMzMWEsIDB4Mjc1ZTk2M2EsIDB4YWI2YmNiM2IsIDB4OWQ0NWYxMWYsIDB4ZmE1OGFiYWMsIDB4ZTMwMzkzNGIsIDB4MzBmYTU1MjAsIDB4NzY2ZGY2YWQsIDB4Y2M3NjkxODgsIDB4MDI0YzI1ZjUsIDB4ZTVkN2ZjNGYsIDB4MmFjYmQ3YzUsIDB4MzU0NDgwMjYsIDB4NjJhMzhmYjUsIDB4YjE1YTQ5ZGUsIDB4YmExYjY3MjUsIDB4ZWEwZTk4NDUsIDB4ZmVjMGUxNWQsIDB4MmY3NTAyYzMsIDB4NGNmMDEyODEsIDB4NDY5N2EzOGQsIDB4ZDNmOWM2NmIsIDB4OGY1ZmU3MDMsIDB4OTI5Yzk1MTUsIDB4NmQ3YWViYmYsIDB4NTI1OWRhOTUsIDB4YmU4MzJkZDQsIDB4NzQyMWQzNTgsIDB4ZTA2OTI5NDksIDB4YzljODQ0OGUsIDB4YzI4OTZhNzUsIDB4OGU3OTc4ZjQsIDB4NTgzZTZiOTksIDB4Yjk3MWRkMjcsIDB4ZTE0ZmI2YmUsIDB4ODhhZDE3ZjAsIDB4MjBhYzY2YzksIDB4Y2UzYWI0N2QsIDB4ZGY0YTE4NjMsIDB4MWEzMTgyZTUsIDB4NTEzMzYwOTcsIDB4NTM3ZjQ1NjIsIDB4NjQ3N2UwYjEsIDB4NmJhZTg0YmIsIDB4ODFhMDFjZmUsIDB4MDgyYjk0ZjksIDB4NDg2ODU4NzAsIDB4NDVmZDE5OGYsIDB4ZGU2Yzg3OTQsIDB4N2JmOGI3NTIsIDB4NzNkMzIzYWIsIDB4NGIwMmUyNzIsIDB4MWY4ZjU3ZTMsIDB4NTVhYjJhNjYsIDB4ZWIyODA3YjIsIDB4YjVjMjAzMmYsIDB4YzU3YjlhODYsIDB4MzcwOGE1ZDMsIDB4Mjg4N2YyMzAsIDB4YmZhNWIyMjMsIDB4MDM2YWJhMDIsIDB4MTY4MjVjZWQsIDB4Y2YxYzJiOGEsIDB4NzliNDkyYTcsIDB4MDdmMmYwZjMsIDB4NjllMmExNGUsIDB4ZGFmNGNkNjUsIDB4MDViZWQ1MDYsIDB4MzQ2MjFmZDEsIDB4YTZmZThhYzQsIDB4MmU1MzlkMzQsIDB4ZjM1NWEwYTIsIDB4OGFlMTMyMDUsIDB4ZjZlYjc1YTQsIDB4ODNlYzM5MGIsIDB4NjBlZmFhNDAsIDB4NzE5ZjA2NWUsIDB4NmUxMDUxYmQsIDB4MjE4YWY5M2UsIDB4ZGQwNjNkOTYsIDB4M2UwNWFlZGQsIDB4ZTZiZDQ2NGQsIDB4NTQ4ZGI1OTEsIDB4YzQ1ZDA1NzEsIDB4MDZkNDZmMDQsIDB4NTAxNWZmNjAsIDB4OThmYjI0MTksIDB4YmRlOTk3ZDYsIDB4NDA0M2NjODksIDB4ZDk5ZTc3NjcsIDB4ZTg0MmJkYjAsIDB4ODk4Yjg4MDcsIDB4MTk1YjM4ZTcsIDB4YzhlZWRiNzksIDB4N2MwYTQ3YTEsIDB4NDIwZmU5N2MsIDB4ODQxZWM5ZjgsIDB4MDAwMDAwMDAsIDB4ODA4NjgzMDksIDB4MmJlZDQ4MzIsIDB4MTE3MGFjMWUsIDB4NWE3MjRlNmMsIDB4MGVmZmZiZmQsIDB4ODUzODU2MGYsIDB4YWVkNTFlM2QsIDB4MmQzOTI3MzYsIDB4MGZkOTY0MGEsIDB4NWNhNjIxNjgsIDB4NWI1NGQxOWIsIDB4MzYyZTNhMjQsIDB4MGE2N2IxMGMsIDB4NTdlNzBmOTMsIDB4ZWU5NmQyYjQsIDB4OWI5MTllMWIsIDB4YzBjNTRmODAsIDB4ZGMyMGEyNjEsIDB4Nzc0YjY5NWEsIDB4MTIxYTE2MWMsIDB4OTNiYTBhZTIsIDB4YTAyYWU1YzAsIDB4MjJlMDQzM2MsIDB4MWIxNzFkMTIsIDB4MDkwZDBiMGUsIDB4OGJjN2FkZjIsIDB4YjZhOGI5MmQsIDB4MWVhOWM4MTQsIDB4ZjExOTg1NTcsIDB4NzUwNzRjYWYsIDB4OTlkZGJiZWUsIDB4N2Y2MGZkYTMsIDB4MDEyNjlmZjcsIDB4NzJmNWJjNWMsIDB4NjYzYmM1NDQsIDB4ZmI3ZTM0NWIsIDB4NDMyOTc2OGIsIDB4MjNjNmRjY2IsIDB4ZWRmYzY4YjYsIDB4ZTRmMTYzYjgsIDB4MzFkY2NhZDcsIDB4NjM4NTEwNDIsIDB4OTcyMjQwMTMsIDB4YzYxMTIwODQsIDB4NGEyNDdkODUsIDB4YmIzZGY4ZDIsIDB4ZjkzMjExYWUsIDB4MjlhMTZkYzcsIDB4OWUyZjRiMWQsIDB4YjIzMGYzZGMsIDB4ODY1MmVjMGQsIDB4YzFlM2QwNzcsIDB4YjMxNjZjMmIsIDB4NzBiOTk5YTksIDB4OTQ0OGZhMTEsIDB4ZTk2NDIyNDcsIDB4ZmM4Y2M0YTgsIDB4ZjAzZjFhYTAsIDB4N2QyY2Q4NTYsIDB4MzM5MGVmMjIsIDB4NDk0ZWM3ODcsIDB4MzhkMWMxZDksIDB4Y2FhMmZlOGMsIDB4ZDQwYjM2OTgsIDB4ZjU4MWNmYTYsIDB4N2FkZTI4YTUsIDB4Yjc4ZTI2ZGEsIDB4YWRiZmE0M2YsIDB4M2E5ZGU0MmMsIDB4Nzg5MjBkNTAsIDB4NWZjYzliNmEsIDB4N2U0NjYyNTQsIDB4OGQxM2MyZjYsIDB4ZDhiOGU4OTAsIDB4MzlmNzVlMmUsIDB4YzNhZmY1ODIsIDB4NWQ4MGJlOWYsIDB4ZDA5MzdjNjksIDB4ZDUyZGE5NmYsIDB4MjUxMmIzY2YsIDB4YWM5OTNiYzgsIDB4MTg3ZGE3MTAsIDB4OWM2MzZlZTgsIDB4M2JiYjdiZGIsIDB4MjY3ODA5Y2QsIDB4NTkxOGY0NmUsIDB4OWFiNzAxZWMsIDB4NGY5YWE4ODMsIDB4OTU2ZTY1ZTYsIDB4ZmZlNjdlYWEsIDB4YmNjZjA4MjEsIDB4MTVlOGU2ZWYsIDB4ZTc5YmQ5YmEsIDB4NmYzNmNlNGEsIDB4OWYwOWQ0ZWEsIDB4YjA3Y2Q2MjksIDB4YTRiMmFmMzEsIDB4M2YyMzMxMmEsIDB4YTU5NDMwYzYsIDB4YTI2NmMwMzUsIDB4NGViYzM3NzQsIDB4ODJjYWE2ZmMsIDB4OTBkMGIwZTAsIDB4YTdkODE1MzMsIDB4MDQ5ODRhZjEsIDB4ZWNkYWY3NDEsIDB4Y2Q1MDBlN2YsIDB4OTFmNjJmMTcsIDB4NGRkNjhkNzYsIDB4ZWZiMDRkNDMsIDB4YWE0ZDU0Y2MsIDB4OTYwNGRmZTQsIDB4ZDFiNWUzOWUsIDB4NmE4ODFiNGMsIDB4MmMxZmI4YzEsIDB4NjU1MTdmNDYsIDB4NWVlYTA0OWQsIDB4OGMzNTVkMDEsIDB4ODc3NDczZmEsIDB4MGI0MTJlZmIsIDB4NjcxZDVhYjMsIDB4ZGJkMjUyOTIsIDB4MTA1NjMzZTksIDB4ZDY0NzEzNmQsIDB4ZDc2MThjOWEsIDB4YTEwYzdhMzcsIDB4ZjgxNDhlNTksIDB4MTMzYzg5ZWIsIDB4YTkyN2VlY2UsIDB4NjFjOTM1YjcsIDB4MWNlNWVkZTEsIDB4NDdiMTNjN2EsIDB4ZDJkZjU5OWMsIDB4ZjI3MzNmNTUsIDB4MTRjZTc5MTgsIDB4YzczN2JmNzMsIDB4ZjdjZGVhNTMsIDB4ZmRhYTViNWYsIDB4M2Q2ZjE0ZGYsIDB4NDRkYjg2NzgsIDB4YWZmMzgxY2EsIDB4NjhjNDNlYjksIDB4MjQzNDJjMzgsIDB4YTM0MDVmYzIsIDB4MWRjMzcyMTYsIDB4ZTIyNTBjYmMsIDB4M2M0OThiMjgsIDB4MGQ5NTQxZmYsIDB4YTgwMTcxMzksIDB4MGNiM2RlMDgsIDB4YjRlNDljZDgsIDB4NTZjMTkwNjQsIDB4Y2I4NDYxN2IsIDB4MzJiNjcwZDUsIDB4NmM1Yzc0NDgsIDB4Yjg1NzQyZDBdO1xuLy8gVHJhbnNmb3JtYXRpb25zIGZvciBkZWNyeXB0aW9uIGtleSBleHBhbnNpb25cbmNvbnN0IFUxID0gWzB4MDAwMDAwMDAsIDB4MGUwOTBkMGIsIDB4MWMxMjFhMTYsIDB4MTIxYjE3MWQsIDB4MzgyNDM0MmMsIDB4MzYyZDM5MjcsIDB4MjQzNjJlM2EsIDB4MmEzZjIzMzEsIDB4NzA0ODY4NTgsIDB4N2U0MTY1NTMsIDB4NmM1YTcyNGUsIDB4NjI1MzdmNDUsIDB4NDg2YzVjNzQsIDB4NDY2NTUxN2YsIDB4NTQ3ZTQ2NjIsIDB4NWE3NzRiNjksIDB4ZTA5MGQwYjAsIDB4ZWU5OWRkYmIsIDB4ZmM4MmNhYTYsIDB4ZjI4YmM3YWQsIDB4ZDhiNGU0OWMsIDB4ZDZiZGU5OTcsIDB4YzRhNmZlOGEsIDB4Y2FhZmYzODEsIDB4OTBkOGI4ZTgsIDB4OWVkMWI1ZTMsIDB4OGNjYWEyZmUsIDB4ODJjM2FmZjUsIDB4YThmYzhjYzQsIDB4YTZmNTgxY2YsIDB4YjRlZTk2ZDIsIDB4YmFlNzliZDksIDB4ZGIzYmJiN2IsIDB4ZDUzMmI2NzAsIDB4YzcyOWExNmQsIDB4YzkyMGFjNjYsIDB4ZTMxZjhmNTcsIDB4ZWQxNjgyNWMsIDB4ZmYwZDk1NDEsIDB4ZjEwNDk4NGEsIDB4YWI3M2QzMjMsIDB4YTU3YWRlMjgsIDB4Yjc2MWM5MzUsIDB4Yjk2OGM0M2UsIDB4OTM1N2U3MGYsIDB4OWQ1ZWVhMDQsIDB4OGY0NWZkMTksIDB4ODE0Y2YwMTIsIDB4M2JhYjZiY2IsIDB4MzVhMjY2YzAsIDB4MjdiOTcxZGQsIDB4MjliMDdjZDYsIDB4MDM4ZjVmZTcsIDB4MGQ4NjUyZWMsIDB4MWY5ZDQ1ZjEsIDB4MTE5NDQ4ZmEsIDB4NGJlMzAzOTMsIDB4NDVlYTBlOTgsIDB4NTdmMTE5ODUsIDB4NTlmODE0OGUsIDB4NzNjNzM3YmYsIDB4N2RjZTNhYjQsIDB4NmZkNTJkYTksIDB4NjFkYzIwYTIsIDB4YWQ3NjZkZjYsIDB4YTM3ZjYwZmQsIDB4YjE2NDc3ZTAsIDB4YmY2ZDdhZWIsIDB4OTU1MjU5ZGEsIDB4OWI1YjU0ZDEsIDB4ODk0MDQzY2MsIDB4ODc0OTRlYzcsIDB4ZGQzZTA1YWUsIDB4ZDMzNzA4YTUsIDB4YzEyYzFmYjgsIDB4Y2YyNTEyYjMsIDB4ZTUxYTMxODIsIDB4ZWIxMzNjODksIDB4ZjkwODJiOTQsIDB4ZjcwMTI2OWYsIDB4NGRlNmJkNDYsIDB4NDNlZmIwNGQsIDB4NTFmNGE3NTAsIDB4NWZmZGFhNWIsIDB4NzVjMjg5NmEsIDB4N2JjYjg0NjEsIDB4NjlkMDkzN2MsIDB4NjdkOTllNzcsIDB4M2RhZWQ1MWUsIDB4MzNhN2Q4MTUsIDB4MjFiY2NmMDgsIDB4MmZiNWMyMDMsIDB4MDU4YWUxMzIsIDB4MGI4M2VjMzksIDB4MTk5OGZiMjQsIDB4MTc5MWY2MmYsIDB4NzY0ZGQ2OGQsIDB4Nzg0NGRiODYsIDB4NmE1ZmNjOWIsIDB4NjQ1NmMxOTAsIDB4NGU2OWUyYTEsIDB4NDA2MGVmYWEsIDB4NTI3YmY4YjcsIDB4NWM3MmY1YmMsIDB4MDYwNWJlZDUsIDB4MDgwY2IzZGUsIDB4MWExN2E0YzMsIDB4MTQxZWE5YzgsIDB4M2UyMThhZjksIDB4MzAyODg3ZjIsIDB4MjIzMzkwZWYsIDB4MmMzYTlkZTQsIDB4OTZkZDA2M2QsIDB4OThkNDBiMzYsIDB4OGFjZjFjMmIsIDB4ODRjNjExMjAsIDB4YWVmOTMyMTEsIDB4YTBmMDNmMWEsIDB4YjJlYjI4MDcsIDB4YmNlMjI1MGMsIDB4ZTY5NTZlNjUsIDB4ZTg5YzYzNmUsIDB4ZmE4Nzc0NzMsIDB4ZjQ4ZTc5NzgsIDB4ZGViMTVhNDksIDB4ZDBiODU3NDIsIDB4YzJhMzQwNWYsIDB4Y2NhYTRkNTQsIDB4NDFlY2RhZjcsIDB4NGZlNWQ3ZmMsIDB4NWRmZWMwZTEsIDB4NTNmN2NkZWEsIDB4NzljOGVlZGIsIDB4NzdjMWUzZDAsIDB4NjVkYWY0Y2QsIDB4NmJkM2Y5YzYsIDB4MzFhNGIyYWYsIDB4M2ZhZGJmYTQsIDB4MmRiNmE4YjksIDB4MjNiZmE1YjIsIDB4MDk4MDg2ODMsIDB4MDc4OThiODgsIDB4MTU5MjljOTUsIDB4MWI5YjkxOWUsIDB4YTE3YzBhNDcsIDB4YWY3NTA3NGMsIDB4YmQ2ZTEwNTEsIDB4YjM2NzFkNWEsIDB4OTk1ODNlNmIsIDB4OTc1MTMzNjAsIDB4ODU0YTI0N2QsIDB4OGI0MzI5NzYsIDB4ZDEzNDYyMWYsIDB4ZGYzZDZmMTQsIDB4Y2QyNjc4MDksIDB4YzMyZjc1MDIsIDB4ZTkxMDU2MzMsIDB4ZTcxOTViMzgsIDB4ZjUwMjRjMjUsIDB4ZmIwYjQxMmUsIDB4OWFkNzYxOGMsIDB4OTRkZTZjODcsIDB4ODZjNTdiOWEsIDB4ODhjYzc2OTEsIDB4YTJmMzU1YTAsIDB4YWNmYTU4YWIsIDB4YmVlMTRmYjYsIDB4YjBlODQyYmQsIDB4ZWE5ZjA5ZDQsIDB4ZTQ5NjA0ZGYsIDB4ZjY4ZDEzYzIsIDB4Zjg4NDFlYzksIDB4ZDJiYjNkZjgsIDB4ZGNiMjMwZjMsIDB4Y2VhOTI3ZWUsIDB4YzBhMDJhZTUsIDB4N2E0N2IxM2MsIDB4NzQ0ZWJjMzcsIDB4NjY1NWFiMmEsIDB4Njg1Y2E2MjEsIDB4NDI2Mzg1MTAsIDB4NGM2YTg4MWIsIDB4NWU3MTlmMDYsIDB4NTA3ODkyMGQsIDB4MGEwZmQ5NjQsIDB4MDQwNmQ0NmYsIDB4MTYxZGMzNzIsIDB4MTgxNGNlNzksIDB4MzIyYmVkNDgsIDB4M2MyMmUwNDMsIDB4MmUzOWY3NWUsIDB4MjAzMGZhNTUsIDB4ZWM5YWI3MDEsIDB4ZTI5M2JhMGEsIDB4ZjA4OGFkMTcsIDB4ZmU4MWEwMWMsIDB4ZDRiZTgzMmQsIDB4ZGFiNzhlMjYsIDB4YzhhYzk5M2IsIDB4YzZhNTk0MzAsIDB4OWNkMmRmNTksIDB4OTJkYmQyNTIsIDB4ODBjMGM1NGYsIDB4OGVjOWM4NDQsIDB4YTRmNmViNzUsIDB4YWFmZmU2N2UsIDB4YjhlNGYxNjMsIDB4YjZlZGZjNjgsIDB4MGMwYTY3YjEsIDB4MDIwMzZhYmEsIDB4MTAxODdkYTcsIDB4MWUxMTcwYWMsIDB4MzQyZTUzOWQsIDB4M2EyNzVlOTYsIDB4MjgzYzQ5OGIsIDB4MjYzNTQ0ODAsIDB4N2M0MjBmZTksIDB4NzI0YjAyZTIsIDB4NjA1MDE1ZmYsIDB4NmU1OTE4ZjQsIDB4NDQ2NjNiYzUsIDB4NGE2ZjM2Y2UsIDB4NTg3NDIxZDMsIDB4NTY3ZDJjZDgsIDB4MzdhMTBjN2EsIDB4MzlhODAxNzEsIDB4MmJiMzE2NmMsIDB4MjViYTFiNjcsIDB4MGY4NTM4NTYsIDB4MDE4YzM1NWQsIDB4MTM5NzIyNDAsIDB4MWQ5ZTJmNGIsIDB4NDdlOTY0MjIsIDB4NDllMDY5MjksIDB4NWJmYjdlMzQsIDB4NTVmMjczM2YsIDB4N2ZjZDUwMGUsIDB4NzFjNDVkMDUsIDB4NjNkZjRhMTgsIDB4NmRkNjQ3MTMsIDB4ZDczMWRjY2EsIDB4ZDkzOGQxYzEsIDB4Y2IyM2M2ZGMsIDB4YzUyYWNiZDcsIDB4ZWYxNWU4ZTYsIDB4ZTExY2U1ZWQsIDB4ZjMwN2YyZjAsIDB4ZmQwZWZmZmIsIDB4YTc3OWI0OTIsIDB4YTk3MGI5OTksIDB4YmI2YmFlODQsIDB4YjU2MmEzOGYsIDB4OWY1ZDgwYmUsIDB4OTE1NDhkYjUsIDB4ODM0ZjlhYTgsIDB4OGQ0Njk3YTNdO1xuY29uc3QgVTIgPSBbMHgwMDAwMDAwMCwgMHgwYjBlMDkwZCwgMHgxNjFjMTIxYSwgMHgxZDEyMWIxNywgMHgyYzM4MjQzNCwgMHgyNzM2MmQzOSwgMHgzYTI0MzYyZSwgMHgzMTJhM2YyMywgMHg1ODcwNDg2OCwgMHg1MzdlNDE2NSwgMHg0ZTZjNWE3MiwgMHg0NTYyNTM3ZiwgMHg3NDQ4NmM1YywgMHg3ZjQ2NjU1MSwgMHg2MjU0N2U0NiwgMHg2OTVhNzc0YiwgMHhiMGUwOTBkMCwgMHhiYmVlOTlkZCwgMHhhNmZjODJjYSwgMHhhZGYyOGJjNywgMHg5Y2Q4YjRlNCwgMHg5N2Q2YmRlOSwgMHg4YWM0YTZmZSwgMHg4MWNhYWZmMywgMHhlODkwZDhiOCwgMHhlMzllZDFiNSwgMHhmZThjY2FhMiwgMHhmNTgyYzNhZiwgMHhjNGE4ZmM4YywgMHhjZmE2ZjU4MSwgMHhkMmI0ZWU5NiwgMHhkOWJhZTc5YiwgMHg3YmRiM2JiYiwgMHg3MGQ1MzJiNiwgMHg2ZGM3MjlhMSwgMHg2NmM5MjBhYywgMHg1N2UzMWY4ZiwgMHg1Y2VkMTY4MiwgMHg0MWZmMGQ5NSwgMHg0YWYxMDQ5OCwgMHgyM2FiNzNkMywgMHgyOGE1N2FkZSwgMHgzNWI3NjFjOSwgMHgzZWI5NjhjNCwgMHgwZjkzNTdlNywgMHgwNDlkNWVlYSwgMHgxOThmNDVmZCwgMHgxMjgxNGNmMCwgMHhjYjNiYWI2YiwgMHhjMDM1YTI2NiwgMHhkZDI3Yjk3MSwgMHhkNjI5YjA3YywgMHhlNzAzOGY1ZiwgMHhlYzBkODY1MiwgMHhmMTFmOWQ0NSwgMHhmYTExOTQ0OCwgMHg5MzRiZTMwMywgMHg5ODQ1ZWEwZSwgMHg4NTU3ZjExOSwgMHg4ZTU5ZjgxNCwgMHhiZjczYzczNywgMHhiNDdkY2UzYSwgMHhhOTZmZDUyZCwgMHhhMjYxZGMyMCwgMHhmNmFkNzY2ZCwgMHhmZGEzN2Y2MCwgMHhlMGIxNjQ3NywgMHhlYmJmNmQ3YSwgMHhkYTk1NTI1OSwgMHhkMTliNWI1NCwgMHhjYzg5NDA0MywgMHhjNzg3NDk0ZSwgMHhhZWRkM2UwNSwgMHhhNWQzMzcwOCwgMHhiOGMxMmMxZiwgMHhiM2NmMjUxMiwgMHg4MmU1MWEzMSwgMHg4OWViMTMzYywgMHg5NGY5MDgyYiwgMHg5ZmY3MDEyNiwgMHg0NjRkZTZiZCwgMHg0ZDQzZWZiMCwgMHg1MDUxZjRhNywgMHg1YjVmZmRhYSwgMHg2YTc1YzI4OSwgMHg2MTdiY2I4NCwgMHg3YzY5ZDA5MywgMHg3NzY3ZDk5ZSwgMHgxZTNkYWVkNSwgMHgxNTMzYTdkOCwgMHgwODIxYmNjZiwgMHgwMzJmYjVjMiwgMHgzMjA1OGFlMSwgMHgzOTBiODNlYywgMHgyNDE5OThmYiwgMHgyZjE3OTFmNiwgMHg4ZDc2NGRkNiwgMHg4Njc4NDRkYiwgMHg5YjZhNWZjYywgMHg5MDY0NTZjMSwgMHhhMTRlNjllMiwgMHhhYTQwNjBlZiwgMHhiNzUyN2JmOCwgMHhiYzVjNzJmNSwgMHhkNTA2MDViZSwgMHhkZTA4MGNiMywgMHhjMzFhMTdhNCwgMHhjODE0MWVhOSwgMHhmOTNlMjE4YSwgMHhmMjMwMjg4NywgMHhlZjIyMzM5MCwgMHhlNDJjM2E5ZCwgMHgzZDk2ZGQwNiwgMHgzNjk4ZDQwYiwgMHgyYjhhY2YxYywgMHgyMDg0YzYxMSwgMHgxMWFlZjkzMiwgMHgxYWEwZjAzZiwgMHgwN2IyZWIyOCwgMHgwY2JjZTIyNSwgMHg2NWU2OTU2ZSwgMHg2ZWU4OWM2MywgMHg3M2ZhODc3NCwgMHg3OGY0OGU3OSwgMHg0OWRlYjE1YSwgMHg0MmQwYjg1NywgMHg1ZmMyYTM0MCwgMHg1NGNjYWE0ZCwgMHhmNzQxZWNkYSwgMHhmYzRmZTVkNywgMHhlMTVkZmVjMCwgMHhlYTUzZjdjZCwgMHhkYjc5YzhlZSwgMHhkMDc3YzFlMywgMHhjZDY1ZGFmNCwgMHhjNjZiZDNmOSwgMHhhZjMxYTRiMiwgMHhhNDNmYWRiZiwgMHhiOTJkYjZhOCwgMHhiMjIzYmZhNSwgMHg4MzA5ODA4NiwgMHg4ODA3ODk4YiwgMHg5NTE1OTI5YywgMHg5ZTFiOWI5MSwgMHg0N2ExN2MwYSwgMHg0Y2FmNzUwNywgMHg1MWJkNmUxMCwgMHg1YWIzNjcxZCwgMHg2Yjk5NTgzZSwgMHg2MDk3NTEzMywgMHg3ZDg1NGEyNCwgMHg3NjhiNDMyOSwgMHgxZmQxMzQ2MiwgMHgxNGRmM2Q2ZiwgMHgwOWNkMjY3OCwgMHgwMmMzMmY3NSwgMHgzM2U5MTA1NiwgMHgzOGU3MTk1YiwgMHgyNWY1MDI0YywgMHgyZWZiMGI0MSwgMHg4YzlhZDc2MSwgMHg4Nzk0ZGU2YywgMHg5YTg2YzU3YiwgMHg5MTg4Y2M3NiwgMHhhMGEyZjM1NSwgMHhhYmFjZmE1OCwgMHhiNmJlZTE0ZiwgMHhiZGIwZTg0MiwgMHhkNGVhOWYwOSwgMHhkZmU0OTYwNCwgMHhjMmY2OGQxMywgMHhjOWY4ODQxZSwgMHhmOGQyYmIzZCwgMHhmM2RjYjIzMCwgMHhlZWNlYTkyNywgMHhlNWMwYTAyYSwgMHgzYzdhNDdiMSwgMHgzNzc0NGViYywgMHgyYTY2NTVhYiwgMHgyMTY4NWNhNiwgMHgxMDQyNjM4NSwgMHgxYjRjNmE4OCwgMHgwNjVlNzE5ZiwgMHgwZDUwNzg5MiwgMHg2NDBhMGZkOSwgMHg2ZjA0MDZkNCwgMHg3MjE2MWRjMywgMHg3OTE4MTRjZSwgMHg0ODMyMmJlZCwgMHg0MzNjMjJlMCwgMHg1ZTJlMzlmNywgMHg1NTIwMzBmYSwgMHgwMWVjOWFiNywgMHgwYWUyOTNiYSwgMHgxN2YwODhhZCwgMHgxY2ZlODFhMCwgMHgyZGQ0YmU4MywgMHgyNmRhYjc4ZSwgMHgzYmM4YWM5OSwgMHgzMGM2YTU5NCwgMHg1OTljZDJkZiwgMHg1MjkyZGJkMiwgMHg0ZjgwYzBjNSwgMHg0NDhlYzljOCwgMHg3NWE0ZjZlYiwgMHg3ZWFhZmZlNiwgMHg2M2I4ZTRmMSwgMHg2OGI2ZWRmYywgMHhiMTBjMGE2NywgMHhiYTAyMDM2YSwgMHhhNzEwMTg3ZCwgMHhhYzFlMTE3MCwgMHg5ZDM0MmU1MywgMHg5NjNhMjc1ZSwgMHg4YjI4M2M0OSwgMHg4MDI2MzU0NCwgMHhlOTdjNDIwZiwgMHhlMjcyNGIwMiwgMHhmZjYwNTAxNSwgMHhmNDZlNTkxOCwgMHhjNTQ0NjYzYiwgMHhjZTRhNmYzNiwgMHhkMzU4NzQyMSwgMHhkODU2N2QyYywgMHg3YTM3YTEwYywgMHg3MTM5YTgwMSwgMHg2YzJiYjMxNiwgMHg2NzI1YmExYiwgMHg1NjBmODUzOCwgMHg1ZDAxOGMzNSwgMHg0MDEzOTcyMiwgMHg0YjFkOWUyZiwgMHgyMjQ3ZTk2NCwgMHgyOTQ5ZTA2OSwgMHgzNDViZmI3ZSwgMHgzZjU1ZjI3MywgMHgwZTdmY2Q1MCwgMHgwNTcxYzQ1ZCwgMHgxODYzZGY0YSwgMHgxMzZkZDY0NywgMHhjYWQ3MzFkYywgMHhjMWQ5MzhkMSwgMHhkY2NiMjNjNiwgMHhkN2M1MmFjYiwgMHhlNmVmMTVlOCwgMHhlZGUxMWNlNSwgMHhmMGYzMDdmMiwgMHhmYmZkMGVmZiwgMHg5MmE3NzliNCwgMHg5OWE5NzBiOSwgMHg4NGJiNmJhZSwgMHg4ZmI1NjJhMywgMHhiZTlmNWQ4MCwgMHhiNTkxNTQ4ZCwgMHhhODgzNGY5YSwgMHhhMzhkNDY5N107XG5jb25zdCBVMyA9IFsweDAwMDAwMDAwLCAweDBkMGIwZTA5LCAweDFhMTYxYzEyLCAweDE3MWQxMjFiLCAweDM0MmMzODI0LCAweDM5MjczNjJkLCAweDJlM2EyNDM2LCAweDIzMzEyYTNmLCAweDY4NTg3MDQ4LCAweDY1NTM3ZTQxLCAweDcyNGU2YzVhLCAweDdmNDU2MjUzLCAweDVjNzQ0ODZjLCAweDUxN2Y0NjY1LCAweDQ2NjI1NDdlLCAweDRiNjk1YTc3LCAweGQwYjBlMDkwLCAweGRkYmJlZTk5LCAweGNhYTZmYzgyLCAweGM3YWRmMjhiLCAweGU0OWNkOGI0LCAweGU5OTdkNmJkLCAweGZlOGFjNGE2LCAweGYzODFjYWFmLCAweGI4ZTg5MGQ4LCAweGI1ZTM5ZWQxLCAweGEyZmU4Y2NhLCAweGFmZjU4MmMzLCAweDhjYzRhOGZjLCAweDgxY2ZhNmY1LCAweDk2ZDJiNGVlLCAweDliZDliYWU3LCAweGJiN2JkYjNiLCAweGI2NzBkNTMyLCAweGExNmRjNzI5LCAweGFjNjZjOTIwLCAweDhmNTdlMzFmLCAweDgyNWNlZDE2LCAweDk1NDFmZjBkLCAweDk4NGFmMTA0LCAweGQzMjNhYjczLCAweGRlMjhhNTdhLCAweGM5MzViNzYxLCAweGM0M2ViOTY4LCAweGU3MGY5MzU3LCAweGVhMDQ5ZDVlLCAweGZkMTk4ZjQ1LCAweGYwMTI4MTRjLCAweDZiY2IzYmFiLCAweDY2YzAzNWEyLCAweDcxZGQyN2I5LCAweDdjZDYyOWIwLCAweDVmZTcwMzhmLCAweDUyZWMwZDg2LCAweDQ1ZjExZjlkLCAweDQ4ZmExMTk0LCAweDAzOTM0YmUzLCAweDBlOTg0NWVhLCAweDE5ODU1N2YxLCAweDE0OGU1OWY4LCAweDM3YmY3M2M3LCAweDNhYjQ3ZGNlLCAweDJkYTk2ZmQ1LCAweDIwYTI2MWRjLCAweDZkZjZhZDc2LCAweDYwZmRhMzdmLCAweDc3ZTBiMTY0LCAweDdhZWJiZjZkLCAweDU5ZGE5NTUyLCAweDU0ZDE5YjViLCAweDQzY2M4OTQwLCAweDRlYzc4NzQ5LCAweDA1YWVkZDNlLCAweDA4YTVkMzM3LCAweDFmYjhjMTJjLCAweDEyYjNjZjI1LCAweDMxODJlNTFhLCAweDNjODllYjEzLCAweDJiOTRmOTA4LCAweDI2OWZmNzAxLCAweGJkNDY0ZGU2LCAweGIwNGQ0M2VmLCAweGE3NTA1MWY0LCAweGFhNWI1ZmZkLCAweDg5NmE3NWMyLCAweDg0NjE3YmNiLCAweDkzN2M2OWQwLCAweDllNzc2N2Q5LCAweGQ1MWUzZGFlLCAweGQ4MTUzM2E3LCAweGNmMDgyMWJjLCAweGMyMDMyZmI1LCAweGUxMzIwNThhLCAweGVjMzkwYjgzLCAweGZiMjQxOTk4LCAweGY2MmYxNzkxLCAweGQ2OGQ3NjRkLCAweGRiODY3ODQ0LCAweGNjOWI2YTVmLCAweGMxOTA2NDU2LCAweGUyYTE0ZTY5LCAweGVmYWE0MDYwLCAweGY4Yjc1MjdiLCAweGY1YmM1YzcyLCAweGJlZDUwNjA1LCAweGIzZGUwODBjLCAweGE0YzMxYTE3LCAweGE5YzgxNDFlLCAweDhhZjkzZTIxLCAweDg3ZjIzMDI4LCAweDkwZWYyMjMzLCAweDlkZTQyYzNhLCAweDA2M2Q5NmRkLCAweDBiMzY5OGQ0LCAweDFjMmI4YWNmLCAweDExMjA4NGM2LCAweDMyMTFhZWY5LCAweDNmMWFhMGYwLCAweDI4MDdiMmViLCAweDI1MGNiY2UyLCAweDZlNjVlNjk1LCAweDYzNmVlODljLCAweDc0NzNmYTg3LCAweDc5NzhmNDhlLCAweDVhNDlkZWIxLCAweDU3NDJkMGI4LCAweDQwNWZjMmEzLCAweDRkNTRjY2FhLCAweGRhZjc0MWVjLCAweGQ3ZmM0ZmU1LCAweGMwZTE1ZGZlLCAweGNkZWE1M2Y3LCAweGVlZGI3OWM4LCAweGUzZDA3N2MxLCAweGY0Y2Q2NWRhLCAweGY5YzY2YmQzLCAweGIyYWYzMWE0LCAweGJmYTQzZmFkLCAweGE4YjkyZGI2LCAweGE1YjIyM2JmLCAweDg2ODMwOTgwLCAweDhiODgwNzg5LCAweDljOTUxNTkyLCAweDkxOWUxYjliLCAweDBhNDdhMTdjLCAweDA3NGNhZjc1LCAweDEwNTFiZDZlLCAweDFkNWFiMzY3LCAweDNlNmI5OTU4LCAweDMzNjA5NzUxLCAweDI0N2Q4NTRhLCAweDI5NzY4YjQzLCAweDYyMWZkMTM0LCAweDZmMTRkZjNkLCAweDc4MDljZDI2LCAweDc1MDJjMzJmLCAweDU2MzNlOTEwLCAweDViMzhlNzE5LCAweDRjMjVmNTAyLCAweDQxMmVmYjBiLCAweDYxOGM5YWQ3LCAweDZjODc5NGRlLCAweDdiOWE4NmM1LCAweDc2OTE4OGNjLCAweDU1YTBhMmYzLCAweDU4YWJhY2ZhLCAweDRmYjZiZWUxLCAweDQyYmRiMGU4LCAweDA5ZDRlYTlmLCAweDA0ZGZlNDk2LCAweDEzYzJmNjhkLCAweDFlYzlmODg0LCAweDNkZjhkMmJiLCAweDMwZjNkY2IyLCAweDI3ZWVjZWE5LCAweDJhZTVjMGEwLCAweGIxM2M3YTQ3LCAweGJjMzc3NDRlLCAweGFiMmE2NjU1LCAweGE2MjE2ODVjLCAweDg1MTA0MjYzLCAweDg4MWI0YzZhLCAweDlmMDY1ZTcxLCAweDkyMGQ1MDc4LCAweGQ5NjQwYTBmLCAweGQ0NmYwNDA2LCAweGMzNzIxNjFkLCAweGNlNzkxODE0LCAweGVkNDgzMjJiLCAweGUwNDMzYzIyLCAweGY3NWUyZTM5LCAweGZhNTUyMDMwLCAweGI3MDFlYzlhLCAweGJhMGFlMjkzLCAweGFkMTdmMDg4LCAweGEwMWNmZTgxLCAweDgzMmRkNGJlLCAweDhlMjZkYWI3LCAweDk5M2JjOGFjLCAweDk0MzBjNmE1LCAweGRmNTk5Y2QyLCAweGQyNTI5MmRiLCAweGM1NGY4MGMwLCAweGM4NDQ4ZWM5LCAweGViNzVhNGY2LCAweGU2N2VhYWZmLCAweGYxNjNiOGU0LCAweGZjNjhiNmVkLCAweDY3YjEwYzBhLCAweDZhYmEwMjAzLCAweDdkYTcxMDE4LCAweDcwYWMxZTExLCAweDUzOWQzNDJlLCAweDVlOTYzYTI3LCAweDQ5OGIyODNjLCAweDQ0ODAyNjM1LCAweDBmZTk3YzQyLCAweDAyZTI3MjRiLCAweDE1ZmY2MDUwLCAweDE4ZjQ2ZTU5LCAweDNiYzU0NDY2LCAweDM2Y2U0YTZmLCAweDIxZDM1ODc0LCAweDJjZDg1NjdkLCAweDBjN2EzN2ExLCAweDAxNzEzOWE4LCAweDE2NmMyYmIzLCAweDFiNjcyNWJhLCAweDM4NTYwZjg1LCAweDM1NWQwMThjLCAweDIyNDAxMzk3LCAweDJmNGIxZDllLCAweDY0MjI0N2U5LCAweDY5Mjk0OWUwLCAweDdlMzQ1YmZiLCAweDczM2Y1NWYyLCAweDUwMGU3ZmNkLCAweDVkMDU3MWM0LCAweDRhMTg2M2RmLCAweDQ3MTM2ZGQ2LCAweGRjY2FkNzMxLCAweGQxYzFkOTM4LCAweGM2ZGNjYjIzLCAweGNiZDdjNTJhLCAweGU4ZTZlZjE1LCAweGU1ZWRlMTFjLCAweGYyZjBmMzA3LCAweGZmZmJmZDBlLCAweGI0OTJhNzc5LCAweGI5OTlhOTcwLCAweGFlODRiYjZiLCAweGEzOGZiNTYyLCAweDgwYmU5ZjVkLCAweDhkYjU5MTU0LCAweDlhYTg4MzRmLCAweDk3YTM4ZDQ2XTtcbmNvbnN0IFU0ID0gWzB4MDAwMDAwMDAsIDB4MDkwZDBiMGUsIDB4MTIxYTE2MWMsIDB4MWIxNzFkMTIsIDB4MjQzNDJjMzgsIDB4MmQzOTI3MzYsIDB4MzYyZTNhMjQsIDB4M2YyMzMxMmEsIDB4NDg2ODU4NzAsIDB4NDE2NTUzN2UsIDB4NWE3MjRlNmMsIDB4NTM3ZjQ1NjIsIDB4NmM1Yzc0NDgsIDB4NjU1MTdmNDYsIDB4N2U0NjYyNTQsIDB4Nzc0YjY5NWEsIDB4OTBkMGIwZTAsIDB4OTlkZGJiZWUsIDB4ODJjYWE2ZmMsIDB4OGJjN2FkZjIsIDB4YjRlNDljZDgsIDB4YmRlOTk3ZDYsIDB4YTZmZThhYzQsIDB4YWZmMzgxY2EsIDB4ZDhiOGU4OTAsIDB4ZDFiNWUzOWUsIDB4Y2FhMmZlOGMsIDB4YzNhZmY1ODIsIDB4ZmM4Y2M0YTgsIDB4ZjU4MWNmYTYsIDB4ZWU5NmQyYjQsIDB4ZTc5YmQ5YmEsIDB4M2JiYjdiZGIsIDB4MzJiNjcwZDUsIDB4MjlhMTZkYzcsIDB4MjBhYzY2YzksIDB4MWY4ZjU3ZTMsIDB4MTY4MjVjZWQsIDB4MGQ5NTQxZmYsIDB4MDQ5ODRhZjEsIDB4NzNkMzIzYWIsIDB4N2FkZTI4YTUsIDB4NjFjOTM1YjcsIDB4NjhjNDNlYjksIDB4NTdlNzBmOTMsIDB4NWVlYTA0OWQsIDB4NDVmZDE5OGYsIDB4NGNmMDEyODEsIDB4YWI2YmNiM2IsIDB4YTI2NmMwMzUsIDB4Yjk3MWRkMjcsIDB4YjA3Y2Q2MjksIDB4OGY1ZmU3MDMsIDB4ODY1MmVjMGQsIDB4OWQ0NWYxMWYsIDB4OTQ0OGZhMTEsIDB4ZTMwMzkzNGIsIDB4ZWEwZTk4NDUsIDB4ZjExOTg1NTcsIDB4ZjgxNDhlNTksIDB4YzczN2JmNzMsIDB4Y2UzYWI0N2QsIDB4ZDUyZGE5NmYsIDB4ZGMyMGEyNjEsIDB4NzY2ZGY2YWQsIDB4N2Y2MGZkYTMsIDB4NjQ3N2UwYjEsIDB4NmQ3YWViYmYsIDB4NTI1OWRhOTUsIDB4NWI1NGQxOWIsIDB4NDA0M2NjODksIDB4NDk0ZWM3ODcsIDB4M2UwNWFlZGQsIDB4MzcwOGE1ZDMsIDB4MmMxZmI4YzEsIDB4MjUxMmIzY2YsIDB4MWEzMTgyZTUsIDB4MTMzYzg5ZWIsIDB4MDgyYjk0ZjksIDB4MDEyNjlmZjcsIDB4ZTZiZDQ2NGQsIDB4ZWZiMDRkNDMsIDB4ZjRhNzUwNTEsIDB4ZmRhYTViNWYsIDB4YzI4OTZhNzUsIDB4Y2I4NDYxN2IsIDB4ZDA5MzdjNjksIDB4ZDk5ZTc3NjcsIDB4YWVkNTFlM2QsIDB4YTdkODE1MzMsIDB4YmNjZjA4MjEsIDB4YjVjMjAzMmYsIDB4OGFlMTMyMDUsIDB4ODNlYzM5MGIsIDB4OThmYjI0MTksIDB4OTFmNjJmMTcsIDB4NGRkNjhkNzYsIDB4NDRkYjg2NzgsIDB4NWZjYzliNmEsIDB4NTZjMTkwNjQsIDB4NjllMmExNGUsIDB4NjBlZmFhNDAsIDB4N2JmOGI3NTIsIDB4NzJmNWJjNWMsIDB4MDViZWQ1MDYsIDB4MGNiM2RlMDgsIDB4MTdhNGMzMWEsIDB4MWVhOWM4MTQsIDB4MjE4YWY5M2UsIDB4Mjg4N2YyMzAsIDB4MzM5MGVmMjIsIDB4M2E5ZGU0MmMsIDB4ZGQwNjNkOTYsIDB4ZDQwYjM2OTgsIDB4Y2YxYzJiOGEsIDB4YzYxMTIwODQsIDB4ZjkzMjExYWUsIDB4ZjAzZjFhYTAsIDB4ZWIyODA3YjIsIDB4ZTIyNTBjYmMsIDB4OTU2ZTY1ZTYsIDB4OWM2MzZlZTgsIDB4ODc3NDczZmEsIDB4OGU3OTc4ZjQsIDB4YjE1YTQ5ZGUsIDB4Yjg1NzQyZDAsIDB4YTM0MDVmYzIsIDB4YWE0ZDU0Y2MsIDB4ZWNkYWY3NDEsIDB4ZTVkN2ZjNGYsIDB4ZmVjMGUxNWQsIDB4ZjdjZGVhNTMsIDB4YzhlZWRiNzksIDB4YzFlM2QwNzcsIDB4ZGFmNGNkNjUsIDB4ZDNmOWM2NmIsIDB4YTRiMmFmMzEsIDB4YWRiZmE0M2YsIDB4YjZhOGI5MmQsIDB4YmZhNWIyMjMsIDB4ODA4NjgzMDksIDB4ODk4Yjg4MDcsIDB4OTI5Yzk1MTUsIDB4OWI5MTllMWIsIDB4N2MwYTQ3YTEsIDB4NzUwNzRjYWYsIDB4NmUxMDUxYmQsIDB4NjcxZDVhYjMsIDB4NTgzZTZiOTksIDB4NTEzMzYwOTcsIDB4NGEyNDdkODUsIDB4NDMyOTc2OGIsIDB4MzQ2MjFmZDEsIDB4M2Q2ZjE0ZGYsIDB4MjY3ODA5Y2QsIDB4MmY3NTAyYzMsIDB4MTA1NjMzZTksIDB4MTk1YjM4ZTcsIDB4MDI0YzI1ZjUsIDB4MGI0MTJlZmIsIDB4ZDc2MThjOWEsIDB4ZGU2Yzg3OTQsIDB4YzU3YjlhODYsIDB4Y2M3NjkxODgsIDB4ZjM1NWEwYTIsIDB4ZmE1OGFiYWMsIDB4ZTE0ZmI2YmUsIDB4ZTg0MmJkYjAsIDB4OWYwOWQ0ZWEsIDB4OTYwNGRmZTQsIDB4OGQxM2MyZjYsIDB4ODQxZWM5ZjgsIDB4YmIzZGY4ZDIsIDB4YjIzMGYzZGMsIDB4YTkyN2VlY2UsIDB4YTAyYWU1YzAsIDB4NDdiMTNjN2EsIDB4NGViYzM3NzQsIDB4NTVhYjJhNjYsIDB4NWNhNjIxNjgsIDB4NjM4NTEwNDIsIDB4NmE4ODFiNGMsIDB4NzE5ZjA2NWUsIDB4Nzg5MjBkNTAsIDB4MGZkOTY0MGEsIDB4MDZkNDZmMDQsIDB4MWRjMzcyMTYsIDB4MTRjZTc5MTgsIDB4MmJlZDQ4MzIsIDB4MjJlMDQzM2MsIDB4MzlmNzVlMmUsIDB4MzBmYTU1MjAsIDB4OWFiNzAxZWMsIDB4OTNiYTBhZTIsIDB4ODhhZDE3ZjAsIDB4ODFhMDFjZmUsIDB4YmU4MzJkZDQsIDB4Yjc4ZTI2ZGEsIDB4YWM5OTNiYzgsIDB4YTU5NDMwYzYsIDB4ZDJkZjU5OWMsIDB4ZGJkMjUyOTIsIDB4YzBjNTRmODAsIDB4YzljODQ0OGUsIDB4ZjZlYjc1YTQsIDB4ZmZlNjdlYWEsIDB4ZTRmMTYzYjgsIDB4ZWRmYzY4YjYsIDB4MGE2N2IxMGMsIDB4MDM2YWJhMDIsIDB4MTg3ZGE3MTAsIDB4MTE3MGFjMWUsIDB4MmU1MzlkMzQsIDB4Mjc1ZTk2M2EsIDB4M2M0OThiMjgsIDB4MzU0NDgwMjYsIDB4NDIwZmU5N2MsIDB4NGIwMmUyNzIsIDB4NTAxNWZmNjAsIDB4NTkxOGY0NmUsIDB4NjYzYmM1NDQsIDB4NmYzNmNlNGEsIDB4NzQyMWQzNTgsIDB4N2QyY2Q4NTYsIDB4YTEwYzdhMzcsIDB4YTgwMTcxMzksIDB4YjMxNjZjMmIsIDB4YmExYjY3MjUsIDB4ODUzODU2MGYsIDB4OGMzNTVkMDEsIDB4OTcyMjQwMTMsIDB4OWUyZjRiMWQsIDB4ZTk2NDIyNDcsIDB4ZTA2OTI5NDksIDB4ZmI3ZTM0NWIsIDB4ZjI3MzNmNTUsIDB4Y2Q1MDBlN2YsIDB4YzQ1ZDA1NzEsIDB4ZGY0YTE4NjMsIDB4ZDY0NzEzNmQsIDB4MzFkY2NhZDcsIDB4MzhkMWMxZDksIDB4MjNjNmRjY2IsIDB4MmFjYmQ3YzUsIDB4MTVlOGU2ZWYsIDB4MWNlNWVkZTEsIDB4MDdmMmYwZjMsIDB4MGVmZmZiZmQsIDB4NzliNDkyYTcsIDB4NzBiOTk5YTksIDB4NmJhZTg0YmIsIDB4NjJhMzhmYjUsIDB4NWQ4MGJlOWYsIDB4NTQ4ZGI1OTEsIDB4NGY5YWE4ODMsIDB4NDY5N2EzOGRdO1xuZnVuY3Rpb24gY29udmVydFRvSW50MzIoYnl0ZXMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSA0KSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKChieXRlc1tpXSA8PCAyNCkgfCAoYnl0ZXNbaSArIDFdIDw8IDE2KSB8IChieXRlc1tpICsgMl0gPDwgOCkgfCBieXRlc1tpICsgM10pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuY2xhc3MgQUVTIHtcbiAgICBnZXQga2V5KCkgeyByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQUVTX2tleSwgXCJmXCIpLnNsaWNlKCk7IH1cbiAgICBjb25zdHJ1Y3RvcihrZXkpIHtcbiAgICAgICAgX0FFU19rZXkuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9BRVNfS2Quc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9BRVNfS2Uuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBBRVMpKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignQUVTIG11c3QgYmUgaW5zdGFuaXRhdGVkIHdpdGggYG5ld2AnKTtcbiAgICAgICAgfVxuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9BRVNfa2V5LCBuZXcgVWludDhBcnJheShrZXkpLCBcImZcIik7XG4gICAgICAgIGNvbnN0IHJvdW5kcyA9IG51bWJlck9mUm91bmRzW3RoaXMua2V5Lmxlbmd0aF07XG4gICAgICAgIGlmIChyb3VuZHMgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgc2l6ZSAobXVzdCBiZSAxNiwgMjQgb3IgMzIgYnl0ZXMpJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZW5jcnlwdGlvbiByb3VuZCBrZXlzXG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0FFU19LZSwgW10sIFwiZlwiKTtcbiAgICAgICAgLy8gZGVjcnlwdGlvbiByb3VuZCBrZXlzXG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0FFU19LZCwgW10sIFwiZlwiKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gcm91bmRzOyBpKyspIHtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FFU19LZSwgXCJmXCIpLnB1c2goWzAsIDAsIDAsIDBdKTtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FFU19LZCwgXCJmXCIpLnB1c2goWzAsIDAsIDAsIDBdKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByb3VuZEtleUNvdW50ID0gKHJvdW5kcyArIDEpICogNDtcbiAgICAgICAgY29uc3QgS0MgPSB0aGlzLmtleS5sZW5ndGggLyA0O1xuICAgICAgICAvLyBjb252ZXJ0IHRoZSBrZXkgaW50byBpbnRzXG4gICAgICAgIGNvbnN0IHRrID0gY29udmVydFRvSW50MzIodGhpcy5rZXkpO1xuICAgICAgICAvLyBjb3B5IHZhbHVlcyBpbnRvIHJvdW5kIGtleSBhcnJheXNcbiAgICAgICAgbGV0IGluZGV4O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IEtDOyBpKyspIHtcbiAgICAgICAgICAgIGluZGV4ID0gaSA+PiAyO1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQUVTX0tlLCBcImZcIilbaW5kZXhdW2kgJSA0XSA9IHRrW2ldO1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQUVTX0tkLCBcImZcIilbcm91bmRzIC0gaW5kZXhdW2kgJSA0XSA9IHRrW2ldO1xuICAgICAgICB9XG4gICAgICAgIC8vIGtleSBleHBhbnNpb24gKGZpcHMtMTk3IHNlY3Rpb24gNS4yKVxuICAgICAgICBsZXQgcmNvbnBvaW50ZXIgPSAwO1xuICAgICAgICBsZXQgdCA9IEtDLCB0dDtcbiAgICAgICAgd2hpbGUgKHQgPCByb3VuZEtleUNvdW50KSB7XG4gICAgICAgICAgICB0dCA9IHRrW0tDIC0gMV07XG4gICAgICAgICAgICB0a1swXSBePSAoKFNbKHR0ID4+IDE2KSAmIDB4RkZdIDw8IDI0KSBeXG4gICAgICAgICAgICAgICAgKFNbKHR0ID4+IDgpICYgMHhGRl0gPDwgMTYpIF5cbiAgICAgICAgICAgICAgICAoU1t0dCAmIDB4RkZdIDw8IDgpIF5cbiAgICAgICAgICAgICAgICBTWyh0dCA+PiAyNCkgJiAweEZGXSBeXG4gICAgICAgICAgICAgICAgKHJjb25bcmNvbnBvaW50ZXJdIDw8IDI0KSk7XG4gICAgICAgICAgICByY29ucG9pbnRlciArPSAxO1xuICAgICAgICAgICAgLy8ga2V5IGV4cGFuc2lvbiAoZm9yIG5vbi0yNTYgYml0KVxuICAgICAgICAgICAgaWYgKEtDICE9IDgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IEtDOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGtbaV0gXj0gdGtbaSAtIDFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBrZXkgZXhwYW5zaW9uIGZvciAyNTYtYml0IGtleXMgaXMgXCJzbGlnaHRseSBkaWZmZXJlbnRcIiAoZmlwcy0xOTcpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IChLQyAvIDIpOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGtbaV0gXj0gdGtbaSAtIDFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0dCA9IHRrWyhLQyAvIDIpIC0gMV07XG4gICAgICAgICAgICAgICAgdGtbS0MgLyAyXSBePSAoU1t0dCAmIDB4RkZdIF5cbiAgICAgICAgICAgICAgICAgICAgKFNbKHR0ID4+IDgpICYgMHhGRl0gPDwgOCkgXlxuICAgICAgICAgICAgICAgICAgICAoU1sodHQgPj4gMTYpICYgMHhGRl0gPDwgMTYpIF5cbiAgICAgICAgICAgICAgICAgICAgKFNbKHR0ID4+IDI0KSAmIDB4RkZdIDw8IDI0KSk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IChLQyAvIDIpICsgMTsgaSA8IEtDOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGtbaV0gXj0gdGtbaSAtIDFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNvcHkgdmFsdWVzIGludG8gcm91bmQga2V5IGFycmF5c1xuICAgICAgICAgICAgbGV0IGkgPSAwLCByLCBjO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCBLQyAmJiB0IDwgcm91bmRLZXlDb3VudCkge1xuICAgICAgICAgICAgICAgIHIgPSB0ID4+IDI7XG4gICAgICAgICAgICAgICAgYyA9IHQgJSA0O1xuICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FFU19LZSwgXCJmXCIpW3JdW2NdID0gdGtbaV07XG4gICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQUVTX0tkLCBcImZcIilbcm91bmRzIC0gcl1bY10gPSB0a1tpKytdO1xuICAgICAgICAgICAgICAgIHQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBpbnZlcnNlLWNpcGhlci1pZnkgdGhlIGRlY3J5cHRpb24gcm91bmQga2V5IChmaXBzLTE5NyBzZWN0aW9uIDUuMylcbiAgICAgICAgZm9yIChsZXQgciA9IDE7IHIgPCByb3VuZHM7IHIrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCA0OyBjKyspIHtcbiAgICAgICAgICAgICAgICB0dCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FFU19LZCwgXCJmXCIpW3JdW2NdO1xuICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FFU19LZCwgXCJmXCIpW3JdW2NdID0gKFUxWyh0dCA+PiAyNCkgJiAweEZGXSBeXG4gICAgICAgICAgICAgICAgICAgIFUyWyh0dCA+PiAxNikgJiAweEZGXSBeXG4gICAgICAgICAgICAgICAgICAgIFUzWyh0dCA+PiA4KSAmIDB4RkZdIF5cbiAgICAgICAgICAgICAgICAgICAgVTRbdHQgJiAweEZGXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW5jcnlwdChwbGFpbnRleHQpIHtcbiAgICAgICAgaWYgKHBsYWludGV4dC5sZW5ndGggIT0gMTYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgcGxhaW50ZXh0IHNpemUgKG11c3QgYmUgMTYgYnl0ZXMpJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgcm91bmRzID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQUVTX0tlLCBcImZcIikubGVuZ3RoIC0gMTtcbiAgICAgICAgY29uc3QgYSA9IFswLCAwLCAwLCAwXTtcbiAgICAgICAgLy8gY29udmVydCBwbGFpbnRleHQgdG8gKGludHMgXiBrZXkpXG4gICAgICAgIGxldCB0ID0gY29udmVydFRvSW50MzIocGxhaW50ZXh0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICAgIHRbaV0gXj0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQUVTX0tlLCBcImZcIilbMF1baV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXBwbHkgcm91bmQgdHJhbnNmb3Jtc1xuICAgICAgICBmb3IgKGxldCByID0gMTsgciA8IHJvdW5kczsgcisrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGFbaV0gPSAoVDFbKHRbaV0gPj4gMjQpICYgMHhmZl0gXlxuICAgICAgICAgICAgICAgICAgICBUMlsodFsoaSArIDEpICUgNF0gPj4gMTYpICYgMHhmZl0gXlxuICAgICAgICAgICAgICAgICAgICBUM1sodFsoaSArIDIpICUgNF0gPj4gOCkgJiAweGZmXSBeXG4gICAgICAgICAgICAgICAgICAgIFQ0W3RbKGkgKyAzKSAlIDRdICYgMHhmZl0gXlxuICAgICAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BRVNfS2UsIFwiZlwiKVtyXVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ID0gYS5zbGljZSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoZSBsYXN0IHJvdW5kIGlzIHNwZWNpYWxcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuICAgICAgICBsZXQgdHQgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgdHQgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BRVNfS2UsIFwiZlwiKVtyb3VuZHNdW2ldO1xuICAgICAgICAgICAgcmVzdWx0WzQgKiBpXSA9IChTWyh0W2ldID4+IDI0KSAmIDB4ZmZdIF4gKHR0ID4+IDI0KSkgJiAweGZmO1xuICAgICAgICAgICAgcmVzdWx0WzQgKiBpICsgMV0gPSAoU1sodFsoaSArIDEpICUgNF0gPj4gMTYpICYgMHhmZl0gXiAodHQgPj4gMTYpKSAmIDB4ZmY7XG4gICAgICAgICAgICByZXN1bHRbNCAqIGkgKyAyXSA9IChTWyh0WyhpICsgMikgJSA0XSA+PiA4KSAmIDB4ZmZdIF4gKHR0ID4+IDgpKSAmIDB4ZmY7XG4gICAgICAgICAgICByZXN1bHRbNCAqIGkgKyAzXSA9IChTW3RbKGkgKyAzKSAlIDRdICYgMHhmZl0gXiB0dCkgJiAweGZmO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGRlY3J5cHQoY2lwaGVydGV4dCkge1xuICAgICAgICBpZiAoY2lwaGVydGV4dC5sZW5ndGggIT0gMTYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgY2lwaGVydGV4dCBzaXplIChtdXN0IGJlIDE2IGJ5dGVzKScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJvdW5kcyA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FFU19LZCwgXCJmXCIpLmxlbmd0aCAtIDE7XG4gICAgICAgIGNvbnN0IGEgPSBbMCwgMCwgMCwgMF07XG4gICAgICAgIC8vIGNvbnZlcnQgcGxhaW50ZXh0IHRvIChpbnRzIF4ga2V5KVxuICAgICAgICBsZXQgdCA9IGNvbnZlcnRUb0ludDMyKGNpcGhlcnRleHQpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgdFtpXSBePSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BRVNfS2QsIFwiZlwiKVswXVtpXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBhcHBseSByb3VuZCB0cmFuc2Zvcm1zXG4gICAgICAgIGZvciAobGV0IHIgPSAxOyByIDwgcm91bmRzOyByKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYVtpXSA9IChUNVsodFtpXSA+PiAyNCkgJiAweGZmXSBeXG4gICAgICAgICAgICAgICAgICAgIFQ2Wyh0WyhpICsgMykgJSA0XSA+PiAxNikgJiAweGZmXSBeXG4gICAgICAgICAgICAgICAgICAgIFQ3Wyh0WyhpICsgMikgJSA0XSA+PiA4KSAmIDB4ZmZdIF5cbiAgICAgICAgICAgICAgICAgICAgVDhbdFsoaSArIDEpICUgNF0gJiAweGZmXSBeXG4gICAgICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FFU19LZCwgXCJmXCIpW3JdW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHQgPSBhLnNsaWNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhlIGxhc3Qgcm91bmQgaXMgc3BlY2lhbFxuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhBcnJheSgxNik7XG4gICAgICAgIGxldCB0dCA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgICB0dCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FFU19LZCwgXCJmXCIpW3JvdW5kc11baV07XG4gICAgICAgICAgICByZXN1bHRbNCAqIGldID0gKFNpWyh0W2ldID4+IDI0KSAmIDB4ZmZdIF4gKHR0ID4+IDI0KSkgJiAweGZmO1xuICAgICAgICAgICAgcmVzdWx0WzQgKiBpICsgMV0gPSAoU2lbKHRbKGkgKyAzKSAlIDRdID4+IDE2KSAmIDB4ZmZdIF4gKHR0ID4+IDE2KSkgJiAweGZmO1xuICAgICAgICAgICAgcmVzdWx0WzQgKiBpICsgMl0gPSAoU2lbKHRbKGkgKyAyKSAlIDRdID4+IDgpICYgMHhmZl0gXiAodHQgPj4gOCkpICYgMHhmZjtcbiAgICAgICAgICAgIHJlc3VsdFs0ICogaSArIDNdID0gKFNpW3RbKGkgKyAxKSAlIDRdICYgMHhmZl0gXiB0dCkgJiAweGZmO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuZXhwb3J0cy5BRVMgPSBBRVM7XG5fQUVTX2tleSA9IG5ldyBXZWFrTWFwKCksIF9BRVNfS2QgPSBuZXcgV2Vha01hcCgpLCBfQUVTX0tlID0gbmV3IFdlYWtNYXAoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFlcy5qcy5tYXAiXSwibmFtZXMiOlsiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsInJlY2VpdmVyIiwic3RhdGUiLCJraW5kIiwiZiIsIlR5cGVFcnJvciIsImhhcyIsImNhbGwiLCJ2YWx1ZSIsImdldCIsIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJzZXQiLCJfQUVTX2tleSIsIl9BRVNfS2QiLCJfQUVTX0tlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiQUVTIiwibnVtYmVyT2ZSb3VuZHMiLCJyY29uIiwiUyIsIlNpIiwiVDEiLCJUMiIsIlQzIiwiVDQiLCJUNSIsIlQ2IiwiVDciLCJUOCIsIlUxIiwiVTIiLCJVMyIsIlU0IiwiY29udmVydFRvSW50MzIiLCJieXRlcyIsInJlc3VsdCIsImkiLCJsZW5ndGgiLCJwdXNoIiwia2V5Iiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIkVycm9yIiwiVWludDhBcnJheSIsInJvdW5kcyIsInJvdW5kS2V5Q291bnQiLCJLQyIsInRrIiwiaW5kZXgiLCJyY29ucG9pbnRlciIsInQiLCJ0dCIsInIiLCJjIiwiZW5jcnlwdCIsInBsYWludGV4dCIsImEiLCJkZWNyeXB0IiwiY2lwaGVydGV4dCIsIldlYWtNYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/aes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/ethers/node_modules/aes-js/lib.commonjs/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.pkcs7Strip = exports.pkcs7Pad = exports.OFB = exports.ECB = exports.CTR = exports.CFB = exports.CBC = exports.ModeOfOperation = exports.AES = void 0;\nvar aes_js_1 = __webpack_require__(/*! ./aes.js */ \"(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/aes.js\");\nObject.defineProperty(exports, \"AES\", ({\n    enumerable: true,\n    get: function() {\n        return aes_js_1.AES;\n    }\n}));\nvar mode_js_1 = __webpack_require__(/*! ./mode.js */ \"(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode.js\");\nObject.defineProperty(exports, \"ModeOfOperation\", ({\n    enumerable: true,\n    get: function() {\n        return mode_js_1.ModeOfOperation;\n    }\n}));\nvar mode_cbc_js_1 = __webpack_require__(/*! ./mode-cbc.js */ \"(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-cbc.js\");\nObject.defineProperty(exports, \"CBC\", ({\n    enumerable: true,\n    get: function() {\n        return mode_cbc_js_1.CBC;\n    }\n}));\nvar mode_cfb_js_1 = __webpack_require__(/*! ./mode-cfb.js */ \"(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-cfb.js\");\nObject.defineProperty(exports, \"CFB\", ({\n    enumerable: true,\n    get: function() {\n        return mode_cfb_js_1.CFB;\n    }\n}));\nvar mode_ctr_js_1 = __webpack_require__(/*! ./mode-ctr.js */ \"(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-ctr.js\");\nObject.defineProperty(exports, \"CTR\", ({\n    enumerable: true,\n    get: function() {\n        return mode_ctr_js_1.CTR;\n    }\n}));\nvar mode_ecb_js_1 = __webpack_require__(/*! ./mode-ecb.js */ \"(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-ecb.js\");\nObject.defineProperty(exports, \"ECB\", ({\n    enumerable: true,\n    get: function() {\n        return mode_ecb_js_1.ECB;\n    }\n}));\nvar mode_ofb_js_1 = __webpack_require__(/*! ./mode-ofb.js */ \"(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-ofb.js\");\nObject.defineProperty(exports, \"OFB\", ({\n    enumerable: true,\n    get: function() {\n        return mode_ofb_js_1.OFB;\n    }\n}));\nvar padding_js_1 = __webpack_require__(/*! ./padding.js */ \"(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/padding.js\");\nObject.defineProperty(exports, \"pkcs7Pad\", ({\n    enumerable: true,\n    get: function() {\n        return padding_js_1.pkcs7Pad;\n    }\n}));\nObject.defineProperty(exports, \"pkcs7Strip\", ({\n    enumerable: true,\n    get: function() {\n        return padding_js_1.pkcs7Strip;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL25vZGVfbW9kdWxlcy9hZXMtanMvbGliLmNvbW1vbmpzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBR0EsZ0JBQWdCLEdBQUdBLFdBQVcsR0FBR0EsV0FBVyxHQUFHQSxXQUFXLEdBQUdBLFdBQVcsR0FBR0EsV0FBVyxHQUFHQSx1QkFBdUIsR0FBR0EsV0FBVyxHQUFHLEtBQUs7QUFDM0osSUFBSVcsV0FBV0MsbUJBQU9BLENBQUMscUZBQVU7QUFDakNkLHVDQUFzQztJQUFFZSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSCxTQUFTRCxHQUFHO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdEcsSUFBSUssWUFBWUgsbUJBQU9BLENBQUMsdUZBQVc7QUFDbkNkLG1EQUFrRDtJQUFFZSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxVQUFVTixlQUFlO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDL0gsSUFBSU8sZ0JBQWdCSixtQkFBT0EsQ0FBQywrRkFBZTtBQUMzQ2QsdUNBQXNDO0lBQUVlLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLGNBQWNSLEdBQUc7SUFBRTtBQUFFLENBQUMsRUFBQztBQUMzRyxJQUFJUyxnQkFBZ0JMLG1CQUFPQSxDQUFDLCtGQUFlO0FBQzNDZCx1Q0FBc0M7SUFBRWUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0csY0FBY1YsR0FBRztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzNHLElBQUlXLGdCQUFnQk4sbUJBQU9BLENBQUMsK0ZBQWU7QUFDM0NkLHVDQUFzQztJQUFFZSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSSxjQUFjWixHQUFHO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDM0csSUFBSWEsZ0JBQWdCUCxtQkFBT0EsQ0FBQywrRkFBZTtBQUMzQ2QsdUNBQXNDO0lBQUVlLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9LLGNBQWNkLEdBQUc7SUFBRTtBQUFFLENBQUMsRUFBQztBQUMzRyxJQUFJZSxnQkFBZ0JSLG1CQUFPQSxDQUFDLCtGQUFlO0FBQzNDZCx1Q0FBc0M7SUFBRWUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT00sY0FBY2hCLEdBQUc7SUFBRTtBQUFFLENBQUMsRUFBQztBQUMzRyxJQUFJaUIsZUFBZVQsbUJBQU9BLENBQUMsNkZBQWM7QUFDekNkLDRDQUEyQztJQUFFZSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPTyxhQUFhbEIsUUFBUTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3BITCw4Q0FBNkM7SUFBRWUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT08sYUFBYW5CLFVBQVU7SUFBRTtBQUFFLENBQUMsRUFBQyxFQUN4SCxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL25vZGVfbW9kdWxlcy9hZXMtanMvbGliLmNvbW1vbmpzL2luZGV4LmpzPzE5YzciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBrY3M3U3RyaXAgPSBleHBvcnRzLnBrY3M3UGFkID0gZXhwb3J0cy5PRkIgPSBleHBvcnRzLkVDQiA9IGV4cG9ydHMuQ1RSID0gZXhwb3J0cy5DRkIgPSBleHBvcnRzLkNCQyA9IGV4cG9ydHMuTW9kZU9mT3BlcmF0aW9uID0gZXhwb3J0cy5BRVMgPSB2b2lkIDA7XG52YXIgYWVzX2pzXzEgPSByZXF1aXJlKFwiLi9hZXMuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBRVNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFlc19qc18xLkFFUzsgfSB9KTtcbnZhciBtb2RlX2pzXzEgPSByZXF1aXJlKFwiLi9tb2RlLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTW9kZU9mT3BlcmF0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2RlX2pzXzEuTW9kZU9mT3BlcmF0aW9uOyB9IH0pO1xudmFyIG1vZGVfY2JjX2pzXzEgPSByZXF1aXJlKFwiLi9tb2RlLWNiYy5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNCQ1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kZV9jYmNfanNfMS5DQkM7IH0gfSk7XG52YXIgbW9kZV9jZmJfanNfMSA9IHJlcXVpcmUoXCIuL21vZGUtY2ZiLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ0ZCXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2RlX2NmYl9qc18xLkNGQjsgfSB9KTtcbnZhciBtb2RlX2N0cl9qc18xID0gcmVxdWlyZShcIi4vbW9kZS1jdHIuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDVFJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZGVfY3RyX2pzXzEuQ1RSOyB9IH0pO1xudmFyIG1vZGVfZWNiX2pzXzEgPSByZXF1aXJlKFwiLi9tb2RlLWVjYi5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVDQlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kZV9lY2JfanNfMS5FQ0I7IH0gfSk7XG52YXIgbW9kZV9vZmJfanNfMSA9IHJlcXVpcmUoXCIuL21vZGUtb2ZiLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiT0ZCXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2RlX29mYl9qc18xLk9GQjsgfSB9KTtcbnZhciBwYWRkaW5nX2pzXzEgPSByZXF1aXJlKFwiLi9wYWRkaW5nLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicGtjczdQYWRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBhZGRpbmdfanNfMS5wa2NzN1BhZDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBrY3M3U3RyaXBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBhZGRpbmdfanNfMS5wa2NzN1N0cmlwOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicGtjczdTdHJpcCIsInBrY3M3UGFkIiwiT0ZCIiwiRUNCIiwiQ1RSIiwiQ0ZCIiwiQ0JDIiwiTW9kZU9mT3BlcmF0aW9uIiwiQUVTIiwiYWVzX2pzXzEiLCJyZXF1aXJlIiwiZW51bWVyYWJsZSIsImdldCIsIm1vZGVfanNfMSIsIm1vZGVfY2JjX2pzXzEiLCJtb2RlX2NmYl9qc18xIiwibW9kZV9jdHJfanNfMSIsIm1vZGVfZWNiX2pzXzEiLCJtb2RlX29mYl9qc18xIiwicGFkZGluZ19qc18xIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-cbc.js":
/*!**************************************************************************!*\
  !*** ./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-cbc.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Cipher Block Chaining\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CBC_iv, _CBC_lastBlock;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CBC = void 0;\nconst mode_js_1 = __webpack_require__(/*! ./mode.js */ \"(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode.js\");\nclass CBC extends mode_js_1.ModeOfOperation {\n    constructor(key, iv){\n        super(\"ECC\", key, CBC);\n        _CBC_iv.set(this, void 0);\n        _CBC_lastBlock.set(this, void 0);\n        if (iv) {\n            if (iv.length % 16) {\n                throw new TypeError(\"invalid iv size (must be 16 bytes)\");\n            }\n            __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(iv), \"f\");\n        } else {\n            __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(16), \"f\");\n        }\n        __classPrivateFieldSet(this, _CBC_lastBlock, this.iv, \"f\");\n    }\n    get iv() {\n        return new Uint8Array(__classPrivateFieldGet(this, _CBC_iv, \"f\"));\n    }\n    encrypt(plaintext) {\n        if (plaintext.length % 16) {\n            throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\n        }\n        const ciphertext = new Uint8Array(plaintext.length);\n        for(let i = 0; i < plaintext.length; i += 16){\n            for(let j = 0; j < 16; j++){\n                __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j] ^= plaintext[i + j];\n            }\n            __classPrivateFieldSet(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet(this, _CBC_lastBlock, \"f\")), \"f\");\n            ciphertext.set(__classPrivateFieldGet(this, _CBC_lastBlock, \"f\"), i);\n        }\n        return ciphertext;\n    }\n    decrypt(ciphertext) {\n        if (ciphertext.length % 16) {\n            throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n        }\n        const plaintext = new Uint8Array(ciphertext.length);\n        for(let i = 0; i < ciphertext.length; i += 16){\n            const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));\n            for(let j = 0; j < 16; j++){\n                plaintext[i + j] = block[j] ^ __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j];\n                __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j] = ciphertext[i + j];\n            }\n        }\n        return plaintext;\n    }\n}\nexports.CBC = CBC;\n_CBC_iv = new WeakMap(), _CBC_lastBlock = new WeakMap(); //# sourceMappingURL=mode-cbc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-cbc.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-cfb.js":
/*!**************************************************************************!*\
  !*** ./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-cfb.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Cipher Feedback\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CFB_instances, _CFB_iv, _CFB_shiftRegister, _CFB_shift;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CFB = void 0;\nconst mode_js_1 = __webpack_require__(/*! ./mode.js */ \"(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode.js\");\nclass CFB extends mode_js_1.ModeOfOperation {\n    constructor(key, iv, segmentSize = 8){\n        super(\"CFB\", key, CFB);\n        _CFB_instances.add(this);\n        _CFB_iv.set(this, void 0);\n        _CFB_shiftRegister.set(this, void 0);\n        // This library currently only handles byte-aligned segmentSize\n        if (!Number.isInteger(segmentSize) || segmentSize % 8) {\n            throw new TypeError(\"invalid segmentSize\");\n        }\n        Object.defineProperties(this, {\n            segmentSize: {\n                enumerable: true,\n                value: segmentSize\n            }\n        });\n        if (iv) {\n            if (iv.length % 16) {\n                throw new TypeError(\"invalid iv size (must be 16 bytes)\");\n            }\n            __classPrivateFieldSet(this, _CFB_iv, new Uint8Array(iv), \"f\");\n        } else {\n            __classPrivateFieldSet(this, _CFB_iv, new Uint8Array(16), \"f\");\n        }\n        __classPrivateFieldSet(this, _CFB_shiftRegister, this.iv, \"f\");\n    }\n    get iv() {\n        return new Uint8Array(__classPrivateFieldGet(this, _CFB_iv, \"f\"));\n    }\n    encrypt(plaintext) {\n        if (8 * plaintext.length % this.segmentSize) {\n            throw new TypeError(\"invalid plaintext size (must be multiple of segmentSize bytes)\");\n        }\n        const segmentSize = this.segmentSize / 8;\n        const ciphertext = new Uint8Array(plaintext);\n        for(let i = 0; i < ciphertext.length; i += segmentSize){\n            const xorSegment = this.aes.encrypt(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\"));\n            for(let j = 0; j < segmentSize; j++){\n                ciphertext[i + j] ^= xorSegment[j];\n            }\n            __classPrivateFieldGet(this, _CFB_instances, \"m\", _CFB_shift).call(this, ciphertext.subarray(i));\n        }\n        return ciphertext;\n    }\n    decrypt(ciphertext) {\n        if (8 * ciphertext.length % this.segmentSize) {\n            throw new TypeError(\"invalid ciphertext size (must be multiple of segmentSize bytes)\");\n        }\n        const segmentSize = this.segmentSize / 8;\n        const plaintext = new Uint8Array(ciphertext);\n        for(let i = 0; i < plaintext.length; i += segmentSize){\n            const xorSegment = this.aes.encrypt(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\"));\n            for(let j = 0; j < segmentSize; j++){\n                plaintext[i + j] ^= xorSegment[j];\n            }\n            __classPrivateFieldGet(this, _CFB_instances, \"m\", _CFB_shift).call(this, ciphertext.subarray(i));\n        }\n        return plaintext;\n    }\n}\nexports.CFB = CFB;\n_CFB_iv = new WeakMap(), _CFB_shiftRegister = new WeakMap(), _CFB_instances = new WeakSet(), _CFB_shift = function _CFB_shift(data) {\n    const segmentSize = this.segmentSize / 8;\n    // Shift the register\n    __classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").set(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").subarray(segmentSize));\n    __classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").set(data.subarray(0, segmentSize), 16 - segmentSize);\n}; //# sourceMappingURL=mode-cfb.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-cfb.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-ctr.js":
/*!**************************************************************************!*\
  !*** ./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-ctr.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Counter Mode\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CTR_remaining, _CTR_remainingIndex, _CTR_counter;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CTR = void 0;\nconst mode_js_1 = __webpack_require__(/*! ./mode.js */ \"(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode.js\");\nclass CTR extends mode_js_1.ModeOfOperation {\n    constructor(key, initialValue){\n        super(\"CTR\", key, CTR);\n        // Remaining bytes for the one-time pad\n        _CTR_remaining.set(this, void 0);\n        _CTR_remainingIndex.set(this, void 0);\n        // The current counter\n        _CTR_counter.set(this, void 0);\n        __classPrivateFieldSet(this, _CTR_counter, new Uint8Array(16), \"f\");\n        __classPrivateFieldGet(this, _CTR_counter, \"f\").fill(0);\n        __classPrivateFieldSet(this, _CTR_remaining, __classPrivateFieldGet(this, _CTR_counter, \"f\"), \"f\"); // This will be discarded immediately\n        __classPrivateFieldSet(this, _CTR_remainingIndex, 16, \"f\");\n        if (initialValue == null) {\n            initialValue = 1;\n        }\n        if (typeof initialValue === \"number\") {\n            this.setCounterValue(initialValue);\n        } else {\n            this.setCounterBytes(initialValue);\n        }\n    }\n    get counter() {\n        return new Uint8Array(__classPrivateFieldGet(this, _CTR_counter, \"f\"));\n    }\n    setCounterValue(value) {\n        if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\n            throw new TypeError(\"invalid counter initial integer value\");\n        }\n        for(let index = 15; index >= 0; --index){\n            __classPrivateFieldGet(this, _CTR_counter, \"f\")[index] = value % 256;\n            value = Math.floor(value / 256);\n        }\n    }\n    setCounterBytes(value) {\n        if (value.length !== 16) {\n            throw new TypeError(\"invalid counter initial Uint8Array value length\");\n        }\n        __classPrivateFieldGet(this, _CTR_counter, \"f\").set(value);\n    }\n    increment() {\n        for(let i = 15; i >= 0; i--){\n            if (__classPrivateFieldGet(this, _CTR_counter, \"f\")[i] === 255) {\n                __classPrivateFieldGet(this, _CTR_counter, \"f\")[i] = 0;\n            } else {\n                __classPrivateFieldGet(this, _CTR_counter, \"f\")[i]++;\n                break;\n            }\n        }\n    }\n    encrypt(plaintext) {\n        var _a, _b;\n        const crypttext = new Uint8Array(plaintext);\n        for(let i = 0; i < crypttext.length; i++){\n            if (__classPrivateFieldGet(this, _CTR_remainingIndex, \"f\") === 16) {\n                __classPrivateFieldSet(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet(this, _CTR_counter, \"f\")), \"f\");\n                __classPrivateFieldSet(this, _CTR_remainingIndex, 0, \"f\");\n                this.increment();\n            }\n            crypttext[i] ^= __classPrivateFieldGet(this, _CTR_remaining, \"f\")[__classPrivateFieldSet(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet(this, _CTR_remainingIndex, \"f\"), _a = _b++, _b), \"f\"), _a];\n        }\n        return crypttext;\n    }\n    decrypt(ciphertext) {\n        return this.encrypt(ciphertext);\n    }\n}\nexports.CTR = CTR;\n_CTR_remaining = new WeakMap(), _CTR_remainingIndex = new WeakMap(), _CTR_counter = new WeakMap(); //# sourceMappingURL=mode-ctr.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-ctr.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-ecb.js":
/*!**************************************************************************!*\
  !*** ./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-ecb.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Electronic Code Book\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ECB = void 0;\nconst mode_js_1 = __webpack_require__(/*! ./mode.js */ \"(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode.js\");\nclass ECB extends mode_js_1.ModeOfOperation {\n    constructor(key){\n        super(\"ECB\", key, ECB);\n    }\n    encrypt(plaintext) {\n        if (plaintext.length % 16) {\n            throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\n        }\n        const crypttext = new Uint8Array(plaintext.length);\n        for(let i = 0; i < plaintext.length; i += 16){\n            crypttext.set(this.aes.encrypt(plaintext.subarray(i, i + 16)), i);\n        }\n        return crypttext;\n    }\n    decrypt(crypttext) {\n        if (crypttext.length % 16) {\n            throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n        }\n        const plaintext = new Uint8Array(crypttext.length);\n        for(let i = 0; i < crypttext.length; i += 16){\n            plaintext.set(this.aes.decrypt(crypttext.subarray(i, i + 16)), i);\n        }\n        return plaintext;\n    }\n}\nexports.ECB = ECB; //# sourceMappingURL=mode-ecb.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL25vZGVfbW9kdWxlcy9hZXMtanMvbGliLmNvbW1vbmpzL21vZGUtZWNiLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsdUJBQXVCO0FBQ3ZCQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsV0FBVyxHQUFHLEtBQUs7QUFDbkIsTUFBTUcsWUFBWUMsbUJBQU9BLENBQUMsdUZBQVc7QUFDckMsTUFBTUYsWUFBWUMsVUFBVUUsZUFBZTtJQUN2Q0MsWUFBWUMsR0FBRyxDQUFFO1FBQ2IsS0FBSyxDQUFDLE9BQU9BLEtBQUtMO0lBQ3RCO0lBQ0FNLFFBQVFDLFNBQVMsRUFBRTtRQUNmLElBQUlBLFVBQVVDLE1BQU0sR0FBRyxJQUFJO1lBQ3ZCLE1BQU0sSUFBSUMsVUFBVTtRQUN4QjtRQUNBLE1BQU1DLFlBQVksSUFBSUMsV0FBV0osVUFBVUMsTUFBTTtRQUNqRCxJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSUwsVUFBVUMsTUFBTSxFQUFFSSxLQUFLLEdBQUk7WUFDM0NGLFVBQVVHLEdBQUcsQ0FBQyxJQUFJLENBQUNDLEdBQUcsQ0FBQ1IsT0FBTyxDQUFDQyxVQUFVUSxRQUFRLENBQUNILEdBQUdBLElBQUksTUFBTUE7UUFDbkU7UUFDQSxPQUFPRjtJQUNYO0lBQ0FNLFFBQVFOLFNBQVMsRUFBRTtRQUNmLElBQUlBLFVBQVVGLE1BQU0sR0FBRyxJQUFJO1lBQ3ZCLE1BQU0sSUFBSUMsVUFBVTtRQUN4QjtRQUNBLE1BQU1GLFlBQVksSUFBSUksV0FBV0QsVUFBVUYsTUFBTTtRQUNqRCxJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSUYsVUFBVUYsTUFBTSxFQUFFSSxLQUFLLEdBQUk7WUFDM0NMLFVBQVVNLEdBQUcsQ0FBQyxJQUFJLENBQUNDLEdBQUcsQ0FBQ0UsT0FBTyxDQUFDTixVQUFVSyxRQUFRLENBQUNILEdBQUdBLElBQUksTUFBTUE7UUFDbkU7UUFDQSxPQUFPTDtJQUNYO0FBQ0o7QUFDQVQsV0FBVyxHQUFHRSxLQUNkLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbm9kZV9tb2R1bGVzL2Flcy1qcy9saWIuY29tbW9uanMvbW9kZS1lY2IuanM/MGI4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIEVsZWN0cm9uaWMgQ29kZSBCb29rXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVDQiA9IHZvaWQgMDtcbmNvbnN0IG1vZGVfanNfMSA9IHJlcXVpcmUoXCIuL21vZGUuanNcIik7XG5jbGFzcyBFQ0IgZXh0ZW5kcyBtb2RlX2pzXzEuTW9kZU9mT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihrZXkpIHtcbiAgICAgICAgc3VwZXIoXCJFQ0JcIiwga2V5LCBFQ0IpO1xuICAgIH1cbiAgICBlbmNyeXB0KHBsYWludGV4dCkge1xuICAgICAgICBpZiAocGxhaW50ZXh0Lmxlbmd0aCAlIDE2KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiaW52YWxpZCBwbGFpbnRleHQgc2l6ZSAobXVzdCBiZSBtdWx0aXBsZSBvZiAxNiBieXRlcylcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3J5cHR0ZXh0ID0gbmV3IFVpbnQ4QXJyYXkocGxhaW50ZXh0Lmxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGxhaW50ZXh0Lmxlbmd0aDsgaSArPSAxNikge1xuICAgICAgICAgICAgY3J5cHR0ZXh0LnNldCh0aGlzLmFlcy5lbmNyeXB0KHBsYWludGV4dC5zdWJhcnJheShpLCBpICsgMTYpKSwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNyeXB0dGV4dDtcbiAgICB9XG4gICAgZGVjcnlwdChjcnlwdHRleHQpIHtcbiAgICAgICAgaWYgKGNyeXB0dGV4dC5sZW5ndGggJSAxNikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImludmFsaWQgY2lwaGVydGV4dCBzaXplIChtdXN0IGJlIG11bHRpcGxlIG9mIDE2IGJ5dGVzKVwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwbGFpbnRleHQgPSBuZXcgVWludDhBcnJheShjcnlwdHRleHQubGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjcnlwdHRleHQubGVuZ3RoOyBpICs9IDE2KSB7XG4gICAgICAgICAgICBwbGFpbnRleHQuc2V0KHRoaXMuYWVzLmRlY3J5cHQoY3J5cHR0ZXh0LnN1YmFycmF5KGksIGkgKyAxNikpLCBpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGxhaW50ZXh0O1xuICAgIH1cbn1cbmV4cG9ydHMuRUNCID0gRUNCO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kZS1lY2IuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRUNCIiwibW9kZV9qc18xIiwicmVxdWlyZSIsIk1vZGVPZk9wZXJhdGlvbiIsImNvbnN0cnVjdG9yIiwia2V5IiwiZW5jcnlwdCIsInBsYWludGV4dCIsImxlbmd0aCIsIlR5cGVFcnJvciIsImNyeXB0dGV4dCIsIlVpbnQ4QXJyYXkiLCJpIiwic2V0IiwiYWVzIiwic3ViYXJyYXkiLCJkZWNyeXB0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-ecb.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-ofb.js":
/*!**************************************************************************!*\
  !*** ./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-ofb.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Output Feedback\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _OFB_iv, _OFB_lastPrecipher, _OFB_lastPrecipherIndex;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OFB = void 0;\nconst mode_js_1 = __webpack_require__(/*! ./mode.js */ \"(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode.js\");\nclass OFB extends mode_js_1.ModeOfOperation {\n    constructor(key, iv){\n        super(\"OFB\", key, OFB);\n        _OFB_iv.set(this, void 0);\n        _OFB_lastPrecipher.set(this, void 0);\n        _OFB_lastPrecipherIndex.set(this, void 0);\n        if (iv) {\n            if (iv.length % 16) {\n                throw new TypeError(\"invalid iv size (must be 16 bytes)\");\n            }\n            __classPrivateFieldSet(this, _OFB_iv, new Uint8Array(iv), \"f\");\n        } else {\n            __classPrivateFieldSet(this, _OFB_iv, new Uint8Array(16), \"f\");\n        }\n        __classPrivateFieldSet(this, _OFB_lastPrecipher, this.iv, \"f\");\n        __classPrivateFieldSet(this, _OFB_lastPrecipherIndex, 16, \"f\");\n    }\n    get iv() {\n        return new Uint8Array(__classPrivateFieldGet(this, _OFB_iv, \"f\"));\n    }\n    encrypt(plaintext) {\n        var _a, _b;\n        if (plaintext.length % 16) {\n            throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\n        }\n        const ciphertext = new Uint8Array(plaintext);\n        for(let i = 0; i < ciphertext.length; i++){\n            if (__classPrivateFieldGet(this, _OFB_lastPrecipherIndex, \"f\") === 16) {\n                __classPrivateFieldSet(this, _OFB_lastPrecipher, this.aes.encrypt(__classPrivateFieldGet(this, _OFB_lastPrecipher, \"f\")), \"f\");\n                __classPrivateFieldSet(this, _OFB_lastPrecipherIndex, 0, \"f\");\n            }\n            ciphertext[i] ^= __classPrivateFieldGet(this, _OFB_lastPrecipher, \"f\")[__classPrivateFieldSet(this, _OFB_lastPrecipherIndex, (_b = __classPrivateFieldGet(this, _OFB_lastPrecipherIndex, \"f\"), _a = _b++, _b), \"f\"), _a];\n        }\n        return ciphertext;\n    }\n    decrypt(ciphertext) {\n        if (ciphertext.length % 16) {\n            throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n        }\n        return this.encrypt(ciphertext);\n    }\n}\nexports.OFB = OFB;\n_OFB_iv = new WeakMap(), _OFB_lastPrecipher = new WeakMap(), _OFB_lastPrecipherIndex = new WeakMap(); //# sourceMappingURL=mode-ofb.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-ofb.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode.js":
/*!**********************************************************************!*\
  !*** ./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ModeOfOperation = void 0;\nconst aes_js_1 = __webpack_require__(/*! ./aes.js */ \"(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/aes.js\");\nclass ModeOfOperation {\n    constructor(name, key, cls){\n        if (cls && !(this instanceof cls)) {\n            throw new Error(`${name} must be instantiated with \"new\"`);\n        }\n        Object.defineProperties(this, {\n            aes: {\n                enumerable: true,\n                value: new aes_js_1.AES(key)\n            },\n            name: {\n                enumerable: true,\n                value: name\n            }\n        });\n    }\n}\nexports.ModeOfOperation = ModeOfOperation; //# sourceMappingURL=mode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL25vZGVfbW9kdWxlcy9hZXMtanMvbGliLmNvbW1vbmpzL21vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHLEtBQUs7QUFDL0IsTUFBTUcsV0FBV0MsbUJBQU9BLENBQUMscUZBQVU7QUFDbkMsTUFBTUY7SUFDRkcsWUFBWUMsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsQ0FBRTtRQUN4QixJQUFJQSxPQUFPLENBQUUsS0FBSSxZQUFZQSxHQUFFLEdBQUk7WUFDL0IsTUFBTSxJQUFJQyxNQUFNLENBQUMsRUFBRUgsS0FBSyxnQ0FBZ0MsQ0FBQztRQUM3RDtRQUNBUixPQUFPWSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUU7WUFDMUJDLEtBQUs7Z0JBQUVDLFlBQVk7Z0JBQU1YLE9BQU8sSUFBSUUsU0FBU1UsR0FBRyxDQUFDTjtZQUFLO1lBQ3RERCxNQUFNO2dCQUFFTSxZQUFZO2dCQUFNWCxPQUFPSztZQUFLO1FBQzFDO0lBQ0o7QUFDSjtBQUNBTix1QkFBdUIsR0FBR0UsaUJBQzFCLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbm9kZV9tb2R1bGVzL2Flcy1qcy9saWIuY29tbW9uanMvbW9kZS5qcz8yYjEwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb2RlT2ZPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBhZXNfanNfMSA9IHJlcXVpcmUoXCIuL2Flcy5qc1wiKTtcbmNsYXNzIE1vZGVPZk9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IobmFtZSwga2V5LCBjbHMpIHtcbiAgICAgICAgaWYgKGNscyAmJiAhKHRoaXMgaW5zdGFuY2VvZiBjbHMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bmFtZX0gbXVzdCBiZSBpbnN0YW50aWF0ZWQgd2l0aCBcIm5ld1wiYCk7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICAgICAgYWVzOiB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiBuZXcgYWVzX2pzXzEuQUVTKGtleSkgfSxcbiAgICAgICAgICAgIG5hbWU6IHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IG5hbWUgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLk1vZGVPZk9wZXJhdGlvbiA9IE1vZGVPZk9wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTW9kZU9mT3BlcmF0aW9uIiwiYWVzX2pzXzEiLCJyZXF1aXJlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwia2V5IiwiY2xzIiwiRXJyb3IiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiYWVzIiwiZW51bWVyYWJsZSIsIkFFUyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/mode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/padding.js":
/*!*************************************************************************!*\
  !*** ./node_modules/ethers/node_modules/aes-js/lib.commonjs/padding.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.pkcs7Strip = exports.pkcs7Pad = void 0;\nfunction pkcs7Pad(data) {\n    const padder = 16 - data.length % 16;\n    const result = new Uint8Array(data.length + padder);\n    result.set(data);\n    for(let i = data.length; i < result.length; i++){\n        result[i] = padder;\n    }\n    return result;\n}\nexports.pkcs7Pad = pkcs7Pad;\nfunction pkcs7Strip(data) {\n    if (data.length < 16) {\n        throw new TypeError(\"PKCS#7 invalid length\");\n    }\n    const padder = data[data.length - 1];\n    if (padder > 16) {\n        throw new TypeError(\"PKCS#7 padding byte out of range\");\n    }\n    const length = data.length - padder;\n    for(let i = 0; i < padder; i++){\n        if (data[length + i] !== padder) {\n            throw new TypeError(\"PKCS#7 invalid padding byte\");\n        }\n    }\n    return new Uint8Array(data.subarray(0, length));\n}\nexports.pkcs7Strip = pkcs7Strip; //# sourceMappingURL=padding.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXRoZXJzL25vZGVfbW9kdWxlcy9hZXMtanMvbGliLmNvbW1vbmpzL3BhZGRpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtCQUFrQixHQUFHQSxnQkFBZ0IsR0FBRyxLQUFLO0FBQzdDLFNBQVNHLFNBQVNDLElBQUk7SUFDbEIsTUFBTUMsU0FBUyxLQUFNRCxLQUFLRSxNQUFNLEdBQUc7SUFDbkMsTUFBTUMsU0FBUyxJQUFJQyxXQUFXSixLQUFLRSxNQUFNLEdBQUdEO0lBQzVDRSxPQUFPRSxHQUFHLENBQUNMO0lBQ1gsSUFBSyxJQUFJTSxJQUFJTixLQUFLRSxNQUFNLEVBQUVJLElBQUlILE9BQU9ELE1BQU0sRUFBRUksSUFBSztRQUM5Q0gsTUFBTSxDQUFDRyxFQUFFLEdBQUdMO0lBQ2hCO0lBQ0EsT0FBT0U7QUFDWDtBQUNBUCxnQkFBZ0IsR0FBR0c7QUFDbkIsU0FBU0QsV0FBV0UsSUFBSTtJQUNwQixJQUFJQSxLQUFLRSxNQUFNLEdBQUcsSUFBSTtRQUNsQixNQUFNLElBQUlLLFVBQVU7SUFDeEI7SUFDQSxNQUFNTixTQUFTRCxJQUFJLENBQUNBLEtBQUtFLE1BQU0sR0FBRyxFQUFFO0lBQ3BDLElBQUlELFNBQVMsSUFBSTtRQUNiLE1BQU0sSUFBSU0sVUFBVTtJQUN4QjtJQUNBLE1BQU1MLFNBQVNGLEtBQUtFLE1BQU0sR0FBR0Q7SUFDN0IsSUFBSyxJQUFJSyxJQUFJLEdBQUdBLElBQUlMLFFBQVFLLElBQUs7UUFDN0IsSUFBSU4sSUFBSSxDQUFDRSxTQUFTSSxFQUFFLEtBQUtMLFFBQVE7WUFDN0IsTUFBTSxJQUFJTSxVQUFVO1FBQ3hCO0lBQ0o7SUFDQSxPQUFPLElBQUlILFdBQVdKLEtBQUtRLFFBQVEsQ0FBQyxHQUFHTjtBQUMzQztBQUNBTixrQkFBa0IsR0FBR0UsWUFDckIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9ub2RlX21vZHVsZXMvYWVzLWpzL2xpYi5jb21tb25qcy9wYWRkaW5nLmpzP2Y1ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBrY3M3U3RyaXAgPSBleHBvcnRzLnBrY3M3UGFkID0gdm9pZCAwO1xuZnVuY3Rpb24gcGtjczdQYWQoZGF0YSkge1xuICAgIGNvbnN0IHBhZGRlciA9IDE2IC0gKGRhdGEubGVuZ3RoICUgMTYpO1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoICsgcGFkZGVyKTtcbiAgICByZXN1bHQuc2V0KGRhdGEpO1xuICAgIGZvciAobGV0IGkgPSBkYXRhLmxlbmd0aDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHRbaV0gPSBwYWRkZXI7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLnBrY3M3UGFkID0gcGtjczdQYWQ7XG5mdW5jdGlvbiBwa2NzN1N0cmlwKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5sZW5ndGggPCAxNikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQS0NTIzcgaW52YWxpZCBsZW5ndGgnKTtcbiAgICB9XG4gICAgY29uc3QgcGFkZGVyID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdO1xuICAgIGlmIChwYWRkZXIgPiAxNikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQS0NTIzcgcGFkZGluZyBieXRlIG91dCBvZiByYW5nZScpO1xuICAgIH1cbiAgICBjb25zdCBsZW5ndGggPSBkYXRhLmxlbmd0aCAtIHBhZGRlcjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZGRlcjsgaSsrKSB7XG4gICAgICAgIGlmIChkYXRhW2xlbmd0aCArIGldICE9PSBwYWRkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BLQ1MjNyBpbnZhbGlkIHBhZGRpbmcgYnl0ZScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShkYXRhLnN1YmFycmF5KDAsIGxlbmd0aCkpO1xufVxuZXhwb3J0cy5wa2NzN1N0cmlwID0gcGtjczdTdHJpcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZGRpbmcuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicGtjczdTdHJpcCIsInBrY3M3UGFkIiwiZGF0YSIsInBhZGRlciIsImxlbmd0aCIsInJlc3VsdCIsIlVpbnQ4QXJyYXkiLCJzZXQiLCJpIiwiVHlwZUVycm9yIiwic3ViYXJyYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ethers/node_modules/aes-js/lib.commonjs/padding.js\n");

/***/ })

};
;