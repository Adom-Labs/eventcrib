/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/apg-js";
exports.ids = ["vendor-chunks/apg-js"];
exports.modules = {

/***/ "(rsc)/./node_modules/apg-js/src/apg-api/api.js":
/*!************************************************!*\
  !*** ./node_modules/apg-js/src/apg-api/api.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module is Application Programming Interface (API) for **APG** - the ABNF Parser Generator.\n//\n// *Note on teminology.*\n// APG is a parser generator.\n// However, it really only generates a \"grammar object\" (see below) from the defining SABNF grammar.\n// The generated parser is incomplete at this stage.\n// Remaining, it is the job of the user to develop the generated parser from the grammar object and the **APG** Library (**apg-lib**).\n//\n// The following terminology my help clear up any confusion between the idea of a \"generated parser\" versus a \"generated grammar object\".\n// - The generating parser: **APG** is an **APG** parser (yes, there is a circular dependence between **apg-api** and **apg-lib**). We'll call it the generating parser.\n// - The target parser: **APG**'s goal is to generate a parser. We'll call it the target parser.\n// - The target grammar: this is the (ASCII) SABNF grammar defining the target parser.\n// - The target grammar object: **APG** parses the SABNF grammar and generates the JavaScript source for a target grammar object constructor function\n// and/or an actual grammar object.\n// - The final target parser: The user then develops the final target parser using the generated target grammar\n// object and the **APG** parsing library, **apg-lib**.\n// Throws execeptions on fatal errors.\n//\n// src: the input SABNF grammar<br>\n// may be one of:\n// - Buffer of bytes\n// - JavaScript string\n// - Array of integer character codes\n\nmodule.exports = function api(src) {\n    const { Buffer } = __webpack_require__(/*! buffer */ \"buffer\");\n    const thisFileName = \"api.js: \";\n    const thisObject = this;\n    /* PRIVATE PROPERTIES */ const apglib = __webpack_require__(/*! ../apg-lib/node-exports */ \"(rsc)/./node_modules/apg-js/src/apg-lib/node-exports.js\");\n    const converter = __webpack_require__(/*! ../apg-conv-api/converter */ \"(rsc)/./node_modules/apg-js/src/apg-conv-api/converter.js\");\n    const scanner = __webpack_require__(/*! ./scanner */ \"(rsc)/./node_modules/apg-js/src/apg-api/scanner.js\");\n    const parser = new (__webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/apg-js/src/apg-api/parser.js\"))();\n    const { attributes, showAttributes, showAttributeErrors, showRuleDependencies } = __webpack_require__(/*! ./attributes */ \"(rsc)/./node_modules/apg-js/src/apg-api/attributes.js\");\n    const showRules = __webpack_require__(/*! ./show-rules */ \"(rsc)/./node_modules/apg-js/src/apg-api/show-rules.js\");\n    /* PRIVATE MEMBERS (FUNCTIONS) */ /* Convert a phrase (array of character codes) to HTML. */ const abnfToHtml = function abnfToHtml(chars, beg, len) {\n        const NORMAL = 0;\n        const CONTROL = 1;\n        const INVALID = 2;\n        const CONTROL_BEG = `<span class=\"${apglib.style.CLASS_CTRLCHAR}\">`;\n        const CONTROL_END = \"</span>\";\n        const INVALID_BEG = `<span class=\"${apglib.style.CLASS_NOMATCH}\">`;\n        const INVALID_END = \"</span>\";\n        let end;\n        let html = \"\";\n        const TRUE = true;\n        while(TRUE){\n            if (!Array.isArray(chars) || chars.length === 0) {\n                break;\n            }\n            if (typeof beg !== \"number\") {\n                throw new Error(\"abnfToHtml: beg must be type number\");\n            }\n            if (beg >= chars.length) {\n                break;\n            }\n            if (typeof len !== \"number\" || beg + len >= chars.length) {\n                end = chars.length;\n            } else {\n                end = beg + len;\n            }\n            let state = NORMAL;\n            for(let i = beg; i < end; i += 1){\n                const ch = chars[i];\n                if (ch >= 32 && ch <= 126) {\n                    /* normal - printable ASCII characters */ if (state === CONTROL) {\n                        html += CONTROL_END;\n                        state = NORMAL;\n                    } else if (state === INVALID) {\n                        html += INVALID_END;\n                        state = NORMAL;\n                    }\n                    /* handle reserved HTML entity characters */ switch(ch){\n                        case 32:\n                            html += \"&nbsp;\";\n                            break;\n                        case 60:\n                            html += \"&lt;\";\n                            break;\n                        case 62:\n                            html += \"&gt;\";\n                            break;\n                        case 38:\n                            html += \"&amp;\";\n                            break;\n                        case 34:\n                            html += \"&quot;\";\n                            break;\n                        case 39:\n                            html += \"&#039;\";\n                            break;\n                        case 92:\n                            html += \"&#092;\";\n                            break;\n                        default:\n                            html += String.fromCharCode(ch);\n                            break;\n                    }\n                } else if (ch === 9 || ch === 10 || ch === 13) {\n                    /* control characters */ if (state === NORMAL) {\n                        html += CONTROL_BEG;\n                        state = CONTROL;\n                    } else if (state === INVALID) {\n                        html += INVALID_END + CONTROL_BEG;\n                        state = CONTROL;\n                    }\n                    if (ch === 9) {\n                        html += \"TAB\";\n                    }\n                    if (ch === 10) {\n                        html += \"LF\";\n                    }\n                    if (ch === 13) {\n                        html += \"CR\";\n                    }\n                } else {\n                    /* invalid characters */ if (state === NORMAL) {\n                        html += INVALID_BEG;\n                        state = INVALID;\n                    } else if (state === CONTROL) {\n                        html += CONTROL_END + INVALID_BEG;\n                        state = INVALID;\n                    }\n                    /* display character as hexadecimal value */ html += `\\\\x${apglib.utils.charToHex(ch)}`;\n                }\n            }\n            if (state === INVALID) {\n                html += INVALID_END;\n            }\n            if (state === CONTROL) {\n                html += CONTROL_END;\n            }\n            break;\n        }\n        return html;\n    };\n    /* Convert a phrase (array of character codes) to ASCII text. */ const abnfToAscii = function abnfToAscii(chars, beg, len) {\n        let str = \"\";\n        for(let i = beg; i < beg + len; i += 1){\n            const ch = chars[i];\n            if (ch >= 32 && ch <= 126) {\n                str += String.fromCharCode(ch);\n            } else {\n                switch(ch){\n                    case 9:\n                        str += \"\\\\t\";\n                        break;\n                    case 10:\n                        str += \"\\\\n\";\n                        break;\n                    case 13:\n                        str += \"\\\\r\";\n                        break;\n                    default:\n                        str += \"\\\\unknown\";\n                        break;\n                }\n            }\n        }\n        return str;\n    };\n    /* translate lines (SABNF grammar) to ASCII text */ const linesToAscii = function linesToAscii(lines) {\n        let str = \"Annotated Input Grammar\";\n        lines.forEach((val)=>{\n            str += \"\\n\";\n            str += `line no: ${val.lineNo}`;\n            str += ` : char index: ${val.beginChar}`;\n            str += ` : length: ${val.length}`;\n            str += ` : abnf: ${abnfToAscii(thisObject.chars, val.beginChar, val.length)}`;\n        });\n        str += \"\\n\";\n        return str;\n    };\n    /* translate lines (SABNF grammar) to HTML */ const linesToHtml = function linesToHtml(lines) {\n        let html = \"\";\n        html += `<table class=\"${apglib.style.CLASS_GRAMMAR}\">\\n`;\n        const title = \"Annotated Input Grammar\";\n        html += `<caption>${title}</caption>\\n`;\n        html += \"<tr>\";\n        html += \"<th>line<br>no.</th><th>first<br>char</th><th><br>length</th><th><br>text</th>\";\n        html += \"</tr>\\n\";\n        lines.forEach((val)=>{\n            html += \"<tr>\";\n            html += `<td>${val.lineNo}`;\n            html += `</td><td>${val.beginChar}`;\n            html += `</td><td>${val.length}`;\n            html += `</td><td>${abnfToHtml(thisObject.chars, val.beginChar, val.length)}`;\n            html += \"</td>\";\n            html += \"</tr>\\n\";\n        });\n        html += \"</table>\\n\";\n        return html;\n    };\n    /* Format the error messages to HTML, for page display. */ const errorsToHtml = function errorsToHtml(errors, lines, chars, title) {\n        const [style] = apglib;\n        let html = \"\";\n        const errorArrow = `<span class=\"${style.CLASS_NOMATCH}\">&raquo;</span>`;\n        html += `<p><table class=\"${style.CLASS_GRAMMAR}\">\\n`;\n        if (title && typeof title === \"string\") {\n            html += `<caption>${title}</caption>\\n`;\n        }\n        html += \"<tr><th>line<br>no.</th><th>line<br>offset</th><th>error<br>offset</th><th><br>text</th></tr>\\n\";\n        errors.forEach((val)=>{\n            let line;\n            let relchar;\n            let beg;\n            let end;\n            let text;\n            let prefix = \"\";\n            let suffix = \"\";\n            if (lines.length === 0) {\n                text = errorArrow;\n                relchar = 0;\n            } else {\n                line = lines[val.line];\n                beg = line.beginChar;\n                if (val.char > beg) {\n                    prefix = abnfToHtml(chars, beg, val.char - beg);\n                }\n                beg = val.char;\n                end = line.beginChar + line.length;\n                if (beg < end) {\n                    suffix = abnfToHtml(chars, beg, end - beg);\n                }\n                text = prefix + errorArrow + suffix;\n                relchar = val.char - line.beginChar;\n                html += \"<tr>\";\n                html += `<td>${val.line}</td><td>${line.beginChar}</td><td>${relchar}</td><td>${text}</td>`;\n                html += \"</tr>\\n\";\n                html += \"<tr>\";\n                html += `<td colspan=\"3\"></td><td>&uarr;:&nbsp;${apglib.utils.stringToAsciiHtml(val.msg)}</td>`;\n                html += \"</tr>\\n\";\n            }\n        });\n        html += \"</table></p>\\n\";\n        return html;\n    };\n    /* Display an array of errors in ASCII text */ const errorsToAscii = function errorsToAscii(errors, lines, chars) {\n        let str;\n        let line;\n        let beg;\n        let len;\n        str = \"\";\n        errors.forEach((error)=>{\n            line = lines[error.line];\n            str += `${line.lineNo}: `;\n            str += `${line.beginChar}: `;\n            str += `${error.char - line.beginChar}: `;\n            beg = line.beginChar;\n            len = error.char - line.beginChar;\n            str += abnfToAscii(chars, beg, len);\n            str += \" >> \";\n            beg = error.char;\n            len = line.beginChar + line.length - error.char;\n            str += abnfToAscii(chars, beg, len);\n            str += \"\\n\";\n            str += `${line.lineNo}: `;\n            str += `${line.beginChar}: `;\n            str += `${error.char - line.beginChar}: `;\n            str += \"error: \";\n            str += error.msg;\n            str += \"\\n\";\n        });\n        return str;\n    };\n    let isScanned = false;\n    let isParsed = false;\n    let isTranslated = false;\n    let haveAttributes = false;\n    let attributeErrors = 0;\n    let lineMap;\n    /* PUBLIC PROPERTIES */ // The input SABNF grammar as a JavaScript string.\n    // this.sabnf;\n    // The input SABNF grammar as an array of character codes.\n    // this.chars;\n    // An array of line objects, defining each line of the input SABNF grammar\n    // - lineNo : the zero-based line number\n    // - beginChar : offset (into `this.chars`) of the first character in the line\n    // - length : the number of characters in the line\n    // - textLength : the number of characters of text in the line, excluding the line ending characters\n    // - endType : \"CRLF\", \"LF\", \"CR\" or \"none\" if the last line has no line ending characters\n    // - invalidChars : `true` if the line contains invalid characters, `false` otherwise\n    // this.lines;\n    // An array of rule names and data.\n    // - name : the rule name\n    // - lower : the rule name in lower case\n    // - index : the index of the rule (ordered by appearance in SABNF grammar)\n    // - isBkr : `true` if this rule has been back referenced, `false` otherwise\n    // - opcodes : array of opcodes for this rule\n    // - attrs : the rule attributes\n    // - ctrl : system data\n    // this.rules;\n    // An array of UDT names and data.\n    // this.udts;\n    // An array of errors, if any.\n    // - line : the line number containing the error\n    // - char : the character offset of the error\n    // - msg : the error message\n    this.errors = [];\n    /* CONSTRUCTOR */ if (Buffer.isBuffer(src)) {\n        this.chars = converter.decode(\"BINARY\", src);\n    } else if (Array.isArray(src)) {\n        this.chars = src.slice();\n    } else if (typeof src === \"string\") {\n        this.chars = converter.decode(\"STRING\", src);\n    } else {\n        throw new Error(`${thisFileName}input source is not a string, byte Buffer or character array`);\n    }\n    this.sabnf = converter.encode(\"STRING\", this.chars);\n    /* PUBLIC MEMBERS (FUNCTIONS) */ // Scan the input SABNF grammar for invalid characters and catalog the lines via `this.lines`.\n    // - strict : (optional) if `true`, all lines, including the last must end with CRLF (\\r\\n),\n    // if `false` (in any JavaScript sense) then line endings may be any mix of CRLF, LF, CR, or end-of-file.\n    // - trace (*) : (optional) a parser trace object, which will trace the parser that does the scan\n    this.scan = function scan(strict, trace) {\n        this.lines = scanner(this.chars, this.errors, strict, trace);\n        isScanned = true;\n    };\n    // Parse the input SABNF grammar for correct syntax.\n    // - strict : (optional) if `true`, the input grammar must be strict ABNF, conforming to [RFC 5234](https://tools.ietf.org/html/rfc5234)\n    // and [RFC 7405](https://tools.ietf.org/html/rfc7405). No superset features allowed.\n    // - trace (\\*) : (optional) a parser trace object, which will trace the syntax parser\n    //\n    // <i>(*)NOTE: the trace option was used primarily during development.\n    // Error detection and reporting is now fairly robust and tracing should be unnecessary. Use at your own peril.</i>\n    this.parse = function parse(strict, trace) {\n        if (!isScanned) {\n            throw new Error(`${thisFileName}grammar not scanned`);\n        }\n        parser.syntax(this.chars, this.lines, this.errors, strict, trace);\n        isParsed = true;\n    };\n    // Translate the SABNF grammar syntax into the opcodes that will guide the parser for this grammar.\n    this.translate = function translate() {\n        if (!isParsed) {\n            throw new Error(`${thisFileName}grammar not scanned and parsed`);\n        }\n        const ret = parser.semantic(this.chars, this.lines, this.errors);\n        if (this.errors.length === 0) {\n            this.rules = ret.rules;\n            this.udts = ret.udts;\n            lineMap = ret.lineMap;\n            isTranslated = true;\n        }\n    };\n    // Compute the attributes of each rule.\n    this.attributes = function attrs() {\n        if (!isTranslated) {\n            throw new Error(`${thisFileName}grammar not scanned, parsed and translated`);\n        }\n        attributeErrors = attributes(this.rules, this.udts, lineMap, this.errors);\n        haveAttributes = true;\n        return attributeErrors;\n    };\n    // This function will perform the full suite of steps required to generate a parser grammar object\n    // from the input SABNF grammar.\n    this.generate = function generate(strict) {\n        this.lines = scanner(this.chars, this.errors, strict);\n        if (this.errors.length) {\n            return;\n        }\n        parser.syntax(this.chars, this.lines, this.errors, strict);\n        if (this.errors.length) {\n            return;\n        }\n        const ret = parser.semantic(this.chars, this.lines, this.errors);\n        if (this.errors.length) {\n            return;\n        }\n        this.rules = ret.rules;\n        this.udts = ret.udts;\n        lineMap = ret.lineMap;\n        attributeErrors = attributes(this.rules, this.udts, lineMap, this.errors);\n        haveAttributes = true;\n    };\n    // Display the rules.\n    // Must scan, parse and translate before calling this function, otherwise there are no rules to display.\n    // - order\n    //      - \"index\" or \"i\", index order (default)\n    //      - \"alpha\" or \"a\", alphabetical order\n    //      - none of above, index order (default)\n    this.displayRules = function displayRules(order = \"index\") {\n        if (!isTranslated) {\n            throw new Error(`${thisFileName}grammar not scanned, parsed and translated`);\n        }\n        return showRules(this.rules, this.udts, order);\n    };\n    // Display the rule dependencies.\n    // Must scan, parse, translate and compute attributes before calling this function.\n    // Otherwise the rule dependencies are not known.\n    // - order\n    //      - \"index\" or \"i\", index order (default)\n    //      - \"alpha\" or \"a\", alphabetical order\n    //      - \"type\" or \"t\", ordered by type (alphabetical within each type/group)\n    //      - none of above, index order (default)\n    this.displayRuleDependencies = function displayRuleDependencies(order = \"index\") {\n        if (!haveAttributes) {\n            throw new Error(`${thisFileName}no attributes - must be preceeded by call to attributes()`);\n        }\n        return showRuleDependencies(order);\n    };\n    // Display the attributes.\n    // Must scan, parse, translate and compute attributes before calling this function.\n    // - order\n    //      - \"index\" or \"i\", index order (default)\n    //      - \"alpha\" or \"a\", alphabetical order\n    //      - \"type\" or \"t\", ordered by type (alphabetical within each type/group)\n    //      - none of above, type order (default)\n    this.displayAttributes = function displayAttributes(order = \"index\") {\n        if (!haveAttributes) {\n            throw new Error(`${thisFileName}no attributes - must be preceeded by call to attributes()`);\n        }\n        if (attributeErrors) {\n            showAttributeErrors(order);\n        }\n        return showAttributes(order);\n    };\n    this.displayAttributeErrors = function displayAttributeErrors() {\n        if (!haveAttributes) {\n            throw new Error(`${thisFileName}no attributes - must be preceeded by call to attributes()`);\n        }\n        return showAttributeErrors();\n    };\n    // Returns a parser grammar object constructor function as a JavaScript string.\n    // This object can then be used to construct a parser.\n    this.toSource = function toSource(name) {\n        if (!haveAttributes) {\n            throw new Error(`${thisFileName}can't generate parser source - must be preceeded by call to attributes()`);\n        }\n        if (attributeErrors) {\n            throw new Error(`${thisFileName}can't generate parser source - attributes have ${attributeErrors} errors`);\n        }\n        return parser.generateSource(this.chars, this.lines, this.rules, this.udts, name);\n    };\n    // Returns a parser grammar object.\n    // This grammar object may be used by the application to construct a parser.\n    this.toObject = function toObject() {\n        if (!haveAttributes) {\n            throw new Error(`${thisFileName}can't generate parser source - must be preceeded by call to attributes()`);\n        }\n        if (attributeErrors) {\n            throw new Error(`${thisFileName}can't generate parser source - attributes have ${attributeErrors} errors`);\n        }\n        return parser.generateObject(this.sabnf, this.rules, this.udts);\n    };\n    // Display errors in text format, suitable for `console.log()`.\n    this.errorsToAscii = function errorsToAsciiFunc() {\n        return errorsToAscii(this.errors, this.lines, this.chars);\n    };\n    // Display errors in HTML format, suitable for web page display.\n    // (`apg-lib.css` required for proper styling)\n    this.errorsToHtml = function errorsToHtmlFunc(title) {\n        return errorsToHtml(this.errors, this.lines, this.chars, title);\n    };\n    // Generate an annotated the SABNF grammar display in text format.\n    this.linesToAscii = function linesToAsciiFunc() {\n        return linesToAscii(this.lines);\n    };\n    // Generate an annotated the SABNF grammar display in HTML format.\n    // (`apg-lib.css` required for proper styling)\n    this.linesToHtml = function linesToHtmlFunc() {\n        return linesToHtml(this.lines);\n    };\n// This function was only used by apg.html which has been abandoned.\n/*\n    this.getAttributesObject = function () {\n        return null;\n    };\n    */ };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-api/api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-api/attributes.js":
/*!*******************************************************!*\
  !*** ./node_modules/apg-js/src/apg-api/attributes.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* eslint-disable class-methods-use-this */ /*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // Attributes Validation\n//\n// It is well known that recursive-descent parsers will fail if a rule is left recursive.\n// Besides left recursion, there are a couple of other fatal attributes that need to be disclosed as well.\n// There are several non-fatal attributes that are of interest also.\n// This module will determine six different attributes listed here with simple examples.\n//\n// **fatal attributes**<br>\n// left recursion<br>\n// S = S \"x\" / \"y\"\n//\n// cyclic<br>\n// S = S\n//\n// infinite<br>\n// S = \"y\" S\n//\n// **non-fatal attributes** (but nice to know)<br>\n// nested recursion<br>\n// S = \"a\" S \"b\" / \"y\"\n//\n// right recursion<br>\n// S = \"x\" S / \"y\"\n//\n// empty string<br>\n// S = \"x\" S / \"\"\n//\n// Note that these are “aggregate” attributes, in that if the attribute is true it only means that it can be true,\n// not that it will always be true for every input string.\n// In the simple examples above the attributes may be obvious and definite – always true or false.\n// However, for a large grammar with possibly hundreds of rules and parse tree branches,\n// it can be obscure which branches lead to which attributes.\n// Furthermore, different input strings will lead the parser down different branches.\n// One input string may parse perfectly while another will hit a left-recursive branch and bottom out the call stack.\n//\n// It is for this reason that the APG parser generator computes these attributes.\n// When using the API the attributes call is optional but generating a parser without checking the attributes - proceed at your own peril.\n//\n// Additionally, the attribute phase will identify rule dependencies and mutually-recursive groups. For example,\n//\n// S = \"a\" A \"b\" / \"y\"<br>\n// A = \"x\"\n//\n// S is dependent on A but A is not dependent on S.\n//\n// S = \"a\" A \"b\" / \"c\"<br>\n// A = \"x\" S \"y\" / \"z\"\n//\n// S and A are dependent on one another and are mutually recursive.\n\nmodule.exports = function exportAttributes() {\n    const id = __webpack_require__(/*! ../apg-lib/identifiers */ \"(rsc)/./node_modules/apg-js/src/apg-lib/identifiers.js\");\n    const { ruleAttributes, showAttributes, showAttributeErrors } = __webpack_require__(/*! ./rule-attributes */ \"(rsc)/./node_modules/apg-js/src/apg-api/rule-attributes.js\");\n    const { ruleDependencies, showRuleDependencies } = __webpack_require__(/*! ./rule-dependencies */ \"(rsc)/./node_modules/apg-js/src/apg-api/rule-dependencies.js\");\n    class State {\n        constructor(rules, udts){\n            this.rules = rules;\n            this.udts = udts;\n            this.ruleCount = rules.length;\n            this.udtCount = udts.length;\n            this.startRule = 0;\n            this.dependenciesComplete = false;\n            this.attributesComplete = false;\n            this.isMutuallyRecursive = false;\n            this.ruleIndexes = this.indexArray(this.ruleCount);\n            this.ruleAlphaIndexes = this.indexArray(this.ruleCount);\n            this.ruleTypeIndexes = this.indexArray(this.ruleCount);\n            this.udtIndexes = this.indexArray(this.udtCount);\n            this.udtAlphaIndexes = this.indexArray(this.udtCount);\n            this.attrsErrorCount = 0;\n            this.attrs = [];\n            this.attrsErrors = [];\n            this.attrsWorking = [];\n            this.ruleDeps = [];\n            for(let i = 0; i < this.ruleCount; i += 1){\n                this.attrs.push(this.attrGen(this.rules[i]));\n                this.attrsWorking.push(this.attrGen(this.rules[i]));\n                this.ruleDeps.push(this.rdGen(rules[i], this.ruleCount, this.udtCount));\n            }\n            this.compRulesAlpha = this.compRulesAlpha.bind(this);\n            this.compUdtsAlpha = this.compUdtsAlpha.bind(this);\n            this.compRulesType = this.compRulesType.bind(this);\n            this.compRulesGroup = this.compRulesGroup.bind(this);\n        }\n        // eslint-disable-next-line class-methods-use-this\n        attrGen(rule) {\n            return {\n                left: false,\n                nested: false,\n                right: false,\n                empty: false,\n                finite: false,\n                cyclic: false,\n                leaf: false,\n                isOpen: false,\n                isComplete: false,\n                rule\n            };\n        }\n        // eslint-disable-next-line class-methods-use-this\n        attrInit(attr) {\n            attr.left = false;\n            attr.nested = false;\n            attr.right = false;\n            attr.empty = false;\n            attr.finite = false;\n            attr.cyclic = false;\n            attr.leaf = false;\n            attr.isOpen = false;\n            attr.isComplete = false;\n        }\n        attrCopy(dst, src) {\n            dst.left = src.left;\n            dst.nested = src.nested;\n            dst.right = src.right;\n            dst.empty = src.empty;\n            dst.finite = src.finite;\n            dst.cyclic = src.cyclic;\n            dst.leaf = src.leaf;\n            dst.isOpen = src.isOpen;\n            dst.isComplete = src.isComplete;\n            dst.rule = src.rule;\n        }\n        rdGen(rule, ruleCount, udtCount) {\n            const ret = {\n                rule,\n                recursiveType: id.ATTR_N,\n                groupNumber: -1,\n                refersTo: this.falseArray(ruleCount),\n                refersToUdt: this.falseArray(udtCount),\n                referencedBy: this.falseArray(ruleCount)\n            };\n            return ret;\n        }\n        typeToString(recursiveType) {\n            switch(recursiveType){\n                case id.ATTR_N:\n                    return \" N\";\n                case id.ATTR_R:\n                    return \" R\";\n                case id.ATTR_MR:\n                    return \"MR\";\n                default:\n                    return \"UNKNOWN\";\n            }\n        }\n        falseArray(length) {\n            const ret = [];\n            if (length > 0) {\n                for(let i = 0; i < length; i += 1){\n                    ret.push(false);\n                }\n            }\n            return ret;\n        }\n        falsifyArray(a) {\n            for(let i = 0; i < a.length; i += 1){\n                a[i] = false;\n            }\n        }\n        indexArray(length) {\n            const ret = [];\n            if (length > 0) {\n                for(let i = 0; i < length; i += 1){\n                    ret.push(i);\n                }\n            }\n            return ret;\n        }\n        compRulesAlpha(left, right) {\n            if (this.rules[left].lower < this.rules[right].lower) {\n                return -1;\n            }\n            if (this.rules[left].lower > this.rules[right].lower) {\n                return 1;\n            }\n            return 0;\n        }\n        compUdtsAlpha(left, right) {\n            if (this.udts[left].lower < this.udts[right].lower) {\n                return -1;\n            }\n            if (this.udts[left].lower > this.udts[right].lower) {\n                return 1;\n            }\n            return 0;\n        }\n        compRulesType(left, right) {\n            if (this.ruleDeps[left].recursiveType < this.ruleDeps[right].recursiveType) {\n                return -1;\n            }\n            if (this.ruleDeps[left].recursiveType > this.ruleDeps[right].recursiveType) {\n                return 1;\n            }\n            return 0;\n        }\n        compRulesGroup(left, right) {\n            if (this.ruleDeps[left].recursiveType === id.ATTR_MR && this.ruleDeps[right].recursiveType === id.ATTR_MR) {\n                if (this.ruleDeps[left].groupNumber < this.ruleDeps[right].groupNumber) {\n                    return -1;\n                }\n                if (this.ruleDeps[left].groupNumber > this.ruleDeps[right].groupNumber) {\n                    return 1;\n                }\n            }\n            return 0;\n        }\n    }\n    // eslint-disable-next-line no-unused-vars\n    const attributes = function attributes(rules = [], udts = [], lineMap = [], errors = []) {\n        // let i = 0;\n        // Initialize the state. The state of the computation get passed around to multiple functions in multiple files.\n        const state = new State(rules, udts);\n        // Determine all rule dependencies\n        //  - which rules each rule refers to\n        //  - which rules reference each rule\n        ruleDependencies(state);\n        // Determine the attributes for each rule.\n        ruleAttributes(state);\n        if (state.attrsErrorCount) {\n            errors.push({\n                line: 0,\n                char: 0,\n                msg: `${state.attrsErrorCount} attribute errors`\n            });\n        }\n        // Return the number of attribute errors to the caller.\n        return state.attrsErrorCount;\n    };\n    /* Destructuring assignment - see MDN Web Docs */ return {\n        attributes,\n        showAttributes,\n        showAttributeErrors,\n        showRuleDependencies\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-api/attributes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-api/parser.js":
/*!***************************************************!*\
  !*** ./node_modules/apg-js/src/apg-api/parser.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module converts an input SABNF grammar text file into a\n// grammar object that can be used with `apg-lib` in an application parser.\n// **apg** is, in fact itself, an ABNF parser that generates an SABNF parser.\n// It is based on the grammar<br>\n// `./dist/abnf-for-sabnf-grammar.bnf`.<br>\n// In its syntax phase, **apg** analyzes the user's input SABNF grammar for correct syntax, generating an AST as it goes.\n// In its semantic phase, **apg** translates the AST to generate the parser for the input grammar.\n\nmodule.exports = function exportParser() {\n    const thisFileName = \"parser: \";\n    const ApgLib = __webpack_require__(/*! ../apg-lib/node-exports */ \"(rsc)/./node_modules/apg-js/src/apg-lib/node-exports.js\");\n    const id = ApgLib.ids;\n    const syn = new (__webpack_require__(/*! ./syntax-callbacks */ \"(rsc)/./node_modules/apg-js/src/apg-api/syntax-callbacks.js\"))();\n    const sem = new (__webpack_require__(/*! ./semantic-callbacks */ \"(rsc)/./node_modules/apg-js/src/apg-api/semantic-callbacks.js\"))();\n    const sabnfGrammar = new (__webpack_require__(/*! ./sabnf-grammar */ \"(rsc)/./node_modules/apg-js/src/apg-api/sabnf-grammar.js\"))();\n    // eslint-disable-next-line new-cap\n    const parser = new ApgLib.parser();\n    // eslint-disable-next-line new-cap\n    parser.ast = new ApgLib.ast();\n    parser.callbacks = syn.callbacks;\n    parser.ast.callbacks = sem.callbacks;\n    /* find the line containing the given character index */ const findLine = function findLine(lines, charIndex, charLength) {\n        if (charIndex < 0 || charIndex >= charLength) {\n            /* return error if out of range */ return -1;\n        }\n        for(let i = 0; i < lines.length; i += 1){\n            if (charIndex >= lines[i].beginChar && charIndex < lines[i].beginChar + lines[i].length) {\n                return i;\n            }\n        }\n        /* should never reach here */ return -1;\n    };\n    const translateIndex = function translateIndex(map, index) {\n        let ret = -1;\n        if (index < map.length) {\n            for(let i = index; i < map.length; i += 1){\n                if (map[i] !== null) {\n                    ret = map[i];\n                    break;\n                }\n            }\n        }\n        return ret;\n    };\n    /* helper function when removing redundant opcodes */ const reduceOpcodes = function reduceOpcodes(rules) {\n        rules.forEach((rule)=>{\n            const opcodes = [];\n            const map = [];\n            let reducedIndex = 0;\n            rule.opcodes.forEach((op)=>{\n                if (op.type === id.ALT && op.children.length === 1) {\n                    map.push(null);\n                } else if (op.type === id.CAT && op.children.length === 1) {\n                    map.push(null);\n                } else if (op.type === id.REP && op.min === 1 && op.max === 1) {\n                    map.push(null);\n                } else {\n                    map.push(reducedIndex);\n                    opcodes.push(op);\n                    reducedIndex += 1;\n                }\n            });\n            map.push(reducedIndex);\n            /* translate original opcode indexes to the reduced set. */ opcodes.forEach((op)=>{\n                if (op.type === id.ALT || op.type === id.CAT) {\n                    for(let i = 0; i < op.children.length; i += 1){\n                        op.children[i] = translateIndex(map, op.children[i]);\n                    }\n                }\n            });\n            rule.opcodes = opcodes;\n        });\n    };\n    /* Parse the grammar - the syntax phase. */ /* SABNF grammar syntax errors are caught and reported here. */ this.syntax = function syntax(chars, lines, errors, strict, trace) {\n        if (trace) {\n            if (trace.traceObject !== \"traceObject\") {\n                throw new TypeError(`${thisFileName}trace argument is not a trace object`);\n            }\n            parser.trace = trace;\n        }\n        const data = {};\n        data.errors = errors;\n        data.strict = !!strict;\n        data.lines = lines;\n        data.findLine = findLine;\n        data.charsLength = chars.length;\n        data.ruleCount = 0;\n        const result = parser.parse(sabnfGrammar, \"file\", chars, data);\n        if (!result.success) {\n            errors.push({\n                line: 0,\n                char: 0,\n                msg: \"syntax analysis of input grammar failed\"\n            });\n        }\n    };\n    /* Parse the grammar - the semantic phase, translates the AST. */ /* SABNF grammar syntax errors are caught and reported here. */ this.semantic = function semantic(chars, lines, errors) {\n        const data = {};\n        data.errors = errors;\n        data.lines = lines;\n        data.findLine = findLine;\n        data.charsLength = chars.length;\n        parser.ast.translate(data);\n        if (errors.length) {\n            return null;\n        }\n        /* Remove unneeded operators. */ /* ALT operators with a single alternate */ /* CAT operators with a single phrase to concatenate */ /* REP(1,1) operators (`1*1RuleName` or `1RuleName` is the same as just `RuleName`.) */ reduceOpcodes(data.rules);\n        return {\n            rules: data.rules,\n            udts: data.udts,\n            lineMap: data.rulesLineMap\n        };\n    };\n    // Generate a grammar constructor function.\n    // An object instantiated from this constructor is used with the `apg-lib` `parser()` function.\n    this.generateSource = function generateSource(chars, lines, rules, udts, name) {\n        let source = \"\";\n        let i;\n        let bkrname;\n        let bkrlower;\n        let opcodeCount = 0;\n        let charCodeMin = Infinity;\n        let charCodeMax = 0;\n        const ruleNames = [];\n        const udtNames = [];\n        let alt = 0;\n        let cat = 0;\n        let rnm = 0;\n        let udt = 0;\n        let rep = 0;\n        let and = 0;\n        let not = 0;\n        let tls = 0;\n        let tbs = 0;\n        let trg = 0;\n        let bkr = 0;\n        let bka = 0;\n        let bkn = 0;\n        let abg = 0;\n        let aen = 0;\n        rules.forEach((rule)=>{\n            ruleNames.push(rule.lower);\n            opcodeCount += rule.opcodes.length;\n            rule.opcodes.forEach((op)=>{\n                switch(op.type){\n                    case id.ALT:\n                        alt += 1;\n                        break;\n                    case id.CAT:\n                        cat += 1;\n                        break;\n                    case id.RNM:\n                        rnm += 1;\n                        break;\n                    case id.UDT:\n                        udt += 1;\n                        break;\n                    case id.REP:\n                        rep += 1;\n                        break;\n                    case id.AND:\n                        and += 1;\n                        break;\n                    case id.NOT:\n                        not += 1;\n                        break;\n                    case id.BKA:\n                        bka += 1;\n                        break;\n                    case id.BKN:\n                        bkn += 1;\n                        break;\n                    case id.BKR:\n                        bkr += 1;\n                        break;\n                    case id.ABG:\n                        abg += 1;\n                        break;\n                    case id.AEN:\n                        aen += 1;\n                        break;\n                    case id.TLS:\n                        tls += 1;\n                        for(i = 0; i < op.string.length; i += 1){\n                            if (op.string[i] < charCodeMin) {\n                                charCodeMin = op.string[i];\n                            }\n                            if (op.string[i] > charCodeMax) {\n                                charCodeMax = op.string[i];\n                            }\n                        }\n                        break;\n                    case id.TBS:\n                        tbs += 1;\n                        for(i = 0; i < op.string.length; i += 1){\n                            if (op.string[i] < charCodeMin) {\n                                charCodeMin = op.string[i];\n                            }\n                            if (op.string[i] > charCodeMax) {\n                                charCodeMax = op.string[i];\n                            }\n                        }\n                        break;\n                    case id.TRG:\n                        trg += 1;\n                        if (op.min < charCodeMin) {\n                            charCodeMin = op.min;\n                        }\n                        if (op.max > charCodeMax) {\n                            charCodeMax = op.max;\n                        }\n                        break;\n                    default:\n                        throw new Error(\"generateSource: unrecognized opcode\");\n                }\n            });\n        });\n        ruleNames.sort();\n        if (udts.length > 0) {\n            udts.forEach((udtFunc)=>{\n                udtNames.push(udtFunc.lower);\n            });\n            udtNames.sort();\n        }\n        let funcname = \"module.exports\";\n        if (name && typeof name === \"string\") {\n            funcname = `let ${name}`;\n        }\n        source += \"// copyright: Copyright (c) 2023 Lowell D. Thomas, all rights reserved<br>\\n\";\n        source += \"//   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>\\n\";\n        source += \"//\\n\";\n        source += \"// Generated by apg-js, Version 4.2.1 [apg-js](https://github.com/ldthomas/apg-js)\\n\";\n        source += `${funcname} = function grammar(){\\n`;\n        source += \"  // ```\\n\";\n        source += \"  // SUMMARY\\n\";\n        source += `  //      rules = ${rules.length}\\n`;\n        source += `  //       udts = ${udts.length}\\n`;\n        source += `  //    opcodes = ${opcodeCount}\\n`;\n        source += \"  //        ---   ABNF original opcodes\\n\";\n        source += `  //        ALT = ${alt}\\n`;\n        source += `  //        CAT = ${cat}\\n`;\n        source += `  //        REP = ${rep}\\n`;\n        source += `  //        RNM = ${rnm}\\n`;\n        source += `  //        TLS = ${tls}\\n`;\n        source += `  //        TBS = ${tbs}\\n`;\n        source += `  //        TRG = ${trg}\\n`;\n        source += \"  //        ---   SABNF superset opcodes\\n\";\n        source += `  //        UDT = ${udt}\\n`;\n        source += `  //        AND = ${and}\\n`;\n        source += `  //        NOT = ${not}\\n`;\n        source += `  //        BKA = ${bka}\\n`;\n        source += `  //        BKN = ${bkn}\\n`;\n        source += `  //        BKR = ${bkr}\\n`;\n        source += `  //        ABG = ${abg}\\n`;\n        source += `  //        AEN = ${aen}\\n`;\n        source += \"  // characters = [\";\n        if (tls + tbs + trg === 0) {\n            source += \" none defined ]\";\n        } else {\n            source += `${charCodeMin} - ${charCodeMax}]`;\n        }\n        if (udt > 0) {\n            source += \" + user defined\";\n        }\n        source += \"\\n\";\n        source += \"  // ```\\n\";\n        source += \"  /* OBJECT IDENTIFIER (for internal parser use) */\\n\";\n        source += \"  this.grammarObject = 'grammarObject';\\n\";\n        source += \"\\n\";\n        source += \"  /* RULES */\\n\";\n        source += \"  this.rules = [];\\n\";\n        rules.forEach((rule, ii)=>{\n            let thisRule = \"  this.rules[\";\n            thisRule += ii;\n            thisRule += \"] = {name: '\";\n            thisRule += rule.name;\n            thisRule += \"', lower: '\";\n            thisRule += rule.lower;\n            thisRule += \"', index: \";\n            thisRule += rule.index;\n            thisRule += \", isBkr: \";\n            thisRule += rule.isBkr;\n            thisRule += \"};\\n\";\n            source += thisRule;\n        });\n        source += \"\\n\";\n        source += \"  /* UDTS */\\n\";\n        source += \"  this.udts = [];\\n\";\n        if (udts.length > 0) {\n            udts.forEach((udtFunc, ii)=>{\n                let thisUdt = \"  this.udts[\";\n                thisUdt += ii;\n                thisUdt += \"] = {name: '\";\n                thisUdt += udtFunc.name;\n                thisUdt += \"', lower: '\";\n                thisUdt += udtFunc.lower;\n                thisUdt += \"', index: \";\n                thisUdt += udtFunc.index;\n                thisUdt += \", empty: \";\n                thisUdt += udtFunc.empty;\n                thisUdt += \", isBkr: \";\n                thisUdt += udtFunc.isBkr;\n                thisUdt += \"};\\n\";\n                source += thisUdt;\n            });\n        }\n        source += \"\\n\";\n        source += \"  /* OPCODES */\\n\";\n        rules.forEach((rule, ruleIndex)=>{\n            if (ruleIndex > 0) {\n                source += \"\\n\";\n            }\n            source += `  /* ${rule.name} */\\n`;\n            source += `  this.rules[${ruleIndex}].opcodes = [];\\n`;\n            rule.opcodes.forEach((op, opIndex)=>{\n                let prefix;\n                switch(op.type){\n                    case id.ALT:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, children: [${op.children.toString()}]};// ALT\\n`;\n                        break;\n                    case id.CAT:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, children: [${op.children.toString()}]};// CAT\\n`;\n                        break;\n                    case id.RNM:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, index: ${op.index}};// RNM(${rules[op.index].name})\\n`;\n                        break;\n                    case id.BKR:\n                        if (op.index >= rules.length) {\n                            bkrname = udts[op.index - rules.length].name;\n                            bkrlower = udts[op.index - rules.length].lower;\n                        } else {\n                            bkrname = rules[op.index].name;\n                            bkrlower = rules[op.index].lower;\n                        }\n                        prefix = \"%i\";\n                        if (op.bkrCase === id.BKR_MODE_CS) {\n                            prefix = \"%s\";\n                        }\n                        if (op.bkrMode === id.BKR_MODE_UM) {\n                            prefix += \"%u\";\n                        } else {\n                            prefix += \"%p\";\n                        }\n                        bkrname = prefix + bkrname;\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, index: ${op.index}, lower: '${bkrlower}'` + `, bkrCase: ${op.bkrCase}, bkrMode: ${op.bkrMode}};// BKR(\\\\${bkrname})\\n`;\n                        break;\n                    case id.UDT:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, empty: ${op.empty}, index: ${op.index}};// UDT(${udts[op.index].name})\\n`;\n                        break;\n                    case id.REP:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, min: ${op.min}, max: ${op.max}};// REP\\n`;\n                        break;\n                    case id.AND:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// AND\\n`;\n                        break;\n                    case id.NOT:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// NOT\\n`;\n                        break;\n                    case id.ABG:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// ABG(%^)\\n`;\n                        break;\n                    case id.AEN:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// AEN(%$)\\n`;\n                        break;\n                    case id.BKA:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// BKA\\n`;\n                        break;\n                    case id.BKN:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// BKN\\n`;\n                        break;\n                    case id.TLS:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, string: [${op.string.toString()}]};// TLS\\n`;\n                        break;\n                    case id.TBS:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, string: [${op.string.toString()}]};// TBS\\n`;\n                        break;\n                    case id.TRG:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, min: ${op.min}, max: ${op.max}};// TRG\\n`;\n                        break;\n                    default:\n                        throw new Error(\"parser.js: ~143: unrecognized opcode\");\n                }\n            });\n        });\n        source += \"\\n\";\n        source += \"  // The `toString()` function will display the original grammar file(s) that produced these opcodes.\\n\";\n        source += \"  this.toString = function toString(){\\n\";\n        source += '    let str = \"\";\\n';\n        let str;\n        lines.forEach((line)=>{\n            const end = line.beginChar + line.length;\n            str = \"\";\n            source += '    str += \"';\n            for(let ii = line.beginChar; ii < end; ii += 1){\n                switch(chars[ii]){\n                    case 9:\n                        str = \" \";\n                        break;\n                    case 10:\n                        str = \"\\\\n\";\n                        break;\n                    case 13:\n                        str = \"\\\\r\";\n                        break;\n                    case 34:\n                        str = '\\\\\"';\n                        break;\n                    case 92:\n                        str = \"\\\\\\\\\";\n                        break;\n                    default:\n                        str = String.fromCharCode(chars[ii]);\n                        break;\n                }\n                source += str;\n            }\n            source += '\";\\n';\n        });\n        source += \"    return str;\\n\";\n        source += \"  }\\n\";\n        source += \"}\\n\";\n        return source;\n    };\n    // Generate a grammar file object.\n    // Returns the same object as instantiating the constructor function returned by<br>\n    // `this.generateSource()`.<br>\n    this.generateObject = function generateObject(stringArg, rules, udts) {\n        const obj = {};\n        const ruleNames = [];\n        const udtNames = [];\n        const string = stringArg.slice(0);\n        obj.grammarObject = \"grammarObject\";\n        rules.forEach((rule)=>{\n            ruleNames.push(rule.lower);\n        });\n        ruleNames.sort();\n        if (udts.length > 0) {\n            udts.forEach((udtFunc)=>{\n                udtNames.push(udtFunc.lower);\n            });\n            udtNames.sort();\n        }\n        obj.callbacks = [];\n        ruleNames.forEach((name)=>{\n            obj.callbacks[name] = false;\n        });\n        if (udts.length > 0) {\n            udtNames.forEach((name)=>{\n                obj.callbacks[name] = false;\n            });\n        }\n        obj.rules = rules;\n        obj.udts = udts;\n        obj.toString = function toStringFunc() {\n            return string;\n        };\n        return obj;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-api/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-api/rule-attributes.js":
/*!************************************************************!*\
  !*** ./node_modules/apg-js/src/apg-api/rule-attributes.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module does the heavy lifting for attribute generation.\n\nmodule.exports = function exportRuleAttributes() {\n    const id = __webpack_require__(/*! ../apg-lib/identifiers */ \"(rsc)/./node_modules/apg-js/src/apg-lib/identifiers.js\");\n    const thisFile = \"rule-attributes.js\";\n    let state = null;\n    function isEmptyOnly(attr) {\n        if (attr.left || attr.nested || attr.right || attr.cyclic) {\n            return false;\n        }\n        return attr.empty;\n    }\n    function isRecursive(attr) {\n        if (attr.left || attr.nested || attr.right || attr.cyclic) {\n            return true;\n        }\n        return false;\n    }\n    function isCatNested(attrs, count) {\n        let i = 0;\n        let j = 0;\n        let k = 0;\n        /* 1. if any child is nested, CAT is nested */ for(i = 0; i < count; i += 1){\n            if (attrs[i].nested) {\n                return true;\n            }\n        }\n        /* 2.) the left-most right recursive child\n               is followed by at least one non-empty child */ for(i = 0; i < count; i += 1){\n            if (attrs[i].right && !attrs[i].leaf) {\n                for(j = i + 1; j < count; j += 1){\n                    if (!isEmptyOnly(attrs[j])) {\n                        return true;\n                    }\n                }\n            }\n        }\n        /* 3.) the right-most left recursive child\n               is preceded by at least one non-empty child */ for(i = count - 1; i >= 0; i -= 1){\n            if (attrs[i].left && !attrs[i].leaf) {\n                for(j = i - 1; j >= 0; j -= 1){\n                    if (!isEmptyOnly(attrs[j])) {\n                        return true;\n                    }\n                }\n            }\n        }\n        /* 4. there is at lease one recursive child between\n              the left-most and right-most non-recursive, non-empty children */ for(i = 0; i < count; i += 1){\n            if (!attrs[i].empty && !isRecursive(attrs[i])) {\n                for(j = i + 1; j < count; j += 1){\n                    if (isRecursive(attrs[j])) {\n                        for(k = j + 1; k < count; k += 1){\n                            if (!attrs[k].empty && !isRecursive(attrs[k])) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /* none of the above */ return false;\n    }\n    function isCatCyclic(attrs, count) {\n        /* if all children are cyclic, CAT is cyclic */ for(let i = 0; i < count; i += 1){\n            if (!attrs[i].cyclic) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function isCatLeft(attrs, count) {\n        /* if the left-most non-empty is left, CAT is left */ for(let i = 0; i < count; i += 1){\n            if (attrs[i].left) {\n                return true;\n            }\n            if (!attrs[i].empty) {\n                return false;\n            }\n        /* keep looking */ }\n        return false; /* all left-most are empty */ \n    }\n    function isCatRight(attrs, count) {\n        /* if the right-most non-empty is right, CAT is right */ for(let i = count - 1; i >= 0; i -= 1){\n            if (attrs[i].right) {\n                return true;\n            }\n            if (!attrs[i].empty) {\n                return false;\n            }\n        /* keep looking */ }\n        return false;\n    }\n    function isCatEmpty(attrs, count) {\n        /* if all children are empty, CAT is empty */ for(let i = 0; i < count; i += 1){\n            if (!attrs[i].empty) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function isCatFinite(attrs, count) {\n        /* if all children are finite, CAT is finite */ for(let i = 0; i < count; i += 1){\n            if (!attrs[i].finite) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function cat(stateArg, opcodes, opIndex, iAttr) {\n        let i = 0;\n        const opCat = opcodes[opIndex];\n        const count = opCat.children.length;\n        /* generate an empty array of child attributes */ const childAttrs = [];\n        for(i = 0; i < count; i += 1){\n            childAttrs.push(stateArg.attrGen());\n        }\n        for(i = 0; i < count; i += 1){\n            // eslint-disable-next-line no-use-before-define\n            opEval(stateArg, opcodes, opCat.children[i], childAttrs[i]);\n        }\n        iAttr.left = isCatLeft(childAttrs, count);\n        iAttr.right = isCatRight(childAttrs, count);\n        iAttr.nested = isCatNested(childAttrs, count);\n        iAttr.empty = isCatEmpty(childAttrs, count);\n        iAttr.finite = isCatFinite(childAttrs, count);\n        iAttr.cyclic = isCatCyclic(childAttrs, count);\n    }\n    function alt(stateArg, opcodes, opIndex, iAttr) {\n        let i = 0;\n        const opAlt = opcodes[opIndex];\n        const count = opAlt.children.length;\n        /* generate an empty array of child attributes */ const childAttrs = [];\n        for(i = 0; i < count; i += 1){\n            childAttrs.push(stateArg.attrGen());\n        }\n        for(i = 0; i < count; i += 1){\n            // eslint-disable-next-line no-use-before-define\n            opEval(stateArg, opcodes, opAlt.children[i], childAttrs[i]);\n        }\n        /* if any child attribute is true, ALT is true */ iAttr.left = false;\n        iAttr.right = false;\n        iAttr.nested = false;\n        iAttr.empty = false;\n        iAttr.finite = false;\n        iAttr.cyclic = false;\n        for(i = 0; i < count; i += 1){\n            if (childAttrs[i].left) {\n                iAttr.left = true;\n            }\n            if (childAttrs[i].nested) {\n                iAttr.nested = true;\n            }\n            if (childAttrs[i].right) {\n                iAttr.right = true;\n            }\n            if (childAttrs[i].empty) {\n                iAttr.empty = true;\n            }\n            if (childAttrs[i].finite) {\n                iAttr.finite = true;\n            }\n            if (childAttrs[i].cyclic) {\n                iAttr.cyclic = true;\n            }\n        }\n    }\n    function bkr(stateArg, opcodes, opIndex, iAttr) {\n        const opBkr = opcodes[opIndex];\n        if (opBkr.index >= stateArg.ruleCount) {\n            /* use UDT values */ iAttr.empty = stateArg.udts[opBkr.index - stateArg.ruleCount].empty;\n            iAttr.finite = true;\n        } else {\n            /* use the empty and finite values from the back referenced rule */ // eslint-disable-next-line no-use-before-define\n            ruleAttrsEval(stateArg, opBkr.index, iAttr);\n            /* however, this is a terminal node like TLS */ iAttr.left = false;\n            iAttr.nested = false;\n            iAttr.right = false;\n            iAttr.cyclic = false;\n        }\n    }\n    function opEval(stateArg, opcodes, opIndex, iAttr) {\n        stateArg.attrInit(iAttr);\n        const opi = opcodes[opIndex];\n        switch(opi.type){\n            case id.ALT:\n                alt(stateArg, opcodes, opIndex, iAttr);\n                break;\n            case id.CAT:\n                cat(stateArg, opcodes, opIndex, iAttr);\n                break;\n            case id.REP:\n                opEval(stateArg, opcodes, opIndex + 1, iAttr);\n                if (opi.min === 0) {\n                    iAttr.empty = true;\n                    iAttr.finite = true;\n                }\n                break;\n            case id.RNM:\n                // eslint-disable-next-line no-use-before-define\n                ruleAttrsEval(stateArg, opcodes[opIndex].index, iAttr);\n                break;\n            case id.BKR:\n                bkr(stateArg, opcodes, opIndex, iAttr);\n                break;\n            case id.AND:\n            case id.NOT:\n            case id.BKA:\n            case id.BKN:\n                opEval(stateArg, opcodes, opIndex + 1, iAttr);\n                iAttr.empty = true;\n                break;\n            case id.TLS:\n                iAttr.empty = !opcodes[opIndex].string.length;\n                iAttr.finite = true;\n                iAttr.cyclic = false;\n                break;\n            case id.TBS:\n            case id.TRG:\n                iAttr.empty = false;\n                iAttr.finite = true;\n                iAttr.cyclic = false;\n                break;\n            case id.UDT:\n                iAttr.empty = opi.empty;\n                iAttr.finite = true;\n                iAttr.cyclic = false;\n                break;\n            case id.ABG:\n            case id.AEN:\n                iAttr.empty = true;\n                iAttr.finite = true;\n                iAttr.cyclic = false;\n                break;\n            default:\n                throw new Error(`unknown opcode type: ${opi}`);\n        }\n    }\n    // The main logic for handling rules that:\n    //  - have already be evaluated\n    //  - have not been evaluated and is the first occurrence on this branch\n    //  - second occurrence on this branch for the start rule\n    //  - second occurrence on this branch for non-start rules\n    function ruleAttrsEval(stateArg, ruleIndex, iAttr) {\n        const attri = stateArg.attrsWorking[ruleIndex];\n        if (attri.isComplete) {\n            /* just use the completed values */ stateArg.attrCopy(iAttr, attri);\n        } else if (!attri.isOpen) {\n            /* open the rule and traverse it */ attri.isOpen = true;\n            opEval(stateArg, attri.rule.opcodes, 0, iAttr);\n            /* complete this rule's attributes */ attri.left = iAttr.left;\n            attri.right = iAttr.right;\n            attri.nested = iAttr.nested;\n            attri.empty = iAttr.empty;\n            attri.finite = iAttr.finite;\n            attri.cyclic = iAttr.cyclic;\n            attri.leaf = false;\n            attri.isOpen = false;\n            attri.isComplete = true;\n        } else if (ruleIndex === stateArg.startRule) {\n            /* use recursive leaf values */ if (ruleIndex === stateArg.startRule) {\n                iAttr.left = true;\n                iAttr.right = true;\n                iAttr.cyclic = true;\n                iAttr.leaf = true;\n            }\n        } else {\n            /* non-start rule terminal leaf */ iAttr.finite = true;\n        }\n    }\n    // The main driver for the attribute generation.\n    const ruleAttributes = (stateArg)=>{\n        state = stateArg;\n        let i = 0;\n        let j = 0;\n        const iAttr = state.attrGen();\n        for(i = 0; i < state.ruleCount; i += 1){\n            /* initialize working attributes */ for(j = 0; j < state.ruleCount; j += 1){\n                state.attrInit(state.attrsWorking[j]);\n            }\n            state.startRule = i;\n            ruleAttrsEval(state, i, iAttr);\n            /* save off the working attributes for this rule */ state.attrCopy(state.attrs[i], state.attrsWorking[i]);\n        }\n        state.attributesComplete = true;\n        let attri = null;\n        for(i = 0; i < state.ruleCount; i += 1){\n            attri = state.attrs[i];\n            if (attri.left || !attri.finite || attri.cyclic) {\n                const temp = state.attrGen(attri.rule);\n                state.attrCopy(temp, attri);\n                state.attrsErrors.push(temp);\n                state.attrsErrorCount += 1;\n            }\n        }\n    };\n    const truth = (val)=>val ? \"t\" : \"f\";\n    const tError = (val)=>val ? \"e\" : \"f\";\n    const fError = (val)=>val ? \"t\" : \"e\";\n    const showAttr = (seq, index, attr, dep)=>{\n        let str = `${seq}:${index}:`;\n        str += `${tError(attr.left)} `;\n        str += `${truth(attr.nested)} `;\n        str += `${truth(attr.right)} `;\n        str += `${tError(attr.cyclic)} `;\n        str += `${fError(attr.finite)} `;\n        str += `${truth(attr.empty)}:`;\n        str += `${state.typeToString(dep.recursiveType)}:`;\n        str += dep.recursiveType === id.ATTR_MR ? dep.groupNumber : \"-\";\n        str += `:${attr.rule.name}\\n`;\n        return str;\n    };\n    const showLegend = ()=>{\n        let str = \"LEGEND - t=true, f=false, e=error\\n\";\n        str += \"sequence:rule index:left nested right cyclic finite empty:type:group number:rule name\\n\";\n        return str;\n    };\n    const showAttributeErrors = ()=>{\n        let attri = null;\n        let depi = null;\n        let str = \"\";\n        str += \"RULE ATTRIBUTES WITH ERRORS\\n\";\n        str += showLegend();\n        if (state.attrsErrorCount) {\n            for(let i = 0; i < state.attrsErrorCount; i += 1){\n                attri = state.attrsErrors[i];\n                depi = state.ruleDeps[attri.rule.index];\n                str += showAttr(i, attri.rule.index, attri, depi);\n            }\n        } else {\n            str += \"<none>\\n\";\n        }\n        return str;\n    };\n    const show = (type)=>{\n        let i = 0;\n        let ii = 0;\n        let attri = null;\n        let depi = null;\n        let str = \"\";\n        let { ruleIndexes } = state;\n        // let udtIndexes = state.udtIndexes;\n        if (type === 97) {\n            ruleIndexes = state.ruleAlphaIndexes;\n        // udtIndexes = state.udtAlphaIndexes;\n        } else if (type === 116) {\n            ruleIndexes = state.ruleTypeIndexes;\n        // udtIndexes = state.udtAlphaIndexes;\n        }\n        /* show all attributes */ for(i = 0; i < state.ruleCount; i += 1){\n            ii = ruleIndexes[i];\n            attri = state.attrs[ii];\n            depi = state.ruleDeps[ii];\n            str += showAttr(i, ii, attri, depi);\n        }\n        return str;\n    };\n    // Display the rule attributes.\n    // - order\n    //      - \"index\" or \"i\", index order (default)\n    //      - \"alpha\" or \"a\", alphabetical order\n    //      - \"type\" or \"t\", ordered by type (alphabetical within each type/group)\n    //      - none of above, index order (default)\n    const showAttributes = (order = \"index\")=>{\n        if (!state.attributesComplete) {\n            throw new Error(`${thisFile}:showAttributes: attributes not available`);\n        }\n        let str = \"\";\n        const leader = \"RULE ATTRIBUTES\\n\";\n        if (order.charCodeAt(0) === 97) {\n            str += \"alphabetical by rule name\\n\";\n            str += leader;\n            str += showLegend();\n            str += show(97);\n        } else if (order.charCodeAt(0) === 116) {\n            str += \"ordered by rule type\\n\";\n            str += leader;\n            str += showLegend();\n            str += show(116);\n        } else {\n            str += \"ordered by rule index\\n\";\n            str += leader;\n            str += showLegend();\n            str += show();\n        }\n        return str;\n    };\n    /* Destructuring assignment - see MDN Web Docs */ return {\n        ruleAttributes,\n        showAttributes,\n        showAttributeErrors\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctYXBpL3J1bGUtYXR0cmlidXRlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7O3VGQUd1RixHQUN2RiwrREFBK0Q7O0FBQy9EQSxPQUFPQyxPQUFPLEdBQUcsU0FBVUM7SUFDekIsTUFBTUMsS0FBS0MsbUJBQU9BLENBQUM7SUFDbkIsTUFBTUMsV0FBVztJQUNqQixJQUFJQyxRQUFRO0lBQ1osU0FBU0MsWUFBWUMsSUFBSTtRQUN2QixJQUFJQSxLQUFLQyxJQUFJLElBQUlELEtBQUtFLE1BQU0sSUFBSUYsS0FBS0csS0FBSyxJQUFJSCxLQUFLSSxNQUFNLEVBQUU7WUFDekQsT0FBTztRQUNUO1FBQ0EsT0FBT0osS0FBS0ssS0FBSztJQUNuQjtJQUNBLFNBQVNDLFlBQVlOLElBQUk7UUFDdkIsSUFBSUEsS0FBS0MsSUFBSSxJQUFJRCxLQUFLRSxNQUFNLElBQUlGLEtBQUtHLEtBQUssSUFBSUgsS0FBS0ksTUFBTSxFQUFFO1lBQ3pELE9BQU87UUFDVDtRQUNBLE9BQU87SUFDVDtJQUNBLFNBQVNHLFlBQVlDLEtBQUssRUFBRUMsS0FBSztRQUMvQixJQUFJQyxJQUFJO1FBQ1IsSUFBSUMsSUFBSTtRQUNSLElBQUlDLElBQUk7UUFDUiw0Q0FBNEMsR0FDNUMsSUFBS0YsSUFBSSxHQUFHQSxJQUFJRCxPQUFPQyxLQUFLLEVBQUc7WUFDN0IsSUFBSUYsS0FBSyxDQUFDRSxFQUFFLENBQUNSLE1BQU0sRUFBRTtnQkFDbkIsT0FBTztZQUNUO1FBQ0Y7UUFDQTsyREFDdUQsR0FDdkQsSUFBS1EsSUFBSSxHQUFHQSxJQUFJRCxPQUFPQyxLQUFLLEVBQUc7WUFDN0IsSUFBSUYsS0FBSyxDQUFDRSxFQUFFLENBQUNQLEtBQUssSUFBSSxDQUFDSyxLQUFLLENBQUNFLEVBQUUsQ0FBQ0csSUFBSSxFQUFFO2dCQUNwQyxJQUFLRixJQUFJRCxJQUFJLEdBQUdDLElBQUlGLE9BQU9FLEtBQUssRUFBRztvQkFDakMsSUFBSSxD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ckMsSUFBSSxDQUFDbkcsTUFBTXdFLGtCQUFrQixFQUFFO1lBQzdCLE1BQU0sSUFBSVYsTUFBTSxDQUFDLEVBQUUvRCxTQUFTLHlDQUF5QyxDQUFDO1FBQ3hFO1FBQ0EsSUFBSW9GLE1BQU07UUFDVixNQUFNaUIsU0FBUztRQUNmLElBQUlELE1BQU1FLFVBQVUsQ0FBQyxPQUFPLElBQUk7WUFDOUJsQixPQUFPO1lBQ1BBLE9BQU9pQjtZQUNQakIsT0FBT007WUFDUE4sT0FBT1UsS0FBSztRQUNkLE9BQU8sSUFBSU0sTUFBTUUsVUFBVSxDQUFDLE9BQU8sS0FBSztZQUN0Q2xCLE9BQU87WUFDUEEsT0FBT2lCO1lBQ1BqQixPQUFPTTtZQUNQTixPQUFPVSxLQUFLO1FBQ2QsT0FBTztZQUNMVixPQUFPO1lBQ1BBLE9BQU9pQjtZQUNQakIsT0FBT007WUFDUE4sT0FBT1U7UUFDVDtRQUNBLE9BQU9WO0lBQ1Q7SUFFQSwrQ0FBK0MsR0FDL0MsT0FBTztRQUFFWjtRQUFnQjJCO1FBQWdCUjtJQUFvQjtBQUMvRCIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9hcGctanMvc3JjL2FwZy1hcGkvcnVsZS1hdHRyaWJ1dGVzLmpzPzYyZmQiXSwic291cmNlc0NvbnRlbnQiOlsiLyogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgY29weXJpZ2h0OiBDb3B5cmlnaHQgKGMpIDIwMjEgTG93ZWxsIEQuIFRob21hcywgYWxsIHJpZ2h0cyByZXNlcnZlZFxuICogICAgIGxpY2Vuc2U6IEJTRC0yLUNsYXVzZSAoaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMi1DbGF1c2UpXG4gKiAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLy8gVGhpcyBtb2R1bGUgZG9lcyB0aGUgaGVhdnkgbGlmdGluZyBmb3IgYXR0cmlidXRlIGdlbmVyYXRpb24uXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiBleHBvcnRSdWxlQXR0cmlidXRlcygpIHtcbiAgY29uc3QgaWQgPSByZXF1aXJlKCcuLi9hcGctbGliL2lkZW50aWZpZXJzJyk7XG4gIGNvbnN0IHRoaXNGaWxlID0gJ3J1bGUtYXR0cmlidXRlcy5qcyc7XG4gIGxldCBzdGF0ZSA9IG51bGw7XG4gIGZ1bmN0aW9uIGlzRW1wdHlPbmx5KGF0dHIpIHtcbiAgICBpZiAoYXR0ci5sZWZ0IHx8IGF0dHIubmVzdGVkIHx8IGF0dHIucmlnaHQgfHwgYXR0ci5jeWNsaWMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGF0dHIuZW1wdHk7XG4gIH1cbiAgZnVuY3Rpb24gaXNSZWN1cnNpdmUoYXR0cikge1xuICAgIGlmIChhdHRyLmxlZnQgfHwgYXR0ci5uZXN0ZWQgfHwgYXR0ci5yaWdodCB8fCBhdHRyLmN5Y2xpYykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmdW5jdGlvbiBpc0NhdE5lc3RlZChhdHRycywgY291bnQpIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGogPSAwO1xuICAgIGxldCBrID0gMDtcbiAgICAvKiAxLiBpZiBhbnkgY2hpbGQgaXMgbmVzdGVkLCBDQVQgaXMgbmVzdGVkICovXG4gICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyBpICs9IDEpIHtcbiAgICAgIGlmIChhdHRyc1tpXS5uZXN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIC8qIDIuKSB0aGUgbGVmdC1tb3N0IHJpZ2h0IHJlY3Vyc2l2ZSBjaGlsZFxuICAgICAgICAgICAgICAgaXMgZm9sbG93ZWQgYnkgYXQgbGVhc3Qgb25lIG5vbi1lbXB0eSBjaGlsZCAqL1xuICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgaSArPSAxKSB7XG4gICAgICBpZiAoYXR0cnNbaV0ucmlnaHQgJiYgIWF0dHJzW2ldLmxlYWYpIHtcbiAgICAgICAgZm9yIChqID0gaSArIDE7IGogPCBjb3VudDsgaiArPSAxKSB7XG4gICAgICAgICAgaWYgKCFpc0VtcHR5T25seShhdHRyc1tqXSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvKiAzLikgdGhlIHJpZ2h0LW1vc3QgbGVmdCByZWN1cnNpdmUgY2hpbGRcbiAgICAgICAgICAgICAgIGlzIHByZWNlZGVkIGJ5IGF0IGxlYXN0IG9uZSBub24tZW1wdHkgY2hpbGQgKi9cbiAgICBmb3IgKGkgPSBjb3VudCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBpZiAoYXR0cnNbaV0ubGVmdCAmJiAhYXR0cnNbaV0ubGVhZikge1xuICAgICAgICBmb3IgKGogPSBpIC0gMTsgaiA+PSAwOyBqIC09IDEpIHtcbiAgICAgICAgICBpZiAoIWlzRW1wdHlPbmx5KGF0dHJzW2pdKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8qIDQuIHRoZXJlIGlzIGF0IGxlYXNlIG9uZSByZWN1cnNpdmUgY2hpbGQgYmV0d2VlblxuICAgICAgICAgICAgICB0aGUgbGVmdC1tb3N0IGFuZCByaWdodC1tb3N0IG5vbi1yZWN1cnNpdmUsIG5vbi1lbXB0eSBjaGlsZHJlbiAqL1xuICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgaSArPSAxKSB7XG4gICAgICBpZiAoIWF0dHJzW2ldLmVtcHR5ICYmICFpc1JlY3Vyc2l2ZShhdHRyc1tpXSkpIHtcbiAgICAgICAgZm9yIChqID0gaSArIDE7IGogPCBjb3VudDsgaiArPSAxKSB7XG4gICAgICAgICAgaWYgKGlzUmVjdXJzaXZlKGF0dHJzW2pdKSkge1xuICAgICAgICAgICAgZm9yIChrID0gaiArIDE7IGsgPCBjb3VudDsgayArPSAxKSB7XG4gICAgICAgICAgICAgIGlmICghYXR0cnNba10uZW1wdHkgJiYgIWlzUmVjdXJzaXZlKGF0dHJzW2tdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogbm9uZSBvZiB0aGUgYWJvdmUgKi9cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZnVuY3Rpb24gaXNDYXRDeWNsaWMoYXR0cnMsIGNvdW50KSB7XG4gICAgLyogaWYgYWxsIGNoaWxkcmVuIGFyZSBjeWNsaWMsIENBVCBpcyBjeWNsaWMgKi9cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpICs9IDEpIHtcbiAgICAgIGlmICghYXR0cnNbaV0uY3ljbGljKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gaXNDYXRMZWZ0KGF0dHJzLCBjb3VudCkge1xuICAgIC8qIGlmIHRoZSBsZWZ0LW1vc3Qgbm9uLWVtcHR5IGlzIGxlZnQsIENBVCBpcyBsZWZ0ICovXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSArPSAxKSB7XG4gICAgICBpZiAoYXR0cnNbaV0ubGVmdCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICghYXR0cnNbaV0uZW1wdHkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLyoga2VlcCBsb29raW5nICovXG4gICAgfVxuICAgIHJldHVybiBmYWxzZTsgLyogYWxsIGxlZnQtbW9zdCBhcmUgZW1wdHkgKi9cbiAgfVxuICBmdW5jdGlvbiBpc0NhdFJpZ2h0KGF0dHJzLCBjb3VudCkge1xuICAgIC8qIGlmIHRoZSByaWdodC1tb3N0IG5vbi1lbXB0eSBpcyByaWdodCwgQ0FUIGlzIHJpZ2h0ICovXG4gICAgZm9yIChsZXQgaSA9IGNvdW50IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgIGlmIChhdHRyc1tpXS5yaWdodCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICghYXR0cnNbaV0uZW1wdHkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLyoga2VlcCBsb29raW5nICovXG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmdW5jdGlvbiBpc0NhdEVtcHR5KGF0dHJzLCBjb3VudCkge1xuICAgIC8qIGlmIGFsbCBjaGlsZHJlbiBhcmUgZW1wdHksIENBVCBpcyBlbXB0eSAqL1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkgKz0gMSkge1xuICAgICAgaWYgKCFhdHRyc1tpXS5lbXB0eSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIGlzQ2F0RmluaXRlKGF0dHJzLCBjb3VudCkge1xuICAgIC8qIGlmIGFsbCBjaGlsZHJlbiBhcmUgZmluaXRlLCBDQVQgaXMgZmluaXRlICovXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSArPSAxKSB7XG4gICAgICBpZiAoIWF0dHJzW2ldLmZpbml0ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIGNhdChzdGF0ZUFyZywgb3Bjb2Rlcywgb3BJbmRleCwgaUF0dHIpIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgY29uc3Qgb3BDYXQgPSBvcGNvZGVzW29wSW5kZXhdO1xuICAgIGNvbnN0IGNvdW50ID0gb3BDYXQuY2hpbGRyZW4ubGVuZ3RoO1xuXG4gICAgLyogZ2VuZXJhdGUgYW4gZW1wdHkgYXJyYXkgb2YgY2hpbGQgYXR0cmlidXRlcyAqL1xuICAgIGNvbnN0IGNoaWxkQXR0cnMgPSBbXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgY291bnQ7IGkgKz0gMSkge1xuICAgICAgY2hpbGRBdHRycy5wdXNoKHN0YXRlQXJnLmF0dHJHZW4oKSk7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgaSArPSAxKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICAgIG9wRXZhbChzdGF0ZUFyZywgb3Bjb2Rlcywgb3BDYXQuY2hpbGRyZW5baV0sIGNoaWxkQXR0cnNbaV0pO1xuICAgIH1cbiAgICBpQXR0ci5sZWZ0ID0gaXNDYXRMZWZ0KGNoaWxkQXR0cnMsIGNvdW50KTtcbiAgICBpQXR0ci5yaWdodCA9IGlzQ2F0UmlnaHQoY2hpbGRBdHRycywgY291bnQpO1xuICAgIGlBdHRyLm5lc3RlZCA9IGlzQ2F0TmVzdGVkKGNoaWxkQXR0cnMsIGNvdW50KTtcbiAgICBpQXR0ci5lbXB0eSA9IGlzQ2F0RW1wdHkoY2hpbGRBdHRycywgY291bnQpO1xuICAgIGlBdHRyLmZpbml0ZSA9IGlzQ2F0RmluaXRlKGNoaWxkQXR0cnMsIGNvdW50KTtcbiAgICBpQXR0ci5jeWNsaWMgPSBpc0NhdEN5Y2xpYyhjaGlsZEF0dHJzLCBjb3VudCk7XG4gIH1cbiAgZnVuY3Rpb24gYWx0KHN0YXRlQXJnLCBvcGNvZGVzLCBvcEluZGV4LCBpQXR0cikge1xuICAgIGxldCBpID0gMDtcbiAgICBjb25zdCBvcEFsdCA9IG9wY29kZXNbb3BJbmRleF07XG4gICAgY29uc3QgY291bnQgPSBvcEFsdC5jaGlsZHJlbi5sZW5ndGg7XG5cbiAgICAvKiBnZW5lcmF0ZSBhbiBlbXB0eSBhcnJheSBvZiBjaGlsZCBhdHRyaWJ1dGVzICovXG4gICAgY29uc3QgY2hpbGRBdHRycyA9IFtdO1xuICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgaSArPSAxKSB7XG4gICAgICBjaGlsZEF0dHJzLnB1c2goc3RhdGVBcmcuYXR0ckdlbigpKTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyBpICs9IDEpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgb3BFdmFsKHN0YXRlQXJnLCBvcGNvZGVzLCBvcEFsdC5jaGlsZHJlbltpXSwgY2hpbGRBdHRyc1tpXSk7XG4gICAgfVxuXG4gICAgLyogaWYgYW55IGNoaWxkIGF0dHJpYnV0ZSBpcyB0cnVlLCBBTFQgaXMgdHJ1ZSAqL1xuICAgIGlBdHRyLmxlZnQgPSBmYWxzZTtcbiAgICBpQXR0ci5yaWdodCA9IGZhbHNlO1xuICAgIGlBdHRyLm5lc3RlZCA9IGZhbHNlO1xuICAgIGlBdHRyLmVtcHR5ID0gZmFsc2U7XG4gICAgaUF0dHIuZmluaXRlID0gZmFsc2U7XG4gICAgaUF0dHIuY3ljbGljID0gZmFsc2U7XG4gICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyBpICs9IDEpIHtcbiAgICAgIGlmIChjaGlsZEF0dHJzW2ldLmxlZnQpIHtcbiAgICAgICAgaUF0dHIubGVmdCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoY2hpbGRBdHRyc1tpXS5uZXN0ZWQpIHtcbiAgICAgICAgaUF0dHIubmVzdGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZEF0dHJzW2ldLnJpZ2h0KSB7XG4gICAgICAgIGlBdHRyLnJpZ2h0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZEF0dHJzW2ldLmVtcHR5KSB7XG4gICAgICAgIGlBdHRyLmVtcHR5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZEF0dHJzW2ldLmZpbml0ZSkge1xuICAgICAgICBpQXR0ci5maW5pdGUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGNoaWxkQXR0cnNbaV0uY3ljbGljKSB7XG4gICAgICAgIGlBdHRyLmN5Y2xpYyA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGJrcihzdGF0ZUFyZywgb3Bjb2Rlcywgb3BJbmRleCwgaUF0dHIpIHtcbiAgICBjb25zdCBvcEJrciA9IG9wY29kZXNbb3BJbmRleF07XG4gICAgaWYgKG9wQmtyLmluZGV4ID49IHN0YXRlQXJnLnJ1bGVDb3VudCkge1xuICAgICAgLyogdXNlIFVEVCB2YWx1ZXMgKi9cbiAgICAgIGlBdHRyLmVtcHR5ID0gc3RhdGVBcmcudWR0c1tvcEJrci5pbmRleCAtIHN0YXRlQXJnLnJ1bGVDb3VudF0uZW1wdHk7XG4gICAgICBpQXR0ci5maW5pdGUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiB1c2UgdGhlIGVtcHR5IGFuZCBmaW5pdGUgdmFsdWVzIGZyb20gdGhlIGJhY2sgcmVmZXJlbmNlZCBydWxlICovXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICAgIHJ1bGVBdHRyc0V2YWwoc3RhdGVBcmcsIG9wQmtyLmluZGV4LCBpQXR0cik7XG5cbiAgICAgIC8qIGhvd2V2ZXIsIHRoaXMgaXMgYSB0ZXJtaW5hbCBub2RlIGxpa2UgVExTICovXG4gICAgICBpQXR0ci5sZWZ0ID0gZmFsc2U7XG4gICAgICBpQXR0ci5uZXN0ZWQgPSBmYWxzZTtcbiAgICAgIGlBdHRyLnJpZ2h0ID0gZmFsc2U7XG4gICAgICBpQXR0ci5jeWNsaWMgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvcEV2YWwoc3RhdGVBcmcsIG9wY29kZXMsIG9wSW5kZXgsIGlBdHRyKSB7XG4gICAgc3RhdGVBcmcuYXR0ckluaXQoaUF0dHIpO1xuICAgIGNvbnN0IG9waSA9IG9wY29kZXNbb3BJbmRleF07XG4gICAgc3dpdGNoIChvcGkudHlwZSkge1xuICAgICAgY2FzZSBpZC5BTFQ6XG4gICAgICAgIGFsdChzdGF0ZUFyZywgb3Bjb2Rlcywgb3BJbmRleCwgaUF0dHIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuQ0FUOlxuICAgICAgICBjYXQoc3RhdGVBcmcsIG9wY29kZXMsIG9wSW5kZXgsIGlBdHRyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLlJFUDpcbiAgICAgICAgb3BFdmFsKHN0YXRlQXJnLCBvcGNvZGVzLCBvcEluZGV4ICsgMSwgaUF0dHIpO1xuICAgICAgICBpZiAob3BpLm1pbiA9PT0gMCkge1xuICAgICAgICAgIGlBdHRyLmVtcHR5ID0gdHJ1ZTtcbiAgICAgICAgICBpQXR0ci5maW5pdGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5STk06XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgICBydWxlQXR0cnNFdmFsKHN0YXRlQXJnLCBvcGNvZGVzW29wSW5kZXhdLmluZGV4LCBpQXR0cik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5CS1I6XG4gICAgICAgIGJrcihzdGF0ZUFyZywgb3Bjb2Rlcywgb3BJbmRleCwgaUF0dHIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuQU5EOlxuICAgICAgY2FzZSBpZC5OT1Q6XG4gICAgICBjYXNlIGlkLkJLQTpcbiAgICAgIGNhc2UgaWQuQktOOlxuICAgICAgICBvcEV2YWwoc3RhdGVBcmcsIG9wY29kZXMsIG9wSW5kZXggKyAxLCBpQXR0cik7XG4gICAgICAgIGlBdHRyLmVtcHR5ID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLlRMUzpcbiAgICAgICAgaUF0dHIuZW1wdHkgPSAhb3Bjb2Rlc1tvcEluZGV4XS5zdHJpbmcubGVuZ3RoO1xuICAgICAgICBpQXR0ci5maW5pdGUgPSB0cnVlO1xuICAgICAgICBpQXR0ci5jeWNsaWMgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLlRCUzpcbiAgICAgIGNhc2UgaWQuVFJHOlxuICAgICAgICBpQXR0ci5lbXB0eSA9IGZhbHNlO1xuICAgICAgICBpQXR0ci5maW5pdGUgPSB0cnVlO1xuICAgICAgICBpQXR0ci5jeWNsaWMgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLlVEVDpcbiAgICAgICAgaUF0dHIuZW1wdHkgPSBvcGkuZW1wdHk7XG4gICAgICAgIGlBdHRyLmZpbml0ZSA9IHRydWU7XG4gICAgICAgIGlBdHRyLmN5Y2xpYyA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuQUJHOlxuICAgICAgY2FzZSBpZC5BRU46XG4gICAgICAgIGlBdHRyLmVtcHR5ID0gdHJ1ZTtcbiAgICAgICAgaUF0dHIuZmluaXRlID0gdHJ1ZTtcbiAgICAgICAgaUF0dHIuY3ljbGljID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bmtub3duIG9wY29kZSB0eXBlOiAke29waX1gKTtcbiAgICB9XG4gIH1cbiAgLy8gVGhlIG1haW4gbG9naWMgZm9yIGhhbmRsaW5nIHJ1bGVzIHRoYXQ6XG4gIC8vICAtIGhhdmUgYWxyZWFkeSBiZSBldmFsdWF0ZWRcbiAgLy8gIC0gaGF2ZSBub3QgYmVlbiBldmFsdWF0ZWQgYW5kIGlzIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9uIHRoaXMgYnJhbmNoXG4gIC8vICAtIHNlY29uZCBvY2N1cnJlbmNlIG9uIHRoaXMgYnJhbmNoIGZvciB0aGUgc3RhcnQgcnVsZVxuICAvLyAgLSBzZWNvbmQgb2NjdXJyZW5jZSBvbiB0aGlzIGJyYW5jaCBmb3Igbm9uLXN0YXJ0IHJ1bGVzXG4gIGZ1bmN0aW9uIHJ1bGVBdHRyc0V2YWwoc3RhdGVBcmcsIHJ1bGVJbmRleCwgaUF0dHIpIHtcbiAgICBjb25zdCBhdHRyaSA9IHN0YXRlQXJnLmF0dHJzV29ya2luZ1tydWxlSW5kZXhdO1xuICAgIGlmIChhdHRyaS5pc0NvbXBsZXRlKSB7XG4gICAgICAvKiBqdXN0IHVzZSB0aGUgY29tcGxldGVkIHZhbHVlcyAqL1xuICAgICAgc3RhdGVBcmcuYXR0ckNvcHkoaUF0dHIsIGF0dHJpKTtcbiAgICB9IGVsc2UgaWYgKCFhdHRyaS5pc09wZW4pIHtcbiAgICAgIC8qIG9wZW4gdGhlIHJ1bGUgYW5kIHRyYXZlcnNlIGl0ICovXG4gICAgICBhdHRyaS5pc09wZW4gPSB0cnVlO1xuICAgICAgb3BFdmFsKHN0YXRlQXJnLCBhdHRyaS5ydWxlLm9wY29kZXMsIDAsIGlBdHRyKTtcbiAgICAgIC8qIGNvbXBsZXRlIHRoaXMgcnVsZSdzIGF0dHJpYnV0ZXMgKi9cbiAgICAgIGF0dHJpLmxlZnQgPSBpQXR0ci5sZWZ0O1xuICAgICAgYXR0cmkucmlnaHQgPSBpQXR0ci5yaWdodDtcbiAgICAgIGF0dHJpLm5lc3RlZCA9IGlBdHRyLm5lc3RlZDtcbiAgICAgIGF0dHJpLmVtcHR5ID0gaUF0dHIuZW1wdHk7XG4gICAgICBhdHRyaS5maW5pdGUgPSBpQXR0ci5maW5pdGU7XG4gICAgICBhdHRyaS5jeWNsaWMgPSBpQXR0ci5jeWNsaWM7XG4gICAgICBhdHRyaS5sZWFmID0gZmFsc2U7XG4gICAgICBhdHRyaS5pc09wZW4gPSBmYWxzZTtcbiAgICAgIGF0dHJpLmlzQ29tcGxldGUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAocnVsZUluZGV4ID09PSBzdGF0ZUFyZy5zdGFydFJ1bGUpIHtcbiAgICAgIC8qIHVzZSByZWN1cnNpdmUgbGVhZiB2YWx1ZXMgKi9cbiAgICAgIGlmIChydWxlSW5kZXggPT09IHN0YXRlQXJnLnN0YXJ0UnVsZSkge1xuICAgICAgICBpQXR0ci5sZWZ0ID0gdHJ1ZTtcbiAgICAgICAgaUF0dHIucmlnaHQgPSB0cnVlO1xuICAgICAgICBpQXR0ci5jeWNsaWMgPSB0cnVlO1xuICAgICAgICBpQXR0ci5sZWFmID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLyogbm9uLXN0YXJ0IHJ1bGUgdGVybWluYWwgbGVhZiAqL1xuICAgICAgaUF0dHIuZmluaXRlID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgLy8gVGhlIG1haW4gZHJpdmVyIGZvciB0aGUgYXR0cmlidXRlIGdlbmVyYXRpb24uXG4gIGNvbnN0IHJ1bGVBdHRyaWJ1dGVzID0gKHN0YXRlQXJnKSA9PiB7XG4gICAgc3RhdGUgPSBzdGF0ZUFyZztcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGogPSAwO1xuICAgIGNvbnN0IGlBdHRyID0gc3RhdGUuYXR0ckdlbigpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBzdGF0ZS5ydWxlQ291bnQ7IGkgKz0gMSkge1xuICAgICAgLyogaW5pdGlhbGl6ZSB3b3JraW5nIGF0dHJpYnV0ZXMgKi9cbiAgICAgIGZvciAoaiA9IDA7IGogPCBzdGF0ZS5ydWxlQ291bnQ7IGogKz0gMSkge1xuICAgICAgICBzdGF0ZS5hdHRySW5pdChzdGF0ZS5hdHRyc1dvcmtpbmdbal0pO1xuICAgICAgfVxuICAgICAgc3RhdGUuc3RhcnRSdWxlID0gaTtcbiAgICAgIHJ1bGVBdHRyc0V2YWwoc3RhdGUsIGksIGlBdHRyKTtcblxuICAgICAgLyogc2F2ZSBvZmYgdGhlIHdvcmtpbmcgYXR0cmlidXRlcyBmb3IgdGhpcyBydWxlICovXG4gICAgICBzdGF0ZS5hdHRyQ29weShzdGF0ZS5hdHRyc1tpXSwgc3RhdGUuYXR0cnNXb3JraW5nW2ldKTtcbiAgICB9XG4gICAgc3RhdGUuYXR0cmlidXRlc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICBsZXQgYXR0cmkgPSBudWxsO1xuICAgIGZvciAoaSA9IDA7IGkgPCBzdGF0ZS5ydWxlQ291bnQ7IGkgKz0gMSkge1xuICAgICAgYXR0cmkgPSBzdGF0ZS5hdHRyc1tpXTtcbiAgICAgIGlmIChhdHRyaS5sZWZ0IHx8ICFhdHRyaS5maW5pdGUgfHwgYXR0cmkuY3ljbGljKSB7XG4gICAgICAgIGNvbnN0IHRlbXAgPSBzdGF0ZS5hdHRyR2VuKGF0dHJpLnJ1bGUpO1xuICAgICAgICBzdGF0ZS5hdHRyQ29weSh0ZW1wLCBhdHRyaSk7XG4gICAgICAgIHN0YXRlLmF0dHJzRXJyb3JzLnB1c2godGVtcCk7XG4gICAgICAgIHN0YXRlLmF0dHJzRXJyb3JDb3VudCArPSAxO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgdHJ1dGggPSAodmFsKSA9PiAodmFsID8gJ3QnIDogJ2YnKTtcbiAgY29uc3QgdEVycm9yID0gKHZhbCkgPT4gKHZhbCA/ICdlJyA6ICdmJyk7XG4gIGNvbnN0IGZFcnJvciA9ICh2YWwpID0+ICh2YWwgPyAndCcgOiAnZScpO1xuICBjb25zdCBzaG93QXR0ciA9IChzZXEsIGluZGV4LCBhdHRyLCBkZXApID0+IHtcbiAgICBsZXQgc3RyID0gYCR7c2VxfToke2luZGV4fTpgO1xuICAgIHN0ciArPSBgJHt0RXJyb3IoYXR0ci5sZWZ0KX0gYDtcbiAgICBzdHIgKz0gYCR7dHJ1dGgoYXR0ci5uZXN0ZWQpfSBgO1xuICAgIHN0ciArPSBgJHt0cnV0aChhdHRyLnJpZ2h0KX0gYDtcbiAgICBzdHIgKz0gYCR7dEVycm9yKGF0dHIuY3ljbGljKX0gYDtcbiAgICBzdHIgKz0gYCR7ZkVycm9yKGF0dHIuZmluaXRlKX0gYDtcbiAgICBzdHIgKz0gYCR7dHJ1dGgoYXR0ci5lbXB0eSl9OmA7XG4gICAgc3RyICs9IGAke3N0YXRlLnR5cGVUb1N0cmluZyhkZXAucmVjdXJzaXZlVHlwZSl9OmA7XG4gICAgc3RyICs9IGRlcC5yZWN1cnNpdmVUeXBlID09PSBpZC5BVFRSX01SID8gZGVwLmdyb3VwTnVtYmVyIDogJy0nO1xuICAgIHN0ciArPSBgOiR7YXR0ci5ydWxlLm5hbWV9XFxuYDtcbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIGNvbnN0IHNob3dMZWdlbmQgPSAoKSA9PiB7XG4gICAgbGV0IHN0ciA9ICdMRUdFTkQgLSB0PXRydWUsIGY9ZmFsc2UsIGU9ZXJyb3JcXG4nO1xuICAgIHN0ciArPSAnc2VxdWVuY2U6cnVsZSBpbmRleDpsZWZ0IG5lc3RlZCByaWdodCBjeWNsaWMgZmluaXRlIGVtcHR5OnR5cGU6Z3JvdXAgbnVtYmVyOnJ1bGUgbmFtZVxcbic7XG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcbiAgY29uc3Qgc2hvd0F0dHJpYnV0ZUVycm9ycyA9ICgpID0+IHtcbiAgICBsZXQgYXR0cmkgPSBudWxsO1xuICAgIGxldCBkZXBpID0gbnVsbDtcbiAgICBsZXQgc3RyID0gJyc7XG4gICAgc3RyICs9ICdSVUxFIEFUVFJJQlVURVMgV0lUSCBFUlJPUlNcXG4nO1xuICAgIHN0ciArPSBzaG93TGVnZW5kKCk7XG4gICAgaWYgKHN0YXRlLmF0dHJzRXJyb3JDb3VudCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGF0ZS5hdHRyc0Vycm9yQ291bnQ7IGkgKz0gMSkge1xuICAgICAgICBhdHRyaSA9IHN0YXRlLmF0dHJzRXJyb3JzW2ldO1xuICAgICAgICBkZXBpID0gc3RhdGUucnVsZURlcHNbYXR0cmkucnVsZS5pbmRleF07XG4gICAgICAgIHN0ciArPSBzaG93QXR0cihpLCBhdHRyaS5ydWxlLmluZGV4LCBhdHRyaSwgZGVwaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSAnPG5vbmU+XFxuJztcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICBjb25zdCBzaG93ID0gKHR5cGUpID0+IHtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGlpID0gMDtcbiAgICBsZXQgYXR0cmkgPSBudWxsO1xuICAgIGxldCBkZXBpID0gbnVsbDtcbiAgICBsZXQgc3RyID0gJyc7XG4gICAgbGV0IHsgcnVsZUluZGV4ZXMgfSA9IHN0YXRlO1xuICAgIC8vIGxldCB1ZHRJbmRleGVzID0gc3RhdGUudWR0SW5kZXhlcztcbiAgICBpZiAodHlwZSA9PT0gOTcpIHtcbiAgICAgIHJ1bGVJbmRleGVzID0gc3RhdGUucnVsZUFscGhhSW5kZXhlcztcbiAgICAgIC8vIHVkdEluZGV4ZXMgPSBzdGF0ZS51ZHRBbHBoYUluZGV4ZXM7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAxMTYpIHtcbiAgICAgIHJ1bGVJbmRleGVzID0gc3RhdGUucnVsZVR5cGVJbmRleGVzO1xuICAgICAgLy8gdWR0SW5kZXhlcyA9IHN0YXRlLnVkdEFscGhhSW5kZXhlcztcbiAgICB9XG4gICAgLyogc2hvdyBhbGwgYXR0cmlidXRlcyAqL1xuICAgIGZvciAoaSA9IDA7IGkgPCBzdGF0ZS5ydWxlQ291bnQ7IGkgKz0gMSkge1xuICAgICAgaWkgPSBydWxlSW5kZXhlc1tpXTtcbiAgICAgIGF0dHJpID0gc3RhdGUuYXR0cnNbaWldO1xuICAgICAgZGVwaSA9IHN0YXRlLnJ1bGVEZXBzW2lpXTtcbiAgICAgIHN0ciArPSBzaG93QXR0cihpLCBpaSwgYXR0cmksIGRlcGkpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIC8vIERpc3BsYXkgdGhlIHJ1bGUgYXR0cmlidXRlcy5cbiAgLy8gLSBvcmRlclxuICAvLyAgICAgIC0gXCJpbmRleFwiIG9yIFwiaVwiLCBpbmRleCBvcmRlciAoZGVmYXVsdClcbiAgLy8gICAgICAtIFwiYWxwaGFcIiBvciBcImFcIiwgYWxwaGFiZXRpY2FsIG9yZGVyXG4gIC8vICAgICAgLSBcInR5cGVcIiBvciBcInRcIiwgb3JkZXJlZCBieSB0eXBlIChhbHBoYWJldGljYWwgd2l0aGluIGVhY2ggdHlwZS9ncm91cClcbiAgLy8gICAgICAtIG5vbmUgb2YgYWJvdmUsIGluZGV4IG9yZGVyIChkZWZhdWx0KVxuICBjb25zdCBzaG93QXR0cmlidXRlcyA9IChvcmRlciA9ICdpbmRleCcpID0+IHtcbiAgICBpZiAoIXN0YXRlLmF0dHJpYnV0ZXNDb21wbGV0ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXNGaWxlfTpzaG93QXR0cmlidXRlczogYXR0cmlidXRlcyBub3QgYXZhaWxhYmxlYCk7XG4gICAgfVxuICAgIGxldCBzdHIgPSAnJztcbiAgICBjb25zdCBsZWFkZXIgPSAnUlVMRSBBVFRSSUJVVEVTXFxuJztcbiAgICBpZiAob3JkZXIuY2hhckNvZGVBdCgwKSA9PT0gOTcpIHtcbiAgICAgIHN0ciArPSAnYWxwaGFiZXRpY2FsIGJ5IHJ1bGUgbmFtZVxcbic7XG4gICAgICBzdHIgKz0gbGVhZGVyO1xuICAgICAgc3RyICs9IHNob3dMZWdlbmQoKTtcbiAgICAgIHN0ciArPSBzaG93KDk3KTtcbiAgICB9IGVsc2UgaWYgKG9yZGVyLmNoYXJDb2RlQXQoMCkgPT09IDExNikge1xuICAgICAgc3RyICs9ICdvcmRlcmVkIGJ5IHJ1bGUgdHlwZVxcbic7XG4gICAgICBzdHIgKz0gbGVhZGVyO1xuICAgICAgc3RyICs9IHNob3dMZWdlbmQoKTtcbiAgICAgIHN0ciArPSBzaG93KDExNik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSAnb3JkZXJlZCBieSBydWxlIGluZGV4XFxuJztcbiAgICAgIHN0ciArPSBsZWFkZXI7XG4gICAgICBzdHIgKz0gc2hvd0xlZ2VuZCgpO1xuICAgICAgc3RyICs9IHNob3coKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICAvKiBEZXN0cnVjdHVyaW5nIGFzc2lnbm1lbnQgLSBzZWUgTUROIFdlYiBEb2NzICovXG4gIHJldHVybiB7IHJ1bGVBdHRyaWJ1dGVzLCBzaG93QXR0cmlidXRlcywgc2hvd0F0dHJpYnV0ZUVycm9ycyB9O1xufSkoKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZXhwb3J0UnVsZUF0dHJpYnV0ZXMiLCJpZCIsInJlcXVpcmUiLCJ0aGlzRmlsZSIsInN0YXRlIiwiaXNFbXB0eU9ubHkiLCJhdHRyIiwibGVmdCIsIm5lc3RlZCIsInJpZ2h0IiwiY3ljbGljIiwiZW1wdHkiLCJpc1JlY3Vyc2l2ZSIsImlzQ2F0TmVzdGVkIiwiYXR0cnMiLCJjb3VudCIsImkiLCJqIiwiayIsImxlYWYiLCJpc0NhdEN5Y2xpYyIsImlzQ2F0TGVmdCIsImlzQ2F0UmlnaHQiLCJpc0NhdEVtcHR5IiwiaXNDYXRGaW5pdGUiLCJmaW5pdGUiLCJjYXQiLCJzdGF0ZUFyZyIsIm9wY29kZXMiLCJvcEluZGV4IiwiaUF0dHIiLCJvcENhdCIsImNoaWxkcmVuIiwibGVuZ3RoIiwiY2hpbGRBdHRycyIsInB1c2giLCJhdHRyR2VuIiwib3BFdmFsIiwiYWx0Iiwib3BBbHQiLCJia3IiLCJvcEJrciIsImluZGV4IiwicnVsZUNvdW50IiwidWR0cyIsInJ1bGVBdHRyc0V2YWwiLCJhdHRySW5pdCIsIm9waSIsInR5cGUiLCJBTFQiLCJDQVQiLCJSRVAiLCJtaW4iLCJSTk0iLCJCS1IiLCJBTkQiLCJOT1QiLCJCS0EiLCJCS04iLCJUTFMiLCJzdHJpbmciLCJUQlMiLCJUUkciLCJVRFQiLCJBQkciLCJBRU4iLCJFcnJvciIsInJ1bGVJbmRleCIsImF0dHJpIiwiYXR0cnNXb3JraW5nIiwiaXNDb21wbGV0ZSIsImF0dHJDb3B5IiwiaXNPcGVuIiwicnVsZSIsInN0YXJ0UnVsZSIsInJ1bGVBdHRyaWJ1dGVzIiwiYXR0cmlidXRlc0NvbXBsZXRlIiwidGVtcCIsImF0dHJzRXJyb3JzIiwiYXR0cnNFcnJvckNvdW50IiwidHJ1dGgiLCJ2YWwiLCJ0RXJyb3IiLCJmRXJyb3IiLCJzaG93QXR0ciIsInNlcSIsImRlcCIsInN0ciIsInR5cGVUb1N0cmluZyIsInJlY3Vyc2l2ZVR5cGUiLCJBVFRSX01SIiwiZ3JvdXBOdW1iZXIiLCJuYW1lIiwic2hvd0xlZ2VuZCIsInNob3dBdHRyaWJ1dGVFcnJvcnMiLCJkZXBpIiwicnVsZURlcHMiLCJzaG93IiwiaWkiLCJydWxlSW5kZXhlcyIsInJ1bGVBbHBoYUluZGV4ZXMiLCJydWxlVHlwZUluZGV4ZXMiLCJzaG93QXR0cmlidXRlcyIsIm9yZGVyIiwibGVhZGVyIiwiY2hhckNvZGVBdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-api/rule-attributes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-api/rule-dependencies.js":
/*!**************************************************************!*\
  !*** ./node_modules/apg-js/src/apg-api/rule-dependencies.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // Determine rule dependencies and types.\n// For each rule, determine which other rules it refers to\n// and which of the other rules refer back to it.\n//\n// Rule types are:\n//  - non-recursive - the rule never refers to itself, even indirectly\n//  - recursive - the rule refers to itself, possibly indirectly\n//  - mutually-recursive - belongs to a group of two or more rules, each of which refers to every other rule in the group, including itself.\n\nmodule.exports = (()=>{\n    const id = __webpack_require__(/*! ../apg-lib/identifiers */ \"(rsc)/./node_modules/apg-js/src/apg-lib/identifiers.js\");\n    let state = null; /* keep a global reference to the state for the show functions */ \n    /* scan the opcodes of the indexed rule and discover which rules it references and which rule refer back to it */ const scan = (ruleCount, ruleDeps, index, isScanned)=>{\n        let i = 0;\n        let j = 0;\n        const rdi = ruleDeps[index];\n        isScanned[index] = true;\n        const op = rdi.rule.opcodes;\n        for(i = 0; i < op.length; i += 1){\n            const opi = op[i];\n            if (opi.type === id.RNM) {\n                rdi.refersTo[opi.index] = true;\n                if (!isScanned[opi.index]) {\n                    scan(ruleCount, ruleDeps, opi.index, isScanned);\n                }\n                for(j = 0; j < ruleCount; j += 1){\n                    if (ruleDeps[opi.index].refersTo[j]) {\n                        rdi.refersTo[j] = true;\n                    }\n                }\n            } else if (opi.type === id.UDT) {\n                rdi.refersToUdt[opi.index] = true;\n            } else if (opi.type === id.BKR) {\n                if (opi.index < ruleCount) {\n                    rdi.refersTo[opi.index] = true;\n                    if (!isScanned[opi.index]) {\n                        scan(ruleCount, ruleDeps, opi.index, isScanned);\n                    }\n                } else {\n                    rdi.refersToUdt[ruleCount - opi.index] = true;\n                }\n            }\n        }\n    };\n    // Determine the rule dependencies, types and mutually recursive groups.\n    const ruleDependencies = (stateArg)=>{\n        state = stateArg; /* make it global */ \n        let i = 0;\n        let j = 0;\n        let groupCount = 0;\n        let rdi = null;\n        let rdj = null;\n        let newGroup = false;\n        state.dependenciesComplete = false;\n        /* make a working array of rule scanned markers */ const isScanned = state.falseArray(state.ruleCount);\n        /* discover the rule dependencies */ for(i = 0; i < state.ruleCount; i += 1){\n            state.falsifyArray(isScanned);\n            scan(state.ruleCount, state.ruleDeps, i, isScanned);\n        }\n        /* discover all rules referencing each rule */ for(i = 0; i < state.ruleCount; i += 1){\n            for(j = 0; j < state.ruleCount; j += 1){\n                if (i !== j) {\n                    if (state.ruleDeps[j].refersTo[i]) {\n                        state.ruleDeps[i].referencedBy[j] = true;\n                    }\n                }\n            }\n        }\n        /* find the non-recursive and recursive types */ for(i = 0; i < state.ruleCount; i += 1){\n            state.ruleDeps[i].recursiveType = id.ATTR_N;\n            if (state.ruleDeps[i].refersTo[i]) {\n                state.ruleDeps[i].recursiveType = id.ATTR_R;\n            }\n        }\n        /* find the mutually-recursive groups, if any */ groupCount = -1;\n        for(i = 0; i < state.ruleCount; i += 1){\n            rdi = state.ruleDeps[i];\n            if (rdi.recursiveType === id.ATTR_R) {\n                newGroup = true;\n                for(j = 0; j < state.ruleCount; j += 1){\n                    if (i !== j) {\n                        rdj = state.ruleDeps[j];\n                        if (rdj.recursiveType === id.ATTR_R) {\n                            if (rdi.refersTo[j] && rdj.refersTo[i]) {\n                                if (newGroup) {\n                                    groupCount += 1;\n                                    rdi.recursiveType = id.ATTR_MR;\n                                    rdi.groupNumber = groupCount;\n                                    newGroup = false;\n                                }\n                                rdj.recursiveType = id.ATTR_MR;\n                                rdj.groupNumber = groupCount;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        state.isMutuallyRecursive = groupCount > -1;\n        /* sort the rules/UDTS */ state.ruleAlphaIndexes.sort(state.compRulesAlpha);\n        state.ruleTypeIndexes.sort(state.compRulesAlpha);\n        state.ruleTypeIndexes.sort(state.compRulesType);\n        if (state.isMutuallyRecursive) {\n            state.ruleTypeIndexes.sort(state.compRulesGroup);\n        }\n        if (state.udtCount) {\n            state.udtAlphaIndexes.sort(state.compUdtsAlpha);\n        }\n        state.dependenciesComplete = true;\n    };\n    const show = (type = null)=>{\n        let i = 0;\n        let j = 0;\n        let count = 0;\n        let startSeg = 0;\n        const maxRule = state.ruleCount - 1;\n        const maxUdt = state.udtCount - 1;\n        const lineLength = 100;\n        let str = \"\";\n        let pre = \"\";\n        const toArrow = \"=> \";\n        const byArrow = \"<= \";\n        let first = false;\n        let rdi = null;\n        let { ruleIndexes } = state;\n        let { udtIndexes } = state;\n        if (type === 97) {\n            ruleIndexes = state.ruleAlphaIndexes;\n            udtIndexes = state.udtAlphaIndexes;\n        } else if (type === 116) {\n            ruleIndexes = state.ruleTypeIndexes;\n            udtIndexes = state.udtAlphaIndexes;\n        }\n        for(i = 0; i < state.ruleCount; i += 1){\n            rdi = state.ruleDeps[ruleIndexes[i]];\n            pre = `${ruleIndexes[i]}:${state.typeToString(rdi.recursiveType)}:`;\n            if (state.isMutuallyRecursive) {\n                pre += rdi.groupNumber > -1 ? rdi.groupNumber : \"-\";\n                pre += \":\";\n            }\n            pre += \" \";\n            str += `${pre + state.rules[ruleIndexes[i]].name}\\n`;\n            first = true;\n            count = 0;\n            startSeg = str.length;\n            str += pre;\n            for(j = 0; j < state.ruleCount; j += 1){\n                if (rdi.refersTo[ruleIndexes[j]]) {\n                    if (first) {\n                        str += toArrow;\n                        first = false;\n                        str += state.ruleDeps[ruleIndexes[j]].rule.name;\n                    } else {\n                        str += `, ${state.ruleDeps[ruleIndexes[j]].rule.name}`;\n                    }\n                    count += 1;\n                }\n                if (str.length - startSeg > lineLength && j !== maxRule) {\n                    str += `\\n${pre}${toArrow}`;\n                    startSeg = str.length;\n                }\n            }\n            if (state.udtCount) {\n                for(j = 0; j < state.udtCount; j += 1){\n                    if (rdi.refersToUdt[udtIndexes[j]]) {\n                        if (first) {\n                            str += toArrow;\n                            first = false;\n                            str += state.udts[udtIndexes[j]].name;\n                        } else {\n                            str += `, ${state.udts[udtIndexes[j]].name}`;\n                        }\n                        count += 1;\n                    }\n                    if (str.length - startSeg > lineLength && j !== maxUdt) {\n                        str += `\\n${pre}${toArrow}`;\n                        startSeg = str.length;\n                    }\n                }\n            }\n            if (count === 0) {\n                str += \"=> <none>\\n\";\n            }\n            if (first === false) {\n                str += \"\\n\";\n            }\n            first = true;\n            count = 0;\n            startSeg = str.length;\n            str += pre;\n            for(j = 0; j < state.ruleCount; j += 1){\n                if (rdi.referencedBy[ruleIndexes[j]]) {\n                    if (first) {\n                        str += byArrow;\n                        first = false;\n                        str += state.ruleDeps[ruleIndexes[j]].rule.name;\n                    } else {\n                        str += `, ${state.ruleDeps[ruleIndexes[j]].rule.name}`;\n                    }\n                    count += 1;\n                }\n                if (str.length - startSeg > lineLength && j !== maxRule) {\n                    str += `\\n${pre}${toArrow}`;\n                    startSeg = str.length;\n                }\n            }\n            if (count === 0) {\n                str += \"<= <none>\\n\";\n            }\n            if (first === false) {\n                str += \"\\n\";\n            }\n            str += \"\\n\";\n        }\n        return str;\n    };\n    // Display the rule dependencies.\n    // - order\n    //      - \"index\" or \"i\", index order (default)\n    //      - \"alpha\" or \"a\", alphabetical order\n    //      - \"type\" or \"t\", ordered by type (alphabetical within each type/group)\n    //      - none of above, index order (default)\n    const showRuleDependencies = (order = \"index\")=>{\n        let str = \"RULE DEPENDENCIES(index:type:[group number:])\\n\";\n        str += \"=> refers to rule names\\n\";\n        str += \"<= referenced by rule names\\n\";\n        if (!state.dependenciesComplete) {\n            return str;\n        }\n        if (order.charCodeAt(0) === 97) {\n            str += \"alphabetical by rule name\\n\";\n            str += show(97);\n        } else if (order.charCodeAt(0) === 116) {\n            str += \"ordered by rule type\\n\";\n            str += show(116);\n        } else {\n            str += \"ordered by rule index\\n\";\n            str += show(null);\n        }\n        return str;\n    };\n    /* Destructuring assignment - see MDN Web Docs */ return {\n        ruleDependencies,\n        showRuleDependencies\n    };\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-api/rule-dependencies.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-api/sabnf-grammar.js":
/*!**********************************************************!*\
  !*** ./node_modules/apg-js/src/apg-api/sabnf-grammar.js ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
eval("// copyright: Copyright (c) 2023 Lowell D. Thomas, all rights reserved<br>\n//   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>\n//\n// Generated by apg-js, Version 4.2.1 [apg-js](https://github.com/ldthomas/apg-js)\n\nmodule.exports = function grammar() {\n    // ```\n    // SUMMARY\n    //      rules = 95\n    //       udts = 0\n    //    opcodes = 372\n    //        ---   ABNF original opcodes\n    //        ALT = 43\n    //        CAT = 48\n    //        REP = 34\n    //        RNM = 149\n    //        TLS = 2\n    //        TBS = 61\n    //        TRG = 35\n    //        ---   SABNF superset opcodes\n    //        UDT = 0\n    //        AND = 0\n    //        NOT = 0\n    //        BKA = 0\n    //        BKN = 0\n    //        BKR = 0\n    //        ABG = 0\n    //        AEN = 0\n    // characters = [9 - 126]\n    // ```\n    /* OBJECT IDENTIFIER (for internal parser use) */ this.grammarObject = \"grammarObject\";\n    /* RULES */ this.rules = [];\n    this.rules[0] = {\n        name: \"File\",\n        lower: \"file\",\n        index: 0,\n        isBkr: false\n    };\n    this.rules[1] = {\n        name: \"BlankLine\",\n        lower: \"blankline\",\n        index: 1,\n        isBkr: false\n    };\n    this.rules[2] = {\n        name: \"Rule\",\n        lower: \"rule\",\n        index: 2,\n        isBkr: false\n    };\n    this.rules[3] = {\n        name: \"RuleLookup\",\n        lower: \"rulelookup\",\n        index: 3,\n        isBkr: false\n    };\n    this.rules[4] = {\n        name: \"RuleNameTest\",\n        lower: \"rulenametest\",\n        index: 4,\n        isBkr: false\n    };\n    this.rules[5] = {\n        name: \"RuleName\",\n        lower: \"rulename\",\n        index: 5,\n        isBkr: false\n    };\n    this.rules[6] = {\n        name: \"RuleNameError\",\n        lower: \"rulenameerror\",\n        index: 6,\n        isBkr: false\n    };\n    this.rules[7] = {\n        name: \"DefinedAsTest\",\n        lower: \"definedastest\",\n        index: 7,\n        isBkr: false\n    };\n    this.rules[8] = {\n        name: \"DefinedAsError\",\n        lower: \"definedaserror\",\n        index: 8,\n        isBkr: false\n    };\n    this.rules[9] = {\n        name: \"DefinedAs\",\n        lower: \"definedas\",\n        index: 9,\n        isBkr: false\n    };\n    this.rules[10] = {\n        name: \"Defined\",\n        lower: \"defined\",\n        index: 10,\n        isBkr: false\n    };\n    this.rules[11] = {\n        name: \"IncAlt\",\n        lower: \"incalt\",\n        index: 11,\n        isBkr: false\n    };\n    this.rules[12] = {\n        name: \"RuleError\",\n        lower: \"ruleerror\",\n        index: 12,\n        isBkr: false\n    };\n    this.rules[13] = {\n        name: \"LineEndError\",\n        lower: \"lineenderror\",\n        index: 13,\n        isBkr: false\n    };\n    this.rules[14] = {\n        name: \"Alternation\",\n        lower: \"alternation\",\n        index: 14,\n        isBkr: false\n    };\n    this.rules[15] = {\n        name: \"Concatenation\",\n        lower: \"concatenation\",\n        index: 15,\n        isBkr: false\n    };\n    this.rules[16] = {\n        name: \"Repetition\",\n        lower: \"repetition\",\n        index: 16,\n        isBkr: false\n    };\n    this.rules[17] = {\n        name: \"Modifier\",\n        lower: \"modifier\",\n        index: 17,\n        isBkr: false\n    };\n    this.rules[18] = {\n        name: \"Predicate\",\n        lower: \"predicate\",\n        index: 18,\n        isBkr: false\n    };\n    this.rules[19] = {\n        name: \"BasicElement\",\n        lower: \"basicelement\",\n        index: 19,\n        isBkr: false\n    };\n    this.rules[20] = {\n        name: \"BasicElementErr\",\n        lower: \"basicelementerr\",\n        index: 20,\n        isBkr: false\n    };\n    this.rules[21] = {\n        name: \"Group\",\n        lower: \"group\",\n        index: 21,\n        isBkr: false\n    };\n    this.rules[22] = {\n        name: \"GroupError\",\n        lower: \"grouperror\",\n        index: 22,\n        isBkr: false\n    };\n    this.rules[23] = {\n        name: \"GroupOpen\",\n        lower: \"groupopen\",\n        index: 23,\n        isBkr: false\n    };\n    this.rules[24] = {\n        name: \"GroupClose\",\n        lower: \"groupclose\",\n        index: 24,\n        isBkr: false\n    };\n    this.rules[25] = {\n        name: \"Option\",\n        lower: \"option\",\n        index: 25,\n        isBkr: false\n    };\n    this.rules[26] = {\n        name: \"OptionError\",\n        lower: \"optionerror\",\n        index: 26,\n        isBkr: false\n    };\n    this.rules[27] = {\n        name: \"OptionOpen\",\n        lower: \"optionopen\",\n        index: 27,\n        isBkr: false\n    };\n    this.rules[28] = {\n        name: \"OptionClose\",\n        lower: \"optionclose\",\n        index: 28,\n        isBkr: false\n    };\n    this.rules[29] = {\n        name: \"RnmOp\",\n        lower: \"rnmop\",\n        index: 29,\n        isBkr: false\n    };\n    this.rules[30] = {\n        name: \"BkrOp\",\n        lower: \"bkrop\",\n        index: 30,\n        isBkr: false\n    };\n    this.rules[31] = {\n        name: \"bkrModifier\",\n        lower: \"bkrmodifier\",\n        index: 31,\n        isBkr: false\n    };\n    this.rules[32] = {\n        name: \"cs\",\n        lower: \"cs\",\n        index: 32,\n        isBkr: false\n    };\n    this.rules[33] = {\n        name: \"ci\",\n        lower: \"ci\",\n        index: 33,\n        isBkr: false\n    };\n    this.rules[34] = {\n        name: \"um\",\n        lower: \"um\",\n        index: 34,\n        isBkr: false\n    };\n    this.rules[35] = {\n        name: \"pm\",\n        lower: \"pm\",\n        index: 35,\n        isBkr: false\n    };\n    this.rules[36] = {\n        name: \"bkr-name\",\n        lower: \"bkr-name\",\n        index: 36,\n        isBkr: false\n    };\n    this.rules[37] = {\n        name: \"rname\",\n        lower: \"rname\",\n        index: 37,\n        isBkr: false\n    };\n    this.rules[38] = {\n        name: \"uname\",\n        lower: \"uname\",\n        index: 38,\n        isBkr: false\n    };\n    this.rules[39] = {\n        name: \"ename\",\n        lower: \"ename\",\n        index: 39,\n        isBkr: false\n    };\n    this.rules[40] = {\n        name: \"UdtOp\",\n        lower: \"udtop\",\n        index: 40,\n        isBkr: false\n    };\n    this.rules[41] = {\n        name: \"udt-non-empty\",\n        lower: \"udt-non-empty\",\n        index: 41,\n        isBkr: false\n    };\n    this.rules[42] = {\n        name: \"udt-empty\",\n        lower: \"udt-empty\",\n        index: 42,\n        isBkr: false\n    };\n    this.rules[43] = {\n        name: \"RepOp\",\n        lower: \"repop\",\n        index: 43,\n        isBkr: false\n    };\n    this.rules[44] = {\n        name: \"AltOp\",\n        lower: \"altop\",\n        index: 44,\n        isBkr: false\n    };\n    this.rules[45] = {\n        name: \"CatOp\",\n        lower: \"catop\",\n        index: 45,\n        isBkr: false\n    };\n    this.rules[46] = {\n        name: \"StarOp\",\n        lower: \"starop\",\n        index: 46,\n        isBkr: false\n    };\n    this.rules[47] = {\n        name: \"AndOp\",\n        lower: \"andop\",\n        index: 47,\n        isBkr: false\n    };\n    this.rules[48] = {\n        name: \"NotOp\",\n        lower: \"notop\",\n        index: 48,\n        isBkr: false\n    };\n    this.rules[49] = {\n        name: \"BkaOp\",\n        lower: \"bkaop\",\n        index: 49,\n        isBkr: false\n    };\n    this.rules[50] = {\n        name: \"BknOp\",\n        lower: \"bknop\",\n        index: 50,\n        isBkr: false\n    };\n    this.rules[51] = {\n        name: \"AbgOp\",\n        lower: \"abgop\",\n        index: 51,\n        isBkr: false\n    };\n    this.rules[52] = {\n        name: \"AenOp\",\n        lower: \"aenop\",\n        index: 52,\n        isBkr: false\n    };\n    this.rules[53] = {\n        name: \"TrgOp\",\n        lower: \"trgop\",\n        index: 53,\n        isBkr: false\n    };\n    this.rules[54] = {\n        name: \"TbsOp\",\n        lower: \"tbsop\",\n        index: 54,\n        isBkr: false\n    };\n    this.rules[55] = {\n        name: \"TlsOp\",\n        lower: \"tlsop\",\n        index: 55,\n        isBkr: false\n    };\n    this.rules[56] = {\n        name: \"TlsCase\",\n        lower: \"tlscase\",\n        index: 56,\n        isBkr: false\n    };\n    this.rules[57] = {\n        name: \"TlsOpen\",\n        lower: \"tlsopen\",\n        index: 57,\n        isBkr: false\n    };\n    this.rules[58] = {\n        name: \"TlsClose\",\n        lower: \"tlsclose\",\n        index: 58,\n        isBkr: false\n    };\n    this.rules[59] = {\n        name: \"TlsString\",\n        lower: \"tlsstring\",\n        index: 59,\n        isBkr: false\n    };\n    this.rules[60] = {\n        name: \"StringTab\",\n        lower: \"stringtab\",\n        index: 60,\n        isBkr: false\n    };\n    this.rules[61] = {\n        name: \"ClsOp\",\n        lower: \"clsop\",\n        index: 61,\n        isBkr: false\n    };\n    this.rules[62] = {\n        name: \"ClsOpen\",\n        lower: \"clsopen\",\n        index: 62,\n        isBkr: false\n    };\n    this.rules[63] = {\n        name: \"ClsClose\",\n        lower: \"clsclose\",\n        index: 63,\n        isBkr: false\n    };\n    this.rules[64] = {\n        name: \"ClsString\",\n        lower: \"clsstring\",\n        index: 64,\n        isBkr: false\n    };\n    this.rules[65] = {\n        name: \"ProsVal\",\n        lower: \"prosval\",\n        index: 65,\n        isBkr: false\n    };\n    this.rules[66] = {\n        name: \"ProsValOpen\",\n        lower: \"prosvalopen\",\n        index: 66,\n        isBkr: false\n    };\n    this.rules[67] = {\n        name: \"ProsValString\",\n        lower: \"prosvalstring\",\n        index: 67,\n        isBkr: false\n    };\n    this.rules[68] = {\n        name: \"ProsValClose\",\n        lower: \"prosvalclose\",\n        index: 68,\n        isBkr: false\n    };\n    this.rules[69] = {\n        name: \"rep-min\",\n        lower: \"rep-min\",\n        index: 69,\n        isBkr: false\n    };\n    this.rules[70] = {\n        name: \"rep-min-max\",\n        lower: \"rep-min-max\",\n        index: 70,\n        isBkr: false\n    };\n    this.rules[71] = {\n        name: \"rep-max\",\n        lower: \"rep-max\",\n        index: 71,\n        isBkr: false\n    };\n    this.rules[72] = {\n        name: \"rep-num\",\n        lower: \"rep-num\",\n        index: 72,\n        isBkr: false\n    };\n    this.rules[73] = {\n        name: \"dString\",\n        lower: \"dstring\",\n        index: 73,\n        isBkr: false\n    };\n    this.rules[74] = {\n        name: \"xString\",\n        lower: \"xstring\",\n        index: 74,\n        isBkr: false\n    };\n    this.rules[75] = {\n        name: \"bString\",\n        lower: \"bstring\",\n        index: 75,\n        isBkr: false\n    };\n    this.rules[76] = {\n        name: \"Dec\",\n        lower: \"dec\",\n        index: 76,\n        isBkr: false\n    };\n    this.rules[77] = {\n        name: \"Hex\",\n        lower: \"hex\",\n        index: 77,\n        isBkr: false\n    };\n    this.rules[78] = {\n        name: \"Bin\",\n        lower: \"bin\",\n        index: 78,\n        isBkr: false\n    };\n    this.rules[79] = {\n        name: \"dmin\",\n        lower: \"dmin\",\n        index: 79,\n        isBkr: false\n    };\n    this.rules[80] = {\n        name: \"dmax\",\n        lower: \"dmax\",\n        index: 80,\n        isBkr: false\n    };\n    this.rules[81] = {\n        name: \"bmin\",\n        lower: \"bmin\",\n        index: 81,\n        isBkr: false\n    };\n    this.rules[82] = {\n        name: \"bmax\",\n        lower: \"bmax\",\n        index: 82,\n        isBkr: false\n    };\n    this.rules[83] = {\n        name: \"xmin\",\n        lower: \"xmin\",\n        index: 83,\n        isBkr: false\n    };\n    this.rules[84] = {\n        name: \"xmax\",\n        lower: \"xmax\",\n        index: 84,\n        isBkr: false\n    };\n    this.rules[85] = {\n        name: \"dnum\",\n        lower: \"dnum\",\n        index: 85,\n        isBkr: false\n    };\n    this.rules[86] = {\n        name: \"bnum\",\n        lower: \"bnum\",\n        index: 86,\n        isBkr: false\n    };\n    this.rules[87] = {\n        name: \"xnum\",\n        lower: \"xnum\",\n        index: 87,\n        isBkr: false\n    };\n    this.rules[88] = {\n        name: \"alphanum\",\n        lower: \"alphanum\",\n        index: 88,\n        isBkr: false\n    };\n    this.rules[89] = {\n        name: \"owsp\",\n        lower: \"owsp\",\n        index: 89,\n        isBkr: false\n    };\n    this.rules[90] = {\n        name: \"wsp\",\n        lower: \"wsp\",\n        index: 90,\n        isBkr: false\n    };\n    this.rules[91] = {\n        name: \"space\",\n        lower: \"space\",\n        index: 91,\n        isBkr: false\n    };\n    this.rules[92] = {\n        name: \"comment\",\n        lower: \"comment\",\n        index: 92,\n        isBkr: false\n    };\n    this.rules[93] = {\n        name: \"LineEnd\",\n        lower: \"lineend\",\n        index: 93,\n        isBkr: false\n    };\n    this.rules[94] = {\n        name: \"LineContinue\",\n        lower: \"linecontinue\",\n        index: 94,\n        isBkr: false\n    };\n    /* UDTS */ this.udts = [];\n    /* OPCODES */ /* File */ this.rules[0].opcodes = [];\n    this.rules[0].opcodes[0] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[0].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[0].opcodes[2] = {\n        type: 4,\n        index: 1\n    }; // RNM(BlankLine)\n    this.rules[0].opcodes[3] = {\n        type: 4,\n        index: 2\n    }; // RNM(Rule)\n    this.rules[0].opcodes[4] = {\n        type: 4,\n        index: 12\n    }; // RNM(RuleError)\n    /* BlankLine */ this.rules[1].opcodes = [];\n    this.rules[1].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            5,\n            7\n        ]\n    }; // CAT\n    this.rules[1].opcodes[1] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[1].opcodes[2] = {\n        type: 1,\n        children: [\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[1].opcodes[3] = {\n        type: 6,\n        string: [\n            32\n        ]\n    }; // TBS\n    this.rules[1].opcodes[4] = {\n        type: 6,\n        string: [\n            9\n        ]\n    }; // TBS\n    this.rules[1].opcodes[5] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[1].opcodes[6] = {\n        type: 4,\n        index: 92\n    }; // RNM(comment)\n    this.rules[1].opcodes[7] = {\n        type: 4,\n        index: 93\n    }; // RNM(LineEnd)\n    /* Rule */ this.rules[2].opcodes = [];\n    this.rules[2].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2,\n            3,\n            4\n        ]\n    }; // CAT\n    this.rules[2].opcodes[1] = {\n        type: 4,\n        index: 3\n    }; // RNM(RuleLookup)\n    this.rules[2].opcodes[2] = {\n        type: 4,\n        index: 89\n    }; // RNM(owsp)\n    this.rules[2].opcodes[3] = {\n        type: 4,\n        index: 14\n    }; // RNM(Alternation)\n    this.rules[2].opcodes[4] = {\n        type: 1,\n        children: [\n            5,\n            8\n        ]\n    }; // ALT\n    this.rules[2].opcodes[5] = {\n        type: 2,\n        children: [\n            6,\n            7\n        ]\n    }; // CAT\n    this.rules[2].opcodes[6] = {\n        type: 4,\n        index: 89\n    }; // RNM(owsp)\n    this.rules[2].opcodes[7] = {\n        type: 4,\n        index: 93\n    }; // RNM(LineEnd)\n    this.rules[2].opcodes[8] = {\n        type: 2,\n        children: [\n            9,\n            10\n        ]\n    }; // CAT\n    this.rules[2].opcodes[9] = {\n        type: 4,\n        index: 13\n    }; // RNM(LineEndError)\n    this.rules[2].opcodes[10] = {\n        type: 4,\n        index: 93\n    }; // RNM(LineEnd)\n    /* RuleLookup */ this.rules[3].opcodes = [];\n    this.rules[3].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2,\n            3\n        ]\n    }; // CAT\n    this.rules[3].opcodes[1] = {\n        type: 4,\n        index: 4\n    }; // RNM(RuleNameTest)\n    this.rules[3].opcodes[2] = {\n        type: 4,\n        index: 89\n    }; // RNM(owsp)\n    this.rules[3].opcodes[3] = {\n        type: 4,\n        index: 7\n    }; // RNM(DefinedAsTest)\n    /* RuleNameTest */ this.rules[4].opcodes = [];\n    this.rules[4].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2\n        ]\n    }; // ALT\n    this.rules[4].opcodes[1] = {\n        type: 4,\n        index: 5\n    }; // RNM(RuleName)\n    this.rules[4].opcodes[2] = {\n        type: 4,\n        index: 6\n    }; // RNM(RuleNameError)\n    /* RuleName */ this.rules[5].opcodes = [];\n    this.rules[5].opcodes[0] = {\n        type: 4,\n        index: 88\n    }; // RNM(alphanum)\n    /* RuleNameError */ this.rules[6].opcodes = [];\n    this.rules[6].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[6].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3\n        ]\n    }; // ALT\n    this.rules[6].opcodes[2] = {\n        type: 5,\n        min: 33,\n        max: 60\n    }; // TRG\n    this.rules[6].opcodes[3] = {\n        type: 5,\n        min: 62,\n        max: 126\n    }; // TRG\n    /* DefinedAsTest */ this.rules[7].opcodes = [];\n    this.rules[7].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2\n        ]\n    }; // ALT\n    this.rules[7].opcodes[1] = {\n        type: 4,\n        index: 9\n    }; // RNM(DefinedAs)\n    this.rules[7].opcodes[2] = {\n        type: 4,\n        index: 8\n    }; // RNM(DefinedAsError)\n    /* DefinedAsError */ this.rules[8].opcodes = [];\n    this.rules[8].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: 2\n    }; // REP\n    this.rules[8].opcodes[1] = {\n        type: 5,\n        min: 33,\n        max: 126\n    }; // TRG\n    /* DefinedAs */ this.rules[9].opcodes = [];\n    this.rules[9].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2\n        ]\n    }; // ALT\n    this.rules[9].opcodes[1] = {\n        type: 4,\n        index: 11\n    }; // RNM(IncAlt)\n    this.rules[9].opcodes[2] = {\n        type: 4,\n        index: 10\n    }; // RNM(Defined)\n    /* Defined */ this.rules[10].opcodes = [];\n    this.rules[10].opcodes[0] = {\n        type: 6,\n        string: [\n            61\n        ]\n    }; // TBS\n    /* IncAlt */ this.rules[11].opcodes = [];\n    this.rules[11].opcodes[0] = {\n        type: 6,\n        string: [\n            61,\n            47\n        ]\n    }; // TBS\n    /* RuleError */ this.rules[12].opcodes = [];\n    this.rules[12].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            6\n        ]\n    }; // CAT\n    this.rules[12].opcodes[1] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[12].opcodes[2] = {\n        type: 1,\n        children: [\n            3,\n            4,\n            5\n        ]\n    }; // ALT\n    this.rules[12].opcodes[3] = {\n        type: 5,\n        min: 32,\n        max: 126\n    }; // TRG\n    this.rules[12].opcodes[4] = {\n        type: 6,\n        string: [\n            9\n        ]\n    }; // TBS\n    this.rules[12].opcodes[5] = {\n        type: 4,\n        index: 94\n    }; // RNM(LineContinue)\n    this.rules[12].opcodes[6] = {\n        type: 4,\n        index: 93\n    }; // RNM(LineEnd)\n    /* LineEndError */ this.rules[13].opcodes = [];\n    this.rules[13].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[13].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[13].opcodes[2] = {\n        type: 5,\n        min: 32,\n        max: 126\n    }; // TRG\n    this.rules[13].opcodes[3] = {\n        type: 6,\n        string: [\n            9\n        ]\n    }; // TBS\n    this.rules[13].opcodes[4] = {\n        type: 4,\n        index: 94\n    }; // RNM(LineContinue)\n    /* Alternation */ this.rules[14].opcodes = [];\n    this.rules[14].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[14].opcodes[1] = {\n        type: 4,\n        index: 15\n    }; // RNM(Concatenation)\n    this.rules[14].opcodes[2] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[14].opcodes[3] = {\n        type: 2,\n        children: [\n            4,\n            5,\n            6\n        ]\n    }; // CAT\n    this.rules[14].opcodes[4] = {\n        type: 4,\n        index: 89\n    }; // RNM(owsp)\n    this.rules[14].opcodes[5] = {\n        type: 4,\n        index: 44\n    }; // RNM(AltOp)\n    this.rules[14].opcodes[6] = {\n        type: 4,\n        index: 15\n    }; // RNM(Concatenation)\n    /* Concatenation */ this.rules[15].opcodes = [];\n    this.rules[15].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[15].opcodes[1] = {\n        type: 4,\n        index: 16\n    }; // RNM(Repetition)\n    this.rules[15].opcodes[2] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[15].opcodes[3] = {\n        type: 2,\n        children: [\n            4,\n            5\n        ]\n    }; // CAT\n    this.rules[15].opcodes[4] = {\n        type: 4,\n        index: 45\n    }; // RNM(CatOp)\n    this.rules[15].opcodes[5] = {\n        type: 4,\n        index: 16\n    }; // RNM(Repetition)\n    /* Repetition */ this.rules[16].opcodes = [];\n    this.rules[16].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            3\n        ]\n    }; // CAT\n    this.rules[16].opcodes[1] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[16].opcodes[2] = {\n        type: 4,\n        index: 17\n    }; // RNM(Modifier)\n    this.rules[16].opcodes[3] = {\n        type: 1,\n        children: [\n            4,\n            5,\n            6,\n            7\n        ]\n    }; // ALT\n    this.rules[16].opcodes[4] = {\n        type: 4,\n        index: 21\n    }; // RNM(Group)\n    this.rules[16].opcodes[5] = {\n        type: 4,\n        index: 25\n    }; // RNM(Option)\n    this.rules[16].opcodes[6] = {\n        type: 4,\n        index: 19\n    }; // RNM(BasicElement)\n    this.rules[16].opcodes[7] = {\n        type: 4,\n        index: 20\n    }; // RNM(BasicElementErr)\n    /* Modifier */ this.rules[17].opcodes = [];\n    this.rules[17].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            5\n        ]\n    }; // ALT\n    this.rules[17].opcodes[1] = {\n        type: 2,\n        children: [\n            2,\n            3\n        ]\n    }; // CAT\n    this.rules[17].opcodes[2] = {\n        type: 4,\n        index: 18\n    }; // RNM(Predicate)\n    this.rules[17].opcodes[3] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[17].opcodes[4] = {\n        type: 4,\n        index: 43\n    }; // RNM(RepOp)\n    this.rules[17].opcodes[5] = {\n        type: 4,\n        index: 43\n    }; // RNM(RepOp)\n    /* Predicate */ this.rules[18].opcodes = [];\n    this.rules[18].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[18].opcodes[1] = {\n        type: 4,\n        index: 49\n    }; // RNM(BkaOp)\n    this.rules[18].opcodes[2] = {\n        type: 4,\n        index: 50\n    }; // RNM(BknOp)\n    this.rules[18].opcodes[3] = {\n        type: 4,\n        index: 47\n    }; // RNM(AndOp)\n    this.rules[18].opcodes[4] = {\n        type: 4,\n        index: 48\n    }; // RNM(NotOp)\n    /* BasicElement */ this.rules[19].opcodes = [];\n    this.rules[19].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2,\n            3,\n            4,\n            5,\n            6,\n            7,\n            8,\n            9,\n            10\n        ]\n    }; // ALT\n    this.rules[19].opcodes[1] = {\n        type: 4,\n        index: 40\n    }; // RNM(UdtOp)\n    this.rules[19].opcodes[2] = {\n        type: 4,\n        index: 29\n    }; // RNM(RnmOp)\n    this.rules[19].opcodes[3] = {\n        type: 4,\n        index: 53\n    }; // RNM(TrgOp)\n    this.rules[19].opcodes[4] = {\n        type: 4,\n        index: 54\n    }; // RNM(TbsOp)\n    this.rules[19].opcodes[5] = {\n        type: 4,\n        index: 55\n    }; // RNM(TlsOp)\n    this.rules[19].opcodes[6] = {\n        type: 4,\n        index: 61\n    }; // RNM(ClsOp)\n    this.rules[19].opcodes[7] = {\n        type: 4,\n        index: 30\n    }; // RNM(BkrOp)\n    this.rules[19].opcodes[8] = {\n        type: 4,\n        index: 51\n    }; // RNM(AbgOp)\n    this.rules[19].opcodes[9] = {\n        type: 4,\n        index: 52\n    }; // RNM(AenOp)\n    this.rules[19].opcodes[10] = {\n        type: 4,\n        index: 65\n    }; // RNM(ProsVal)\n    /* BasicElementErr */ this.rules[20].opcodes = [];\n    this.rules[20].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[20].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4,\n            5\n        ]\n    }; // ALT\n    this.rules[20].opcodes[2] = {\n        type: 5,\n        min: 33,\n        max: 40\n    }; // TRG\n    this.rules[20].opcodes[3] = {\n        type: 5,\n        min: 42,\n        max: 46\n    }; // TRG\n    this.rules[20].opcodes[4] = {\n        type: 5,\n        min: 48,\n        max: 92\n    }; // TRG\n    this.rules[20].opcodes[5] = {\n        type: 5,\n        min: 94,\n        max: 126\n    }; // TRG\n    /* Group */ this.rules[21].opcodes = [];\n    this.rules[21].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2,\n            3\n        ]\n    }; // CAT\n    this.rules[21].opcodes[1] = {\n        type: 4,\n        index: 23\n    }; // RNM(GroupOpen)\n    this.rules[21].opcodes[2] = {\n        type: 4,\n        index: 14\n    }; // RNM(Alternation)\n    this.rules[21].opcodes[3] = {\n        type: 1,\n        children: [\n            4,\n            5\n        ]\n    }; // ALT\n    this.rules[21].opcodes[4] = {\n        type: 4,\n        index: 24\n    }; // RNM(GroupClose)\n    this.rules[21].opcodes[5] = {\n        type: 4,\n        index: 22\n    }; // RNM(GroupError)\n    /* GroupError */ this.rules[22].opcodes = [];\n    this.rules[22].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[22].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4,\n            5\n        ]\n    }; // ALT\n    this.rules[22].opcodes[2] = {\n        type: 5,\n        min: 33,\n        max: 40\n    }; // TRG\n    this.rules[22].opcodes[3] = {\n        type: 5,\n        min: 42,\n        max: 46\n    }; // TRG\n    this.rules[22].opcodes[4] = {\n        type: 5,\n        min: 48,\n        max: 92\n    }; // TRG\n    this.rules[22].opcodes[5] = {\n        type: 5,\n        min: 94,\n        max: 126\n    }; // TRG\n    /* GroupOpen */ this.rules[23].opcodes = [];\n    this.rules[23].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[23].opcodes[1] = {\n        type: 6,\n        string: [\n            40\n        ]\n    }; // TBS\n    this.rules[23].opcodes[2] = {\n        type: 4,\n        index: 89\n    }; // RNM(owsp)\n    /* GroupClose */ this.rules[24].opcodes = [];\n    this.rules[24].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[24].opcodes[1] = {\n        type: 4,\n        index: 89\n    }; // RNM(owsp)\n    this.rules[24].opcodes[2] = {\n        type: 6,\n        string: [\n            41\n        ]\n    }; // TBS\n    /* Option */ this.rules[25].opcodes = [];\n    this.rules[25].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2,\n            3\n        ]\n    }; // CAT\n    this.rules[25].opcodes[1] = {\n        type: 4,\n        index: 27\n    }; // RNM(OptionOpen)\n    this.rules[25].opcodes[2] = {\n        type: 4,\n        index: 14\n    }; // RNM(Alternation)\n    this.rules[25].opcodes[3] = {\n        type: 1,\n        children: [\n            4,\n            5\n        ]\n    }; // ALT\n    this.rules[25].opcodes[4] = {\n        type: 4,\n        index: 28\n    }; // RNM(OptionClose)\n    this.rules[25].opcodes[5] = {\n        type: 4,\n        index: 26\n    }; // RNM(OptionError)\n    /* OptionError */ this.rules[26].opcodes = [];\n    this.rules[26].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[26].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4,\n            5\n        ]\n    }; // ALT\n    this.rules[26].opcodes[2] = {\n        type: 5,\n        min: 33,\n        max: 40\n    }; // TRG\n    this.rules[26].opcodes[3] = {\n        type: 5,\n        min: 42,\n        max: 46\n    }; // TRG\n    this.rules[26].opcodes[4] = {\n        type: 5,\n        min: 48,\n        max: 92\n    }; // TRG\n    this.rules[26].opcodes[5] = {\n        type: 5,\n        min: 94,\n        max: 126\n    }; // TRG\n    /* OptionOpen */ this.rules[27].opcodes = [];\n    this.rules[27].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[27].opcodes[1] = {\n        type: 6,\n        string: [\n            91\n        ]\n    }; // TBS\n    this.rules[27].opcodes[2] = {\n        type: 4,\n        index: 89\n    }; // RNM(owsp)\n    /* OptionClose */ this.rules[28].opcodes = [];\n    this.rules[28].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[28].opcodes[1] = {\n        type: 4,\n        index: 89\n    }; // RNM(owsp)\n    this.rules[28].opcodes[2] = {\n        type: 6,\n        string: [\n            93\n        ]\n    }; // TBS\n    /* RnmOp */ this.rules[29].opcodes = [];\n    this.rules[29].opcodes[0] = {\n        type: 4,\n        index: 88\n    }; // RNM(alphanum)\n    /* BkrOp */ this.rules[30].opcodes = [];\n    this.rules[30].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2,\n            4\n        ]\n    }; // CAT\n    this.rules[30].opcodes[1] = {\n        type: 6,\n        string: [\n            92\n        ]\n    }; // TBS\n    this.rules[30].opcodes[2] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[30].opcodes[3] = {\n        type: 4,\n        index: 31\n    }; // RNM(bkrModifier)\n    this.rules[30].opcodes[4] = {\n        type: 4,\n        index: 36\n    }; // RNM(bkr-name)\n    /* bkrModifier */ this.rules[31].opcodes = [];\n    this.rules[31].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            7,\n            13,\n            19\n        ]\n    }; // ALT\n    this.rules[31].opcodes[1] = {\n        type: 2,\n        children: [\n            2,\n            3\n        ]\n    }; // CAT\n    this.rules[31].opcodes[2] = {\n        type: 4,\n        index: 32\n    }; // RNM(cs)\n    this.rules[31].opcodes[3] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[31].opcodes[4] = {\n        type: 1,\n        children: [\n            5,\n            6\n        ]\n    }; // ALT\n    this.rules[31].opcodes[5] = {\n        type: 4,\n        index: 34\n    }; // RNM(um)\n    this.rules[31].opcodes[6] = {\n        type: 4,\n        index: 35\n    }; // RNM(pm)\n    this.rules[31].opcodes[7] = {\n        type: 2,\n        children: [\n            8,\n            9\n        ]\n    }; // CAT\n    this.rules[31].opcodes[8] = {\n        type: 4,\n        index: 33\n    }; // RNM(ci)\n    this.rules[31].opcodes[9] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[31].opcodes[10] = {\n        type: 1,\n        children: [\n            11,\n            12\n        ]\n    }; // ALT\n    this.rules[31].opcodes[11] = {\n        type: 4,\n        index: 34\n    }; // RNM(um)\n    this.rules[31].opcodes[12] = {\n        type: 4,\n        index: 35\n    }; // RNM(pm)\n    this.rules[31].opcodes[13] = {\n        type: 2,\n        children: [\n            14,\n            15\n        ]\n    }; // CAT\n    this.rules[31].opcodes[14] = {\n        type: 4,\n        index: 34\n    }; // RNM(um)\n    this.rules[31].opcodes[15] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[31].opcodes[16] = {\n        type: 1,\n        children: [\n            17,\n            18\n        ]\n    }; // ALT\n    this.rules[31].opcodes[17] = {\n        type: 4,\n        index: 32\n    }; // RNM(cs)\n    this.rules[31].opcodes[18] = {\n        type: 4,\n        index: 33\n    }; // RNM(ci)\n    this.rules[31].opcodes[19] = {\n        type: 2,\n        children: [\n            20,\n            21\n        ]\n    }; // CAT\n    this.rules[31].opcodes[20] = {\n        type: 4,\n        index: 35\n    }; // RNM(pm)\n    this.rules[31].opcodes[21] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[31].opcodes[22] = {\n        type: 1,\n        children: [\n            23,\n            24\n        ]\n    }; // ALT\n    this.rules[31].opcodes[23] = {\n        type: 4,\n        index: 32\n    }; // RNM(cs)\n    this.rules[31].opcodes[24] = {\n        type: 4,\n        index: 33\n    }; // RNM(ci)\n    /* cs */ this.rules[32].opcodes = [];\n    this.rules[32].opcodes[0] = {\n        type: 6,\n        string: [\n            37,\n            115\n        ]\n    }; // TBS\n    /* ci */ this.rules[33].opcodes = [];\n    this.rules[33].opcodes[0] = {\n        type: 6,\n        string: [\n            37,\n            105\n        ]\n    }; // TBS\n    /* um */ this.rules[34].opcodes = [];\n    this.rules[34].opcodes[0] = {\n        type: 6,\n        string: [\n            37,\n            117\n        ]\n    }; // TBS\n    /* pm */ this.rules[35].opcodes = [];\n    this.rules[35].opcodes[0] = {\n        type: 6,\n        string: [\n            37,\n            112\n        ]\n    }; // TBS\n    /* bkr-name */ this.rules[36].opcodes = [];\n    this.rules[36].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2,\n            3\n        ]\n    }; // ALT\n    this.rules[36].opcodes[1] = {\n        type: 4,\n        index: 38\n    }; // RNM(uname)\n    this.rules[36].opcodes[2] = {\n        type: 4,\n        index: 39\n    }; // RNM(ename)\n    this.rules[36].opcodes[3] = {\n        type: 4,\n        index: 37\n    }; // RNM(rname)\n    /* rname */ this.rules[37].opcodes = [];\n    this.rules[37].opcodes[0] = {\n        type: 4,\n        index: 88\n    }; // RNM(alphanum)\n    /* uname */ this.rules[38].opcodes = [];\n    this.rules[38].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[38].opcodes[1] = {\n        type: 6,\n        string: [\n            117,\n            95\n        ]\n    }; // TBS\n    this.rules[38].opcodes[2] = {\n        type: 4,\n        index: 88\n    }; // RNM(alphanum)\n    /* ename */ this.rules[39].opcodes = [];\n    this.rules[39].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[39].opcodes[1] = {\n        type: 6,\n        string: [\n            101,\n            95\n        ]\n    }; // TBS\n    this.rules[39].opcodes[2] = {\n        type: 4,\n        index: 88\n    }; // RNM(alphanum)\n    /* UdtOp */ this.rules[40].opcodes = [];\n    this.rules[40].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2\n        ]\n    }; // ALT\n    this.rules[40].opcodes[1] = {\n        type: 4,\n        index: 42\n    }; // RNM(udt-empty)\n    this.rules[40].opcodes[2] = {\n        type: 4,\n        index: 41\n    }; // RNM(udt-non-empty)\n    /* udt-non-empty */ this.rules[41].opcodes = [];\n    this.rules[41].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[41].opcodes[1] = {\n        type: 6,\n        string: [\n            117,\n            95\n        ]\n    }; // TBS\n    this.rules[41].opcodes[2] = {\n        type: 4,\n        index: 88\n    }; // RNM(alphanum)\n    /* udt-empty */ this.rules[42].opcodes = [];\n    this.rules[42].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[42].opcodes[1] = {\n        type: 6,\n        string: [\n            101,\n            95\n        ]\n    }; // TBS\n    this.rules[42].opcodes[2] = {\n        type: 4,\n        index: 88\n    }; // RNM(alphanum)\n    /* RepOp */ this.rules[43].opcodes = [];\n    this.rules[43].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            5,\n            8,\n            11,\n            12\n        ]\n    }; // ALT\n    this.rules[43].opcodes[1] = {\n        type: 2,\n        children: [\n            2,\n            3,\n            4\n        ]\n    }; // CAT\n    this.rules[43].opcodes[2] = {\n        type: 4,\n        index: 69\n    }; // RNM(rep-min)\n    this.rules[43].opcodes[3] = {\n        type: 4,\n        index: 46\n    }; // RNM(StarOp)\n    this.rules[43].opcodes[4] = {\n        type: 4,\n        index: 71\n    }; // RNM(rep-max)\n    this.rules[43].opcodes[5] = {\n        type: 2,\n        children: [\n            6,\n            7\n        ]\n    }; // CAT\n    this.rules[43].opcodes[6] = {\n        type: 4,\n        index: 69\n    }; // RNM(rep-min)\n    this.rules[43].opcodes[7] = {\n        type: 4,\n        index: 46\n    }; // RNM(StarOp)\n    this.rules[43].opcodes[8] = {\n        type: 2,\n        children: [\n            9,\n            10\n        ]\n    }; // CAT\n    this.rules[43].opcodes[9] = {\n        type: 4,\n        index: 46\n    }; // RNM(StarOp)\n    this.rules[43].opcodes[10] = {\n        type: 4,\n        index: 71\n    }; // RNM(rep-max)\n    this.rules[43].opcodes[11] = {\n        type: 4,\n        index: 46\n    }; // RNM(StarOp)\n    this.rules[43].opcodes[12] = {\n        type: 4,\n        index: 70\n    }; // RNM(rep-min-max)\n    /* AltOp */ this.rules[44].opcodes = [];\n    this.rules[44].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[44].opcodes[1] = {\n        type: 6,\n        string: [\n            47\n        ]\n    }; // TBS\n    this.rules[44].opcodes[2] = {\n        type: 4,\n        index: 89\n    }; // RNM(owsp)\n    /* CatOp */ this.rules[45].opcodes = [];\n    this.rules[45].opcodes[0] = {\n        type: 4,\n        index: 90\n    }; // RNM(wsp)\n    /* StarOp */ this.rules[46].opcodes = [];\n    this.rules[46].opcodes[0] = {\n        type: 6,\n        string: [\n            42\n        ]\n    }; // TBS\n    /* AndOp */ this.rules[47].opcodes = [];\n    this.rules[47].opcodes[0] = {\n        type: 6,\n        string: [\n            38\n        ]\n    }; // TBS\n    /* NotOp */ this.rules[48].opcodes = [];\n    this.rules[48].opcodes[0] = {\n        type: 6,\n        string: [\n            33\n        ]\n    }; // TBS\n    /* BkaOp */ this.rules[49].opcodes = [];\n    this.rules[49].opcodes[0] = {\n        type: 6,\n        string: [\n            38,\n            38\n        ]\n    }; // TBS\n    /* BknOp */ this.rules[50].opcodes = [];\n    this.rules[50].opcodes[0] = {\n        type: 6,\n        string: [\n            33,\n            33\n        ]\n    }; // TBS\n    /* AbgOp */ this.rules[51].opcodes = [];\n    this.rules[51].opcodes[0] = {\n        type: 6,\n        string: [\n            37,\n            94\n        ]\n    }; // TBS\n    /* AenOp */ this.rules[52].opcodes = [];\n    this.rules[52].opcodes[0] = {\n        type: 6,\n        string: [\n            37,\n            36\n        ]\n    }; // TBS\n    /* TrgOp */ this.rules[53].opcodes = [];\n    this.rules[53].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[53].opcodes[1] = {\n        type: 6,\n        string: [\n            37\n        ]\n    }; // TBS\n    this.rules[53].opcodes[2] = {\n        type: 1,\n        children: [\n            3,\n            8,\n            13\n        ]\n    }; // ALT\n    this.rules[53].opcodes[3] = {\n        type: 2,\n        children: [\n            4,\n            5,\n            6,\n            7\n        ]\n    }; // CAT\n    this.rules[53].opcodes[4] = {\n        type: 4,\n        index: 76\n    }; // RNM(Dec)\n    this.rules[53].opcodes[5] = {\n        type: 4,\n        index: 79\n    }; // RNM(dmin)\n    this.rules[53].opcodes[6] = {\n        type: 6,\n        string: [\n            45\n        ]\n    }; // TBS\n    this.rules[53].opcodes[7] = {\n        type: 4,\n        index: 80\n    }; // RNM(dmax)\n    this.rules[53].opcodes[8] = {\n        type: 2,\n        children: [\n            9,\n            10,\n            11,\n            12\n        ]\n    }; // CAT\n    this.rules[53].opcodes[9] = {\n        type: 4,\n        index: 77\n    }; // RNM(Hex)\n    this.rules[53].opcodes[10] = {\n        type: 4,\n        index: 83\n    }; // RNM(xmin)\n    this.rules[53].opcodes[11] = {\n        type: 6,\n        string: [\n            45\n        ]\n    }; // TBS\n    this.rules[53].opcodes[12] = {\n        type: 4,\n        index: 84\n    }; // RNM(xmax)\n    this.rules[53].opcodes[13] = {\n        type: 2,\n        children: [\n            14,\n            15,\n            16,\n            17\n        ]\n    }; // CAT\n    this.rules[53].opcodes[14] = {\n        type: 4,\n        index: 78\n    }; // RNM(Bin)\n    this.rules[53].opcodes[15] = {\n        type: 4,\n        index: 81\n    }; // RNM(bmin)\n    this.rules[53].opcodes[16] = {\n        type: 6,\n        string: [\n            45\n        ]\n    }; // TBS\n    this.rules[53].opcodes[17] = {\n        type: 4,\n        index: 82\n    }; // RNM(bmax)\n    /* TbsOp */ this.rules[54].opcodes = [];\n    this.rules[54].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[54].opcodes[1] = {\n        type: 6,\n        string: [\n            37\n        ]\n    }; // TBS\n    this.rules[54].opcodes[2] = {\n        type: 1,\n        children: [\n            3,\n            10,\n            17\n        ]\n    }; // ALT\n    this.rules[54].opcodes[3] = {\n        type: 2,\n        children: [\n            4,\n            5,\n            6\n        ]\n    }; // CAT\n    this.rules[54].opcodes[4] = {\n        type: 4,\n        index: 76\n    }; // RNM(Dec)\n    this.rules[54].opcodes[5] = {\n        type: 4,\n        index: 73\n    }; // RNM(dString)\n    this.rules[54].opcodes[6] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[54].opcodes[7] = {\n        type: 2,\n        children: [\n            8,\n            9\n        ]\n    }; // CAT\n    this.rules[54].opcodes[8] = {\n        type: 6,\n        string: [\n            46\n        ]\n    }; // TBS\n    this.rules[54].opcodes[9] = {\n        type: 4,\n        index: 73\n    }; // RNM(dString)\n    this.rules[54].opcodes[10] = {\n        type: 2,\n        children: [\n            11,\n            12,\n            13\n        ]\n    }; // CAT\n    this.rules[54].opcodes[11] = {\n        type: 4,\n        index: 77\n    }; // RNM(Hex)\n    this.rules[54].opcodes[12] = {\n        type: 4,\n        index: 74\n    }; // RNM(xString)\n    this.rules[54].opcodes[13] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[54].opcodes[14] = {\n        type: 2,\n        children: [\n            15,\n            16\n        ]\n    }; // CAT\n    this.rules[54].opcodes[15] = {\n        type: 6,\n        string: [\n            46\n        ]\n    }; // TBS\n    this.rules[54].opcodes[16] = {\n        type: 4,\n        index: 74\n    }; // RNM(xString)\n    this.rules[54].opcodes[17] = {\n        type: 2,\n        children: [\n            18,\n            19,\n            20\n        ]\n    }; // CAT\n    this.rules[54].opcodes[18] = {\n        type: 4,\n        index: 78\n    }; // RNM(Bin)\n    this.rules[54].opcodes[19] = {\n        type: 4,\n        index: 75\n    }; // RNM(bString)\n    this.rules[54].opcodes[20] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[54].opcodes[21] = {\n        type: 2,\n        children: [\n            22,\n            23\n        ]\n    }; // CAT\n    this.rules[54].opcodes[22] = {\n        type: 6,\n        string: [\n            46\n        ]\n    }; // TBS\n    this.rules[54].opcodes[23] = {\n        type: 4,\n        index: 75\n    }; // RNM(bString)\n    /* TlsOp */ this.rules[55].opcodes = [];\n    this.rules[55].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2,\n            3,\n            4\n        ]\n    }; // CAT\n    this.rules[55].opcodes[1] = {\n        type: 4,\n        index: 56\n    }; // RNM(TlsCase)\n    this.rules[55].opcodes[2] = {\n        type: 4,\n        index: 57\n    }; // RNM(TlsOpen)\n    this.rules[55].opcodes[3] = {\n        type: 4,\n        index: 59\n    }; // RNM(TlsString)\n    this.rules[55].opcodes[4] = {\n        type: 4,\n        index: 58\n    }; // RNM(TlsClose)\n    /* TlsCase */ this.rules[56].opcodes = [];\n    this.rules[56].opcodes[0] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[56].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3\n        ]\n    }; // ALT\n    this.rules[56].opcodes[2] = {\n        type: 7,\n        string: [\n            37,\n            105\n        ]\n    }; // TLS\n    this.rules[56].opcodes[3] = {\n        type: 7,\n        string: [\n            37,\n            115\n        ]\n    }; // TLS\n    /* TlsOpen */ this.rules[57].opcodes = [];\n    this.rules[57].opcodes[0] = {\n        type: 6,\n        string: [\n            34\n        ]\n    }; // TBS\n    /* TlsClose */ this.rules[58].opcodes = [];\n    this.rules[58].opcodes[0] = {\n        type: 6,\n        string: [\n            34\n        ]\n    }; // TBS\n    /* TlsString */ this.rules[59].opcodes = [];\n    this.rules[59].opcodes[0] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[59].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[59].opcodes[2] = {\n        type: 5,\n        min: 32,\n        max: 33\n    }; // TRG\n    this.rules[59].opcodes[3] = {\n        type: 5,\n        min: 35,\n        max: 126\n    }; // TRG\n    this.rules[59].opcodes[4] = {\n        type: 4,\n        index: 60\n    }; // RNM(StringTab)\n    /* StringTab */ this.rules[60].opcodes = [];\n    this.rules[60].opcodes[0] = {\n        type: 6,\n        string: [\n            9\n        ]\n    }; // TBS\n    /* ClsOp */ this.rules[61].opcodes = [];\n    this.rules[61].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2,\n            3\n        ]\n    }; // CAT\n    this.rules[61].opcodes[1] = {\n        type: 4,\n        index: 62\n    }; // RNM(ClsOpen)\n    this.rules[61].opcodes[2] = {\n        type: 4,\n        index: 64\n    }; // RNM(ClsString)\n    this.rules[61].opcodes[3] = {\n        type: 4,\n        index: 63\n    }; // RNM(ClsClose)\n    /* ClsOpen */ this.rules[62].opcodes = [];\n    this.rules[62].opcodes[0] = {\n        type: 6,\n        string: [\n            39\n        ]\n    }; // TBS\n    /* ClsClose */ this.rules[63].opcodes = [];\n    this.rules[63].opcodes[0] = {\n        type: 6,\n        string: [\n            39\n        ]\n    }; // TBS\n    /* ClsString */ this.rules[64].opcodes = [];\n    this.rules[64].opcodes[0] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[64].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[64].opcodes[2] = {\n        type: 5,\n        min: 32,\n        max: 38\n    }; // TRG\n    this.rules[64].opcodes[3] = {\n        type: 5,\n        min: 40,\n        max: 126\n    }; // TRG\n    this.rules[64].opcodes[4] = {\n        type: 4,\n        index: 60\n    }; // RNM(StringTab)\n    /* ProsVal */ this.rules[65].opcodes = [];\n    this.rules[65].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2,\n            3\n        ]\n    }; // CAT\n    this.rules[65].opcodes[1] = {\n        type: 4,\n        index: 66\n    }; // RNM(ProsValOpen)\n    this.rules[65].opcodes[2] = {\n        type: 4,\n        index: 67\n    }; // RNM(ProsValString)\n    this.rules[65].opcodes[3] = {\n        type: 4,\n        index: 68\n    }; // RNM(ProsValClose)\n    /* ProsValOpen */ this.rules[66].opcodes = [];\n    this.rules[66].opcodes[0] = {\n        type: 6,\n        string: [\n            60\n        ]\n    }; // TBS\n    /* ProsValString */ this.rules[67].opcodes = [];\n    this.rules[67].opcodes[0] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[67].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[67].opcodes[2] = {\n        type: 5,\n        min: 32,\n        max: 61\n    }; // TRG\n    this.rules[67].opcodes[3] = {\n        type: 5,\n        min: 63,\n        max: 126\n    }; // TRG\n    this.rules[67].opcodes[4] = {\n        type: 4,\n        index: 60\n    }; // RNM(StringTab)\n    /* ProsValClose */ this.rules[68].opcodes = [];\n    this.rules[68].opcodes[0] = {\n        type: 6,\n        string: [\n            62\n        ]\n    }; // TBS\n    /* rep-min */ this.rules[69].opcodes = [];\n    this.rules[69].opcodes[0] = {\n        type: 4,\n        index: 72\n    }; // RNM(rep-num)\n    /* rep-min-max */ this.rules[70].opcodes = [];\n    this.rules[70].opcodes[0] = {\n        type: 4,\n        index: 72\n    }; // RNM(rep-num)\n    /* rep-max */ this.rules[71].opcodes = [];\n    this.rules[71].opcodes[0] = {\n        type: 4,\n        index: 72\n    }; // RNM(rep-num)\n    /* rep-num */ this.rules[72].opcodes = [];\n    this.rules[72].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[72].opcodes[1] = {\n        type: 5,\n        min: 48,\n        max: 57\n    }; // TRG\n    /* dString */ this.rules[73].opcodes = [];\n    this.rules[73].opcodes[0] = {\n        type: 4,\n        index: 85\n    }; // RNM(dnum)\n    /* xString */ this.rules[74].opcodes = [];\n    this.rules[74].opcodes[0] = {\n        type: 4,\n        index: 87\n    }; // RNM(xnum)\n    /* bString */ this.rules[75].opcodes = [];\n    this.rules[75].opcodes[0] = {\n        type: 4,\n        index: 86\n    }; // RNM(bnum)\n    /* Dec */ this.rules[76].opcodes = [];\n    this.rules[76].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2\n        ]\n    }; // ALT\n    this.rules[76].opcodes[1] = {\n        type: 6,\n        string: [\n            68\n        ]\n    }; // TBS\n    this.rules[76].opcodes[2] = {\n        type: 6,\n        string: [\n            100\n        ]\n    }; // TBS\n    /* Hex */ this.rules[77].opcodes = [];\n    this.rules[77].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2\n        ]\n    }; // ALT\n    this.rules[77].opcodes[1] = {\n        type: 6,\n        string: [\n            88\n        ]\n    }; // TBS\n    this.rules[77].opcodes[2] = {\n        type: 6,\n        string: [\n            120\n        ]\n    }; // TBS\n    /* Bin */ this.rules[78].opcodes = [];\n    this.rules[78].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2\n        ]\n    }; // ALT\n    this.rules[78].opcodes[1] = {\n        type: 6,\n        string: [\n            66\n        ]\n    }; // TBS\n    this.rules[78].opcodes[2] = {\n        type: 6,\n        string: [\n            98\n        ]\n    }; // TBS\n    /* dmin */ this.rules[79].opcodes = [];\n    this.rules[79].opcodes[0] = {\n        type: 4,\n        index: 85\n    }; // RNM(dnum)\n    /* dmax */ this.rules[80].opcodes = [];\n    this.rules[80].opcodes[0] = {\n        type: 4,\n        index: 85\n    }; // RNM(dnum)\n    /* bmin */ this.rules[81].opcodes = [];\n    this.rules[81].opcodes[0] = {\n        type: 4,\n        index: 86\n    }; // RNM(bnum)\n    /* bmax */ this.rules[82].opcodes = [];\n    this.rules[82].opcodes[0] = {\n        type: 4,\n        index: 86\n    }; // RNM(bnum)\n    /* xmin */ this.rules[83].opcodes = [];\n    this.rules[83].opcodes[0] = {\n        type: 4,\n        index: 87\n    }; // RNM(xnum)\n    /* xmax */ this.rules[84].opcodes = [];\n    this.rules[84].opcodes[0] = {\n        type: 4,\n        index: 87\n    }; // RNM(xnum)\n    /* dnum */ this.rules[85].opcodes = [];\n    this.rules[85].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[85].opcodes[1] = {\n        type: 5,\n        min: 48,\n        max: 57\n    }; // TRG\n    /* bnum */ this.rules[86].opcodes = [];\n    this.rules[86].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[86].opcodes[1] = {\n        type: 5,\n        min: 48,\n        max: 49\n    }; // TRG\n    /* xnum */ this.rules[87].opcodes = [];\n    this.rules[87].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[87].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[87].opcodes[2] = {\n        type: 5,\n        min: 48,\n        max: 57\n    }; // TRG\n    this.rules[87].opcodes[3] = {\n        type: 5,\n        min: 65,\n        max: 70\n    }; // TRG\n    this.rules[87].opcodes[4] = {\n        type: 5,\n        min: 97,\n        max: 102\n    }; // TRG\n    /* alphanum */ this.rules[88].opcodes = [];\n    this.rules[88].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            4\n        ]\n    }; // CAT\n    this.rules[88].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3\n        ]\n    }; // ALT\n    this.rules[88].opcodes[2] = {\n        type: 5,\n        min: 97,\n        max: 122\n    }; // TRG\n    this.rules[88].opcodes[3] = {\n        type: 5,\n        min: 65,\n        max: 90\n    }; // TRG\n    this.rules[88].opcodes[4] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[88].opcodes[5] = {\n        type: 1,\n        children: [\n            6,\n            7,\n            8,\n            9\n        ]\n    }; // ALT\n    this.rules[88].opcodes[6] = {\n        type: 5,\n        min: 97,\n        max: 122\n    }; // TRG\n    this.rules[88].opcodes[7] = {\n        type: 5,\n        min: 65,\n        max: 90\n    }; // TRG\n    this.rules[88].opcodes[8] = {\n        type: 5,\n        min: 48,\n        max: 57\n    }; // TRG\n    this.rules[88].opcodes[9] = {\n        type: 6,\n        string: [\n            45\n        ]\n    }; // TBS\n    /* owsp */ this.rules[89].opcodes = [];\n    this.rules[89].opcodes[0] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[89].opcodes[1] = {\n        type: 4,\n        index: 91\n    }; // RNM(space)\n    /* wsp */ this.rules[90].opcodes = [];\n    this.rules[90].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[90].opcodes[1] = {\n        type: 4,\n        index: 91\n    }; // RNM(space)\n    /* space */ this.rules[91].opcodes = [];\n    this.rules[91].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[91].opcodes[1] = {\n        type: 6,\n        string: [\n            32\n        ]\n    }; // TBS\n    this.rules[91].opcodes[2] = {\n        type: 6,\n        string: [\n            9\n        ]\n    }; // TBS\n    this.rules[91].opcodes[3] = {\n        type: 4,\n        index: 92\n    }; // RNM(comment)\n    this.rules[91].opcodes[4] = {\n        type: 4,\n        index: 94\n    }; // RNM(LineContinue)\n    /* comment */ this.rules[92].opcodes = [];\n    this.rules[92].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[92].opcodes[1] = {\n        type: 6,\n        string: [\n            59\n        ]\n    }; // TBS\n    this.rules[92].opcodes[2] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[92].opcodes[3] = {\n        type: 1,\n        children: [\n            4,\n            5\n        ]\n    }; // ALT\n    this.rules[92].opcodes[4] = {\n        type: 5,\n        min: 32,\n        max: 126\n    }; // TRG\n    this.rules[92].opcodes[5] = {\n        type: 6,\n        string: [\n            9\n        ]\n    }; // TBS\n    /* LineEnd */ this.rules[93].opcodes = [];\n    this.rules[93].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2,\n            3\n        ]\n    }; // ALT\n    this.rules[93].opcodes[1] = {\n        type: 6,\n        string: [\n            13,\n            10\n        ]\n    }; // TBS\n    this.rules[93].opcodes[2] = {\n        type: 6,\n        string: [\n            10\n        ]\n    }; // TBS\n    this.rules[93].opcodes[3] = {\n        type: 6,\n        string: [\n            13\n        ]\n    }; // TBS\n    /* LineContinue */ this.rules[94].opcodes = [];\n    this.rules[94].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            5\n        ]\n    }; // CAT\n    this.rules[94].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[94].opcodes[2] = {\n        type: 6,\n        string: [\n            13,\n            10\n        ]\n    }; // TBS\n    this.rules[94].opcodes[3] = {\n        type: 6,\n        string: [\n            10\n        ]\n    }; // TBS\n    this.rules[94].opcodes[4] = {\n        type: 6,\n        string: [\n            13\n        ]\n    }; // TBS\n    this.rules[94].opcodes[5] = {\n        type: 1,\n        children: [\n            6,\n            7\n        ]\n    }; // ALT\n    this.rules[94].opcodes[6] = {\n        type: 6,\n        string: [\n            32\n        ]\n    }; // TBS\n    this.rules[94].opcodes[7] = {\n        type: 6,\n        string: [\n            9\n        ]\n    }; // TBS\n    // The `toString()` function will display the original grammar file(s) that produced these opcodes.\n    this.toString = function toString() {\n        let str = \"\";\n        str += \";\\n\";\n        str += \"; ABNF for JavaScript APG 2.0 SABNF\\n\";\n        str += \"; RFC 5234 with some restrictions and additions.\\n\";\n        str += \"; Updated 11/24/2015 for RFC 7405 case-sensitive literal string notation\\n\";\n        str += ';  - accepts %s\"string\" as a case-sensitive string\\n';\n        str += ';  - accepts %i\"string\" as a case-insensitive string\\n';\n        str += ';  - accepts \"string\" as a case-insensitive string\\n';\n        str += \";\\n\";\n        str += \"; Some restrictions:\\n\";\n        str += \";   1. Rules must begin at first character of each line.\\n\";\n        str += \";      Indentations on first rule and rules thereafter are not allowed.\\n\";\n        str += \";   2. Relaxed line endings. CRLF, LF or CR are accepted as valid line ending.\\n\";\n        str += \";   3. Prose values, i.e. <prose value>, are accepted as valid grammar syntax.\\n\";\n        str += \";      However, a working parser cannot be generated from them.\\n\";\n        str += \";\\n\";\n        str += \"; Super set (SABNF) additions:\\n\";\n        str += \";   1. Look-ahead (syntactic predicate) operators are accepted as element prefixes.\\n\";\n        str += \";      & is the positive look-ahead operator, succeeds and backtracks if the look-ahead phrase is found\\n\";\n        str += \";      ! is the negative look-ahead operator, succeeds and backtracks if the look-ahead phrase is NOT found\\n\";\n        str += \";      e.g. &%d13 or &rule or !(A / B)\\n\";\n        str += \";   2. User-Defined Terminals (UDT) of the form, u_name and e_name are accepted.\\n\";\n        str += \";      'name' is alpha followed by alpha/num/hyphen just like a rule name.\\n\";\n        str += \";      u_name may be used as an element but no rule definition is given.\\n\";\n        str += \";      e.g. rule = A / u_myUdt\\n\";\n        str += ';           A = \"a\"\\n';\n        str += \";      would be a valid grammar.\\n\";\n        str += \";   3. Case-sensitive, single-quoted strings are accepted.\\n\";\n        str += \";      e.g. 'abc' would be equivalent to %d97.98.99\\n\";\n        str += ';      (kept for backward compatibility, but superseded by %s\"abc\")  \\n';\n        str += \"; New 12/26/2015\\n\";\n        str += \";   4. Look-behind operators are accepted as element prefixes.\\n\";\n        str += \";      && is the positive look-behind operator, succeeds and backtracks if the look-behind phrase is found\\n\";\n        str += \";      !! is the negative look-behind operator, succeeds and backtracks if the look-behind phrase is NOT found\\n\";\n        str += \";      e.g. &&%d13 or &&rule or !!(A / B)\\n\";\n        str += \";   5. Back reference operators, i.e. \\\\rulename, are accepted.\\n\";\n        str += \";      A back reference operator acts like a TLS or TBS terminal except that the phrase it attempts\\n\";\n        str += \";      to match is a phrase previously matched by the rule 'rulename'.\\n\";\n        str += \";      There are two modes of previous phrase matching - the parent-frame mode and the universal mode.\\n\";\n        str += \";      In universal mode, \\\\rulename matches the last match to 'rulename' regardless of where it was found.\\n\";\n        str += \";      In parent-frame mode, \\\\rulename matches only the last match found on the parent's frame or parse tree level.\\n\";\n        str += \";      Back reference modifiers can be used to specify case and mode.\\n\";\n        str += \";      \\\\A defaults to case-insensitive and universal mode, e.g. \\\\A === \\\\%i%uA\\n\";\n        str += \";      Modifiers %i and %s determine case-insensitive and case-sensitive mode, respectively.\\n\";\n        str += \";      Modifiers %u and %p determine universal mode and parent frame mode, respectively.\\n\";\n        str += \";      Case and mode modifiers can appear in any order, e.g. \\\\%s%pA === \\\\%p%sA. \\n\";\n        str += \";   7. String begin anchor, ABG(%^) matches the beginning of the input string location.\\n\";\n        str += \";      Returns EMPTY or NOMATCH. Never consumes any characters.\\n\";\n        str += \";   8. String end anchor, AEN(%$) matches the end of the input string location.\\n\";\n        str += \";      Returns EMPTY or NOMATCH. Never consumes any characters.\\n\";\n        str += \";\\n\";\n        str += \"File            = *(BlankLine / Rule / RuleError)\\n\";\n        str += \"BlankLine       = *(%d32/%d9) [comment] LineEnd\\n\";\n        str += \"Rule            = RuleLookup owsp Alternation ((owsp LineEnd)\\n\";\n        str += \"                / (LineEndError LineEnd))\\n\";\n        str += \"RuleLookup      = RuleNameTest owsp DefinedAsTest\\n\";\n        str += \"RuleNameTest    = RuleName/RuleNameError\\n\";\n        str += \"RuleName        = alphanum\\n\";\n        str += \"RuleNameError   = 1*(%d33-60/%d62-126)\\n\";\n        str += \"DefinedAsTest   = DefinedAs / DefinedAsError\\n\";\n        str += \"DefinedAsError  = 1*2%d33-126\\n\";\n        str += \"DefinedAs       = IncAlt / Defined\\n\";\n        str += \"Defined         = %d61\\n\";\n        str += \"IncAlt          = %d61.47\\n\";\n        str += \"RuleError       = 1*(%d32-126 / %d9  / LineContinue) LineEnd\\n\";\n        str += \"LineEndError    = 1*(%d32-126 / %d9  / LineContinue)\\n\";\n        str += \"Alternation     = Concatenation *(owsp AltOp Concatenation)\\n\";\n        str += \"Concatenation   = Repetition *(CatOp Repetition)\\n\";\n        str += \"Repetition      = [Modifier] (Group / Option / BasicElement / BasicElementErr)\\n\";\n        str += \"Modifier        = (Predicate [RepOp])\\n\";\n        str += \"                / RepOp\\n\";\n        str += \"Predicate       = BkaOp\\n\";\n        str += \"                / BknOp\\n\";\n        str += \"                / AndOp\\n\";\n        str += \"                / NotOp\\n\";\n        str += \"BasicElement    = UdtOp\\n\";\n        str += \"                / RnmOp\\n\";\n        str += \"                / TrgOp\\n\";\n        str += \"                / TbsOp\\n\";\n        str += \"                / TlsOp\\n\";\n        str += \"                / ClsOp\\n\";\n        str += \"                / BkrOp\\n\";\n        str += \"                / AbgOp\\n\";\n        str += \"                / AenOp\\n\";\n        str += \"                / ProsVal\\n\";\n        str += \"BasicElementErr = 1*(%d33-40/%d42-46/%d48-92/%d94-126)\\n\";\n        str += \"Group           = GroupOpen  Alternation (GroupClose / GroupError)\\n\";\n        str += \"GroupError      = 1*(%d33-40/%d42-46/%d48-92/%d94-126) ; same as BasicElementErr\\n\";\n        str += \"GroupOpen       = %d40 owsp\\n\";\n        str += \"GroupClose      = owsp %d41\\n\";\n        str += \"Option          = OptionOpen Alternation (OptionClose / OptionError)\\n\";\n        str += \"OptionError     = 1*(%d33-40/%d42-46/%d48-92/%d94-126) ; same as BasicElementErr\\n\";\n        str += \"OptionOpen      = %d91 owsp\\n\";\n        str += \"OptionClose     = owsp %d93\\n\";\n        str += \"RnmOp           = alphanum\\n\";\n        str += \"BkrOp           = %d92 [bkrModifier] bkr-name\\n\";\n        str += \"bkrModifier     = (cs [um / pm]) / (ci [um / pm]) / (um [cs /ci]) / (pm [cs / ci])\\n\";\n        str += \"cs              = '%s'\\n\";\n        str += \"ci              = '%i'\\n\";\n        str += \"um              = '%u'\\n\";\n        str += \"pm              = '%p'\\n\";\n        str += \"bkr-name        = uname / ename / rname\\n\";\n        str += \"rname           = alphanum\\n\";\n        str += \"uname           = %d117.95 alphanum\\n\";\n        str += \"ename           = %d101.95 alphanum\\n\";\n        str += \"UdtOp           = udt-empty\\n\";\n        str += \"                / udt-non-empty\\n\";\n        str += \"udt-non-empty   = %d117.95 alphanum\\n\";\n        str += \"udt-empty       = %d101.95 alphanum\\n\";\n        str += \"RepOp           = (rep-min StarOp rep-max)\\n\";\n        str += \"                / (rep-min StarOp)\\n\";\n        str += \"                / (StarOp rep-max)\\n\";\n        str += \"                / StarOp\\n\";\n        str += \"                / rep-min-max\\n\";\n        str += \"AltOp           = %d47 owsp\\n\";\n        str += \"CatOp           = wsp\\n\";\n        str += \"StarOp          = %d42\\n\";\n        str += \"AndOp           = %d38\\n\";\n        str += \"NotOp           = %d33\\n\";\n        str += \"BkaOp           = %d38.38\\n\";\n        str += \"BknOp           = %d33.33\\n\";\n        str += \"AbgOp           = %d37.94\\n\";\n        str += \"AenOp           = %d37.36\\n\";\n        str += \"TrgOp           = %d37 ((Dec dmin %d45 dmax) / (Hex xmin %d45 xmax) / (Bin bmin %d45 bmax))\\n\";\n        str += \"TbsOp           = %d37 ((Dec dString *(%d46 dString)) / (Hex xString *(%d46 xString)) / (Bin bString *(%d46 bString)))\\n\";\n        str += \"TlsOp           = TlsCase TlsOpen TlsString TlsClose\\n\";\n        str += 'TlsCase         = [\"%i\" / \"%s\"]\\n';\n        str += \"TlsOpen         = %d34\\n\";\n        str += \"TlsClose        = %d34\\n\";\n        str += \"TlsString       = *(%d32-33/%d35-126/StringTab)\\n\";\n        str += \"StringTab       = %d9\\n\";\n        str += \"ClsOp           = ClsOpen ClsString ClsClose\\n\";\n        str += \"ClsOpen         = %d39\\n\";\n        str += \"ClsClose        = %d39\\n\";\n        str += \"ClsString       = *(%d32-38/%d40-126/StringTab)\\n\";\n        str += \"ProsVal         = ProsValOpen ProsValString ProsValClose\\n\";\n        str += \"ProsValOpen     = %d60\\n\";\n        str += \"ProsValString   = *(%d32-61/%d63-126/StringTab)\\n\";\n        str += \"ProsValClose    = %d62\\n\";\n        str += \"rep-min         = rep-num\\n\";\n        str += \"rep-min-max     = rep-num\\n\";\n        str += \"rep-max         = rep-num\\n\";\n        str += \"rep-num         = 1*(%d48-57)\\n\";\n        str += \"dString         = dnum\\n\";\n        str += \"xString         = xnum\\n\";\n        str += \"bString         = bnum\\n\";\n        str += \"Dec             = (%d68/%d100)\\n\";\n        str += \"Hex             = (%d88/%d120)\\n\";\n        str += \"Bin             = (%d66/%d98)\\n\";\n        str += \"dmin            = dnum\\n\";\n        str += \"dmax            = dnum\\n\";\n        str += \"bmin            = bnum\\n\";\n        str += \"bmax            = bnum\\n\";\n        str += \"xmin            = xnum\\n\";\n        str += \"xmax            = xnum\\n\";\n        str += \"dnum            = 1*(%d48-57)\\n\";\n        str += \"bnum            = 1*%d48-49\\n\";\n        str += \"xnum            = 1*(%d48-57 / %d65-70 / %d97-102)\\n\";\n        str += \";\\n\";\n        str += \"; Basics\\n\";\n        str += \"alphanum        = (%d97-122/%d65-90) *(%d97-122/%d65-90/%d48-57/%d45)\\n\";\n        str += \"owsp            = *space\\n\";\n        str += \"wsp             = 1*space\\n\";\n        str += \"space           = %d32\\n\";\n        str += \"                / %d9\\n\";\n        str += \"                / comment\\n\";\n        str += \"                / LineContinue\\n\";\n        str += \"comment         = %d59 *(%d32-126 / %d9)\\n\";\n        str += \"LineEnd         = %d13.10\\n\";\n        str += \"                / %d10\\n\";\n        str += \"                / %d13\\n\";\n        str += \"LineContinue    = (%d13.10 / %d10 / %d13) (%d32 / %d9)\\n\";\n        return str;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctYXBpL3NhYm5mLWdyYW1tYXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsMEVBQTBFO0FBQzFFLDZFQUE2RTtBQUM3RSxFQUFFO0FBQ0Ysa0ZBQWtGOztBQUNsRkEsT0FBT0MsT0FBTyxHQUFHLFNBQVNDO0lBQ3hCLE1BQU07SUFDTixVQUFVO0lBQ1Ysa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixtQkFBbUI7SUFDbkIscUNBQXFDO0lBQ3JDLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQixpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLGtCQUFrQjtJQUNsQixzQ0FBc0M7SUFDdEMsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQix5QkFBeUI7SUFDekIsTUFBTTtJQUNOLCtDQUErQyxHQUMvQyxJQUFJLENBQUNDLGFBQWEsR0FBRztJQUVyQixTQUFTLEdBQ1QsSUFBSSxDQUFDQyxLQUFLLEdBQUcsRUFBRTtJQUNmLElBQUksQ0FBQ0EsS0FBSyxDQUFDLEVBQUUsR0FBRztRQUFDQyxNQUFNO1FBQVFDLE9BQU87UUFBUUMsT0FBTztRQUFHQyxPQUFPO0lBQUs7SUFDcEUsSUFBSSxDQUFDSixLQUFLLENBQUMsRUFBRSxHQUFHO1FBQUNDLE1BQU07UUFBYUMsT0FBTztRQUFhQyxPQUFPO1FBQUdDLE9BQU87SUFBSztJQUM5RSxJQUFJLENBQUNKLEtBQUssQ0FBQyxFQUFFLEdBQUc7UUFBQ0MsTUFBTTtRQUFRQyxPQUFPO1FBQVFDLE9BQU87UUFBR0MsT0FBTztJQUFLO0lBQ3BFLElBQUksQ0FBQ0osS0FBSyxDQUFDLEVBQUUsR0FBRztRQUFDQyxNQUFNO1FBQWNDLE9BQU87UUFBY0MsT0FBTztRQUFHQyxPQUFPO0lBQUs7SUFD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UUFBU0MsT0FBTztRQUFJQyxPQUFPO0lBQUs7SUFDeEUsSUFBSSxDQUFDSixLQUFLLENBQUMsR0FBRyxHQUFHO1FBQUNDLE1BQU07UUFBVUMsT0FBTztRQUFVQyxPQUFPO1FBQUlDLE9BQU87SUFBSztJQUMxRSxJQUFJLENBQUNKLEtBQUssQ0FBQyxHQUFHLEdBQUc7UUFBQ0MsTUFBTTtRQUFTQyxPQUFPO1FBQVNDLE9BQU87UUFBSUMsT0FBTztJQUFLO0lBQ3hFLElBQUksQ0FBQ0osS0FBSyxDQUFDLEdBQUcsR0FBRztRQUFDQyxNQUFNO1FBQVNDLE9BQU87UUFBU0MsT0FBTztRQUFJQyxPQUFPO0lBQUs7SUFDeEUsSUFBSSxDQUFDSixLQUFLLENBQUMsR0FBRyxHQUFHO1FBQUNDLE1BQU07UUFBU0MsT0FBTztRQUFTQyxPQUFPO1FBQUlDLE9BQU87SUFBSztJQUN4RSxJQUFJLENBQUNKLEtBQUssQ0FBQyxHQUFHLEdBQUc7UUFBQ0MsTUFBTTtRQUFTQyxPQUFPO1FBQVNDLE9BQU87UUFBSUMsT0FBTztJQUFLO0lBQ3hFLElBQUksQ0FBQ0osS0FBSyxDQUFDLEdBQUcsR0FBRztRQUFDQyxNQUFNO1FBQVNDLE9BQU87UUFBU0MsT0FBTztRQUFJQyxPQUFPO0lBQUs7SUFDeEUsSUFBSSxDQUFDSixLQUFLLENBQUMsR0FBRyxHQUFHO1FBQUNDLE1BQU07UUFBU0MsT0FBTztRQUFTQyxPQUFPO1FBQUlDLE9BQU87SUFBSztJQUN4RSxJQUFJLENBQUNKLEtBQUssQ0FBQyxHQUFHLEdBQUc7UUFBQ0MsTUFBTTtRQUFTQyxPQUFPO1FBQVNDLE9BQU87UUFBSUMsT0FBTztJQUFLO0lBQ3hFLElBQUksQ0FBQ0osS0FBSyxDQUFDLEdBQUcsR0FBRztRQUFDQyxNQUFNO1FBQVNDLE9BQU87UUFBU0MsT0FBTztRQUFJQyxPQUFPO0lBQUs7SUFDeEUsSUFBSSxDQUFDSixLQUFLLENBQUMsR0FBRyxHQUFHO1FBQUNDLE1BQU07UUFBU0MsT0FBTztRQUFTQyxPQUFPO1FBQUlDLE9BQU87SUFBSztJQUN4RSxJQUFJLENB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cEUsSUFBSSxDQUFDSixLQUFLLENBQUMsR0FBRyxHQUFHO1FBQUNDLE1BQU07UUFBT0MsT0FBTztRQUFPQyxPQUFPO1FBQUlDLE9BQU87SUFBSztJQUNwRSxJQUFJLENBQUNKLEtBQUssQ0FBQyxHQUFHLEdBQUc7UUFBQ0MsTUFBTTtRQUFPQyxPQUFPO1FBQU9DLE9BQU87UUFBSUMsT0FBTztJQUFLO0lBQ3BFLElBQUksQ0FBQ0osS0FBSyxDQUFDLEdBQUcsR0FBRztRQUFDQyxNQUFNO1FBQVFDLE9BQU87UUFBUUMsT0FBTztRQUFJQyxPQUFPO0lBQUs7SUFDdEUsSUFBSSxDQUFDSixLQUFLLENBQUMsR0FBRyxHQUFHO1FBQUNDLE1BQU07UUFBUUMsT0FBTztRQUFRQyxPQUFPO1FBQUlDLE9BQU87SUFBSztJQUN0RSxJQUFJLENBQUNKLEtBQUssQ0FBQyxHQUFHLEdBQUc7UUFBQ0MsTUFBTTtRQUFRQyxPQUFPO1FBQVFDLE9BQU87UUFBSUMsT0FBTztJQUFLO0lBQ3RFLElBQUksQ0FBQ0osS0FBSyxDQUFDLEdBQUcsR0FBRztRQUFDQyxNQUFNO1FBQVFDLE9BQU87UUFBUUMsT0FBTztRQUFJQyxPQUFPO0lBQUs7SUFDdEUsSUFBSSxDQUFDSixLQUFLLENBQUMsR0FBRyxHQUFHO1FBQUNDLE1BQU07UUFBUUMsT0FBTztRQUFRQyxPQUFPO1FBQUlDLE9BQU87SUFBSztJQUN0RSxJQUFJLENBQUNKLEtBQUssQ0FBQyxHQUFHLEdBQUc7UUFBQ0MsTUFBTTtRQUFRQyxPQUFPO1FBQVFDLE9BQU87UUFBSUMsT0FBTztJQUFLO0lBQ3RFLElBQUksQ0FBQ0osS0FBSyxDQUFDLEdBQUcsR0FBRztRQUFDQyxNQUFNO1FBQVFDLE9BQU87UUFBUUMsT0FBTztRQUFJQyxPQUFPO0lBQUs7SUFDdEUsSUFBSSxDQUFDSixLQUFLLENBQUMsR0FBRyxHQUFHO1FBQUNDLE1BQU07UUFBUUMsT0FBTztRQUFRQyxPQUFPO1FBQUlDLE9BQU87SUFBSztJQUN0RSxJQUFJLENBQUNKLEtBQUssQ0FBQyxHQUFHLEdBQUc7UUFBQ0Ms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UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1AsT0FBT0E7SUFDVDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2FwZy1qcy9zcmMvYXBnLWFwaS9zYWJuZi1ncmFtbWFyLmpzP2Q2ODAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY29weXJpZ2h0OiBDb3B5cmlnaHQgKGMpIDIwMjMgTG93ZWxsIEQuIFRob21hcywgYWxsIHJpZ2h0cyByZXNlcnZlZDxicj5cbi8vICAgbGljZW5zZTogQlNELTItQ2xhdXNlIChodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0yLUNsYXVzZSk8YnI+XG4vL1xuLy8gR2VuZXJhdGVkIGJ5IGFwZy1qcywgVmVyc2lvbiA0LjIuMSBbYXBnLWpzXShodHRwczovL2dpdGh1Yi5jb20vbGR0aG9tYXMvYXBnLWpzKVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBncmFtbWFyKCl7XG4gIC8vIGBgYFxuICAvLyBTVU1NQVJZXG4gIC8vICAgICAgcnVsZXMgPSA5NVxuICAvLyAgICAgICB1ZHRzID0gMFxuICAvLyAgICBvcGNvZGVzID0gMzcyXG4gIC8vICAgICAgICAtLS0gICBBQk5GIG9yaWdpbmFsIG9wY29kZXNcbiAgLy8gICAgICAgIEFMVCA9IDQzXG4gIC8vICAgICAgICBDQVQgPSA0OFxuICAvLyAgICAgICAgUkVQID0gMzRcbiAgLy8gICAgICAgIFJOTSA9IDE0OVxuICAvLyAgICAgICAgVExTID0gMlxuICAvLyAgICAgICAgVEJTID0gNjFcbiAgLy8gICAgICAgIFRSRyA9IDM1XG4gIC8vICAgICAgICAtLS0gICBTQUJORiBzdXBlcnNldCBvcGNvZGVzXG4gIC8vICAgICAgICBVRFQgPSAwXG4gIC8vICAgICAgICBBTkQgPSAwXG4gIC8vICAgICAgICBOT1QgPSAwXG4gIC8vICAgICAgICBCS0EgPSAwXG4gIC8vICAgICAgICBCS04gPSAwXG4gIC8vICAgICAgICBCS1IgPSAwXG4gIC8vICAgICAgICBBQkcgPSAwXG4gIC8vICAgICAgICBBRU4gPSAwXG4gIC8vIGNoYXJhY3RlcnMgPSBbOSAtIDEyNl1cbiAgLy8gYGBgXG4gIC8qIE9CSkVDVCBJREVOVElGSUVSIChmb3IgaW50ZXJuYWwgcGFyc2VyIHVzZSkgKi9cbiAgdGhpcy5ncmFtbWFyT2JqZWN0ID0gJ2dyYW1tYXJPYmplY3QnO1xuXG4gIC8qIFJVTEVTICovXG4gIHRoaXMucnVsZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1swXSA9IHtuYW1lOiAnRmlsZScsIGxvd2VyOiAnZmlsZScsIGluZGV4OiAwLCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzFdID0ge25hbWU6ICdCbGFua0xpbmUnLCBsb3dlcjogJ2JsYW5rbGluZScsIGluZGV4OiAxLCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzJdID0ge25hbWU6ICdSdWxlJywgbG93ZXI6ICdydWxlJywgaW5kZXg6IDIsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbM10gPSB7bmFtZTogJ1J1bGVMb29rdXAnLCBsb3dlcjogJ3J1bGVsb29rdXAnLCBpbmRleDogMywgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s0XSA9IHtuYW1lOiAnUnVsZU5hbWVUZXN0JywgbG93ZXI6ICdydWxlbmFtZXRlc3QnLCBpbmRleDogNCwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s1XSA9IHtuYW1lOiAnUnVsZU5hbWUnLCBsb3dlcjogJ3J1bGVuYW1lJywgaW5kZXg6IDUsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbNl0gPSB7bmFtZTogJ1J1bGVOYW1lRXJyb3InLCBsb3dlcjogJ3J1bGVuYW1lZXJyb3InLCBpbmRleDogNiwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s3XSA9IHtuYW1lOiAnRGVmaW5lZEFzVGVzdCcsIGxvd2VyOiAnZGVmaW5lZGFzdGVzdCcsIGluZGV4OiA3LCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzhdID0ge25hbWU6ICdEZWZpbmVkQXNFcnJvcicsIGxvd2VyOiAnZGVmaW5lZGFzZXJyb3InLCBpbmRleDogOCwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s5XSA9IHtuYW1lOiAnRGVmaW5lZEFzJywgbG93ZXI6ICdkZWZpbmVkYXMnLCBpbmRleDogOSwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1sxMF0gPSB7bmFtZTogJ0RlZmluZWQnLCBsb3dlcjogJ2RlZmluZWQnLCBpbmRleDogMTAsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbMTFdID0ge25hbWU6ICdJbmNBbHQnLCBsb3dlcjogJ2luY2FsdCcsIGluZGV4OiAxMSwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1sxMl0gPSB7bmFtZTogJ1J1bGVFcnJvcicsIGxvd2VyOiAncnVsZWVycm9yJywgaW5kZXg6IDEyLCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzEzXSA9IHtuYW1lOiAnTGluZUVuZEVycm9yJywgbG93ZXI6ICdsaW5lZW5kZXJyb3InLCBpbmRleDogMTMsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbMTRdID0ge25hbWU6ICdBbHRlcm5hdGlvbicsIGxvd2VyOiAnYWx0ZXJuYXRpb24nLCBpbmRleDogMTQsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbMTVdID0ge25hbWU6ICdDb25jYXRlbmF0aW9uJywgbG93ZXI6ICdjb25jYXRlbmF0aW9uJywgaW5kZXg6IDE1LCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzE2XSA9IHtuYW1lOiAnUmVwZXRpdGlvbicsIGxvd2VyOiAncmVwZXRpdGlvbicsIGluZGV4OiAxNiwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1sxN10gPSB7bmFtZTogJ01vZGlmaWVyJywgbG93ZXI6ICdtb2RpZmllcicsIGluZGV4OiAxNywgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1sxOF0gPSB7bmFtZTogJ1ByZWRpY2F0ZScsIGxvd2VyOiAncHJlZGljYXRlJywgaW5kZXg6IDE4LCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzE5XSA9IHtuYW1lOiAnQmFzaWNFbGVtZW50JywgbG93ZXI6ICdiYXNpY2VsZW1lbnQnLCBpbmRleDogMTksIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbMjBdID0ge25hbWU6ICdCYXNpY0VsZW1lbnRFcnInLCBsb3dlcjogJ2Jhc2ljZWxlbWVudGVycicsIGluZGV4OiAyMCwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1syMV0gPSB7bmFtZTogJ0dyb3VwJywgbG93ZXI6ICdncm91cCcsIGluZGV4OiAyMSwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1syMl0gPSB7bmFtZTogJ0dyb3VwRXJyb3InLCBsb3dlcjogJ2dyb3VwZXJyb3InLCBpbmRleDogMjIsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbMjNdID0ge25hbWU6ICdHcm91cE9wZW4nLCBsb3dlcjogJ2dyb3Vwb3BlbicsIGluZGV4OiAyMywgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1syNF0gPSB7bmFtZTogJ0dyb3VwQ2xvc2UnLCBsb3dlcjogJ2dyb3VwY2xvc2UnLCBpbmRleDogMjQsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbMjVdID0ge25hbWU6ICdPcHRpb24nLCBsb3dlcjogJ29wdGlvbicsIGluZGV4OiAyNSwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1syNl0gPSB7bmFtZTogJ09wdGlvbkVycm9yJywgbG93ZXI6ICdvcHRpb25lcnJvcicsIGluZGV4OiAyNiwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1syN10gPSB7bmFtZTogJ09wdGlvbk9wZW4nLCBsb3dlcjogJ29wdGlvbm9wZW4nLCBpbmRleDogMjcsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbMjhdID0ge25hbWU6ICdPcHRpb25DbG9zZScsIGxvd2VyOiAnb3B0aW9uY2xvc2UnLCBpbmRleDogMjgsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbMjldID0ge25hbWU6ICdSbm1PcCcsIGxvd2VyOiAncm5tb3AnLCBpbmRleDogMjksIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbMzBdID0ge25hbWU6ICdCa3JPcCcsIGxvd2VyOiAnYmtyb3AnLCBpbmRleDogMzAsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbMzFdID0ge25hbWU6ICdia3JNb2RpZmllcicsIGxvd2VyOiAnYmtybW9kaWZpZXInLCBpbmRleDogMzEsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbMzJdID0ge25hbWU6ICdjcycsIGxvd2VyOiAnY3MnLCBpbmRleDogMzIsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbMzNdID0ge25hbWU6ICdjaScsIGxvd2VyOiAnY2knLCBpbmRleDogMzMsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbMzRdID0ge25hbWU6ICd1bScsIGxvd2VyOiAndW0nLCBpbmRleDogMzQsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbMzVdID0ge25hbWU6ICdwbScsIGxvd2VyOiAncG0nLCBpbmRleDogMzUsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbMzZdID0ge25hbWU6ICdia3ItbmFtZScsIGxvd2VyOiAnYmtyLW5hbWUnLCBpbmRleDogMzYsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbMzddID0ge25hbWU6ICdybmFtZScsIGxvd2VyOiAncm5hbWUnLCBpbmRleDogMzcsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbMzhdID0ge25hbWU6ICd1bmFtZScsIGxvd2VyOiAndW5hbWUnLCBpbmRleDogMzgsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbMzldID0ge25hbWU6ICdlbmFtZScsIGxvd2VyOiAnZW5hbWUnLCBpbmRleDogMzksIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbNDBdID0ge25hbWU6ICdVZHRPcCcsIGxvd2VyOiAndWR0b3AnLCBpbmRleDogNDAsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbNDFdID0ge25hbWU6ICd1ZHQtbm9uLWVtcHR5JywgbG93ZXI6ICd1ZHQtbm9uLWVtcHR5JywgaW5kZXg6IDQxLCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzQyXSA9IHtuYW1lOiAndWR0LWVtcHR5JywgbG93ZXI6ICd1ZHQtZW1wdHknLCBpbmRleDogNDIsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbNDNdID0ge25hbWU6ICdSZXBPcCcsIGxvd2VyOiAncmVwb3AnLCBpbmRleDogNDMsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbNDRdID0ge25hbWU6ICdBbHRPcCcsIGxvd2VyOiAnYWx0b3AnLCBpbmRleDogNDQsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbNDVdID0ge25hbWU6ICdDYXRPcCcsIGxvd2VyOiAnY2F0b3AnLCBpbmRleDogNDUsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbNDZdID0ge25hbWU6ICdTdGFyT3AnLCBsb3dlcjogJ3N0YXJvcCcsIGluZGV4OiA0NiwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s0N10gPSB7bmFtZTogJ0FuZE9wJywgbG93ZXI6ICdhbmRvcCcsIGluZGV4OiA0NywgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s0OF0gPSB7bmFtZTogJ05vdE9wJywgbG93ZXI6ICdub3RvcCcsIGluZGV4OiA0OCwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s0OV0gPSB7bmFtZTogJ0JrYU9wJywgbG93ZXI6ICdia2FvcCcsIGluZGV4OiA0OSwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s1MF0gPSB7bmFtZTogJ0Jrbk9wJywgbG93ZXI6ICdia25vcCcsIGluZGV4OiA1MCwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s1MV0gPSB7bmFtZTogJ0FiZ09wJywgbG93ZXI6ICdhYmdvcCcsIGluZGV4OiA1MSwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s1Ml0gPSB7bmFtZTogJ0Flbk9wJywgbG93ZXI6ICdhZW5vcCcsIGluZGV4OiA1MiwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s1M10gPSB7bmFtZTogJ1RyZ09wJywgbG93ZXI6ICd0cmdvcCcsIGluZGV4OiA1MywgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s1NF0gPSB7bmFtZTogJ1Ric09wJywgbG93ZXI6ICd0YnNvcCcsIGluZGV4OiA1NCwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s1NV0gPSB7bmFtZTogJ1Rsc09wJywgbG93ZXI6ICd0bHNvcCcsIGluZGV4OiA1NSwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s1Nl0gPSB7bmFtZTogJ1Rsc0Nhc2UnLCBsb3dlcjogJ3Rsc2Nhc2UnLCBpbmRleDogNTYsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbNTddID0ge25hbWU6ICdUbHNPcGVuJywgbG93ZXI6ICd0bHNvcGVuJywgaW5kZXg6IDU3LCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzU4XSA9IHtuYW1lOiAnVGxzQ2xvc2UnLCBsb3dlcjogJ3Rsc2Nsb3NlJywgaW5kZXg6IDU4LCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzU5XSA9IHtuYW1lOiAnVGxzU3RyaW5nJywgbG93ZXI6ICd0bHNzdHJpbmcnLCBpbmRleDogNTksIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbNjBdID0ge25hbWU6ICdTdHJpbmdUYWInLCBsb3dlcjogJ3N0cmluZ3RhYicsIGluZGV4OiA2MCwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s2MV0gPSB7bmFtZTogJ0Nsc09wJywgbG93ZXI6ICdjbHNvcCcsIGluZGV4OiA2MSwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s2Ml0gPSB7bmFtZTogJ0Nsc09wZW4nLCBsb3dlcjogJ2Nsc29wZW4nLCBpbmRleDogNjIsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbNjNdID0ge25hbWU6ICdDbHNDbG9zZScsIGxvd2VyOiAnY2xzY2xvc2UnLCBpbmRleDogNjMsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbNjRdID0ge25hbWU6ICdDbHNTdHJpbmcnLCBsb3dlcjogJ2Nsc3N0cmluZycsIGluZGV4OiA2NCwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s2NV0gPSB7bmFtZTogJ1Byb3NWYWwnLCBsb3dlcjogJ3Byb3N2YWwnLCBpbmRleDogNjUsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbNjZdID0ge25hbWU6ICdQcm9zVmFsT3BlbicsIGxvd2VyOiAncHJvc3ZhbG9wZW4nLCBpbmRleDogNjYsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbNjddID0ge25hbWU6ICdQcm9zVmFsU3RyaW5nJywgbG93ZXI6ICdwcm9zdmFsc3RyaW5nJywgaW5kZXg6IDY3LCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzY4XSA9IHtuYW1lOiAnUHJvc1ZhbENsb3NlJywgbG93ZXI6ICdwcm9zdmFsY2xvc2UnLCBpbmRleDogNjgsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbNjldID0ge25hbWU6ICdyZXAtbWluJywgbG93ZXI6ICdyZXAtbWluJywgaW5kZXg6IDY5LCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzcwXSA9IHtuYW1lOiAncmVwLW1pbi1tYXgnLCBsb3dlcjogJ3JlcC1taW4tbWF4JywgaW5kZXg6IDcwLCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzcxXSA9IHtuYW1lOiAncmVwLW1heCcsIGxvd2VyOiAncmVwLW1heCcsIGluZGV4OiA3MSwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s3Ml0gPSB7bmFtZTogJ3JlcC1udW0nLCBsb3dlcjogJ3JlcC1udW0nLCBpbmRleDogNzIsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbNzNdID0ge25hbWU6ICdkU3RyaW5nJywgbG93ZXI6ICdkc3RyaW5nJywgaW5kZXg6IDczLCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzc0XSA9IHtuYW1lOiAneFN0cmluZycsIGxvd2VyOiAneHN0cmluZycsIGluZGV4OiA3NCwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s3NV0gPSB7bmFtZTogJ2JTdHJpbmcnLCBsb3dlcjogJ2JzdHJpbmcnLCBpbmRleDogNzUsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbNzZdID0ge25hbWU6ICdEZWMnLCBsb3dlcjogJ2RlYycsIGluZGV4OiA3NiwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s3N10gPSB7bmFtZTogJ0hleCcsIGxvd2VyOiAnaGV4JywgaW5kZXg6IDc3LCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzc4XSA9IHtuYW1lOiAnQmluJywgbG93ZXI6ICdiaW4nLCBpbmRleDogNzgsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbNzldID0ge25hbWU6ICdkbWluJywgbG93ZXI6ICdkbWluJywgaW5kZXg6IDc5LCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzgwXSA9IHtuYW1lOiAnZG1heCcsIGxvd2VyOiAnZG1heCcsIGluZGV4OiA4MCwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s4MV0gPSB7bmFtZTogJ2JtaW4nLCBsb3dlcjogJ2JtaW4nLCBpbmRleDogODEsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbODJdID0ge25hbWU6ICdibWF4JywgbG93ZXI6ICdibWF4JywgaW5kZXg6IDgyLCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzgzXSA9IHtuYW1lOiAneG1pbicsIGxvd2VyOiAneG1pbicsIGluZGV4OiA4MywgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s4NF0gPSB7bmFtZTogJ3htYXgnLCBsb3dlcjogJ3htYXgnLCBpbmRleDogODQsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbODVdID0ge25hbWU6ICdkbnVtJywgbG93ZXI6ICdkbnVtJywgaW5kZXg6IDg1LCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzg2XSA9IHtuYW1lOiAnYm51bScsIGxvd2VyOiAnYm51bScsIGluZGV4OiA4NiwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s4N10gPSB7bmFtZTogJ3hudW0nLCBsb3dlcjogJ3hudW0nLCBpbmRleDogODcsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbODhdID0ge25hbWU6ICdhbHBoYW51bScsIGxvd2VyOiAnYWxwaGFudW0nLCBpbmRleDogODgsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbODldID0ge25hbWU6ICdvd3NwJywgbG93ZXI6ICdvd3NwJywgaW5kZXg6IDg5LCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzkwXSA9IHtuYW1lOiAnd3NwJywgbG93ZXI6ICd3c3AnLCBpbmRleDogOTAsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbOTFdID0ge25hbWU6ICdzcGFjZScsIGxvd2VyOiAnc3BhY2UnLCBpbmRleDogOTEsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbOTJdID0ge25hbWU6ICdjb21tZW50JywgbG93ZXI6ICdjb21tZW50JywgaW5kZXg6IDkyLCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzkzXSA9IHtuYW1lOiAnTGluZUVuZCcsIGxvd2VyOiAnbGluZWVuZCcsIGluZGV4OiA5MywgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s5NF0gPSB7bmFtZTogJ0xpbmVDb250aW51ZScsIGxvd2VyOiAnbGluZWNvbnRpbnVlJywgaW5kZXg6IDk0LCBpc0JrcjogZmFsc2V9O1xuXG4gIC8qIFVEVFMgKi9cbiAgdGhpcy51ZHRzID0gW107XG5cbiAgLyogT1BDT0RFUyAqL1xuICAvKiBGaWxlICovXG4gIHRoaXMucnVsZXNbMF0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzBdLm9wY29kZXNbMF0gPSB7dHlwZTogMywgbWluOiAwLCBtYXg6IEluZmluaXR5fTsvLyBSRVBcbiAgdGhpcy5ydWxlc1swXS5vcGNvZGVzWzFdID0ge3R5cGU6IDEsIGNoaWxkcmVuOiBbMiwzLDRdfTsvLyBBTFRcbiAgdGhpcy5ydWxlc1swXS5vcGNvZGVzWzJdID0ge3R5cGU6IDQsIGluZGV4OiAxfTsvLyBSTk0oQmxhbmtMaW5lKVxuICB0aGlzLnJ1bGVzWzBdLm9wY29kZXNbM10gPSB7dHlwZTogNCwgaW5kZXg6IDJ9Oy8vIFJOTShSdWxlKVxuICB0aGlzLnJ1bGVzWzBdLm9wY29kZXNbNF0gPSB7dHlwZTogNCwgaW5kZXg6IDEyfTsvLyBSTk0oUnVsZUVycm9yKVxuXG4gIC8qIEJsYW5rTGluZSAqL1xuICB0aGlzLnJ1bGVzWzFdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1sxXS5vcGNvZGVzWzBdID0ge3R5cGU6IDIsIGNoaWxkcmVuOiBbMSw1LDddfTsvLyBDQVRcbiAgdGhpcy5ydWxlc1sxXS5vcGNvZGVzWzFdID0ge3R5cGU6IDMsIG1pbjogMCwgbWF4OiBJbmZpbml0eX07Ly8gUkVQXG4gIHRoaXMucnVsZXNbMV0ub3Bjb2Rlc1syXSA9IHt0eXBlOiAxLCBjaGlsZHJlbjogWzMsNF19Oy8vIEFMVFxuICB0aGlzLnJ1bGVzWzFdLm9wY29kZXNbM10gPSB7dHlwZTogNiwgc3RyaW5nOiBbMzJdfTsvLyBUQlNcbiAgdGhpcy5ydWxlc1sxXS5vcGNvZGVzWzRdID0ge3R5cGU6IDYsIHN0cmluZzogWzldfTsvLyBUQlNcbiAgdGhpcy5ydWxlc1sxXS5vcGNvZGVzWzVdID0ge3R5cGU6IDMsIG1pbjogMCwgbWF4OiAxfTsvLyBSRVBcbiAgdGhpcy5ydWxlc1sxXS5vcGNvZGVzWzZdID0ge3R5cGU6IDQsIGluZGV4OiA5Mn07Ly8gUk5NKGNvbW1lbnQpXG4gIHRoaXMucnVsZXNbMV0ub3Bjb2Rlc1s3XSA9IHt0eXBlOiA0LCBpbmRleDogOTN9Oy8vIFJOTShMaW5lRW5kKVxuXG4gIC8qIFJ1bGUgKi9cbiAgdGhpcy5ydWxlc1syXS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbMl0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzEsMiwzLDRdfTsvLyBDQVRcbiAgdGhpcy5ydWxlc1syXS5vcGNvZGVzWzFdID0ge3R5cGU6IDQsIGluZGV4OiAzfTsvLyBSTk0oUnVsZUxvb2t1cClcbiAgdGhpcy5ydWxlc1syXS5vcGNvZGVzWzJdID0ge3R5cGU6IDQsIGluZGV4OiA4OX07Ly8gUk5NKG93c3ApXG4gIHRoaXMucnVsZXNbMl0ub3Bjb2Rlc1szXSA9IHt0eXBlOiA0LCBpbmRleDogMTR9Oy8vIFJOTShBbHRlcm5hdGlvbilcbiAgdGhpcy5ydWxlc1syXS5vcGNvZGVzWzRdID0ge3R5cGU6IDEsIGNoaWxkcmVuOiBbNSw4XX07Ly8gQUxUXG4gIHRoaXMucnVsZXNbMl0ub3Bjb2Rlc1s1XSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzYsN119Oy8vIENBVFxuICB0aGlzLnJ1bGVzWzJdLm9wY29kZXNbNl0gPSB7dHlwZTogNCwgaW5kZXg6IDg5fTsvLyBSTk0ob3dzcClcbiAgdGhpcy5ydWxlc1syXS5vcGNvZGVzWzddID0ge3R5cGU6IDQsIGluZGV4OiA5M307Ly8gUk5NKExpbmVFbmQpXG4gIHRoaXMucnVsZXNbMl0ub3Bjb2Rlc1s4XSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzksMTBdfTsvLyBDQVRcbiAgdGhpcy5ydWxlc1syXS5vcGNvZGVzWzldID0ge3R5cGU6IDQsIGluZGV4OiAxM307Ly8gUk5NKExpbmVFbmRFcnJvcilcbiAgdGhpcy5ydWxlc1syXS5vcGNvZGVzWzEwXSA9IHt0eXBlOiA0LCBpbmRleDogOTN9Oy8vIFJOTShMaW5lRW5kKVxuXG4gIC8qIFJ1bGVMb29rdXAgKi9cbiAgdGhpcy5ydWxlc1szXS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbM10ub3Bjb2Rlc1swXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzEsMiwzXX07Ly8gQ0FUXG4gIHRoaXMucnVsZXNbM10ub3Bjb2Rlc1sxXSA9IHt0eXBlOiA0LCBpbmRleDogNH07Ly8gUk5NKFJ1bGVOYW1lVGVzdClcbiAgdGhpcy5ydWxlc1szXS5vcGNvZGVzWzJdID0ge3R5cGU6IDQsIGluZGV4OiA4OX07Ly8gUk5NKG93c3ApXG4gIHRoaXMucnVsZXNbM10ub3Bjb2Rlc1szXSA9IHt0eXBlOiA0LCBpbmRleDogN307Ly8gUk5NKERlZmluZWRBc1Rlc3QpXG5cbiAgLyogUnVsZU5hbWVUZXN0ICovXG4gIHRoaXMucnVsZXNbNF0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzRdLm9wY29kZXNbMF0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsxLDJdfTsvLyBBTFRcbiAgdGhpcy5ydWxlc1s0XS5vcGNvZGVzWzFdID0ge3R5cGU6IDQsIGluZGV4OiA1fTsvLyBSTk0oUnVsZU5hbWUpXG4gIHRoaXMucnVsZXNbNF0ub3Bjb2Rlc1syXSA9IHt0eXBlOiA0LCBpbmRleDogNn07Ly8gUk5NKFJ1bGVOYW1lRXJyb3IpXG5cbiAgLyogUnVsZU5hbWUgKi9cbiAgdGhpcy5ydWxlc1s1XS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbNV0ub3Bjb2Rlc1swXSA9IHt0eXBlOiA0LCBpbmRleDogODh9Oy8vIFJOTShhbHBoYW51bSlcblxuICAvKiBSdWxlTmFtZUVycm9yICovXG4gIHRoaXMucnVsZXNbNl0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzZdLm9wY29kZXNbMF0gPSB7dHlwZTogMywgbWluOiAxLCBtYXg6IEluZmluaXR5fTsvLyBSRVBcbiAgdGhpcy5ydWxlc1s2XS5vcGNvZGVzWzFdID0ge3R5cGU6IDEsIGNoaWxkcmVuOiBbMiwzXX07Ly8gQUxUXG4gIHRoaXMucnVsZXNbNl0ub3Bjb2Rlc1syXSA9IHt0eXBlOiA1LCBtaW46IDMzLCBtYXg6IDYwfTsvLyBUUkdcbiAgdGhpcy5ydWxlc1s2XS5vcGNvZGVzWzNdID0ge3R5cGU6IDUsIG1pbjogNjIsIG1heDogMTI2fTsvLyBUUkdcblxuICAvKiBEZWZpbmVkQXNUZXN0ICovXG4gIHRoaXMucnVsZXNbN10ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzddLm9wY29kZXNbMF0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsxLDJdfTsvLyBBTFRcbiAgdGhpcy5ydWxlc1s3XS5vcGNvZGVzWzFdID0ge3R5cGU6IDQsIGluZGV4OiA5fTsvLyBSTk0oRGVmaW5lZEFzKVxuICB0aGlzLnJ1bGVzWzddLm9wY29kZXNbMl0gPSB7dHlwZTogNCwgaW5kZXg6IDh9Oy8vIFJOTShEZWZpbmVkQXNFcnJvcilcblxuICAvKiBEZWZpbmVkQXNFcnJvciAqL1xuICB0aGlzLnJ1bGVzWzhdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s4XS5vcGNvZGVzWzBdID0ge3R5cGU6IDMsIG1pbjogMSwgbWF4OiAyfTsvLyBSRVBcbiAgdGhpcy5ydWxlc1s4XS5vcGNvZGVzWzFdID0ge3R5cGU6IDUsIG1pbjogMzMsIG1heDogMTI2fTsvLyBUUkdcblxuICAvKiBEZWZpbmVkQXMgKi9cbiAgdGhpcy5ydWxlc1s5XS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbOV0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAxLCBjaGlsZHJlbjogWzEsMl19Oy8vIEFMVFxuICB0aGlzLnJ1bGVzWzldLm9wY29kZXNbMV0gPSB7dHlwZTogNCwgaW5kZXg6IDExfTsvLyBSTk0oSW5jQWx0KVxuICB0aGlzLnJ1bGVzWzldLm9wY29kZXNbMl0gPSB7dHlwZTogNCwgaW5kZXg6IDEwfTsvLyBSTk0oRGVmaW5lZClcblxuICAvKiBEZWZpbmVkICovXG4gIHRoaXMucnVsZXNbMTBdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1sxMF0ub3Bjb2Rlc1swXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFs2MV19Oy8vIFRCU1xuXG4gIC8qIEluY0FsdCAqL1xuICB0aGlzLnJ1bGVzWzExXS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbMTFdLm9wY29kZXNbMF0gPSB7dHlwZTogNiwgc3RyaW5nOiBbNjEsNDddfTsvLyBUQlNcblxuICAvKiBSdWxlRXJyb3IgKi9cbiAgdGhpcy5ydWxlc1sxMl0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzEyXS5vcGNvZGVzWzBdID0ge3R5cGU6IDIsIGNoaWxkcmVuOiBbMSw2XX07Ly8gQ0FUXG4gIHRoaXMucnVsZXNbMTJdLm9wY29kZXNbMV0gPSB7dHlwZTogMywgbWluOiAxLCBtYXg6IEluZmluaXR5fTsvLyBSRVBcbiAgdGhpcy5ydWxlc1sxMl0ub3Bjb2Rlc1syXSA9IHt0eXBlOiAxLCBjaGlsZHJlbjogWzMsNCw1XX07Ly8gQUxUXG4gIHRoaXMucnVsZXNbMTJdLm9wY29kZXNbM10gPSB7dHlwZTogNSwgbWluOiAzMiwgbWF4OiAxMjZ9Oy8vIFRSR1xuICB0aGlzLnJ1bGVzWzEyXS5vcGNvZGVzWzRdID0ge3R5cGU6IDYsIHN0cmluZzogWzldfTsvLyBUQlNcbiAgdGhpcy5ydWxlc1sxMl0ub3Bjb2Rlc1s1XSA9IHt0eXBlOiA0LCBpbmRleDogOTR9Oy8vIFJOTShMaW5lQ29udGludWUpXG4gIHRoaXMucnVsZXNbMTJdLm9wY29kZXNbNl0gPSB7dHlwZTogNCwgaW5kZXg6IDkzfTsvLyBSTk0oTGluZUVuZClcblxuICAvKiBMaW5lRW5kRXJyb3IgKi9cbiAgdGhpcy5ydWxlc1sxM10ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzEzXS5vcGNvZGVzWzBdID0ge3R5cGU6IDMsIG1pbjogMSwgbWF4OiBJbmZpbml0eX07Ly8gUkVQXG4gIHRoaXMucnVsZXNbMTNdLm9wY29kZXNbMV0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsyLDMsNF19Oy8vIEFMVFxuICB0aGlzLnJ1bGVzWzEzXS5vcGNvZGVzWzJdID0ge3R5cGU6IDUsIG1pbjogMzIsIG1heDogMTI2fTsvLyBUUkdcbiAgdGhpcy5ydWxlc1sxM10ub3Bjb2Rlc1szXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFs5XX07Ly8gVEJTXG4gIHRoaXMucnVsZXNbMTNdLm9wY29kZXNbNF0gPSB7dHlwZTogNCwgaW5kZXg6IDk0fTsvLyBSTk0oTGluZUNvbnRpbnVlKVxuXG4gIC8qIEFsdGVybmF0aW9uICovXG4gIHRoaXMucnVsZXNbMTRdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1sxNF0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzEsMl19Oy8vIENBVFxuICB0aGlzLnJ1bGVzWzE0XS5vcGNvZGVzWzFdID0ge3R5cGU6IDQsIGluZGV4OiAxNX07Ly8gUk5NKENvbmNhdGVuYXRpb24pXG4gIHRoaXMucnVsZXNbMTRdLm9wY29kZXNbMl0gPSB7dHlwZTogMywgbWluOiAwLCBtYXg6IEluZmluaXR5fTsvLyBSRVBcbiAgdGhpcy5ydWxlc1sxNF0ub3Bjb2Rlc1szXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzQsNSw2XX07Ly8gQ0FUXG4gIHRoaXMucnVsZXNbMTRdLm9wY29kZXNbNF0gPSB7dHlwZTogNCwgaW5kZXg6IDg5fTsvLyBSTk0ob3dzcClcbiAgdGhpcy5ydWxlc1sxNF0ub3Bjb2Rlc1s1XSA9IHt0eXBlOiA0LCBpbmRleDogNDR9Oy8vIFJOTShBbHRPcClcbiAgdGhpcy5ydWxlc1sxNF0ub3Bjb2Rlc1s2XSA9IHt0eXBlOiA0LCBpbmRleDogMTV9Oy8vIFJOTShDb25jYXRlbmF0aW9uKVxuXG4gIC8qIENvbmNhdGVuYXRpb24gKi9cbiAgdGhpcy5ydWxlc1sxNV0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzE1XS5vcGNvZGVzWzBdID0ge3R5cGU6IDIsIGNoaWxkcmVuOiBbMSwyXX07Ly8gQ0FUXG4gIHRoaXMucnVsZXNbMTVdLm9wY29kZXNbMV0gPSB7dHlwZTogNCwgaW5kZXg6IDE2fTsvLyBSTk0oUmVwZXRpdGlvbilcbiAgdGhpcy5ydWxlc1sxNV0ub3Bjb2Rlc1syXSA9IHt0eXBlOiAzLCBtaW46IDAsIG1heDogSW5maW5pdHl9Oy8vIFJFUFxuICB0aGlzLnJ1bGVzWzE1XS5vcGNvZGVzWzNdID0ge3R5cGU6IDIsIGNoaWxkcmVuOiBbNCw1XX07Ly8gQ0FUXG4gIHRoaXMucnVsZXNbMTVdLm9wY29kZXNbNF0gPSB7dHlwZTogNCwgaW5kZXg6IDQ1fTsvLyBSTk0oQ2F0T3ApXG4gIHRoaXMucnVsZXNbMTVdLm9wY29kZXNbNV0gPSB7dHlwZTogNCwgaW5kZXg6IDE2fTsvLyBSTk0oUmVwZXRpdGlvbilcblxuICAvKiBSZXBldGl0aW9uICovXG4gIHRoaXMucnVsZXNbMTZdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1sxNl0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzEsM119Oy8vIENBVFxuICB0aGlzLnJ1bGVzWzE2XS5vcGNvZGVzWzFdID0ge3R5cGU6IDMsIG1pbjogMCwgbWF4OiAxfTsvLyBSRVBcbiAgdGhpcy5ydWxlc1sxNl0ub3Bjb2Rlc1syXSA9IHt0eXBlOiA0LCBpbmRleDogMTd9Oy8vIFJOTShNb2RpZmllcilcbiAgdGhpcy5ydWxlc1sxNl0ub3Bjb2Rlc1szXSA9IHt0eXBlOiAxLCBjaGlsZHJlbjogWzQsNSw2LDddfTsvLyBBTFRcbiAgdGhpcy5ydWxlc1sxNl0ub3Bjb2Rlc1s0XSA9IHt0eXBlOiA0LCBpbmRleDogMjF9Oy8vIFJOTShHcm91cClcbiAgdGhpcy5ydWxlc1sxNl0ub3Bjb2Rlc1s1XSA9IHt0eXBlOiA0LCBpbmRleDogMjV9Oy8vIFJOTShPcHRpb24pXG4gIHRoaXMucnVsZXNbMTZdLm9wY29kZXNbNl0gPSB7dHlwZTogNCwgaW5kZXg6IDE5fTsvLyBSTk0oQmFzaWNFbGVtZW50KVxuICB0aGlzLnJ1bGVzWzE2XS5vcGNvZGVzWzddID0ge3R5cGU6IDQsIGluZGV4OiAyMH07Ly8gUk5NKEJhc2ljRWxlbWVudEVycilcblxuICAvKiBNb2RpZmllciAqL1xuICB0aGlzLnJ1bGVzWzE3XS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbMTddLm9wY29kZXNbMF0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsxLDVdfTsvLyBBTFRcbiAgdGhpcy5ydWxlc1sxN10ub3Bjb2Rlc1sxXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzIsM119Oy8vIENBVFxuICB0aGlzLnJ1bGVzWzE3XS5vcGNvZGVzWzJdID0ge3R5cGU6IDQsIGluZGV4OiAxOH07Ly8gUk5NKFByZWRpY2F0ZSlcbiAgdGhpcy5ydWxlc1sxN10ub3Bjb2Rlc1szXSA9IHt0eXBlOiAzLCBtaW46IDAsIG1heDogMX07Ly8gUkVQXG4gIHRoaXMucnVsZXNbMTddLm9wY29kZXNbNF0gPSB7dHlwZTogNCwgaW5kZXg6IDQzfTsvLyBSTk0oUmVwT3ApXG4gIHRoaXMucnVsZXNbMTddLm9wY29kZXNbNV0gPSB7dHlwZTogNCwgaW5kZXg6IDQzfTsvLyBSTk0oUmVwT3ApXG5cbiAgLyogUHJlZGljYXRlICovXG4gIHRoaXMucnVsZXNbMThdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1sxOF0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAxLCBjaGlsZHJlbjogWzEsMiwzLDRdfTsvLyBBTFRcbiAgdGhpcy5ydWxlc1sxOF0ub3Bjb2Rlc1sxXSA9IHt0eXBlOiA0LCBpbmRleDogNDl9Oy8vIFJOTShCa2FPcClcbiAgdGhpcy5ydWxlc1sxOF0ub3Bjb2Rlc1syXSA9IHt0eXBlOiA0LCBpbmRleDogNTB9Oy8vIFJOTShCa25PcClcbiAgdGhpcy5ydWxlc1sxOF0ub3Bjb2Rlc1szXSA9IHt0eXBlOiA0LCBpbmRleDogNDd9Oy8vIFJOTShBbmRPcClcbiAgdGhpcy5ydWxlc1sxOF0ub3Bjb2Rlc1s0XSA9IHt0eXBlOiA0LCBpbmRleDogNDh9Oy8vIFJOTShOb3RPcClcblxuICAvKiBCYXNpY0VsZW1lbnQgKi9cbiAgdGhpcy5ydWxlc1sxOV0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzE5XS5vcGNvZGVzWzBdID0ge3R5cGU6IDEsIGNoaWxkcmVuOiBbMSwyLDMsNCw1LDYsNyw4LDksMTBdfTsvLyBBTFRcbiAgdGhpcy5ydWxlc1sxOV0ub3Bjb2Rlc1sxXSA9IHt0eXBlOiA0LCBpbmRleDogNDB9Oy8vIFJOTShVZHRPcClcbiAgdGhpcy5ydWxlc1sxOV0ub3Bjb2Rlc1syXSA9IHt0eXBlOiA0LCBpbmRleDogMjl9Oy8vIFJOTShSbm1PcClcbiAgdGhpcy5ydWxlc1sxOV0ub3Bjb2Rlc1szXSA9IHt0eXBlOiA0LCBpbmRleDogNTN9Oy8vIFJOTShUcmdPcClcbiAgdGhpcy5ydWxlc1sxOV0ub3Bjb2Rlc1s0XSA9IHt0eXBlOiA0LCBpbmRleDogNTR9Oy8vIFJOTShUYnNPcClcbiAgdGhpcy5ydWxlc1sxOV0ub3Bjb2Rlc1s1XSA9IHt0eXBlOiA0LCBpbmRleDogNTV9Oy8vIFJOTShUbHNPcClcbiAgdGhpcy5ydWxlc1sxOV0ub3Bjb2Rlc1s2XSA9IHt0eXBlOiA0LCBpbmRleDogNjF9Oy8vIFJOTShDbHNPcClcbiAgdGhpcy5ydWxlc1sxOV0ub3Bjb2Rlc1s3XSA9IHt0eXBlOiA0LCBpbmRleDogMzB9Oy8vIFJOTShCa3JPcClcbiAgdGhpcy5ydWxlc1sxOV0ub3Bjb2Rlc1s4XSA9IHt0eXBlOiA0LCBpbmRleDogNTF9Oy8vIFJOTShBYmdPcClcbiAgdGhpcy5ydWxlc1sxOV0ub3Bjb2Rlc1s5XSA9IHt0eXBlOiA0LCBpbmRleDogNTJ9Oy8vIFJOTShBZW5PcClcbiAgdGhpcy5ydWxlc1sxOV0ub3Bjb2Rlc1sxMF0gPSB7dHlwZTogNCwgaW5kZXg6IDY1fTsvLyBSTk0oUHJvc1ZhbClcblxuICAvKiBCYXNpY0VsZW1lbnRFcnIgKi9cbiAgdGhpcy5ydWxlc1syMF0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzIwXS5vcGNvZGVzWzBdID0ge3R5cGU6IDMsIG1pbjogMSwgbWF4OiBJbmZpbml0eX07Ly8gUkVQXG4gIHRoaXMucnVsZXNbMjBdLm9wY29kZXNbMV0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsyLDMsNCw1XX07Ly8gQUxUXG4gIHRoaXMucnVsZXNbMjBdLm9wY29kZXNbMl0gPSB7dHlwZTogNSwgbWluOiAzMywgbWF4OiA0MH07Ly8gVFJHXG4gIHRoaXMucnVsZXNbMjBdLm9wY29kZXNbM10gPSB7dHlwZTogNSwgbWluOiA0MiwgbWF4OiA0Nn07Ly8gVFJHXG4gIHRoaXMucnVsZXNbMjBdLm9wY29kZXNbNF0gPSB7dHlwZTogNSwgbWluOiA0OCwgbWF4OiA5Mn07Ly8gVFJHXG4gIHRoaXMucnVsZXNbMjBdLm9wY29kZXNbNV0gPSB7dHlwZTogNSwgbWluOiA5NCwgbWF4OiAxMjZ9Oy8vIFRSR1xuXG4gIC8qIEdyb3VwICovXG4gIHRoaXMucnVsZXNbMjFdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1syMV0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzEsMiwzXX07Ly8gQ0FUXG4gIHRoaXMucnVsZXNbMjFdLm9wY29kZXNbMV0gPSB7dHlwZTogNCwgaW5kZXg6IDIzfTsvLyBSTk0oR3JvdXBPcGVuKVxuICB0aGlzLnJ1bGVzWzIxXS5vcGNvZGVzWzJdID0ge3R5cGU6IDQsIGluZGV4OiAxNH07Ly8gUk5NKEFsdGVybmF0aW9uKVxuICB0aGlzLnJ1bGVzWzIxXS5vcGNvZGVzWzNdID0ge3R5cGU6IDEsIGNoaWxkcmVuOiBbNCw1XX07Ly8gQUxUXG4gIHRoaXMucnVsZXNbMjFdLm9wY29kZXNbNF0gPSB7dHlwZTogNCwgaW5kZXg6IDI0fTsvLyBSTk0oR3JvdXBDbG9zZSlcbiAgdGhpcy5ydWxlc1syMV0ub3Bjb2Rlc1s1XSA9IHt0eXBlOiA0LCBpbmRleDogMjJ9Oy8vIFJOTShHcm91cEVycm9yKVxuXG4gIC8qIEdyb3VwRXJyb3IgKi9cbiAgdGhpcy5ydWxlc1syMl0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzIyXS5vcGNvZGVzWzBdID0ge3R5cGU6IDMsIG1pbjogMSwgbWF4OiBJbmZpbml0eX07Ly8gUkVQXG4gIHRoaXMucnVsZXNbMjJdLm9wY29kZXNbMV0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsyLDMsNCw1XX07Ly8gQUxUXG4gIHRoaXMucnVsZXNbMjJdLm9wY29kZXNbMl0gPSB7dHlwZTogNSwgbWluOiAzMywgbWF4OiA0MH07Ly8gVFJHXG4gIHRoaXMucnVsZXNbMjJdLm9wY29kZXNbM10gPSB7dHlwZTogNSwgbWluOiA0MiwgbWF4OiA0Nn07Ly8gVFJHXG4gIHRoaXMucnVsZXNbMjJdLm9wY29kZXNbNF0gPSB7dHlwZTogNSwgbWluOiA0OCwgbWF4OiA5Mn07Ly8gVFJHXG4gIHRoaXMucnVsZXNbMjJdLm9wY29kZXNbNV0gPSB7dHlwZTogNSwgbWluOiA5NCwgbWF4OiAxMjZ9Oy8vIFRSR1xuXG4gIC8qIEdyb3VwT3BlbiAqL1xuICB0aGlzLnJ1bGVzWzIzXS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbMjNdLm9wY29kZXNbMF0gPSB7dHlwZTogMiwgY2hpbGRyZW46IFsxLDJdfTsvLyBDQVRcbiAgdGhpcy5ydWxlc1syM10ub3Bjb2Rlc1sxXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFs0MF19Oy8vIFRCU1xuICB0aGlzLnJ1bGVzWzIzXS5vcGNvZGVzWzJdID0ge3R5cGU6IDQsIGluZGV4OiA4OX07Ly8gUk5NKG93c3ApXG5cbiAgLyogR3JvdXBDbG9zZSAqL1xuICB0aGlzLnJ1bGVzWzI0XS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbMjRdLm9wY29kZXNbMF0gPSB7dHlwZTogMiwgY2hpbGRyZW46IFsxLDJdfTsvLyBDQVRcbiAgdGhpcy5ydWxlc1syNF0ub3Bjb2Rlc1sxXSA9IHt0eXBlOiA0LCBpbmRleDogODl9Oy8vIFJOTShvd3NwKVxuICB0aGlzLnJ1bGVzWzI0XS5vcGNvZGVzWzJdID0ge3R5cGU6IDYsIHN0cmluZzogWzQxXX07Ly8gVEJTXG5cbiAgLyogT3B0aW9uICovXG4gIHRoaXMucnVsZXNbMjVdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1syNV0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzEsMiwzXX07Ly8gQ0FUXG4gIHRoaXMucnVsZXNbMjVdLm9wY29kZXNbMV0gPSB7dHlwZTogNCwgaW5kZXg6IDI3fTsvLyBSTk0oT3B0aW9uT3BlbilcbiAgdGhpcy5ydWxlc1syNV0ub3Bjb2Rlc1syXSA9IHt0eXBlOiA0LCBpbmRleDogMTR9Oy8vIFJOTShBbHRlcm5hdGlvbilcbiAgdGhpcy5ydWxlc1syNV0ub3Bjb2Rlc1szXSA9IHt0eXBlOiAxLCBjaGlsZHJlbjogWzQsNV19Oy8vIEFMVFxuICB0aGlzLnJ1bGVzWzI1XS5vcGNvZGVzWzRdID0ge3R5cGU6IDQsIGluZGV4OiAyOH07Ly8gUk5NKE9wdGlvbkNsb3NlKVxuICB0aGlzLnJ1bGVzWzI1XS5vcGNvZGVzWzVdID0ge3R5cGU6IDQsIGluZGV4OiAyNn07Ly8gUk5NKE9wdGlvbkVycm9yKVxuXG4gIC8qIE9wdGlvbkVycm9yICovXG4gIHRoaXMucnVsZXNbMjZdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1syNl0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAzLCBtaW46IDEsIG1heDogSW5maW5pdHl9Oy8vIFJFUFxuICB0aGlzLnJ1bGVzWzI2XS5vcGNvZGVzWzFdID0ge3R5cGU6IDEsIGNoaWxkcmVuOiBbMiwzLDQsNV19Oy8vIEFMVFxuICB0aGlzLnJ1bGVzWzI2XS5vcGNvZGVzWzJdID0ge3R5cGU6IDUsIG1pbjogMzMsIG1heDogNDB9Oy8vIFRSR1xuICB0aGlzLnJ1bGVzWzI2XS5vcGNvZGVzWzNdID0ge3R5cGU6IDUsIG1pbjogNDIsIG1heDogNDZ9Oy8vIFRSR1xuICB0aGlzLnJ1bGVzWzI2XS5vcGNvZGVzWzRdID0ge3R5cGU6IDUsIG1pbjogNDgsIG1heDogOTJ9Oy8vIFRSR1xuICB0aGlzLnJ1bGVzWzI2XS5vcGNvZGVzWzVdID0ge3R5cGU6IDUsIG1pbjogOTQsIG1heDogMTI2fTsvLyBUUkdcblxuICAvKiBPcHRpb25PcGVuICovXG4gIHRoaXMucnVsZXNbMjddLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1syN10ub3Bjb2Rlc1swXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzEsMl19Oy8vIENBVFxuICB0aGlzLnJ1bGVzWzI3XS5vcGNvZGVzWzFdID0ge3R5cGU6IDYsIHN0cmluZzogWzkxXX07Ly8gVEJTXG4gIHRoaXMucnVsZXNbMjddLm9wY29kZXNbMl0gPSB7dHlwZTogNCwgaW5kZXg6IDg5fTsvLyBSTk0ob3dzcClcblxuICAvKiBPcHRpb25DbG9zZSAqL1xuICB0aGlzLnJ1bGVzWzI4XS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbMjhdLm9wY29kZXNbMF0gPSB7dHlwZTogMiwgY2hpbGRyZW46IFsxLDJdfTsvLyBDQVRcbiAgdGhpcy5ydWxlc1syOF0ub3Bjb2Rlc1sxXSA9IHt0eXBlOiA0LCBpbmRleDogODl9Oy8vIFJOTShvd3NwKVxuICB0aGlzLnJ1bGVzWzI4XS5vcGNvZGVzWzJdID0ge3R5cGU6IDYsIHN0cmluZzogWzkzXX07Ly8gVEJTXG5cbiAgLyogUm5tT3AgKi9cbiAgdGhpcy5ydWxlc1syOV0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzI5XS5vcGNvZGVzWzBdID0ge3R5cGU6IDQsIGluZGV4OiA4OH07Ly8gUk5NKGFscGhhbnVtKVxuXG4gIC8qIEJrck9wICovXG4gIHRoaXMucnVsZXNbMzBdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1szMF0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzEsMiw0XX07Ly8gQ0FUXG4gIHRoaXMucnVsZXNbMzBdLm9wY29kZXNbMV0gPSB7dHlwZTogNiwgc3RyaW5nOiBbOTJdfTsvLyBUQlNcbiAgdGhpcy5ydWxlc1szMF0ub3Bjb2Rlc1syXSA9IHt0eXBlOiAzLCBtaW46IDAsIG1heDogMX07Ly8gUkVQXG4gIHRoaXMucnVsZXNbMzBdLm9wY29kZXNbM10gPSB7dHlwZTogNCwgaW5kZXg6IDMxfTsvLyBSTk0oYmtyTW9kaWZpZXIpXG4gIHRoaXMucnVsZXNbMzBdLm9wY29kZXNbNF0gPSB7dHlwZTogNCwgaW5kZXg6IDM2fTsvLyBSTk0oYmtyLW5hbWUpXG5cbiAgLyogYmtyTW9kaWZpZXIgKi9cbiAgdGhpcy5ydWxlc1szMV0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzMxXS5vcGNvZGVzWzBdID0ge3R5cGU6IDEsIGNoaWxkcmVuOiBbMSw3LDEzLDE5XX07Ly8gQUxUXG4gIHRoaXMucnVsZXNbMzFdLm9wY29kZXNbMV0gPSB7dHlwZTogMiwgY2hpbGRyZW46IFsyLDNdfTsvLyBDQVRcbiAgdGhpcy5ydWxlc1szMV0ub3Bjb2Rlc1syXSA9IHt0eXBlOiA0LCBpbmRleDogMzJ9Oy8vIFJOTShjcylcbiAgdGhpcy5ydWxlc1szMV0ub3Bjb2Rlc1szXSA9IHt0eXBlOiAzLCBtaW46IDAsIG1heDogMX07Ly8gUkVQXG4gIHRoaXMucnVsZXNbMzFdLm9wY29kZXNbNF0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFs1LDZdfTsvLyBBTFRcbiAgdGhpcy5ydWxlc1szMV0ub3Bjb2Rlc1s1XSA9IHt0eXBlOiA0LCBpbmRleDogMzR9Oy8vIFJOTSh1bSlcbiAgdGhpcy5ydWxlc1szMV0ub3Bjb2Rlc1s2XSA9IHt0eXBlOiA0LCBpbmRleDogMzV9Oy8vIFJOTShwbSlcbiAgdGhpcy5ydWxlc1szMV0ub3Bjb2Rlc1s3XSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzgsOV19Oy8vIENBVFxuICB0aGlzLnJ1bGVzWzMxXS5vcGNvZGVzWzhdID0ge3R5cGU6IDQsIGluZGV4OiAzM307Ly8gUk5NKGNpKVxuICB0aGlzLnJ1bGVzWzMxXS5vcGNvZGVzWzldID0ge3R5cGU6IDMsIG1pbjogMCwgbWF4OiAxfTsvLyBSRVBcbiAgdGhpcy5ydWxlc1szMV0ub3Bjb2Rlc1sxMF0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsxMSwxMl19Oy8vIEFMVFxuICB0aGlzLnJ1bGVzWzMxXS5vcGNvZGVzWzExXSA9IHt0eXBlOiA0LCBpbmRleDogMzR9Oy8vIFJOTSh1bSlcbiAgdGhpcy5ydWxlc1szMV0ub3Bjb2Rlc1sxMl0gPSB7dHlwZTogNCwgaW5kZXg6IDM1fTsvLyBSTk0ocG0pXG4gIHRoaXMucnVsZXNbMzFdLm9wY29kZXNbMTNdID0ge3R5cGU6IDIsIGNoaWxkcmVuOiBbMTQsMTVdfTsvLyBDQVRcbiAgdGhpcy5ydWxlc1szMV0ub3Bjb2Rlc1sxNF0gPSB7dHlwZTogNCwgaW5kZXg6IDM0fTsvLyBSTk0odW0pXG4gIHRoaXMucnVsZXNbMzFdLm9wY29kZXNbMTVdID0ge3R5cGU6IDMsIG1pbjogMCwgbWF4OiAxfTsvLyBSRVBcbiAgdGhpcy5ydWxlc1szMV0ub3Bjb2Rlc1sxNl0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsxNywxOF19Oy8vIEFMVFxuICB0aGlzLnJ1bGVzWzMxXS5vcGNvZGVzWzE3XSA9IHt0eXBlOiA0LCBpbmRleDogMzJ9Oy8vIFJOTShjcylcbiAgdGhpcy5ydWxlc1szMV0ub3Bjb2Rlc1sxOF0gPSB7dHlwZTogNCwgaW5kZXg6IDMzfTsvLyBSTk0oY2kpXG4gIHRoaXMucnVsZXNbMzFdLm9wY29kZXNbMTldID0ge3R5cGU6IDIsIGNoaWxkcmVuOiBbMjAsMjFdfTsvLyBDQVRcbiAgdGhpcy5ydWxlc1szMV0ub3Bjb2Rlc1syMF0gPSB7dHlwZTogNCwgaW5kZXg6IDM1fTsvLyBSTk0ocG0pXG4gIHRoaXMucnVsZXNbMzFdLm9wY29kZXNbMjFdID0ge3R5cGU6IDMsIG1pbjogMCwgbWF4OiAxfTsvLyBSRVBcbiAgdGhpcy5ydWxlc1szMV0ub3Bjb2Rlc1syMl0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsyMywyNF19Oy8vIEFMVFxuICB0aGlzLnJ1bGVzWzMxXS5vcGNvZGVzWzIzXSA9IHt0eXBlOiA0LCBpbmRleDogMzJ9Oy8vIFJOTShjcylcbiAgdGhpcy5ydWxlc1szMV0ub3Bjb2Rlc1syNF0gPSB7dHlwZTogNCwgaW5kZXg6IDMzfTsvLyBSTk0oY2kpXG5cbiAgLyogY3MgKi9cbiAgdGhpcy5ydWxlc1szMl0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzMyXS5vcGNvZGVzWzBdID0ge3R5cGU6IDYsIHN0cmluZzogWzM3LDExNV19Oy8vIFRCU1xuXG4gIC8qIGNpICovXG4gIHRoaXMucnVsZXNbMzNdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1szM10ub3Bjb2Rlc1swXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFszNywxMDVdfTsvLyBUQlNcblxuICAvKiB1bSAqL1xuICB0aGlzLnJ1bGVzWzM0XS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbMzRdLm9wY29kZXNbMF0gPSB7dHlwZTogNiwgc3RyaW5nOiBbMzcsMTE3XX07Ly8gVEJTXG5cbiAgLyogcG0gKi9cbiAgdGhpcy5ydWxlc1szNV0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzM1XS5vcGNvZGVzWzBdID0ge3R5cGU6IDYsIHN0cmluZzogWzM3LDExMl19Oy8vIFRCU1xuXG4gIC8qIGJrci1uYW1lICovXG4gIHRoaXMucnVsZXNbMzZdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1szNl0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAxLCBjaGlsZHJlbjogWzEsMiwzXX07Ly8gQUxUXG4gIHRoaXMucnVsZXNbMzZdLm9wY29kZXNbMV0gPSB7dHlwZTogNCwgaW5kZXg6IDM4fTsvLyBSTk0odW5hbWUpXG4gIHRoaXMucnVsZXNbMzZdLm9wY29kZXNbMl0gPSB7dHlwZTogNCwgaW5kZXg6IDM5fTsvLyBSTk0oZW5hbWUpXG4gIHRoaXMucnVsZXNbMzZdLm9wY29kZXNbM10gPSB7dHlwZTogNCwgaW5kZXg6IDM3fTsvLyBSTk0ocm5hbWUpXG5cbiAgLyogcm5hbWUgKi9cbiAgdGhpcy5ydWxlc1szN10ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzM3XS5vcGNvZGVzWzBdID0ge3R5cGU6IDQsIGluZGV4OiA4OH07Ly8gUk5NKGFscGhhbnVtKVxuXG4gIC8qIHVuYW1lICovXG4gIHRoaXMucnVsZXNbMzhdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1szOF0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzEsMl19Oy8vIENBVFxuICB0aGlzLnJ1bGVzWzM4XS5vcGNvZGVzWzFdID0ge3R5cGU6IDYsIHN0cmluZzogWzExNyw5NV19Oy8vIFRCU1xuICB0aGlzLnJ1bGVzWzM4XS5vcGNvZGVzWzJdID0ge3R5cGU6IDQsIGluZGV4OiA4OH07Ly8gUk5NKGFscGhhbnVtKVxuXG4gIC8qIGVuYW1lICovXG4gIHRoaXMucnVsZXNbMzldLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1szOV0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzEsMl19Oy8vIENBVFxuICB0aGlzLnJ1bGVzWzM5XS5vcGNvZGVzWzFdID0ge3R5cGU6IDYsIHN0cmluZzogWzEwMSw5NV19Oy8vIFRCU1xuICB0aGlzLnJ1bGVzWzM5XS5vcGNvZGVzWzJdID0ge3R5cGU6IDQsIGluZGV4OiA4OH07Ly8gUk5NKGFscGhhbnVtKVxuXG4gIC8qIFVkdE9wICovXG4gIHRoaXMucnVsZXNbNDBdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s0MF0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAxLCBjaGlsZHJlbjogWzEsMl19Oy8vIEFMVFxuICB0aGlzLnJ1bGVzWzQwXS5vcGNvZGVzWzFdID0ge3R5cGU6IDQsIGluZGV4OiA0Mn07Ly8gUk5NKHVkdC1lbXB0eSlcbiAgdGhpcy5ydWxlc1s0MF0ub3Bjb2Rlc1syXSA9IHt0eXBlOiA0LCBpbmRleDogNDF9Oy8vIFJOTSh1ZHQtbm9uLWVtcHR5KVxuXG4gIC8qIHVkdC1ub24tZW1wdHkgKi9cbiAgdGhpcy5ydWxlc1s0MV0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzQxXS5vcGNvZGVzWzBdID0ge3R5cGU6IDIsIGNoaWxkcmVuOiBbMSwyXX07Ly8gQ0FUXG4gIHRoaXMucnVsZXNbNDFdLm9wY29kZXNbMV0gPSB7dHlwZTogNiwgc3RyaW5nOiBbMTE3LDk1XX07Ly8gVEJTXG4gIHRoaXMucnVsZXNbNDFdLm9wY29kZXNbMl0gPSB7dHlwZTogNCwgaW5kZXg6IDg4fTsvLyBSTk0oYWxwaGFudW0pXG5cbiAgLyogdWR0LWVtcHR5ICovXG4gIHRoaXMucnVsZXNbNDJdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s0Ml0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzEsMl19Oy8vIENBVFxuICB0aGlzLnJ1bGVzWzQyXS5vcGNvZGVzWzFdID0ge3R5cGU6IDYsIHN0cmluZzogWzEwMSw5NV19Oy8vIFRCU1xuICB0aGlzLnJ1bGVzWzQyXS5vcGNvZGVzWzJdID0ge3R5cGU6IDQsIGluZGV4OiA4OH07Ly8gUk5NKGFscGhhbnVtKVxuXG4gIC8qIFJlcE9wICovXG4gIHRoaXMucnVsZXNbNDNdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s0M10ub3Bjb2Rlc1swXSA9IHt0eXBlOiAxLCBjaGlsZHJlbjogWzEsNSw4LDExLDEyXX07Ly8gQUxUXG4gIHRoaXMucnVsZXNbNDNdLm9wY29kZXNbMV0gPSB7dHlwZTogMiwgY2hpbGRyZW46IFsyLDMsNF19Oy8vIENBVFxuICB0aGlzLnJ1bGVzWzQzXS5vcGNvZGVzWzJdID0ge3R5cGU6IDQsIGluZGV4OiA2OX07Ly8gUk5NKHJlcC1taW4pXG4gIHRoaXMucnVsZXNbNDNdLm9wY29kZXNbM10gPSB7dHlwZTogNCwgaW5kZXg6IDQ2fTsvLyBSTk0oU3Rhck9wKVxuICB0aGlzLnJ1bGVzWzQzXS5vcGNvZGVzWzRdID0ge3R5cGU6IDQsIGluZGV4OiA3MX07Ly8gUk5NKHJlcC1tYXgpXG4gIHRoaXMucnVsZXNbNDNdLm9wY29kZXNbNV0gPSB7dHlwZTogMiwgY2hpbGRyZW46IFs2LDddfTsvLyBDQVRcbiAgdGhpcy5ydWxlc1s0M10ub3Bjb2Rlc1s2XSA9IHt0eXBlOiA0LCBpbmRleDogNjl9Oy8vIFJOTShyZXAtbWluKVxuICB0aGlzLnJ1bGVzWzQzXS5vcGNvZGVzWzddID0ge3R5cGU6IDQsIGluZGV4OiA0Nn07Ly8gUk5NKFN0YXJPcClcbiAgdGhpcy5ydWxlc1s0M10ub3Bjb2Rlc1s4XSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzksMTBdfTsvLyBDQVRcbiAgdGhpcy5ydWxlc1s0M10ub3Bjb2Rlc1s5XSA9IHt0eXBlOiA0LCBpbmRleDogNDZ9Oy8vIFJOTShTdGFyT3ApXG4gIHRoaXMucnVsZXNbNDNdLm9wY29kZXNbMTBdID0ge3R5cGU6IDQsIGluZGV4OiA3MX07Ly8gUk5NKHJlcC1tYXgpXG4gIHRoaXMucnVsZXNbNDNdLm9wY29kZXNbMTFdID0ge3R5cGU6IDQsIGluZGV4OiA0Nn07Ly8gUk5NKFN0YXJPcClcbiAgdGhpcy5ydWxlc1s0M10ub3Bjb2Rlc1sxMl0gPSB7dHlwZTogNCwgaW5kZXg6IDcwfTsvLyBSTk0ocmVwLW1pbi1tYXgpXG5cbiAgLyogQWx0T3AgKi9cbiAgdGhpcy5ydWxlc1s0NF0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzQ0XS5vcGNvZGVzWzBdID0ge3R5cGU6IDIsIGNoaWxkcmVuOiBbMSwyXX07Ly8gQ0FUXG4gIHRoaXMucnVsZXNbNDRdLm9wY29kZXNbMV0gPSB7dHlwZTogNiwgc3RyaW5nOiBbNDddfTsvLyBUQlNcbiAgdGhpcy5ydWxlc1s0NF0ub3Bjb2Rlc1syXSA9IHt0eXBlOiA0LCBpbmRleDogODl9Oy8vIFJOTShvd3NwKVxuXG4gIC8qIENhdE9wICovXG4gIHRoaXMucnVsZXNbNDVdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s0NV0ub3Bjb2Rlc1swXSA9IHt0eXBlOiA0LCBpbmRleDogOTB9Oy8vIFJOTSh3c3ApXG5cbiAgLyogU3Rhck9wICovXG4gIHRoaXMucnVsZXNbNDZdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s0Nl0ub3Bjb2Rlc1swXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFs0Ml19Oy8vIFRCU1xuXG4gIC8qIEFuZE9wICovXG4gIHRoaXMucnVsZXNbNDddLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s0N10ub3Bjb2Rlc1swXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFszOF19Oy8vIFRCU1xuXG4gIC8qIE5vdE9wICovXG4gIHRoaXMucnVsZXNbNDhdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s0OF0ub3Bjb2Rlc1swXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFszM119Oy8vIFRCU1xuXG4gIC8qIEJrYU9wICovXG4gIHRoaXMucnVsZXNbNDldLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s0OV0ub3Bjb2Rlc1swXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFszOCwzOF19Oy8vIFRCU1xuXG4gIC8qIEJrbk9wICovXG4gIHRoaXMucnVsZXNbNTBdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s1MF0ub3Bjb2Rlc1swXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFszMywzM119Oy8vIFRCU1xuXG4gIC8qIEFiZ09wICovXG4gIHRoaXMucnVsZXNbNTFdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s1MV0ub3Bjb2Rlc1swXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFszNyw5NF19Oy8vIFRCU1xuXG4gIC8qIEFlbk9wICovXG4gIHRoaXMucnVsZXNbNTJdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s1Ml0ub3Bjb2Rlc1swXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFszNywzNl19Oy8vIFRCU1xuXG4gIC8qIFRyZ09wICovXG4gIHRoaXMucnVsZXNbNTNdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s1M10ub3Bjb2Rlc1swXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzEsMl19Oy8vIENBVFxuICB0aGlzLnJ1bGVzWzUzXS5vcGNvZGVzWzFdID0ge3R5cGU6IDYsIHN0cmluZzogWzM3XX07Ly8gVEJTXG4gIHRoaXMucnVsZXNbNTNdLm9wY29kZXNbMl0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFszLDgsMTNdfTsvLyBBTFRcbiAgdGhpcy5ydWxlc1s1M10ub3Bjb2Rlc1szXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzQsNSw2LDddfTsvLyBDQVRcbiAgdGhpcy5ydWxlc1s1M10ub3Bjb2Rlc1s0XSA9IHt0eXBlOiA0LCBpbmRleDogNzZ9Oy8vIFJOTShEZWMpXG4gIHRoaXMucnVsZXNbNTNdLm9wY29kZXNbNV0gPSB7dHlwZTogNCwgaW5kZXg6IDc5fTsvLyBSTk0oZG1pbilcbiAgdGhpcy5ydWxlc1s1M10ub3Bjb2Rlc1s2XSA9IHt0eXBlOiA2LCBzdHJpbmc6IFs0NV19Oy8vIFRCU1xuICB0aGlzLnJ1bGVzWzUzXS5vcGNvZGVzWzddID0ge3R5cGU6IDQsIGluZGV4OiA4MH07Ly8gUk5NKGRtYXgpXG4gIHRoaXMucnVsZXNbNTNdLm9wY29kZXNbOF0gPSB7dHlwZTogMiwgY2hpbGRyZW46IFs5LDEwLDExLDEyXX07Ly8gQ0FUXG4gIHRoaXMucnVsZXNbNTNdLm9wY29kZXNbOV0gPSB7dHlwZTogNCwgaW5kZXg6IDc3fTsvLyBSTk0oSGV4KVxuICB0aGlzLnJ1bGVzWzUzXS5vcGNvZGVzWzEwXSA9IHt0eXBlOiA0LCBpbmRleDogODN9Oy8vIFJOTSh4bWluKVxuICB0aGlzLnJ1bGVzWzUzXS5vcGNvZGVzWzExXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFs0NV19Oy8vIFRCU1xuICB0aGlzLnJ1bGVzWzUzXS5vcGNvZGVzWzEyXSA9IHt0eXBlOiA0LCBpbmRleDogODR9Oy8vIFJOTSh4bWF4KVxuICB0aGlzLnJ1bGVzWzUzXS5vcGNvZGVzWzEzXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzE0LDE1LDE2LDE3XX07Ly8gQ0FUXG4gIHRoaXMucnVsZXNbNTNdLm9wY29kZXNbMTRdID0ge3R5cGU6IDQsIGluZGV4OiA3OH07Ly8gUk5NKEJpbilcbiAgdGhpcy5ydWxlc1s1M10ub3Bjb2Rlc1sxNV0gPSB7dHlwZTogNCwgaW5kZXg6IDgxfTsvLyBSTk0oYm1pbilcbiAgdGhpcy5ydWxlc1s1M10ub3Bjb2Rlc1sxNl0gPSB7dHlwZTogNiwgc3RyaW5nOiBbNDVdfTsvLyBUQlNcbiAgdGhpcy5ydWxlc1s1M10ub3Bjb2Rlc1sxN10gPSB7dHlwZTogNCwgaW5kZXg6IDgyfTsvLyBSTk0oYm1heClcblxuICAvKiBUYnNPcCAqL1xuICB0aGlzLnJ1bGVzWzU0XS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbNTRdLm9wY29kZXNbMF0gPSB7dHlwZTogMiwgY2hpbGRyZW46IFsxLDJdfTsvLyBDQVRcbiAgdGhpcy5ydWxlc1s1NF0ub3Bjb2Rlc1sxXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFszN119Oy8vIFRCU1xuICB0aGlzLnJ1bGVzWzU0XS5vcGNvZGVzWzJdID0ge3R5cGU6IDEsIGNoaWxkcmVuOiBbMywxMCwxN119Oy8vIEFMVFxuICB0aGlzLnJ1bGVzWzU0XS5vcGNvZGVzWzNdID0ge3R5cGU6IDIsIGNoaWxkcmVuOiBbNCw1LDZdfTsvLyBDQVRcbiAgdGhpcy5ydWxlc1s1NF0ub3Bjb2Rlc1s0XSA9IHt0eXBlOiA0LCBpbmRleDogNzZ9Oy8vIFJOTShEZWMpXG4gIHRoaXMucnVsZXNbNTRdLm9wY29kZXNbNV0gPSB7dHlwZTogNCwgaW5kZXg6IDczfTsvLyBSTk0oZFN0cmluZylcbiAgdGhpcy5ydWxlc1s1NF0ub3Bjb2Rlc1s2XSA9IHt0eXBlOiAzLCBtaW46IDAsIG1heDogSW5maW5pdHl9Oy8vIFJFUFxuICB0aGlzLnJ1bGVzWzU0XS5vcGNvZGVzWzddID0ge3R5cGU6IDIsIGNoaWxkcmVuOiBbOCw5XX07Ly8gQ0FUXG4gIHRoaXMucnVsZXNbNTRdLm9wY29kZXNbOF0gPSB7dHlwZTogNiwgc3RyaW5nOiBbNDZdfTsvLyBUQlNcbiAgdGhpcy5ydWxlc1s1NF0ub3Bjb2Rlc1s5XSA9IHt0eXBlOiA0LCBpbmRleDogNzN9Oy8vIFJOTShkU3RyaW5nKVxuICB0aGlzLnJ1bGVzWzU0XS5vcGNvZGVzWzEwXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzExLDEyLDEzXX07Ly8gQ0FUXG4gIHRoaXMucnVsZXNbNTRdLm9wY29kZXNbMTFdID0ge3R5cGU6IDQsIGluZGV4OiA3N307Ly8gUk5NKEhleClcbiAgdGhpcy5ydWxlc1s1NF0ub3Bjb2Rlc1sxMl0gPSB7dHlwZTogNCwgaW5kZXg6IDc0fTsvLyBSTk0oeFN0cmluZylcbiAgdGhpcy5ydWxlc1s1NF0ub3Bjb2Rlc1sxM10gPSB7dHlwZTogMywgbWluOiAwLCBtYXg6IEluZmluaXR5fTsvLyBSRVBcbiAgdGhpcy5ydWxlc1s1NF0ub3Bjb2Rlc1sxNF0gPSB7dHlwZTogMiwgY2hpbGRyZW46IFsxNSwxNl19Oy8vIENBVFxuICB0aGlzLnJ1bGVzWzU0XS5vcGNvZGVzWzE1XSA9IHt0eXBlOiA2LCBzdHJpbmc6IFs0Nl19Oy8vIFRCU1xuICB0aGlzLnJ1bGVzWzU0XS5vcGNvZGVzWzE2XSA9IHt0eXBlOiA0LCBpbmRleDogNzR9Oy8vIFJOTSh4U3RyaW5nKVxuICB0aGlzLnJ1bGVzWzU0XS5vcGNvZGVzWzE3XSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzE4LDE5LDIwXX07Ly8gQ0FUXG4gIHRoaXMucnVsZXNbNTRdLm9wY29kZXNbMThdID0ge3R5cGU6IDQsIGluZGV4OiA3OH07Ly8gUk5NKEJpbilcbiAgdGhpcy5ydWxlc1s1NF0ub3Bjb2Rlc1sxOV0gPSB7dHlwZTogNCwgaW5kZXg6IDc1fTsvLyBSTk0oYlN0cmluZylcbiAgdGhpcy5ydWxlc1s1NF0ub3Bjb2Rlc1syMF0gPSB7dHlwZTogMywgbWluOiAwLCBtYXg6IEluZmluaXR5fTsvLyBSRVBcbiAgdGhpcy5ydWxlc1s1NF0ub3Bjb2Rlc1syMV0gPSB7dHlwZTogMiwgY2hpbGRyZW46IFsyMiwyM119Oy8vIENBVFxuICB0aGlzLnJ1bGVzWzU0XS5vcGNvZGVzWzIyXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFs0Nl19Oy8vIFRCU1xuICB0aGlzLnJ1bGVzWzU0XS5vcGNvZGVzWzIzXSA9IHt0eXBlOiA0LCBpbmRleDogNzV9Oy8vIFJOTShiU3RyaW5nKVxuXG4gIC8qIFRsc09wICovXG4gIHRoaXMucnVsZXNbNTVdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s1NV0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzEsMiwzLDRdfTsvLyBDQVRcbiAgdGhpcy5ydWxlc1s1NV0ub3Bjb2Rlc1sxXSA9IHt0eXBlOiA0LCBpbmRleDogNTZ9Oy8vIFJOTShUbHNDYXNlKVxuICB0aGlzLnJ1bGVzWzU1XS5vcGNvZGVzWzJdID0ge3R5cGU6IDQsIGluZGV4OiA1N307Ly8gUk5NKFRsc09wZW4pXG4gIHRoaXMucnVsZXNbNTVdLm9wY29kZXNbM10gPSB7dHlwZTogNCwgaW5kZXg6IDU5fTsvLyBSTk0oVGxzU3RyaW5nKVxuICB0aGlzLnJ1bGVzWzU1XS5vcGNvZGVzWzRdID0ge3R5cGU6IDQsIGluZGV4OiA1OH07Ly8gUk5NKFRsc0Nsb3NlKVxuXG4gIC8qIFRsc0Nhc2UgKi9cbiAgdGhpcy5ydWxlc1s1Nl0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzU2XS5vcGNvZGVzWzBdID0ge3R5cGU6IDMsIG1pbjogMCwgbWF4OiAxfTsvLyBSRVBcbiAgdGhpcy5ydWxlc1s1Nl0ub3Bjb2Rlc1sxXSA9IHt0eXBlOiAxLCBjaGlsZHJlbjogWzIsM119Oy8vIEFMVFxuICB0aGlzLnJ1bGVzWzU2XS5vcGNvZGVzWzJdID0ge3R5cGU6IDcsIHN0cmluZzogWzM3LDEwNV19Oy8vIFRMU1xuICB0aGlzLnJ1bGVzWzU2XS5vcGNvZGVzWzNdID0ge3R5cGU6IDcsIHN0cmluZzogWzM3LDExNV19Oy8vIFRMU1xuXG4gIC8qIFRsc09wZW4gKi9cbiAgdGhpcy5ydWxlc1s1N10ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzU3XS5vcGNvZGVzWzBdID0ge3R5cGU6IDYsIHN0cmluZzogWzM0XX07Ly8gVEJTXG5cbiAgLyogVGxzQ2xvc2UgKi9cbiAgdGhpcy5ydWxlc1s1OF0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzU4XS5vcGNvZGVzWzBdID0ge3R5cGU6IDYsIHN0cmluZzogWzM0XX07Ly8gVEJTXG5cbiAgLyogVGxzU3RyaW5nICovXG4gIHRoaXMucnVsZXNbNTldLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s1OV0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAzLCBtaW46IDAsIG1heDogSW5maW5pdHl9Oy8vIFJFUFxuICB0aGlzLnJ1bGVzWzU5XS5vcGNvZGVzWzFdID0ge3R5cGU6IDEsIGNoaWxkcmVuOiBbMiwzLDRdfTsvLyBBTFRcbiAgdGhpcy5ydWxlc1s1OV0ub3Bjb2Rlc1syXSA9IHt0eXBlOiA1LCBtaW46IDMyLCBtYXg6IDMzfTsvLyBUUkdcbiAgdGhpcy5ydWxlc1s1OV0ub3Bjb2Rlc1szXSA9IHt0eXBlOiA1LCBtaW46IDM1LCBtYXg6IDEyNn07Ly8gVFJHXG4gIHRoaXMucnVsZXNbNTldLm9wY29kZXNbNF0gPSB7dHlwZTogNCwgaW5kZXg6IDYwfTsvLyBSTk0oU3RyaW5nVGFiKVxuXG4gIC8qIFN0cmluZ1RhYiAqL1xuICB0aGlzLnJ1bGVzWzYwXS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbNjBdLm9wY29kZXNbMF0gPSB7dHlwZTogNiwgc3RyaW5nOiBbOV19Oy8vIFRCU1xuXG4gIC8qIENsc09wICovXG4gIHRoaXMucnVsZXNbNjFdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s2MV0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzEsMiwzXX07Ly8gQ0FUXG4gIHRoaXMucnVsZXNbNjFdLm9wY29kZXNbMV0gPSB7dHlwZTogNCwgaW5kZXg6IDYyfTsvLyBSTk0oQ2xzT3BlbilcbiAgdGhpcy5ydWxlc1s2MV0ub3Bjb2Rlc1syXSA9IHt0eXBlOiA0LCBpbmRleDogNjR9Oy8vIFJOTShDbHNTdHJpbmcpXG4gIHRoaXMucnVsZXNbNjFdLm9wY29kZXNbM10gPSB7dHlwZTogNCwgaW5kZXg6IDYzfTsvLyBSTk0oQ2xzQ2xvc2UpXG5cbiAgLyogQ2xzT3BlbiAqL1xuICB0aGlzLnJ1bGVzWzYyXS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbNjJdLm9wY29kZXNbMF0gPSB7dHlwZTogNiwgc3RyaW5nOiBbMzldfTsvLyBUQlNcblxuICAvKiBDbHNDbG9zZSAqL1xuICB0aGlzLnJ1bGVzWzYzXS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbNjNdLm9wY29kZXNbMF0gPSB7dHlwZTogNiwgc3RyaW5nOiBbMzldfTsvLyBUQlNcblxuICAvKiBDbHNTdHJpbmcgKi9cbiAgdGhpcy5ydWxlc1s2NF0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzY0XS5vcGNvZGVzWzBdID0ge3R5cGU6IDMsIG1pbjogMCwgbWF4OiBJbmZpbml0eX07Ly8gUkVQXG4gIHRoaXMucnVsZXNbNjRdLm9wY29kZXNbMV0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsyLDMsNF19Oy8vIEFMVFxuICB0aGlzLnJ1bGVzWzY0XS5vcGNvZGVzWzJdID0ge3R5cGU6IDUsIG1pbjogMzIsIG1heDogMzh9Oy8vIFRSR1xuICB0aGlzLnJ1bGVzWzY0XS5vcGNvZGVzWzNdID0ge3R5cGU6IDUsIG1pbjogNDAsIG1heDogMTI2fTsvLyBUUkdcbiAgdGhpcy5ydWxlc1s2NF0ub3Bjb2Rlc1s0XSA9IHt0eXBlOiA0LCBpbmRleDogNjB9Oy8vIFJOTShTdHJpbmdUYWIpXG5cbiAgLyogUHJvc1ZhbCAqL1xuICB0aGlzLnJ1bGVzWzY1XS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbNjVdLm9wY29kZXNbMF0gPSB7dHlwZTogMiwgY2hpbGRyZW46IFsxLDIsM119Oy8vIENBVFxuICB0aGlzLnJ1bGVzWzY1XS5vcGNvZGVzWzFdID0ge3R5cGU6IDQsIGluZGV4OiA2Nn07Ly8gUk5NKFByb3NWYWxPcGVuKVxuICB0aGlzLnJ1bGVzWzY1XS5vcGNvZGVzWzJdID0ge3R5cGU6IDQsIGluZGV4OiA2N307Ly8gUk5NKFByb3NWYWxTdHJpbmcpXG4gIHRoaXMucnVsZXNbNjVdLm9wY29kZXNbM10gPSB7dHlwZTogNCwgaW5kZXg6IDY4fTsvLyBSTk0oUHJvc1ZhbENsb3NlKVxuXG4gIC8qIFByb3NWYWxPcGVuICovXG4gIHRoaXMucnVsZXNbNjZdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s2Nl0ub3Bjb2Rlc1swXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFs2MF19Oy8vIFRCU1xuXG4gIC8qIFByb3NWYWxTdHJpbmcgKi9cbiAgdGhpcy5ydWxlc1s2N10ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzY3XS5vcGNvZGVzWzBdID0ge3R5cGU6IDMsIG1pbjogMCwgbWF4OiBJbmZpbml0eX07Ly8gUkVQXG4gIHRoaXMucnVsZXNbNjddLm9wY29kZXNbMV0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsyLDMsNF19Oy8vIEFMVFxuICB0aGlzLnJ1bGVzWzY3XS5vcGNvZGVzWzJdID0ge3R5cGU6IDUsIG1pbjogMzIsIG1heDogNjF9Oy8vIFRSR1xuICB0aGlzLnJ1bGVzWzY3XS5vcGNvZGVzWzNdID0ge3R5cGU6IDUsIG1pbjogNjMsIG1heDogMTI2fTsvLyBUUkdcbiAgdGhpcy5ydWxlc1s2N10ub3Bjb2Rlc1s0XSA9IHt0eXBlOiA0LCBpbmRleDogNjB9Oy8vIFJOTShTdHJpbmdUYWIpXG5cbiAgLyogUHJvc1ZhbENsb3NlICovXG4gIHRoaXMucnVsZXNbNjhdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s2OF0ub3Bjb2Rlc1swXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFs2Ml19Oy8vIFRCU1xuXG4gIC8qIHJlcC1taW4gKi9cbiAgdGhpcy5ydWxlc1s2OV0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzY5XS5vcGNvZGVzWzBdID0ge3R5cGU6IDQsIGluZGV4OiA3Mn07Ly8gUk5NKHJlcC1udW0pXG5cbiAgLyogcmVwLW1pbi1tYXggKi9cbiAgdGhpcy5ydWxlc1s3MF0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzcwXS5vcGNvZGVzWzBdID0ge3R5cGU6IDQsIGluZGV4OiA3Mn07Ly8gUk5NKHJlcC1udW0pXG5cbiAgLyogcmVwLW1heCAqL1xuICB0aGlzLnJ1bGVzWzcxXS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbNzFdLm9wY29kZXNbMF0gPSB7dHlwZTogNCwgaW5kZXg6IDcyfTsvLyBSTk0ocmVwLW51bSlcblxuICAvKiByZXAtbnVtICovXG4gIHRoaXMucnVsZXNbNzJdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s3Ml0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAzLCBtaW46IDEsIG1heDogSW5maW5pdHl9Oy8vIFJFUFxuICB0aGlzLnJ1bGVzWzcyXS5vcGNvZGVzWzFdID0ge3R5cGU6IDUsIG1pbjogNDgsIG1heDogNTd9Oy8vIFRSR1xuXG4gIC8qIGRTdHJpbmcgKi9cbiAgdGhpcy5ydWxlc1s3M10ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzczXS5vcGNvZGVzWzBdID0ge3R5cGU6IDQsIGluZGV4OiA4NX07Ly8gUk5NKGRudW0pXG5cbiAgLyogeFN0cmluZyAqL1xuICB0aGlzLnJ1bGVzWzc0XS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbNzRdLm9wY29kZXNbMF0gPSB7dHlwZTogNCwgaW5kZXg6IDg3fTsvLyBSTk0oeG51bSlcblxuICAvKiBiU3RyaW5nICovXG4gIHRoaXMucnVsZXNbNzVdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s3NV0ub3Bjb2Rlc1swXSA9IHt0eXBlOiA0LCBpbmRleDogODZ9Oy8vIFJOTShibnVtKVxuXG4gIC8qIERlYyAqL1xuICB0aGlzLnJ1bGVzWzc2XS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbNzZdLm9wY29kZXNbMF0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsxLDJdfTsvLyBBTFRcbiAgdGhpcy5ydWxlc1s3Nl0ub3Bjb2Rlc1sxXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFs2OF19Oy8vIFRCU1xuICB0aGlzLnJ1bGVzWzc2XS5vcGNvZGVzWzJdID0ge3R5cGU6IDYsIHN0cmluZzogWzEwMF19Oy8vIFRCU1xuXG4gIC8qIEhleCAqL1xuICB0aGlzLnJ1bGVzWzc3XS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbNzddLm9wY29kZXNbMF0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsxLDJdfTsvLyBBTFRcbiAgdGhpcy5ydWxlc1s3N10ub3Bjb2Rlc1sxXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFs4OF19Oy8vIFRCU1xuICB0aGlzLnJ1bGVzWzc3XS5vcGNvZGVzWzJdID0ge3R5cGU6IDYsIHN0cmluZzogWzEyMF19Oy8vIFRCU1xuXG4gIC8qIEJpbiAqL1xuICB0aGlzLnJ1bGVzWzc4XS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbNzhdLm9wY29kZXNbMF0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsxLDJdfTsvLyBBTFRcbiAgdGhpcy5ydWxlc1s3OF0ub3Bjb2Rlc1sxXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFs2Nl19Oy8vIFRCU1xuICB0aGlzLnJ1bGVzWzc4XS5vcGNvZGVzWzJdID0ge3R5cGU6IDYsIHN0cmluZzogWzk4XX07Ly8gVEJTXG5cbiAgLyogZG1pbiAqL1xuICB0aGlzLnJ1bGVzWzc5XS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbNzldLm9wY29kZXNbMF0gPSB7dHlwZTogNCwgaW5kZXg6IDg1fTsvLyBSTk0oZG51bSlcblxuICAvKiBkbWF4ICovXG4gIHRoaXMucnVsZXNbODBdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s4MF0ub3Bjb2Rlc1swXSA9IHt0eXBlOiA0LCBpbmRleDogODV9Oy8vIFJOTShkbnVtKVxuXG4gIC8qIGJtaW4gKi9cbiAgdGhpcy5ydWxlc1s4MV0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzgxXS5vcGNvZGVzWzBdID0ge3R5cGU6IDQsIGluZGV4OiA4Nn07Ly8gUk5NKGJudW0pXG5cbiAgLyogYm1heCAqL1xuICB0aGlzLnJ1bGVzWzgyXS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbODJdLm9wY29kZXNbMF0gPSB7dHlwZTogNCwgaW5kZXg6IDg2fTsvLyBSTk0oYm51bSlcblxuICAvKiB4bWluICovXG4gIHRoaXMucnVsZXNbODNdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s4M10ub3Bjb2Rlc1swXSA9IHt0eXBlOiA0LCBpbmRleDogODd9Oy8vIFJOTSh4bnVtKVxuXG4gIC8qIHhtYXggKi9cbiAgdGhpcy5ydWxlc1s4NF0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzg0XS5vcGNvZGVzWzBdID0ge3R5cGU6IDQsIGluZGV4OiA4N307Ly8gUk5NKHhudW0pXG5cbiAgLyogZG51bSAqL1xuICB0aGlzLnJ1bGVzWzg1XS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbODVdLm9wY29kZXNbMF0gPSB7dHlwZTogMywgbWluOiAxLCBtYXg6IEluZmluaXR5fTsvLyBSRVBcbiAgdGhpcy5ydWxlc1s4NV0ub3Bjb2Rlc1sxXSA9IHt0eXBlOiA1LCBtaW46IDQ4LCBtYXg6IDU3fTsvLyBUUkdcblxuICAvKiBibnVtICovXG4gIHRoaXMucnVsZXNbODZdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s4Nl0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAzLCBtaW46IDEsIG1heDogSW5maW5pdHl9Oy8vIFJFUFxuICB0aGlzLnJ1bGVzWzg2XS5vcGNvZGVzWzFdID0ge3R5cGU6IDUsIG1pbjogNDgsIG1heDogNDl9Oy8vIFRSR1xuXG4gIC8qIHhudW0gKi9cbiAgdGhpcy5ydWxlc1s4N10ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzg3XS5vcGNvZGVzWzBdID0ge3R5cGU6IDMsIG1pbjogMSwgbWF4OiBJbmZpbml0eX07Ly8gUkVQXG4gIHRoaXMucnVsZXNbODddLm9wY29kZXNbMV0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsyLDMsNF19Oy8vIEFMVFxuICB0aGlzLnJ1bGVzWzg3XS5vcGNvZGVzWzJdID0ge3R5cGU6IDUsIG1pbjogNDgsIG1heDogNTd9Oy8vIFRSR1xuICB0aGlzLnJ1bGVzWzg3XS5vcGNvZGVzWzNdID0ge3R5cGU6IDUsIG1pbjogNjUsIG1heDogNzB9Oy8vIFRSR1xuICB0aGlzLnJ1bGVzWzg3XS5vcGNvZGVzWzRdID0ge3R5cGU6IDUsIG1pbjogOTcsIG1heDogMTAyfTsvLyBUUkdcblxuICAvKiBhbHBoYW51bSAqL1xuICB0aGlzLnJ1bGVzWzg4XS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbODhdLm9wY29kZXNbMF0gPSB7dHlwZTogMiwgY2hpbGRyZW46IFsxLDRdfTsvLyBDQVRcbiAgdGhpcy5ydWxlc1s4OF0ub3Bjb2Rlc1sxXSA9IHt0eXBlOiAxLCBjaGlsZHJlbjogWzIsM119Oy8vIEFMVFxuICB0aGlzLnJ1bGVzWzg4XS5vcGNvZGVzWzJdID0ge3R5cGU6IDUsIG1pbjogOTcsIG1heDogMTIyfTsvLyBUUkdcbiAgdGhpcy5ydWxlc1s4OF0ub3Bjb2Rlc1szXSA9IHt0eXBlOiA1LCBtaW46IDY1LCBtYXg6IDkwfTsvLyBUUkdcbiAgdGhpcy5ydWxlc1s4OF0ub3Bjb2Rlc1s0XSA9IHt0eXBlOiAzLCBtaW46IDAsIG1heDogSW5maW5pdHl9Oy8vIFJFUFxuICB0aGlzLnJ1bGVzWzg4XS5vcGNvZGVzWzVdID0ge3R5cGU6IDEsIGNoaWxkcmVuOiBbNiw3LDgsOV19Oy8vIEFMVFxuICB0aGlzLnJ1bGVzWzg4XS5vcGNvZGVzWzZdID0ge3R5cGU6IDUsIG1pbjogOTcsIG1heDogMTIyfTsvLyBUUkdcbiAgdGhpcy5ydWxlc1s4OF0ub3Bjb2Rlc1s3XSA9IHt0eXBlOiA1LCBtaW46IDY1LCBtYXg6IDkwfTsvLyBUUkdcbiAgdGhpcy5ydWxlc1s4OF0ub3Bjb2Rlc1s4XSA9IHt0eXBlOiA1LCBtaW46IDQ4LCBtYXg6IDU3fTsvLyBUUkdcbiAgdGhpcy5ydWxlc1s4OF0ub3Bjb2Rlc1s5XSA9IHt0eXBlOiA2LCBzdHJpbmc6IFs0NV19Oy8vIFRCU1xuXG4gIC8qIG93c3AgKi9cbiAgdGhpcy5ydWxlc1s4OV0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzg5XS5vcGNvZGVzWzBdID0ge3R5cGU6IDMsIG1pbjogMCwgbWF4OiBJbmZpbml0eX07Ly8gUkVQXG4gIHRoaXMucnVsZXNbODldLm9wY29kZXNbMV0gPSB7dHlwZTogNCwgaW5kZXg6IDkxfTsvLyBSTk0oc3BhY2UpXG5cbiAgLyogd3NwICovXG4gIHRoaXMucnVsZXNbOTBdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s5MF0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAzLCBtaW46IDEsIG1heDogSW5maW5pdHl9Oy8vIFJFUFxuICB0aGlzLnJ1bGVzWzkwXS5vcGNvZGVzWzFdID0ge3R5cGU6IDQsIGluZGV4OiA5MX07Ly8gUk5NKHNwYWNlKVxuXG4gIC8qIHNwYWNlICovXG4gIHRoaXMucnVsZXNbOTFdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s5MV0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAxLCBjaGlsZHJlbjogWzEsMiwzLDRdfTsvLyBBTFRcbiAgdGhpcy5ydWxlc1s5MV0ub3Bjb2Rlc1sxXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFszMl19Oy8vIFRCU1xuICB0aGlzLnJ1bGVzWzkxXS5vcGNvZGVzWzJdID0ge3R5cGU6IDYsIHN0cmluZzogWzldfTsvLyBUQlNcbiAgdGhpcy5ydWxlc1s5MV0ub3Bjb2Rlc1szXSA9IHt0eXBlOiA0LCBpbmRleDogOTJ9Oy8vIFJOTShjb21tZW50KVxuICB0aGlzLnJ1bGVzWzkxXS5vcGNvZGVzWzRdID0ge3R5cGU6IDQsIGluZGV4OiA5NH07Ly8gUk5NKExpbmVDb250aW51ZSlcblxuICAvKiBjb21tZW50ICovXG4gIHRoaXMucnVsZXNbOTJdLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s5Ml0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzEsMl19Oy8vIENBVFxuICB0aGlzLnJ1bGVzWzkyXS5vcGNvZGVzWzFdID0ge3R5cGU6IDYsIHN0cmluZzogWzU5XX07Ly8gVEJTXG4gIHRoaXMucnVsZXNbOTJdLm9wY29kZXNbMl0gPSB7dHlwZTogMywgbWluOiAwLCBtYXg6IEluZmluaXR5fTsvLyBSRVBcbiAgdGhpcy5ydWxlc1s5Ml0ub3Bjb2Rlc1szXSA9IHt0eXBlOiAxLCBjaGlsZHJlbjogWzQsNV19Oy8vIEFMVFxuICB0aGlzLnJ1bGVzWzkyXS5vcGNvZGVzWzRdID0ge3R5cGU6IDUsIG1pbjogMzIsIG1heDogMTI2fTsvLyBUUkdcbiAgdGhpcy5ydWxlc1s5Ml0ub3Bjb2Rlc1s1XSA9IHt0eXBlOiA2LCBzdHJpbmc6IFs5XX07Ly8gVEJTXG5cbiAgLyogTGluZUVuZCAqL1xuICB0aGlzLnJ1bGVzWzkzXS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbOTNdLm9wY29kZXNbMF0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsxLDIsM119Oy8vIEFMVFxuICB0aGlzLnJ1bGVzWzkzXS5vcGNvZGVzWzFdID0ge3R5cGU6IDYsIHN0cmluZzogWzEzLDEwXX07Ly8gVEJTXG4gIHRoaXMucnVsZXNbOTNdLm9wY29kZXNbMl0gPSB7dHlwZTogNiwgc3RyaW5nOiBbMTBdfTsvLyBUQlNcbiAgdGhpcy5ydWxlc1s5M10ub3Bjb2Rlc1szXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFsxM119Oy8vIFRCU1xuXG4gIC8qIExpbmVDb250aW51ZSAqL1xuICB0aGlzLnJ1bGVzWzk0XS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbOTRdLm9wY29kZXNbMF0gPSB7dHlwZTogMiwgY2hpbGRyZW46IFsxLDVdfTsvLyBDQVRcbiAgdGhpcy5ydWxlc1s5NF0ub3Bjb2Rlc1sxXSA9IHt0eXBlOiAxLCBjaGlsZHJlbjogWzIsMyw0XX07Ly8gQUxUXG4gIHRoaXMucnVsZXNbOTRdLm9wY29kZXNbMl0gPSB7dHlwZTogNiwgc3RyaW5nOiBbMTMsMTBdfTsvLyBUQlNcbiAgdGhpcy5ydWxlc1s5NF0ub3Bjb2Rlc1szXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFsxMF19Oy8vIFRCU1xuICB0aGlzLnJ1bGVzWzk0XS5vcGNvZGVzWzRdID0ge3R5cGU6IDYsIHN0cmluZzogWzEzXX07Ly8gVEJTXG4gIHRoaXMucnVsZXNbOTRdLm9wY29kZXNbNV0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFs2LDddfTsvLyBBTFRcbiAgdGhpcy5ydWxlc1s5NF0ub3Bjb2Rlc1s2XSA9IHt0eXBlOiA2LCBzdHJpbmc6IFszMl19Oy8vIFRCU1xuICB0aGlzLnJ1bGVzWzk0XS5vcGNvZGVzWzddID0ge3R5cGU6IDYsIHN0cmluZzogWzldfTsvLyBUQlNcblxuICAvLyBUaGUgYHRvU3RyaW5nKClgIGZ1bmN0aW9uIHdpbGwgZGlzcGxheSB0aGUgb3JpZ2luYWwgZ3JhbW1hciBmaWxlKHMpIHRoYXQgcHJvZHVjZWQgdGhlc2Ugb3Bjb2Rlcy5cbiAgdGhpcy50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgbGV0IHN0ciA9IFwiXCI7XG4gICAgc3RyICs9IFwiO1xcblwiO1xuICAgIHN0ciArPSBcIjsgQUJORiBmb3IgSmF2YVNjcmlwdCBBUEcgMi4wIFNBQk5GXFxuXCI7XG4gICAgc3RyICs9IFwiOyBSRkMgNTIzNCB3aXRoIHNvbWUgcmVzdHJpY3Rpb25zIGFuZCBhZGRpdGlvbnMuXFxuXCI7XG4gICAgc3RyICs9IFwiOyBVcGRhdGVkIDExLzI0LzIwMTUgZm9yIFJGQyA3NDA1IGNhc2Utc2Vuc2l0aXZlIGxpdGVyYWwgc3RyaW5nIG5vdGF0aW9uXFxuXCI7XG4gICAgc3RyICs9IFwiOyAgLSBhY2NlcHRzICVzXFxcInN0cmluZ1xcXCIgYXMgYSBjYXNlLXNlbnNpdGl2ZSBzdHJpbmdcXG5cIjtcbiAgICBzdHIgKz0gXCI7ICAtIGFjY2VwdHMgJWlcXFwic3RyaW5nXFxcIiBhcyBhIGNhc2UtaW5zZW5zaXRpdmUgc3RyaW5nXFxuXCI7XG4gICAgc3RyICs9IFwiOyAgLSBhY2NlcHRzIFxcXCJzdHJpbmdcXFwiIGFzIGEgY2FzZS1pbnNlbnNpdGl2ZSBzdHJpbmdcXG5cIjtcbiAgICBzdHIgKz0gXCI7XFxuXCI7XG4gICAgc3RyICs9IFwiOyBTb21lIHJlc3RyaWN0aW9uczpcXG5cIjtcbiAgICBzdHIgKz0gXCI7ICAgMS4gUnVsZXMgbXVzdCBiZWdpbiBhdCBmaXJzdCBjaGFyYWN0ZXIgb2YgZWFjaCBsaW5lLlxcblwiO1xuICAgIHN0ciArPSBcIjsgICAgICBJbmRlbnRhdGlvbnMgb24gZmlyc3QgcnVsZSBhbmQgcnVsZXMgdGhlcmVhZnRlciBhcmUgbm90IGFsbG93ZWQuXFxuXCI7XG4gICAgc3RyICs9IFwiOyAgIDIuIFJlbGF4ZWQgbGluZSBlbmRpbmdzLiBDUkxGLCBMRiBvciBDUiBhcmUgYWNjZXB0ZWQgYXMgdmFsaWQgbGluZSBlbmRpbmcuXFxuXCI7XG4gICAgc3RyICs9IFwiOyAgIDMuIFByb3NlIHZhbHVlcywgaS5lLiA8cHJvc2UgdmFsdWU+LCBhcmUgYWNjZXB0ZWQgYXMgdmFsaWQgZ3JhbW1hciBzeW50YXguXFxuXCI7XG4gICAgc3RyICs9IFwiOyAgICAgIEhvd2V2ZXIsIGEgd29ya2luZyBwYXJzZXIgY2Fubm90IGJlIGdlbmVyYXRlZCBmcm9tIHRoZW0uXFxuXCI7XG4gICAgc3RyICs9IFwiO1xcblwiO1xuICAgIHN0ciArPSBcIjsgU3VwZXIgc2V0IChTQUJORikgYWRkaXRpb25zOlxcblwiO1xuICAgIHN0ciArPSBcIjsgICAxLiBMb29rLWFoZWFkIChzeW50YWN0aWMgcHJlZGljYXRlKSBvcGVyYXRvcnMgYXJlIGFjY2VwdGVkIGFzIGVsZW1lbnQgcHJlZml4ZXMuXFxuXCI7XG4gICAgc3RyICs9IFwiOyAgICAgICYgaXMgdGhlIHBvc2l0aXZlIGxvb2stYWhlYWQgb3BlcmF0b3IsIHN1Y2NlZWRzIGFuZCBiYWNrdHJhY2tzIGlmIHRoZSBsb29rLWFoZWFkIHBocmFzZSBpcyBmb3VuZFxcblwiO1xuICAgIHN0ciArPSBcIjsgICAgICAhIGlzIHRoZSBuZWdhdGl2ZSBsb29rLWFoZWFkIG9wZXJhdG9yLCBzdWNjZWVkcyBhbmQgYmFja3RyYWNrcyBpZiB0aGUgbG9vay1haGVhZCBwaHJhc2UgaXMgTk9UIGZvdW5kXFxuXCI7XG4gICAgc3RyICs9IFwiOyAgICAgIGUuZy4gJiVkMTMgb3IgJnJ1bGUgb3IgIShBIC8gQilcXG5cIjtcbiAgICBzdHIgKz0gXCI7ICAgMi4gVXNlci1EZWZpbmVkIFRlcm1pbmFscyAoVURUKSBvZiB0aGUgZm9ybSwgdV9uYW1lIGFuZCBlX25hbWUgYXJlIGFjY2VwdGVkLlxcblwiO1xuICAgIHN0ciArPSBcIjsgICAgICAnbmFtZScgaXMgYWxwaGEgZm9sbG93ZWQgYnkgYWxwaGEvbnVtL2h5cGhlbiBqdXN0IGxpa2UgYSBydWxlIG5hbWUuXFxuXCI7XG4gICAgc3RyICs9IFwiOyAgICAgIHVfbmFtZSBtYXkgYmUgdXNlZCBhcyBhbiBlbGVtZW50IGJ1dCBubyBydWxlIGRlZmluaXRpb24gaXMgZ2l2ZW4uXFxuXCI7XG4gICAgc3RyICs9IFwiOyAgICAgIGUuZy4gcnVsZSA9IEEgLyB1X215VWR0XFxuXCI7XG4gICAgc3RyICs9IFwiOyAgICAgICAgICAgQSA9IFxcXCJhXFxcIlxcblwiO1xuICAgIHN0ciArPSBcIjsgICAgICB3b3VsZCBiZSBhIHZhbGlkIGdyYW1tYXIuXFxuXCI7XG4gICAgc3RyICs9IFwiOyAgIDMuIENhc2Utc2Vuc2l0aXZlLCBzaW5nbGUtcXVvdGVkIHN0cmluZ3MgYXJlIGFjY2VwdGVkLlxcblwiO1xuICAgIHN0ciArPSBcIjsgICAgICBlLmcuICdhYmMnIHdvdWxkIGJlIGVxdWl2YWxlbnQgdG8gJWQ5Ny45OC45OVxcblwiO1xuICAgIHN0ciArPSBcIjsgICAgICAoa2VwdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgYnV0IHN1cGVyc2VkZWQgYnkgJXNcXFwiYWJjXFxcIikgIFxcblwiO1xuICAgIHN0ciArPSBcIjsgTmV3IDEyLzI2LzIwMTVcXG5cIjtcbiAgICBzdHIgKz0gXCI7ICAgNC4gTG9vay1iZWhpbmQgb3BlcmF0b3JzIGFyZSBhY2NlcHRlZCBhcyBlbGVtZW50IHByZWZpeGVzLlxcblwiO1xuICAgIHN0ciArPSBcIjsgICAgICAmJiBpcyB0aGUgcG9zaXRpdmUgbG9vay1iZWhpbmQgb3BlcmF0b3IsIHN1Y2NlZWRzIGFuZCBiYWNrdHJhY2tzIGlmIHRoZSBsb29rLWJlaGluZCBwaHJhc2UgaXMgZm91bmRcXG5cIjtcbiAgICBzdHIgKz0gXCI7ICAgICAgISEgaXMgdGhlIG5lZ2F0aXZlIGxvb2stYmVoaW5kIG9wZXJhdG9yLCBzdWNjZWVkcyBhbmQgYmFja3RyYWNrcyBpZiB0aGUgbG9vay1iZWhpbmQgcGhyYXNlIGlzIE5PVCBmb3VuZFxcblwiO1xuICAgIHN0ciArPSBcIjsgICAgICBlLmcuICYmJWQxMyBvciAmJnJ1bGUgb3IgISEoQSAvIEIpXFxuXCI7XG4gICAgc3RyICs9IFwiOyAgIDUuIEJhY2sgcmVmZXJlbmNlIG9wZXJhdG9ycywgaS5lLiBcXFxccnVsZW5hbWUsIGFyZSBhY2NlcHRlZC5cXG5cIjtcbiAgICBzdHIgKz0gXCI7ICAgICAgQSBiYWNrIHJlZmVyZW5jZSBvcGVyYXRvciBhY3RzIGxpa2UgYSBUTFMgb3IgVEJTIHRlcm1pbmFsIGV4Y2VwdCB0aGF0IHRoZSBwaHJhc2UgaXQgYXR0ZW1wdHNcXG5cIjtcbiAgICBzdHIgKz0gXCI7ICAgICAgdG8gbWF0Y2ggaXMgYSBwaHJhc2UgcHJldmlvdXNseSBtYXRjaGVkIGJ5IHRoZSBydWxlICdydWxlbmFtZScuXFxuXCI7XG4gICAgc3RyICs9IFwiOyAgICAgIFRoZXJlIGFyZSB0d28gbW9kZXMgb2YgcHJldmlvdXMgcGhyYXNlIG1hdGNoaW5nIC0gdGhlIHBhcmVudC1mcmFtZSBtb2RlIGFuZCB0aGUgdW5pdmVyc2FsIG1vZGUuXFxuXCI7XG4gICAgc3RyICs9IFwiOyAgICAgIEluIHVuaXZlcnNhbCBtb2RlLCBcXFxccnVsZW5hbWUgbWF0Y2hlcyB0aGUgbGFzdCBtYXRjaCB0byAncnVsZW5hbWUnIHJlZ2FyZGxlc3Mgb2Ygd2hlcmUgaXQgd2FzIGZvdW5kLlxcblwiO1xuICAgIHN0ciArPSBcIjsgICAgICBJbiBwYXJlbnQtZnJhbWUgbW9kZSwgXFxcXHJ1bGVuYW1lIG1hdGNoZXMgb25seSB0aGUgbGFzdCBtYXRjaCBmb3VuZCBvbiB0aGUgcGFyZW50J3MgZnJhbWUgb3IgcGFyc2UgdHJlZSBsZXZlbC5cXG5cIjtcbiAgICBzdHIgKz0gXCI7ICAgICAgQmFjayByZWZlcmVuY2UgbW9kaWZpZXJzIGNhbiBiZSB1c2VkIHRvIHNwZWNpZnkgY2FzZSBhbmQgbW9kZS5cXG5cIjtcbiAgICBzdHIgKz0gXCI7ICAgICAgXFxcXEEgZGVmYXVsdHMgdG8gY2FzZS1pbnNlbnNpdGl2ZSBhbmQgdW5pdmVyc2FsIG1vZGUsIGUuZy4gXFxcXEEgPT09IFxcXFwlaSV1QVxcblwiO1xuICAgIHN0ciArPSBcIjsgICAgICBNb2RpZmllcnMgJWkgYW5kICVzIGRldGVybWluZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCBjYXNlLXNlbnNpdGl2ZSBtb2RlLCByZXNwZWN0aXZlbHkuXFxuXCI7XG4gICAgc3RyICs9IFwiOyAgICAgIE1vZGlmaWVycyAldSBhbmQgJXAgZGV0ZXJtaW5lIHVuaXZlcnNhbCBtb2RlIGFuZCBwYXJlbnQgZnJhbWUgbW9kZSwgcmVzcGVjdGl2ZWx5LlxcblwiO1xuICAgIHN0ciArPSBcIjsgICAgICBDYXNlIGFuZCBtb2RlIG1vZGlmaWVycyBjYW4gYXBwZWFyIGluIGFueSBvcmRlciwgZS5nLiBcXFxcJXMlcEEgPT09IFxcXFwlcCVzQS4gXFxuXCI7XG4gICAgc3RyICs9IFwiOyAgIDcuIFN0cmluZyBiZWdpbiBhbmNob3IsIEFCRyglXikgbWF0Y2hlcyB0aGUgYmVnaW5uaW5nIG9mIHRoZSBpbnB1dCBzdHJpbmcgbG9jYXRpb24uXFxuXCI7XG4gICAgc3RyICs9IFwiOyAgICAgIFJldHVybnMgRU1QVFkgb3IgTk9NQVRDSC4gTmV2ZXIgY29uc3VtZXMgYW55IGNoYXJhY3RlcnMuXFxuXCI7XG4gICAgc3RyICs9IFwiOyAgIDguIFN0cmluZyBlbmQgYW5jaG9yLCBBRU4oJSQpIG1hdGNoZXMgdGhlIGVuZCBvZiB0aGUgaW5wdXQgc3RyaW5nIGxvY2F0aW9uLlxcblwiO1xuICAgIHN0ciArPSBcIjsgICAgICBSZXR1cm5zIEVNUFRZIG9yIE5PTUFUQ0guIE5ldmVyIGNvbnN1bWVzIGFueSBjaGFyYWN0ZXJzLlxcblwiO1xuICAgIHN0ciArPSBcIjtcXG5cIjtcbiAgICBzdHIgKz0gXCJGaWxlICAgICAgICAgICAgPSAqKEJsYW5rTGluZSAvIFJ1bGUgLyBSdWxlRXJyb3IpXFxuXCI7XG4gICAgc3RyICs9IFwiQmxhbmtMaW5lICAgICAgID0gKiglZDMyLyVkOSkgW2NvbW1lbnRdIExpbmVFbmRcXG5cIjtcbiAgICBzdHIgKz0gXCJSdWxlICAgICAgICAgICAgPSBSdWxlTG9va3VwIG93c3AgQWx0ZXJuYXRpb24gKChvd3NwIExpbmVFbmQpXFxuXCI7XG4gICAgc3RyICs9IFwiICAgICAgICAgICAgICAgIC8gKExpbmVFbmRFcnJvciBMaW5lRW5kKSlcXG5cIjtcbiAgICBzdHIgKz0gXCJSdWxlTG9va3VwICAgICAgPSBSdWxlTmFtZVRlc3Qgb3dzcCBEZWZpbmVkQXNUZXN0XFxuXCI7XG4gICAgc3RyICs9IFwiUnVsZU5hbWVUZXN0ICAgID0gUnVsZU5hbWUvUnVsZU5hbWVFcnJvclxcblwiO1xuICAgIHN0ciArPSBcIlJ1bGVOYW1lICAgICAgICA9IGFscGhhbnVtXFxuXCI7XG4gICAgc3RyICs9IFwiUnVsZU5hbWVFcnJvciAgID0gMSooJWQzMy02MC8lZDYyLTEyNilcXG5cIjtcbiAgICBzdHIgKz0gXCJEZWZpbmVkQXNUZXN0ICAgPSBEZWZpbmVkQXMgLyBEZWZpbmVkQXNFcnJvclxcblwiO1xuICAgIHN0ciArPSBcIkRlZmluZWRBc0Vycm9yICA9IDEqMiVkMzMtMTI2XFxuXCI7XG4gICAgc3RyICs9IFwiRGVmaW5lZEFzICAgICAgID0gSW5jQWx0IC8gRGVmaW5lZFxcblwiO1xuICAgIHN0ciArPSBcIkRlZmluZWQgICAgICAgICA9ICVkNjFcXG5cIjtcbiAgICBzdHIgKz0gXCJJbmNBbHQgICAgICAgICAgPSAlZDYxLjQ3XFxuXCI7XG4gICAgc3RyICs9IFwiUnVsZUVycm9yICAgICAgID0gMSooJWQzMi0xMjYgLyAlZDkgIC8gTGluZUNvbnRpbnVlKSBMaW5lRW5kXFxuXCI7XG4gICAgc3RyICs9IFwiTGluZUVuZEVycm9yICAgID0gMSooJWQzMi0xMjYgLyAlZDkgIC8gTGluZUNvbnRpbnVlKVxcblwiO1xuICAgIHN0ciArPSBcIkFsdGVybmF0aW9uICAgICA9IENvbmNhdGVuYXRpb24gKihvd3NwIEFsdE9wIENvbmNhdGVuYXRpb24pXFxuXCI7XG4gICAgc3RyICs9IFwiQ29uY2F0ZW5hdGlvbiAgID0gUmVwZXRpdGlvbiAqKENhdE9wIFJlcGV0aXRpb24pXFxuXCI7XG4gICAgc3RyICs9IFwiUmVwZXRpdGlvbiAgICAgID0gW01vZGlmaWVyXSAoR3JvdXAgLyBPcHRpb24gLyBCYXNpY0VsZW1lbnQgLyBCYXNpY0VsZW1lbnRFcnIpXFxuXCI7XG4gICAgc3RyICs9IFwiTW9kaWZpZXIgICAgICAgID0gKFByZWRpY2F0ZSBbUmVwT3BdKVxcblwiO1xuICAgIHN0ciArPSBcIiAgICAgICAgICAgICAgICAvIFJlcE9wXFxuXCI7XG4gICAgc3RyICs9IFwiUHJlZGljYXRlICAgICAgID0gQmthT3BcXG5cIjtcbiAgICBzdHIgKz0gXCIgICAgICAgICAgICAgICAgLyBCa25PcFxcblwiO1xuICAgIHN0ciArPSBcIiAgICAgICAgICAgICAgICAvIEFuZE9wXFxuXCI7XG4gICAgc3RyICs9IFwiICAgICAgICAgICAgICAgIC8gTm90T3BcXG5cIjtcbiAgICBzdHIgKz0gXCJCYXNpY0VsZW1lbnQgICAgPSBVZHRPcFxcblwiO1xuICAgIHN0ciArPSBcIiAgICAgICAgICAgICAgICAvIFJubU9wXFxuXCI7XG4gICAgc3RyICs9IFwiICAgICAgICAgICAgICAgIC8gVHJnT3BcXG5cIjtcbiAgICBzdHIgKz0gXCIgICAgICAgICAgICAgICAgLyBUYnNPcFxcblwiO1xuICAgIHN0ciArPSBcIiAgICAgICAgICAgICAgICAvIFRsc09wXFxuXCI7XG4gICAgc3RyICs9IFwiICAgICAgICAgICAgICAgIC8gQ2xzT3BcXG5cIjtcbiAgICBzdHIgKz0gXCIgICAgICAgICAgICAgICAgLyBCa3JPcFxcblwiO1xuICAgIHN0ciArPSBcIiAgICAgICAgICAgICAgICAvIEFiZ09wXFxuXCI7XG4gICAgc3RyICs9IFwiICAgICAgICAgICAgICAgIC8gQWVuT3BcXG5cIjtcbiAgICBzdHIgKz0gXCIgICAgICAgICAgICAgICAgLyBQcm9zVmFsXFxuXCI7XG4gICAgc3RyICs9IFwiQmFzaWNFbGVtZW50RXJyID0gMSooJWQzMy00MC8lZDQyLTQ2LyVkNDgtOTIvJWQ5NC0xMjYpXFxuXCI7XG4gICAgc3RyICs9IFwiR3JvdXAgICAgICAgICAgID0gR3JvdXBPcGVuICBBbHRlcm5hdGlvbiAoR3JvdXBDbG9zZSAvIEdyb3VwRXJyb3IpXFxuXCI7XG4gICAgc3RyICs9IFwiR3JvdXBFcnJvciAgICAgID0gMSooJWQzMy00MC8lZDQyLTQ2LyVkNDgtOTIvJWQ5NC0xMjYpIDsgc2FtZSBhcyBCYXNpY0VsZW1lbnRFcnJcXG5cIjtcbiAgICBzdHIgKz0gXCJHcm91cE9wZW4gICAgICAgPSAlZDQwIG93c3BcXG5cIjtcbiAgICBzdHIgKz0gXCJHcm91cENsb3NlICAgICAgPSBvd3NwICVkNDFcXG5cIjtcbiAgICBzdHIgKz0gXCJPcHRpb24gICAgICAgICAgPSBPcHRpb25PcGVuIEFsdGVybmF0aW9uIChPcHRpb25DbG9zZSAvIE9wdGlvbkVycm9yKVxcblwiO1xuICAgIHN0ciArPSBcIk9wdGlvbkVycm9yICAgICA9IDEqKCVkMzMtNDAvJWQ0Mi00Ni8lZDQ4LTkyLyVkOTQtMTI2KSA7IHNhbWUgYXMgQmFzaWNFbGVtZW50RXJyXFxuXCI7XG4gICAgc3RyICs9IFwiT3B0aW9uT3BlbiAgICAgID0gJWQ5MSBvd3NwXFxuXCI7XG4gICAgc3RyICs9IFwiT3B0aW9uQ2xvc2UgICAgID0gb3dzcCAlZDkzXFxuXCI7XG4gICAgc3RyICs9IFwiUm5tT3AgICAgICAgICAgID0gYWxwaGFudW1cXG5cIjtcbiAgICBzdHIgKz0gXCJCa3JPcCAgICAgICAgICAgPSAlZDkyIFtia3JNb2RpZmllcl0gYmtyLW5hbWVcXG5cIjtcbiAgICBzdHIgKz0gXCJia3JNb2RpZmllciAgICAgPSAoY3MgW3VtIC8gcG1dKSAvIChjaSBbdW0gLyBwbV0pIC8gKHVtIFtjcyAvY2ldKSAvIChwbSBbY3MgLyBjaV0pXFxuXCI7XG4gICAgc3RyICs9IFwiY3MgICAgICAgICAgICAgID0gJyVzJ1xcblwiO1xuICAgIHN0ciArPSBcImNpICAgICAgICAgICAgICA9ICclaSdcXG5cIjtcbiAgICBzdHIgKz0gXCJ1bSAgICAgICAgICAgICAgPSAnJXUnXFxuXCI7XG4gICAgc3RyICs9IFwicG0gICAgICAgICAgICAgID0gJyVwJ1xcblwiO1xuICAgIHN0ciArPSBcImJrci1uYW1lICAgICAgICA9IHVuYW1lIC8gZW5hbWUgLyBybmFtZVxcblwiO1xuICAgIHN0ciArPSBcInJuYW1lICAgICAgICAgICA9IGFscGhhbnVtXFxuXCI7XG4gICAgc3RyICs9IFwidW5hbWUgICAgICAgICAgID0gJWQxMTcuOTUgYWxwaGFudW1cXG5cIjtcbiAgICBzdHIgKz0gXCJlbmFtZSAgICAgICAgICAgPSAlZDEwMS45NSBhbHBoYW51bVxcblwiO1xuICAgIHN0ciArPSBcIlVkdE9wICAgICAgICAgICA9IHVkdC1lbXB0eVxcblwiO1xuICAgIHN0ciArPSBcIiAgICAgICAgICAgICAgICAvIHVkdC1ub24tZW1wdHlcXG5cIjtcbiAgICBzdHIgKz0gXCJ1ZHQtbm9uLWVtcHR5ICAgPSAlZDExNy45NSBhbHBoYW51bVxcblwiO1xuICAgIHN0ciArPSBcInVkdC1lbXB0eSAgICAgICA9ICVkMTAxLjk1IGFscGhhbnVtXFxuXCI7XG4gICAgc3RyICs9IFwiUmVwT3AgICAgICAgICAgID0gKHJlcC1taW4gU3Rhck9wIHJlcC1tYXgpXFxuXCI7XG4gICAgc3RyICs9IFwiICAgICAgICAgICAgICAgIC8gKHJlcC1taW4gU3Rhck9wKVxcblwiO1xuICAgIHN0ciArPSBcIiAgICAgICAgICAgICAgICAvIChTdGFyT3AgcmVwLW1heClcXG5cIjtcbiAgICBzdHIgKz0gXCIgICAgICAgICAgICAgICAgLyBTdGFyT3BcXG5cIjtcbiAgICBzdHIgKz0gXCIgICAgICAgICAgICAgICAgLyByZXAtbWluLW1heFxcblwiO1xuICAgIHN0ciArPSBcIkFsdE9wICAgICAgICAgICA9ICVkNDcgb3dzcFxcblwiO1xuICAgIHN0ciArPSBcIkNhdE9wICAgICAgICAgICA9IHdzcFxcblwiO1xuICAgIHN0ciArPSBcIlN0YXJPcCAgICAgICAgICA9ICVkNDJcXG5cIjtcbiAgICBzdHIgKz0gXCJBbmRPcCAgICAgICAgICAgPSAlZDM4XFxuXCI7XG4gICAgc3RyICs9IFwiTm90T3AgICAgICAgICAgID0gJWQzM1xcblwiO1xuICAgIHN0ciArPSBcIkJrYU9wICAgICAgICAgICA9ICVkMzguMzhcXG5cIjtcbiAgICBzdHIgKz0gXCJCa25PcCAgICAgICAgICAgPSAlZDMzLjMzXFxuXCI7XG4gICAgc3RyICs9IFwiQWJnT3AgICAgICAgICAgID0gJWQzNy45NFxcblwiO1xuICAgIHN0ciArPSBcIkFlbk9wICAgICAgICAgICA9ICVkMzcuMzZcXG5cIjtcbiAgICBzdHIgKz0gXCJUcmdPcCAgICAgICAgICAgPSAlZDM3ICgoRGVjIGRtaW4gJWQ0NSBkbWF4KSAvIChIZXggeG1pbiAlZDQ1IHhtYXgpIC8gKEJpbiBibWluICVkNDUgYm1heCkpXFxuXCI7XG4gICAgc3RyICs9IFwiVGJzT3AgICAgICAgICAgID0gJWQzNyAoKERlYyBkU3RyaW5nICooJWQ0NiBkU3RyaW5nKSkgLyAoSGV4IHhTdHJpbmcgKiglZDQ2IHhTdHJpbmcpKSAvIChCaW4gYlN0cmluZyAqKCVkNDYgYlN0cmluZykpKVxcblwiO1xuICAgIHN0ciArPSBcIlRsc09wICAgICAgICAgICA9IFRsc0Nhc2UgVGxzT3BlbiBUbHNTdHJpbmcgVGxzQ2xvc2VcXG5cIjtcbiAgICBzdHIgKz0gXCJUbHNDYXNlICAgICAgICAgPSBbXFxcIiVpXFxcIiAvIFxcXCIlc1xcXCJdXFxuXCI7XG4gICAgc3RyICs9IFwiVGxzT3BlbiAgICAgICAgID0gJWQzNFxcblwiO1xuICAgIHN0ciArPSBcIlRsc0Nsb3NlICAgICAgICA9ICVkMzRcXG5cIjtcbiAgICBzdHIgKz0gXCJUbHNTdHJpbmcgICAgICAgPSAqKCVkMzItMzMvJWQzNS0xMjYvU3RyaW5nVGFiKVxcblwiO1xuICAgIHN0ciArPSBcIlN0cmluZ1RhYiAgICAgICA9ICVkOVxcblwiO1xuICAgIHN0ciArPSBcIkNsc09wICAgICAgICAgICA9IENsc09wZW4gQ2xzU3RyaW5nIENsc0Nsb3NlXFxuXCI7XG4gICAgc3RyICs9IFwiQ2xzT3BlbiAgICAgICAgID0gJWQzOVxcblwiO1xuICAgIHN0ciArPSBcIkNsc0Nsb3NlICAgICAgICA9ICVkMzlcXG5cIjtcbiAgICBzdHIgKz0gXCJDbHNTdHJpbmcgICAgICAgPSAqKCVkMzItMzgvJWQ0MC0xMjYvU3RyaW5nVGFiKVxcblwiO1xuICAgIHN0ciArPSBcIlByb3NWYWwgICAgICAgICA9IFByb3NWYWxPcGVuIFByb3NWYWxTdHJpbmcgUHJvc1ZhbENsb3NlXFxuXCI7XG4gICAgc3RyICs9IFwiUHJvc1ZhbE9wZW4gICAgID0gJWQ2MFxcblwiO1xuICAgIHN0ciArPSBcIlByb3NWYWxTdHJpbmcgICA9ICooJWQzMi02MS8lZDYzLTEyNi9TdHJpbmdUYWIpXFxuXCI7XG4gICAgc3RyICs9IFwiUHJvc1ZhbENsb3NlICAgID0gJWQ2MlxcblwiO1xuICAgIHN0ciArPSBcInJlcC1taW4gICAgICAgICA9IHJlcC1udW1cXG5cIjtcbiAgICBzdHIgKz0gXCJyZXAtbWluLW1heCAgICAgPSByZXAtbnVtXFxuXCI7XG4gICAgc3RyICs9IFwicmVwLW1heCAgICAgICAgID0gcmVwLW51bVxcblwiO1xuICAgIHN0ciArPSBcInJlcC1udW0gICAgICAgICA9IDEqKCVkNDgtNTcpXFxuXCI7XG4gICAgc3RyICs9IFwiZFN0cmluZyAgICAgICAgID0gZG51bVxcblwiO1xuICAgIHN0ciArPSBcInhTdHJpbmcgICAgICAgICA9IHhudW1cXG5cIjtcbiAgICBzdHIgKz0gXCJiU3RyaW5nICAgICAgICAgPSBibnVtXFxuXCI7XG4gICAgc3RyICs9IFwiRGVjICAgICAgICAgICAgID0gKCVkNjgvJWQxMDApXFxuXCI7XG4gICAgc3RyICs9IFwiSGV4ICAgICAgICAgICAgID0gKCVkODgvJWQxMjApXFxuXCI7XG4gICAgc3RyICs9IFwiQmluICAgICAgICAgICAgID0gKCVkNjYvJWQ5OClcXG5cIjtcbiAgICBzdHIgKz0gXCJkbWluICAgICAgICAgICAgPSBkbnVtXFxuXCI7XG4gICAgc3RyICs9IFwiZG1heCAgICAgICAgICAgID0gZG51bVxcblwiO1xuICAgIHN0ciArPSBcImJtaW4gICAgICAgICAgICA9IGJudW1cXG5cIjtcbiAgICBzdHIgKz0gXCJibWF4ICAgICAgICAgICAgPSBibnVtXFxuXCI7XG4gICAgc3RyICs9IFwieG1pbiAgICAgICAgICAgID0geG51bVxcblwiO1xuICAgIHN0ciArPSBcInhtYXggICAgICAgICAgICA9IHhudW1cXG5cIjtcbiAgICBzdHIgKz0gXCJkbnVtICAgICAgICAgICAgPSAxKiglZDQ4LTU3KVxcblwiO1xuICAgIHN0ciArPSBcImJudW0gICAgICAgICAgICA9IDEqJWQ0OC00OVxcblwiO1xuICAgIHN0ciArPSBcInhudW0gICAgICAgICAgICA9IDEqKCVkNDgtNTcgLyAlZDY1LTcwIC8gJWQ5Ny0xMDIpXFxuXCI7XG4gICAgc3RyICs9IFwiO1xcblwiO1xuICAgIHN0ciArPSBcIjsgQmFzaWNzXFxuXCI7XG4gICAgc3RyICs9IFwiYWxwaGFudW0gICAgICAgID0gKCVkOTctMTIyLyVkNjUtOTApICooJWQ5Ny0xMjIvJWQ2NS05MC8lZDQ4LTU3LyVkNDUpXFxuXCI7XG4gICAgc3RyICs9IFwib3dzcCAgICAgICAgICAgID0gKnNwYWNlXFxuXCI7XG4gICAgc3RyICs9IFwid3NwICAgICAgICAgICAgID0gMSpzcGFjZVxcblwiO1xuICAgIHN0ciArPSBcInNwYWNlICAgICAgICAgICA9ICVkMzJcXG5cIjtcbiAgICBzdHIgKz0gXCIgICAgICAgICAgICAgICAgLyAlZDlcXG5cIjtcbiAgICBzdHIgKz0gXCIgICAgICAgICAgICAgICAgLyBjb21tZW50XFxuXCI7XG4gICAgc3RyICs9IFwiICAgICAgICAgICAgICAgIC8gTGluZUNvbnRpbnVlXFxuXCI7XG4gICAgc3RyICs9IFwiY29tbWVudCAgICAgICAgID0gJWQ1OSAqKCVkMzItMTI2IC8gJWQ5KVxcblwiO1xuICAgIHN0ciArPSBcIkxpbmVFbmQgICAgICAgICA9ICVkMTMuMTBcXG5cIjtcbiAgICBzdHIgKz0gXCIgICAgICAgICAgICAgICAgLyAlZDEwXFxuXCI7XG4gICAgc3RyICs9IFwiICAgICAgICAgICAgICAgIC8gJWQxM1xcblwiO1xuICAgIHN0ciArPSBcIkxpbmVDb250aW51ZSAgICA9ICglZDEzLjEwIC8gJWQxMCAvICVkMTMpICglZDMyIC8gJWQ5KVxcblwiO1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZ3JhbW1hciIsImdyYW1tYXJPYmplY3QiLCJydWxlcyIsIm5hbWUiLCJsb3dlciIsImluZGV4IiwiaXNCa3IiLCJ1ZHRzIiwib3Bjb2RlcyIsInR5cGUiLCJtaW4iLCJtYXgiLCJJbmZpbml0eSIsImNoaWxkcmVuIiwic3RyaW5nIiwidG9TdHJpbmciLCJzdHIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-api/sabnf-grammar.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-api/scanner-callbacks.js":
/*!**************************************************************!*\
  !*** ./node_modules/apg-js/src/apg-api/scanner-callbacks.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // These are the AST translation callback functions used by the scanner\n// to analyze the characters and lines.\nconst ids = __webpack_require__(/*! ../apg-lib/identifiers */ \"(rsc)/./node_modules/apg-js/src/apg-lib/identifiers.js\");\nconst utils = __webpack_require__(/*! ../apg-lib/utilities */ \"(rsc)/./node_modules/apg-js/src/apg-lib/utilities.js\");\nfunction semLine(state, chars, phraseIndex, phraseCount, data) {\n    if (state === ids.SEM_PRE) {\n        data.endLength = 0;\n        data.textLength = 0;\n        data.invalidCount = 0;\n    } else {\n        data.lines.push({\n            lineNo: data.lines.length,\n            beginChar: phraseIndex,\n            length: phraseCount,\n            textLength: data.textLength,\n            endType: data.endType,\n            invalidChars: data.invalidCount\n        });\n    }\n    return ids.SEM_OK;\n}\nfunction semLineText(state, chars, phraseIndex, phraseCount, data) {\n    if (state === ids.SEM_PRE) {\n        data.textLength = phraseCount;\n    }\n    return ids.SEM_OK;\n}\nfunction semLastLine(state, chars, phraseIndex, phraseCount, data) {\n    if (state === ids.SEM_PRE) {\n        data.endLength = 0;\n        data.textLength = 0;\n        data.invalidCount = 0;\n    } else if (data.strict) {\n        data.lines.push({\n            lineNo: data.lines.length,\n            beginChar: phraseIndex,\n            length: phraseCount,\n            textLength: phraseCount,\n            endType: \"none\",\n            invalidChars: data.invalidCount\n        });\n        data.errors.push({\n            line: data.lineNo,\n            char: phraseIndex + phraseCount,\n            msg: \"no line end on last line - strict ABNF specifies CRLF(\\\\r\\\\n, \\\\x0D\\\\x0A)\"\n        });\n    } else {\n        /* add a line ender */ chars.push(10);\n        data.lines.push({\n            lineNo: data.lines.length,\n            beginChar: phraseIndex,\n            length: phraseCount + 1,\n            textLength: phraseCount,\n            endType: \"LF\",\n            invalidChars: data.invalidCount\n        });\n    }\n    return ids.SEM_OK;\n}\nfunction semInvalid(state, chars, phraseIndex, phraseCount, data) {\n    if (state === ids.SEM_PRE) {\n        data.errors.push({\n            line: data.lineNo,\n            char: phraseIndex,\n            msg: `invalid character found '\\\\x${utils.charToHex(chars[phraseIndex])}'`\n        });\n    }\n    return ids.SEM_OK;\n}\nfunction semEnd(state, chars, phraseIndex, phraseCount, data) {\n    if (state === ids.SEM_POST) {\n        data.lineNo += 1;\n    }\n    return ids.SEM_OK;\n}\nfunction semLF(state, chars, phraseIndex, phraseCount, data) {\n    if (state === ids.SEM_PRE) {\n        data.endType = \"LF\";\n        if (data.strict) {\n            data.errors.push({\n                line: data.lineNo,\n                char: phraseIndex,\n                msg: \"line end character LF(\\\\n, \\\\x0A) - strict ABNF specifies CRLF(\\\\r\\\\n, \\\\x0D\\\\x0A)\"\n            });\n        }\n    }\n    return ids.SEM_OK;\n}\nfunction semCR(state, chars, phraseIndex, phraseCount, data) {\n    if (state === ids.SEM_PRE) {\n        data.endType = \"CR\";\n        if (data.strict) {\n            data.errors.push({\n                line: data.lineNo,\n                char: phraseIndex,\n                msg: \"line end character CR(\\\\r, \\\\x0D) - strict ABNF specifies CRLF(\\\\r\\\\n, \\\\x0D\\\\x0A)\"\n            });\n        }\n    }\n    return ids.SEM_OK;\n}\nfunction semCRLF(state, chars, phraseIndex, phraseCount, data) {\n    if (state === ids.SEM_PRE) {\n        data.endType = \"CRLF\";\n    }\n    return ids.SEM_OK;\n}\nconst callbacks = [];\ncallbacks.line = semLine;\ncallbacks[\"line-text\"] = semLineText;\ncallbacks[\"last-line\"] = semLastLine;\ncallbacks.invalid = semInvalid;\ncallbacks.end = semEnd;\ncallbacks.lf = semLF;\ncallbacks.cr = semCR;\ncallbacks.crlf = semCRLF;\nexports.callbacks = callbacks;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-api/scanner-callbacks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-api/scanner-grammar.js":
/*!************************************************************!*\
  !*** ./node_modules/apg-js/src/apg-api/scanner-grammar.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
eval("// copyright: Copyright (c) 2023 Lowell D. Thomas, all rights reserved<br>\n//   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>\n//\n// Generated by apg-js, Version 4.2.1 [apg-js](https://github.com/ldthomas/apg-js)\n\nmodule.exports = function grammar() {\n    // ```\n    // SUMMARY\n    //      rules = 10\n    //       udts = 0\n    //    opcodes = 31\n    //        ---   ABNF original opcodes\n    //        ALT = 5\n    //        CAT = 2\n    //        REP = 4\n    //        RNM = 11\n    //        TLS = 0\n    //        TBS = 4\n    //        TRG = 5\n    //        ---   SABNF superset opcodes\n    //        UDT = 0\n    //        AND = 0\n    //        NOT = 0\n    //        BKA = 0\n    //        BKN = 0\n    //        BKR = 0\n    //        ABG = 0\n    //        AEN = 0\n    // characters = [0 - 4294967295]\n    // ```\n    /* OBJECT IDENTIFIER (for internal parser use) */ this.grammarObject = \"grammarObject\";\n    /* RULES */ this.rules = [];\n    this.rules[0] = {\n        name: \"file\",\n        lower: \"file\",\n        index: 0,\n        isBkr: false\n    };\n    this.rules[1] = {\n        name: \"line\",\n        lower: \"line\",\n        index: 1,\n        isBkr: false\n    };\n    this.rules[2] = {\n        name: \"line-text\",\n        lower: \"line-text\",\n        index: 2,\n        isBkr: false\n    };\n    this.rules[3] = {\n        name: \"last-line\",\n        lower: \"last-line\",\n        index: 3,\n        isBkr: false\n    };\n    this.rules[4] = {\n        name: \"valid\",\n        lower: \"valid\",\n        index: 4,\n        isBkr: false\n    };\n    this.rules[5] = {\n        name: \"invalid\",\n        lower: \"invalid\",\n        index: 5,\n        isBkr: false\n    };\n    this.rules[6] = {\n        name: \"end\",\n        lower: \"end\",\n        index: 6,\n        isBkr: false\n    };\n    this.rules[7] = {\n        name: \"CRLF\",\n        lower: \"crlf\",\n        index: 7,\n        isBkr: false\n    };\n    this.rules[8] = {\n        name: \"LF\",\n        lower: \"lf\",\n        index: 8,\n        isBkr: false\n    };\n    this.rules[9] = {\n        name: \"CR\",\n        lower: \"cr\",\n        index: 9,\n        isBkr: false\n    };\n    /* UDTS */ this.udts = [];\n    /* OPCODES */ /* file */ this.rules[0].opcodes = [];\n    this.rules[0].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            3\n        ]\n    }; // CAT\n    this.rules[0].opcodes[1] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[0].opcodes[2] = {\n        type: 4,\n        index: 1\n    }; // RNM(line)\n    this.rules[0].opcodes[3] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[0].opcodes[4] = {\n        type: 4,\n        index: 3\n    }; // RNM(last-line)\n    /* line */ this.rules[1].opcodes = [];\n    this.rules[1].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[1].opcodes[1] = {\n        type: 4,\n        index: 2\n    }; // RNM(line-text)\n    this.rules[1].opcodes[2] = {\n        type: 4,\n        index: 6\n    }; // RNM(end)\n    /* line-text */ this.rules[2].opcodes = [];\n    this.rules[2].opcodes[0] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[2].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3\n        ]\n    }; // ALT\n    this.rules[2].opcodes[2] = {\n        type: 4,\n        index: 4\n    }; // RNM(valid)\n    this.rules[2].opcodes[3] = {\n        type: 4,\n        index: 5\n    }; // RNM(invalid)\n    /* last-line */ this.rules[3].opcodes = [];\n    this.rules[3].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[3].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3\n        ]\n    }; // ALT\n    this.rules[3].opcodes[2] = {\n        type: 4,\n        index: 4\n    }; // RNM(valid)\n    this.rules[3].opcodes[3] = {\n        type: 4,\n        index: 5\n    }; // RNM(invalid)\n    /* valid */ this.rules[4].opcodes = [];\n    this.rules[4].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2\n        ]\n    }; // ALT\n    this.rules[4].opcodes[1] = {\n        type: 5,\n        min: 32,\n        max: 126\n    }; // TRG\n    this.rules[4].opcodes[2] = {\n        type: 6,\n        string: [\n            9\n        ]\n    }; // TBS\n    /* invalid */ this.rules[5].opcodes = [];\n    this.rules[5].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[5].opcodes[1] = {\n        type: 5,\n        min: 0,\n        max: 8\n    }; // TRG\n    this.rules[5].opcodes[2] = {\n        type: 5,\n        min: 11,\n        max: 12\n    }; // TRG\n    this.rules[5].opcodes[3] = {\n        type: 5,\n        min: 14,\n        max: 31\n    }; // TRG\n    this.rules[5].opcodes[4] = {\n        type: 5,\n        min: 127,\n        max: 4294967295\n    }; // TRG\n    /* end */ this.rules[6].opcodes = [];\n    this.rules[6].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2,\n            3\n        ]\n    }; // ALT\n    this.rules[6].opcodes[1] = {\n        type: 4,\n        index: 7\n    }; // RNM(CRLF)\n    this.rules[6].opcodes[2] = {\n        type: 4,\n        index: 8\n    }; // RNM(LF)\n    this.rules[6].opcodes[3] = {\n        type: 4,\n        index: 9\n    }; // RNM(CR)\n    /* CRLF */ this.rules[7].opcodes = [];\n    this.rules[7].opcodes[0] = {\n        type: 6,\n        string: [\n            13,\n            10\n        ]\n    }; // TBS\n    /* LF */ this.rules[8].opcodes = [];\n    this.rules[8].opcodes[0] = {\n        type: 6,\n        string: [\n            10\n        ]\n    }; // TBS\n    /* CR */ this.rules[9].opcodes = [];\n    this.rules[9].opcodes[0] = {\n        type: 6,\n        string: [\n            13\n        ]\n    }; // TBS\n    // The `toString()` function will display the original grammar file(s) that produced these opcodes.\n    this.toString = function toString() {\n        let str = \"\";\n        str += \"file = *line [last-line]\\n\";\n        str += \"line = line-text end\\n\";\n        str += \"line-text = *(valid/invalid)\\n\";\n        str += \"last-line = 1*(valid/invalid)\\n\";\n        str += \"valid = %d32-126 / %d9\\n\";\n        str += \"invalid = %d0-8 / %d11-12 /%d14-31 / %x7f-ffffffff\\n\";\n        str += \"end = CRLF / LF / CR\\n\";\n        str += \"CRLF = %d13.10\\n\";\n        str += \"LF = %d10\\n\";\n        str += \"CR = %d13\\n\";\n        return str;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctYXBpL3NjYW5uZXItZ3JhbW1hci5qcyIsIm1hcHBpbmdzIjoiQUFBQSwwRUFBMEU7QUFDMUUsNkVBQTZFO0FBQzdFLEVBQUU7QUFDRixrRkFBa0Y7O0FBQ2xGQSxPQUFPQyxPQUFPLEdBQUcsU0FBU0M7SUFDeEIsTUFBTTtJQUNOLFVBQVU7SUFDVixrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixxQ0FBcUM7SUFDckMsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLHNDQUFzQztJQUN0QyxpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGdDQUFnQztJQUNoQyxNQUFNO0lBQ04sK0NBQStDLEdBQy9DLElBQUksQ0FBQ0MsYUFBYSxHQUFHO0lBRXJCLFNBQVMsR0FDVCxJQUFJLENBQUNDLEtBQUssR0FBRyxFQUFFO0lBQ2YsSUFBSSxDQUFDQSxLQUFLLENBQUMsRUFBRSxHQUFHO1FBQUNDLE1BQU07UUFBUUMsT0FBTztRQUFRQyxPQUFPO1FBQUdDLE9BQU87SUFBSztJQUNwRSxJQUFJLENBQUNKLEtBQUssQ0FBQyxFQUFFLEdBQUc7UUFBQ0MsTUFBTTtRQUFRQyxPQUFPO1FBQVFDLE9BQU87UUFBR0MsT0FBTztJQUFLO0lBQ3BFLElBQUksQ0FBQ0osS0FBSyxDQUFDLEVBQUUsR0FBRztRQUFDQyxNQUFNO1FBQWFDLE9BQU87UUFBYUMsT0FBTztRQUFHQyxPQUFPO0lBQUs7SUFDOUUsSUFBSSxDQUFDSixLQUFLLENBQUMsRUFBRSxHQUFHO1FBQUNDLE1BQU07UUFBYUMsT0FBTztRQUFhQyxPQUFPO1FBQUdDLE9BQU87SUFBSztJ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UEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1BBLE9BQU87UUFDUEEsT0FBTztRQUNQQSxPQUFPO1FBQ1AsT0FBT0E7SUFDVDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRjcmliLy4vbm9kZV9tb2R1bGVzL2FwZy1qcy9zcmMvYXBnLWFwaS9zY2FubmVyLWdyYW1tYXIuanM/MmVkMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjb3B5cmlnaHQ6IENvcHlyaWdodCAoYykgMjAyMyBMb3dlbGwgRC4gVGhvbWFzLCBhbGwgcmlnaHRzIHJlc2VydmVkPGJyPlxuLy8gICBsaWNlbnNlOiBCU0QtMi1DbGF1c2UgKGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTItQ2xhdXNlKTxicj5cbi8vXG4vLyBHZW5lcmF0ZWQgYnkgYXBnLWpzLCBWZXJzaW9uIDQuMi4xIFthcGctanNdKGh0dHBzOi8vZ2l0aHViLmNvbS9sZHRob21hcy9hcGctanMpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdyYW1tYXIoKXtcbiAgLy8gYGBgXG4gIC8vIFNVTU1BUllcbiAgLy8gICAgICBydWxlcyA9IDEwXG4gIC8vICAgICAgIHVkdHMgPSAwXG4gIC8vICAgIG9wY29kZXMgPSAzMVxuICAvLyAgICAgICAgLS0tICAgQUJORiBvcmlnaW5hbCBvcGNvZGVzXG4gIC8vICAgICAgICBBTFQgPSA1XG4gIC8vICAgICAgICBDQVQgPSAyXG4gIC8vICAgICAgICBSRVAgPSA0XG4gIC8vICAgICAgICBSTk0gPSAxMVxuICAvLyAgICAgICAgVExTID0gMFxuICAvLyAgICAgICAgVEJTID0gNFxuICAvLyAgICAgICAgVFJHID0gNVxuICAvLyAgICAgICAgLS0tICAgU0FCTkYgc3VwZXJzZXQgb3Bjb2Rlc1xuICAvLyAgICAgICAgVURUID0gMFxuICAvLyAgICAgICAgQU5EID0gMFxuICAvLyAgICAgICAgTk9UID0gMFxuICAvLyAgICAgICAgQktBID0gMFxuICAvLyAgICAgICAgQktOID0gMFxuICAvLyAgICAgICAgQktSID0gMFxuICAvLyAgICAgICAgQUJHID0gMFxuICAvLyAgICAgICAgQUVOID0gMFxuICAvLyBjaGFyYWN0ZXJzID0gWzAgLSA0Mjk0OTY3Mjk1XVxuICAvLyBgYGBcbiAgLyogT0JKRUNUIElERU5USUZJRVIgKGZvciBpbnRlcm5hbCBwYXJzZXIgdXNlKSAqL1xuICB0aGlzLmdyYW1tYXJPYmplY3QgPSAnZ3JhbW1hck9iamVjdCc7XG5cbiAgLyogUlVMRVMgKi9cbiAgdGhpcy5ydWxlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzBdID0ge25hbWU6ICdmaWxlJywgbG93ZXI6ICdmaWxlJywgaW5kZXg6IDAsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbMV0gPSB7bmFtZTogJ2xpbmUnLCBsb3dlcjogJ2xpbmUnLCBpbmRleDogMSwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1syXSA9IHtuYW1lOiAnbGluZS10ZXh0JywgbG93ZXI6ICdsaW5lLXRleHQnLCBpbmRleDogMiwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1szXSA9IHtuYW1lOiAnbGFzdC1saW5lJywgbG93ZXI6ICdsYXN0LWxpbmUnLCBpbmRleDogMywgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s0XSA9IHtuYW1lOiAndmFsaWQnLCBsb3dlcjogJ3ZhbGlkJywgaW5kZXg6IDQsIGlzQmtyOiBmYWxzZX07XG4gIHRoaXMucnVsZXNbNV0gPSB7bmFtZTogJ2ludmFsaWQnLCBsb3dlcjogJ2ludmFsaWQnLCBpbmRleDogNSwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s2XSA9IHtuYW1lOiAnZW5kJywgbG93ZXI6ICdlbmQnLCBpbmRleDogNiwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s3XSA9IHtuYW1lOiAnQ1JMRicsIGxvd2VyOiAnY3JsZicsIGluZGV4OiA3LCBpc0JrcjogZmFsc2V9O1xuICB0aGlzLnJ1bGVzWzhdID0ge25hbWU6ICdMRicsIGxvd2VyOiAnbGYnLCBpbmRleDogOCwgaXNCa3I6IGZhbHNlfTtcbiAgdGhpcy5ydWxlc1s5XSA9IHtuYW1lOiAnQ1InLCBsb3dlcjogJ2NyJywgaW5kZXg6IDksIGlzQmtyOiBmYWxzZX07XG5cbiAgLyogVURUUyAqL1xuICB0aGlzLnVkdHMgPSBbXTtcblxuICAvKiBPUENPREVTICovXG4gIC8qIGZpbGUgKi9cbiAgdGhpcy5ydWxlc1swXS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbMF0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzEsM119Oy8vIENBVFxuICB0aGlzLnJ1bGVzWzBdLm9wY29kZXNbMV0gPSB7dHlwZTogMywgbWluOiAwLCBtYXg6IEluZmluaXR5fTsvLyBSRVBcbiAgdGhpcy5ydWxlc1swXS5vcGNvZGVzWzJdID0ge3R5cGU6IDQsIGluZGV4OiAxfTsvLyBSTk0obGluZSlcbiAgdGhpcy5ydWxlc1swXS5vcGNvZGVzWzNdID0ge3R5cGU6IDMsIG1pbjogMCwgbWF4OiAxfTsvLyBSRVBcbiAgdGhpcy5ydWxlc1swXS5vcGNvZGVzWzRdID0ge3R5cGU6IDQsIGluZGV4OiAzfTsvLyBSTk0obGFzdC1saW5lKVxuXG4gIC8qIGxpbmUgKi9cbiAgdGhpcy5ydWxlc1sxXS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbMV0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAyLCBjaGlsZHJlbjogWzEsMl19Oy8vIENBVFxuICB0aGlzLnJ1bGVzWzFdLm9wY29kZXNbMV0gPSB7dHlwZTogNCwgaW5kZXg6IDJ9Oy8vIFJOTShsaW5lLXRleHQpXG4gIHRoaXMucnVsZXNbMV0ub3Bjb2Rlc1syXSA9IHt0eXBlOiA0LCBpbmRleDogNn07Ly8gUk5NKGVuZClcblxuICAvKiBsaW5lLXRleHQgKi9cbiAgdGhpcy5ydWxlc1syXS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbMl0ub3Bjb2Rlc1swXSA9IHt0eXBlOiAzLCBtaW46IDAsIG1heDogSW5maW5pdHl9Oy8vIFJFUFxuICB0aGlzLnJ1bGVzWzJdLm9wY29kZXNbMV0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsyLDNdfTsvLyBBTFRcbiAgdGhpcy5ydWxlc1syXS5vcGNvZGVzWzJdID0ge3R5cGU6IDQsIGluZGV4OiA0fTsvLyBSTk0odmFsaWQpXG4gIHRoaXMucnVsZXNbMl0ub3Bjb2Rlc1szXSA9IHt0eXBlOiA0LCBpbmRleDogNX07Ly8gUk5NKGludmFsaWQpXG5cbiAgLyogbGFzdC1saW5lICovXG4gIHRoaXMucnVsZXNbM10ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzNdLm9wY29kZXNbMF0gPSB7dHlwZTogMywgbWluOiAxLCBtYXg6IEluZmluaXR5fTsvLyBSRVBcbiAgdGhpcy5ydWxlc1szXS5vcGNvZGVzWzFdID0ge3R5cGU6IDEsIGNoaWxkcmVuOiBbMiwzXX07Ly8gQUxUXG4gIHRoaXMucnVsZXNbM10ub3Bjb2Rlc1syXSA9IHt0eXBlOiA0LCBpbmRleDogNH07Ly8gUk5NKHZhbGlkKVxuICB0aGlzLnJ1bGVzWzNdLm9wY29kZXNbM10gPSB7dHlwZTogNCwgaW5kZXg6IDV9Oy8vIFJOTShpbnZhbGlkKVxuXG4gIC8qIHZhbGlkICovXG4gIHRoaXMucnVsZXNbNF0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzRdLm9wY29kZXNbMF0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsxLDJdfTsvLyBBTFRcbiAgdGhpcy5ydWxlc1s0XS5vcGNvZGVzWzFdID0ge3R5cGU6IDUsIG1pbjogMzIsIG1heDogMTI2fTsvLyBUUkdcbiAgdGhpcy5ydWxlc1s0XS5vcGNvZGVzWzJdID0ge3R5cGU6IDYsIHN0cmluZzogWzldfTsvLyBUQlNcblxuICAvKiBpbnZhbGlkICovXG4gIHRoaXMucnVsZXNbNV0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzVdLm9wY29kZXNbMF0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsxLDIsMyw0XX07Ly8gQUxUXG4gIHRoaXMucnVsZXNbNV0ub3Bjb2Rlc1sxXSA9IHt0eXBlOiA1LCBtaW46IDAsIG1heDogOH07Ly8gVFJHXG4gIHRoaXMucnVsZXNbNV0ub3Bjb2Rlc1syXSA9IHt0eXBlOiA1LCBtaW46IDExLCBtYXg6IDEyfTsvLyBUUkdcbiAgdGhpcy5ydWxlc1s1XS5vcGNvZGVzWzNdID0ge3R5cGU6IDUsIG1pbjogMTQsIG1heDogMzF9Oy8vIFRSR1xuICB0aGlzLnJ1bGVzWzVdLm9wY29kZXNbNF0gPSB7dHlwZTogNSwgbWluOiAxMjcsIG1heDogNDI5NDk2NzI5NX07Ly8gVFJHXG5cbiAgLyogZW5kICovXG4gIHRoaXMucnVsZXNbNl0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzZdLm9wY29kZXNbMF0gPSB7dHlwZTogMSwgY2hpbGRyZW46IFsxLDIsM119Oy8vIEFMVFxuICB0aGlzLnJ1bGVzWzZdLm9wY29kZXNbMV0gPSB7dHlwZTogNCwgaW5kZXg6IDd9Oy8vIFJOTShDUkxGKVxuICB0aGlzLnJ1bGVzWzZdLm9wY29kZXNbMl0gPSB7dHlwZTogNCwgaW5kZXg6IDh9Oy8vIFJOTShMRilcbiAgdGhpcy5ydWxlc1s2XS5vcGNvZGVzWzNdID0ge3R5cGU6IDQsIGluZGV4OiA5fTsvLyBSTk0oQ1IpXG5cbiAgLyogQ1JMRiAqL1xuICB0aGlzLnJ1bGVzWzddLm9wY29kZXMgPSBbXTtcbiAgdGhpcy5ydWxlc1s3XS5vcGNvZGVzWzBdID0ge3R5cGU6IDYsIHN0cmluZzogWzEzLDEwXX07Ly8gVEJTXG5cbiAgLyogTEYgKi9cbiAgdGhpcy5ydWxlc1s4XS5vcGNvZGVzID0gW107XG4gIHRoaXMucnVsZXNbOF0ub3Bjb2Rlc1swXSA9IHt0eXBlOiA2LCBzdHJpbmc6IFsxMF19Oy8vIFRCU1xuXG4gIC8qIENSICovXG4gIHRoaXMucnVsZXNbOV0ub3Bjb2RlcyA9IFtdO1xuICB0aGlzLnJ1bGVzWzldLm9wY29kZXNbMF0gPSB7dHlwZTogNiwgc3RyaW5nOiBbMTNdfTsvLyBUQlNcblxuICAvLyBUaGUgYHRvU3RyaW5nKClgIGZ1bmN0aW9uIHdpbGwgZGlzcGxheSB0aGUgb3JpZ2luYWwgZ3JhbW1hciBmaWxlKHMpIHRoYXQgcHJvZHVjZWQgdGhlc2Ugb3Bjb2Rlcy5cbiAgdGhpcy50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgbGV0IHN0ciA9IFwiXCI7XG4gICAgc3RyICs9IFwiZmlsZSA9ICpsaW5lIFtsYXN0LWxpbmVdXFxuXCI7XG4gICAgc3RyICs9IFwibGluZSA9IGxpbmUtdGV4dCBlbmRcXG5cIjtcbiAgICBzdHIgKz0gXCJsaW5lLXRleHQgPSAqKHZhbGlkL2ludmFsaWQpXFxuXCI7XG4gICAgc3RyICs9IFwibGFzdC1saW5lID0gMSoodmFsaWQvaW52YWxpZClcXG5cIjtcbiAgICBzdHIgKz0gXCJ2YWxpZCA9ICVkMzItMTI2IC8gJWQ5XFxuXCI7XG4gICAgc3RyICs9IFwiaW52YWxpZCA9ICVkMC04IC8gJWQxMS0xMiAvJWQxNC0zMSAvICV4N2YtZmZmZmZmZmZcXG5cIjtcbiAgICBzdHIgKz0gXCJlbmQgPSBDUkxGIC8gTEYgLyBDUlxcblwiO1xuICAgIHN0ciArPSBcIkNSTEYgPSAlZDEzLjEwXFxuXCI7XG4gICAgc3RyICs9IFwiTEYgPSAlZDEwXFxuXCI7XG4gICAgc3RyICs9IFwiQ1IgPSAlZDEzXFxuXCI7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJncmFtbWFyIiwiZ3JhbW1hck9iamVjdCIsInJ1bGVzIiwibmFtZSIsImxvd2VyIiwiaW5kZXgiLCJpc0JrciIsInVkdHMiLCJvcGNvZGVzIiwidHlwZSIsImNoaWxkcmVuIiwibWluIiwibWF4IiwiSW5maW5pdHkiLCJzdHJpbmciLCJ0b1N0cmluZyIsInN0ciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-api/scanner-grammar.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-api/scanner.js":
/*!****************************************************!*\
  !*** ./node_modules/apg-js/src/apg-api/scanner.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module reads the input grammar file and does a preliminary analysis\n// before attempting to parse it into a grammar object.\n// See:<br>\n// `./dist/scanner-grammar.bnf`<br>\n// for the grammar file this parser is based on.\n//\n// It has two primary functions.\n// - verify the character codes - no non-printing ASCII characters\n// - catalog the lines - create an array with a line object for each line.\n// The object carries information about the line number and character length which is used\n// by the parser generator primarily for error reporting.\n\nmodule.exports = function exfn(chars, errors, strict, trace) {\n    const thisFileName = \"scanner.js: \";\n    const apglib = __webpack_require__(/*! ../apg-lib/node-exports */ \"(rsc)/./node_modules/apg-js/src/apg-lib/node-exports.js\");\n    const grammar = new (__webpack_require__(/*! ./scanner-grammar */ \"(rsc)/./node_modules/apg-js/src/apg-api/scanner-grammar.js\"))();\n    const { callbacks } = __webpack_require__(/*! ./scanner-callbacks */ \"(rsc)/./node_modules/apg-js/src/apg-api/scanner-callbacks.js\");\n    /* Scan the grammar for character code errors and catalog the lines. */ const lines = [];\n    // eslint-disable-next-line new-cap\n    const parser = new apglib.parser();\n    // eslint-disable-next-line new-cap\n    parser.ast = new apglib.ast();\n    parser.ast.callbacks = callbacks;\n    if (trace) {\n        if (trace.traceObject !== \"traceObject\") {\n            throw new TypeError(`${thisFileName}trace argument is not a trace object`);\n        }\n        parser.trace = trace;\n    }\n    /* parse the input SABNF grammar */ const test = parser.parse(grammar, \"file\", chars);\n    if (test.success !== true) {\n        errors.push({\n            line: 0,\n            char: 0,\n            msg: \"syntax analysis error analyzing input SABNF grammar\"\n        });\n        return;\n    }\n    const data = {\n        lines,\n        lineNo: 0,\n        errors,\n        strict: !!strict\n    };\n    /* translate (analyze) the input SABNF grammar */ parser.ast.translate(data);\n    // eslint-disable-next-line consistent-return\n    return lines;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctYXBpL3NjYW5uZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozt1RkFHdUYsR0FDdkYsMkVBQTJFO0FBQzNFLHVEQUF1RDtBQUN2RCxXQUFXO0FBQ1gsbUNBQW1DO0FBQ25DLGdEQUFnRDtBQUNoRCxFQUFFO0FBQ0YsZ0NBQWdDO0FBQ2hDLGtFQUFrRTtBQUNsRSwwRUFBMEU7QUFDMUUsMEZBQTBGO0FBQzFGLHlEQUF5RDs7QUFDekRBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxLQUFLQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxLQUFLO0lBQ3pELE1BQU1DLGVBQWU7SUFDckIsTUFBTUMsU0FBU0MsbUJBQU9BLENBQUM7SUFDdkIsTUFBTUMsVUFBVSxJQUFLRCxDQUFBQSxtQkFBT0EsQ0FBQyxzRkFBbUI7SUFDaEQsTUFBTSxFQUFFRSxTQUFTLEVBQUUsR0FBR0YsbUJBQU9BLENBQUM7SUFFOUIscUVBQXFFLEdBQ3JFLE1BQU1HLFFBQVEsRUFBRTtJQUNoQixtQ0FBbUM7SUFDbkMsTUFBTUMsU0FBUyxJQUFJTCxPQUFPSyxNQUFNO0lBQ2hDLG1DQUFtQztJQUNuQ0EsT0FBT0MsR0FBRyxHQUFHLElBQUlOLE9BQU9NLEdBQUc7SUFDM0JELE9BQU9DLEdBQUcsQ0FBQ0gsU0FBUyxHQUFHQTtJQUN2QixJQUFJTCxPQUFPO1FBQ1QsSUFBSUEsTUFBTVMsV0FBVyxLQUFLLGVBQWU7WUFDdkMsTUFBTSxJQUFJQyxVQUFVLENBQUMsRUFBRVQsYUFBYSxvQ0FBb0MsQ0FBQztRQUMzRTtRQUNBTSxPQUFPUCxLQUFLLEdBQUdBO0lBQ2pCO0lBRUEsaUNBQWlDLEdBQ2pDLE1BQU1XLE9BQU9KLE9BQU9LLEtBQUssQ0FBQ1IsU0FBUyxRQUFRUDtJQUMzQyxJQUFJYyxLQUFLRSxPQUFPLEtBQUssTUFBTTtRQUN6QmYsT0FBT2dCLElBQUksQ0FBQztZQUNWQyxNQUFNO1lBQ05DLE1BQU07WUFDTkMsS0FBSztRQUNQO1FBQ0E7SUFDRjtJQUNBLE1BQU1DLE9BQU87UUFDWFo7UUFDQWEsUUFBUTtRQUNSckI7UUFDQUMsUUFBUSxDQUFDLENBQUNBO0lBQ1o7SUFFQSwrQ0FBK0MsR0FDL0NRLE9BQU9DLEdBQUcsQ0FBQ1ksU0FBUyxDQUFDRjtJQUNyQiw2Q0FBNkM7SUFDN0MsT0FBT1o7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9hcGctanMvc3JjL2FwZy1hcGkvc2Nhbm5lci5qcz9iMDgwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgIGNvcHlyaWdodDogQ29weXJpZ2h0IChjKSAyMDIxIExvd2VsbCBELiBUaG9tYXMsIGFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqICAgICBsaWNlbnNlOiBCU0QtMi1DbGF1c2UgKGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTItQ2xhdXNlKVxuICogICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbi8vIFRoaXMgbW9kdWxlIHJlYWRzIHRoZSBpbnB1dCBncmFtbWFyIGZpbGUgYW5kIGRvZXMgYSBwcmVsaW1pbmFyeSBhbmFseXNpc1xuLy8gYmVmb3JlIGF0dGVtcHRpbmcgdG8gcGFyc2UgaXQgaW50byBhIGdyYW1tYXIgb2JqZWN0LlxuLy8gU2VlOjxicj5cbi8vIGAuL2Rpc3Qvc2Nhbm5lci1ncmFtbWFyLmJuZmA8YnI+XG4vLyBmb3IgdGhlIGdyYW1tYXIgZmlsZSB0aGlzIHBhcnNlciBpcyBiYXNlZCBvbi5cbi8vXG4vLyBJdCBoYXMgdHdvIHByaW1hcnkgZnVuY3Rpb25zLlxuLy8gLSB2ZXJpZnkgdGhlIGNoYXJhY3RlciBjb2RlcyAtIG5vIG5vbi1wcmludGluZyBBU0NJSSBjaGFyYWN0ZXJzXG4vLyAtIGNhdGFsb2cgdGhlIGxpbmVzIC0gY3JlYXRlIGFuIGFycmF5IHdpdGggYSBsaW5lIG9iamVjdCBmb3IgZWFjaCBsaW5lLlxuLy8gVGhlIG9iamVjdCBjYXJyaWVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBsaW5lIG51bWJlciBhbmQgY2hhcmFjdGVyIGxlbmd0aCB3aGljaCBpcyB1c2VkXG4vLyBieSB0aGUgcGFyc2VyIGdlbmVyYXRvciBwcmltYXJpbHkgZm9yIGVycm9yIHJlcG9ydGluZy5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXhmbihjaGFycywgZXJyb3JzLCBzdHJpY3QsIHRyYWNlKSB7XG4gIGNvbnN0IHRoaXNGaWxlTmFtZSA9ICdzY2FubmVyLmpzOiAnO1xuICBjb25zdCBhcGdsaWIgPSByZXF1aXJlKCcuLi9hcGctbGliL25vZGUtZXhwb3J0cycpO1xuICBjb25zdCBncmFtbWFyID0gbmV3IChyZXF1aXJlKCcuL3NjYW5uZXItZ3JhbW1hcicpKSgpO1xuICBjb25zdCB7IGNhbGxiYWNrcyB9ID0gcmVxdWlyZSgnLi9zY2FubmVyLWNhbGxiYWNrcycpO1xuXG4gIC8qIFNjYW4gdGhlIGdyYW1tYXIgZm9yIGNoYXJhY3RlciBjb2RlIGVycm9ycyBhbmQgY2F0YWxvZyB0aGUgbGluZXMuICovXG4gIGNvbnN0IGxpbmVzID0gW107XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuZXctY2FwXG4gIGNvbnN0IHBhcnNlciA9IG5ldyBhcGdsaWIucGFyc2VyKCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuZXctY2FwXG4gIHBhcnNlci5hc3QgPSBuZXcgYXBnbGliLmFzdCgpO1xuICBwYXJzZXIuYXN0LmNhbGxiYWNrcyA9IGNhbGxiYWNrcztcbiAgaWYgKHRyYWNlKSB7XG4gICAgaWYgKHRyYWNlLnRyYWNlT2JqZWN0ICE9PSAndHJhY2VPYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke3RoaXNGaWxlTmFtZX10cmFjZSBhcmd1bWVudCBpcyBub3QgYSB0cmFjZSBvYmplY3RgKTtcbiAgICB9XG4gICAgcGFyc2VyLnRyYWNlID0gdHJhY2U7XG4gIH1cblxuICAvKiBwYXJzZSB0aGUgaW5wdXQgU0FCTkYgZ3JhbW1hciAqL1xuICBjb25zdCB0ZXN0ID0gcGFyc2VyLnBhcnNlKGdyYW1tYXIsICdmaWxlJywgY2hhcnMpO1xuICBpZiAodGVzdC5zdWNjZXNzICE9PSB0cnVlKSB7XG4gICAgZXJyb3JzLnB1c2goe1xuICAgICAgbGluZTogMCxcbiAgICAgIGNoYXI6IDAsXG4gICAgICBtc2c6ICdzeW50YXggYW5hbHlzaXMgZXJyb3IgYW5hbHl6aW5nIGlucHV0IFNBQk5GIGdyYW1tYXInLFxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBkYXRhID0ge1xuICAgIGxpbmVzLFxuICAgIGxpbmVObzogMCxcbiAgICBlcnJvcnMsXG4gICAgc3RyaWN0OiAhIXN0cmljdCxcbiAgfTtcblxuICAvKiB0cmFuc2xhdGUgKGFuYWx5emUpIHRoZSBpbnB1dCBTQUJORiBncmFtbWFyICovXG4gIHBhcnNlci5hc3QudHJhbnNsYXRlKGRhdGEpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgcmV0dXJuIGxpbmVzO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZXhmbiIsImNoYXJzIiwiZXJyb3JzIiwic3RyaWN0IiwidHJhY2UiLCJ0aGlzRmlsZU5hbWUiLCJhcGdsaWIiLCJyZXF1aXJlIiwiZ3JhbW1hciIsImNhbGxiYWNrcyIsImxpbmVzIiwicGFyc2VyIiwiYXN0IiwidHJhY2VPYmplY3QiLCJUeXBlRXJyb3IiLCJ0ZXN0IiwicGFyc2UiLCJzdWNjZXNzIiwicHVzaCIsImxpbmUiLCJjaGFyIiwibXNnIiwiZGF0YSIsImxpbmVObyIsInRyYW5zbGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-api/scanner.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-api/semantic-callbacks.js":
/*!***************************************************************!*\
  !*** ./node_modules/apg-js/src/apg-api/semantic-callbacks.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module has all of the AST translation callback functions for the semantic analysis\n// phase of the generator.\n// See:<br>\n// `./dist/abnf-for-sabnf-grammar.bnf`<br>\n// for the grammar file these callback functions are based on.\n\nmodule.exports = function exfn() {\n    const apglib = __webpack_require__(/*! ../apg-lib/node-exports */ \"(rsc)/./node_modules/apg-js/src/apg-lib/node-exports.js\");\n    const id = apglib.ids;\n    /* Some helper functions. */ const NameList = function NameList() {\n        this.names = [];\n        /* Adds a new rule name object to the list. Returns -1 if the name already exists. */ /* Returns the added name object if the name does not already exist. */ this.add = function add(name) {\n            let ret = -1;\n            const find = this.get(name);\n            if (find === -1) {\n                ret = {\n                    name,\n                    lower: name.toLowerCase(),\n                    index: this.names.length\n                };\n                this.names.push(ret);\n            }\n            return ret;\n        };\n        /* Brute-force look up. */ this.get = function get(name) {\n            let ret = -1;\n            const lower = name.toLowerCase();\n            for(let i = 0; i < this.names.length; i += 1){\n                if (this.names[i].lower === lower) {\n                    ret = this.names[i];\n                    break;\n                }\n            }\n            return ret;\n        };\n    };\n    /* converts text decimal numbers from, e.g. %d99, to an integer */ const decnum = function decnum(chars, beg, len) {\n        let num = 0;\n        for(let i = beg; i < beg + len; i += 1){\n            num = 10 * num + chars[i] - 48;\n        }\n        return num;\n    };\n    /* converts text binary numbers from, e.g. %b10, to an integer */ const binnum = function binnum(chars, beg, len) {\n        let num = 0;\n        for(let i = beg; i < beg + len; i += 1){\n            num = 2 * num + chars[i] - 48;\n        }\n        return num;\n    };\n    /* converts text hexadecimal numbers from, e.g. %xff, to an integer */ const hexnum = function hexnum(chars, beg, len) {\n        let num = 0;\n        for(let i = beg; i < beg + len; i += 1){\n            let digit = chars[i];\n            if (digit >= 48 && digit <= 57) {\n                digit -= 48;\n            } else if (digit >= 65 && digit <= 70) {\n                digit -= 55;\n            } else if (digit >= 97 && digit <= 102) {\n                digit -= 87;\n            } else {\n                throw new Error(\"hexnum out of range\");\n            }\n            num = 16 * num + digit;\n        }\n        return num;\n    };\n    // This is the prototype for all semantic analysis callback functions.\n    // ````\n    // state - the translator state\n    //   id.SEM_PRE for downward (pre-branch) traversal of the AST\n    //   id.SEM_POST for upward (post branch) traversal of the AST\n    // chars - the array of character codes for the input string\n    // phraseIndex - index into the chars array to the first\n    //               character of the phrase\n    // phraseCount - the number of characters in the phrase\n    // data - user-defined data passed to the translator\n    //        for use by the callback functions.\n    // @return id.SEM_OK, normal return.\n    //         id.SEM_SKIP in state id.SEM_PRE will\n    //         skip the branch below.\n    //         Any thing else is an error which will\n    //         stop the translation.\n    // ````\n    /*\n  function semCallbackPrototype(state, chars, phraseIndex, phraseCount, data) {\n    let ret = id.SEM_OK;\n    if (state === id.SEM_PRE) {\n    } else if (state === id.SEM_POST) {\n    }\n    return ret;\n  }\n  */ // The AST callback functions.\n    function semFile(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.ruleNames = new NameList();\n            data.udtNames = new NameList();\n            data.rules = [];\n            data.udts = [];\n            data.rulesLineMap = [];\n            data.opcodes = [];\n            data.altStack = [];\n            data.topStack = null;\n            data.topRule = null;\n        } else if (state === id.SEM_POST) {\n            /* validate RNM rule names and set opcode rule index */ let nameObj;\n            data.rules.forEach((rule)=>{\n                rule.isBkr = false;\n                rule.opcodes.forEach((op)=>{\n                    if (op.type === id.RNM) {\n                        nameObj = data.ruleNames.get(op.index.name);\n                        if (nameObj === -1) {\n                            data.errors.push({\n                                line: data.findLine(data.lines, op.index.phraseIndex, data.charsLength),\n                                char: op.index.phraseIndex,\n                                msg: `Rule name '${op.index.name}' used but not defined.`\n                            });\n                            op.index = -1;\n                        } else {\n                            op.index = nameObj.index;\n                        }\n                    }\n                });\n            });\n            /* validate BKR rule names and set opcode rule index */ data.udts.forEach((udt)=>{\n                udt.isBkr = false;\n            });\n            data.rules.forEach((rule)=>{\n                rule.opcodes.forEach((op)=>{\n                    if (op.type === id.BKR) {\n                        rule.hasBkr = true;\n                        nameObj = data.ruleNames.get(op.index.name);\n                        if (nameObj !== -1) {\n                            data.rules[nameObj.index].isBkr = true;\n                            op.index = nameObj.index;\n                        } else {\n                            nameObj = data.udtNames.get(op.index.name);\n                            if (nameObj !== -1) {\n                                data.udts[nameObj.index].isBkr = true;\n                                op.index = data.rules.length + nameObj.index;\n                            } else {\n                                data.errors.push({\n                                    line: data.findLine(data.lines, op.index.phraseIndex, data.charsLength),\n                                    char: op.index.phraseIndex,\n                                    msg: `Back reference name '${op.index.name}' refers to undefined rule or unamed UDT.`\n                                });\n                                op.index = -1;\n                            }\n                        }\n                    }\n                });\n            });\n        }\n        return ret;\n    }\n    function semRule(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.altStack.length = 0;\n            data.topStack = null;\n            data.rulesLineMap.push({\n                line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                char: phraseIndex\n            });\n        }\n        return ret;\n    }\n    function semRuleLookup(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.ruleName = \"\";\n            data.definedas = \"\";\n        } else if (state === id.SEM_POST) {\n            let ruleName;\n            if (data.definedas === \"=\") {\n                ruleName = data.ruleNames.add(data.ruleName);\n                if (ruleName === -1) {\n                    data.definedas = null;\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: `Rule name '${data.ruleName}' previously defined.`\n                    });\n                } else {\n                    /* start a new rule */ data.topRule = {\n                        name: ruleName.name,\n                        lower: ruleName.lower,\n                        opcodes: [],\n                        index: ruleName.index\n                    };\n                    data.rules.push(data.topRule);\n                    data.opcodes = data.topRule.opcodes;\n                }\n            } else {\n                ruleName = data.ruleNames.get(data.ruleName);\n                if (ruleName === -1) {\n                    data.definedas = null;\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: `Rule name '${data.ruleName}' for incremental alternate not previously defined.`\n                    });\n                } else {\n                    data.topRule = data.rules[ruleName.index];\n                    data.opcodes = data.topRule.opcodes;\n                }\n            }\n        }\n        return ret;\n    }\n    function semAlternation(state, chars, phraseIndex, phraseCount, data) {\n        let ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            const TRUE = true;\n            while(TRUE){\n                if (data.definedas === null) {\n                    /* rule error - skip opcode generation */ ret = id.SEM_SKIP;\n                    break;\n                }\n                if (data.topStack === null) {\n                    /* top-level ALT */ if (data.definedas === \"=\") {\n                        /* \"=\" new rule */ data.topStack = {\n                            alt: {\n                                type: id.ALT,\n                                children: []\n                            },\n                            cat: null\n                        };\n                        data.altStack.push(data.topStack);\n                        data.opcodes.push(data.topStack.alt);\n                        break;\n                    }\n                    /* \"=/\" incremental alternate */ data.topStack = {\n                        alt: data.opcodes[0],\n                        cat: null\n                    };\n                    data.altStack.push(data.topStack);\n                    break;\n                }\n                /* lower-level ALT */ data.topStack = {\n                    alt: {\n                        type: id.ALT,\n                        children: []\n                    },\n                    cat: null\n                };\n                data.altStack.push(data.topStack);\n                data.opcodes.push(data.topStack.alt);\n                break;\n            }\n        } else if (state === id.SEM_POST) {\n            data.altStack.pop();\n            if (data.altStack.length > 0) {\n                data.topStack = data.altStack[data.altStack.length - 1];\n            } else {\n                data.topStack = null;\n            }\n        }\n        return ret;\n    }\n    function semConcatenation(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.topStack.alt.children.push(data.opcodes.length);\n            data.topStack.cat = {\n                type: id.CAT,\n                children: []\n            };\n            data.opcodes.push(data.topStack.cat);\n        } else if (state === id.SEM_POST) {\n            data.topStack.cat = null;\n        }\n        return ret;\n    }\n    function semRepetition(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.topStack.cat.children.push(data.opcodes.length);\n        }\n        return ret;\n    }\n    function semOptionOpen(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.REP,\n                min: 0,\n                max: 1,\n                char: phraseIndex\n            });\n        }\n        return ret;\n    }\n    function semRuleName(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.ruleName = apglib.utils.charsToString(chars, phraseIndex, phraseCount);\n        }\n        return ret;\n    }\n    function semDefined(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.definedas = \"=\";\n        }\n        return ret;\n    }\n    function semIncAlt(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.definedas = \"=/\";\n        }\n        return ret;\n    }\n    function semRepOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.min = 0;\n            data.max = Infinity;\n            data.topRep = {\n                type: id.REP,\n                min: 0,\n                max: Infinity\n            };\n            data.opcodes.push(data.topRep);\n        } else if (state === id.SEM_POST) {\n            if (data.min > data.max) {\n                data.errors.push({\n                    line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                    char: phraseIndex,\n                    msg: `repetition min cannot be greater than max: min: ${data.min}: max: ${data.max}`\n                });\n            }\n            data.topRep.min = data.min;\n            data.topRep.max = data.max;\n        }\n        return ret;\n    }\n    function semRepMin(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.min = decnum(chars, phraseIndex, phraseCount);\n        }\n        return ret;\n    }\n    function semRepMax(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.max = decnum(chars, phraseIndex, phraseCount);\n        }\n        return ret;\n    }\n    function semRepMinMax(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.max = decnum(chars, phraseIndex, phraseCount);\n            data.min = data.max;\n        }\n        return ret;\n    }\n    function semAndOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.AND\n            });\n        }\n        return ret;\n    }\n    function semNotOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.NOT\n            });\n        }\n        return ret;\n    }\n    function semRnmOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.RNM,\n                /* NOTE: this is temporary info, index will be replaced with integer later. */ /* Probably not the best coding practice but here you go. */ index: {\n                    phraseIndex,\n                    name: apglib.utils.charsToString(chars, phraseIndex, phraseCount)\n                }\n            });\n        }\n        return ret;\n    }\n    function semAbgOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.ABG\n            });\n        }\n        return ret;\n    }\n    function semAenOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.AEN\n            });\n        }\n        return ret;\n    }\n    function semBkaOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.BKA\n            });\n        }\n        return ret;\n    }\n    function semBknOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.BKN\n            });\n        }\n        return ret;\n    }\n    function semBkrOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.ci = true; /* default to case insensitive */ \n            data.cs = false;\n            data.um = true;\n            data.pm = false;\n        } else if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.BKR,\n                bkrCase: data.cs === true ? id.BKR_MODE_CS : id.BKR_MODE_CI,\n                bkrMode: data.pm === true ? id.BKR_MODE_PM : id.BKR_MODE_UM,\n                /* NOTE: this is temporary info, index will be replaced with integer later. */ /* Probably not the best coding practice but here you go. */ index: {\n                    phraseIndex: data.bkrname.phraseIndex,\n                    name: apglib.utils.charsToString(chars, data.bkrname.phraseIndex, data.bkrname.phraseLength)\n                }\n            });\n        }\n        return ret;\n    }\n    function semBkrCi(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.ci = true;\n        }\n        return ret;\n    }\n    function semBkrCs(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.cs = true;\n        }\n        return ret;\n    }\n    function semBkrUm(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.um = true;\n        }\n        return ret;\n    }\n    function semBkrPm(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.pm = true;\n        }\n        return ret;\n    }\n    function semBkrName(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.bkrname = {\n                phraseIndex,\n                phraseLength: phraseCount\n            };\n        }\n        return ret;\n    }\n    function semUdtEmpty(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            const name = apglib.utils.charsToString(chars, phraseIndex, phraseCount);\n            let udtName = data.udtNames.add(name);\n            if (udtName === -1) {\n                udtName = data.udtNames.get(name);\n                if (udtName === -1) {\n                    throw new Error(\"semUdtEmpty: name look up error\");\n                }\n            } else {\n                data.udts.push({\n                    name: udtName.name,\n                    lower: udtName.lower,\n                    index: udtName.index,\n                    empty: true\n                });\n            }\n            data.opcodes.push({\n                type: id.UDT,\n                empty: true,\n                index: udtName.index\n            });\n        }\n        return ret;\n    }\n    function semUdtNonEmpty(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            const name = apglib.utils.charsToString(chars, phraseIndex, phraseCount);\n            let udtName = data.udtNames.add(name);\n            if (udtName === -1) {\n                udtName = data.udtNames.get(name);\n                if (udtName === -1) {\n                    throw new Error(\"semUdtNonEmpty: name look up error\");\n                }\n            } else {\n                data.udts.push({\n                    name: udtName.name,\n                    lower: udtName.lower,\n                    index: udtName.index,\n                    empty: false\n                });\n            }\n            data.opcodes.push({\n                type: id.UDT,\n                empty: false,\n                index: udtName.index,\n                syntax: null,\n                semantic: null\n            });\n        }\n        return ret;\n    }\n    function semTlsOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.tlscase = true; /* default to case insensitive */ \n        }\n        return ret;\n    }\n    function semTlsCase(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            if (phraseCount > 0 && (chars[phraseIndex + 1] === 83 || chars[phraseIndex + 1] === 115)) {\n                data.tlscase = false; /* set to case sensitive */ \n            }\n        }\n        return ret;\n    }\n    function semTlsString(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            if (data.tlscase) {\n                const str = chars.slice(phraseIndex, phraseIndex + phraseCount);\n                for(let i = 0; i < str.length; i += 1){\n                    if (str[i] >= 65 && str[i] <= 90) {\n                        str[i] += 32;\n                    }\n                }\n                data.opcodes.push({\n                    type: id.TLS,\n                    string: str\n                });\n            } else {\n                data.opcodes.push({\n                    type: id.TBS,\n                    string: chars.slice(phraseIndex, phraseIndex + phraseCount)\n                });\n            }\n        }\n        return ret;\n    }\n    function semClsOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            if (phraseCount <= 2) {\n                /* only TLS is allowed to be empty */ data.opcodes.push({\n                    type: id.TLS,\n                    string: []\n                });\n            } else {\n                data.opcodes.push({\n                    type: id.TBS,\n                    string: chars.slice(phraseIndex + 1, phraseIndex + phraseCount - 1)\n                });\n            }\n        }\n        return ret;\n    }\n    function semTbsOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.tbsstr = [];\n        } else if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.TBS,\n                string: data.tbsstr\n            });\n        }\n        return ret;\n    }\n    function semTrgOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.min = 0;\n            data.max = 0;\n        } else if (state === id.SEM_POST) {\n            if (data.min > data.max) {\n                data.errors.push({\n                    line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                    char: phraseIndex,\n                    msg: `TRG, (%dmin-max), min cannot be greater than max: min: ${data.min}: max: ${data.max}`\n                });\n            }\n            data.opcodes.push({\n                type: id.TRG,\n                min: data.min,\n                max: data.max\n            });\n        }\n        return ret;\n    }\n    function semDmin(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.min = decnum(chars, phraseIndex, phraseCount);\n        }\n        return ret;\n    }\n    function semDmax(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.max = decnum(chars, phraseIndex, phraseCount);\n        }\n        return ret;\n    }\n    function semBmin(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.min = binnum(chars, phraseIndex, phraseCount);\n        }\n        return ret;\n    }\n    function semBmax(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.max = binnum(chars, phraseIndex, phraseCount);\n        }\n        return ret;\n    }\n    function semXmin(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.min = hexnum(chars, phraseIndex, phraseCount);\n        }\n        return ret;\n    }\n    function semXmax(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.max = hexnum(chars, phraseIndex, phraseCount);\n        }\n        return ret;\n    }\n    function semDstring(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.tbsstr.push(decnum(chars, phraseIndex, phraseCount));\n        }\n        return ret;\n    }\n    function semBstring(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.tbsstr.push(binnum(chars, phraseIndex, phraseCount));\n        }\n        return ret;\n    }\n    function semXstring(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.tbsstr.push(hexnum(chars, phraseIndex, phraseCount));\n        }\n        return ret;\n    }\n    // Define the callback functions to the AST object.\n    this.callbacks = [];\n    this.callbacks.abgop = semAbgOp;\n    this.callbacks.aenop = semAenOp;\n    this.callbacks.alternation = semAlternation;\n    this.callbacks.andop = semAndOp;\n    this.callbacks.bmax = semBmax;\n    this.callbacks.bmin = semBmin;\n    this.callbacks.bkaop = semBkaOp;\n    this.callbacks.bknop = semBknOp;\n    this.callbacks.bkrop = semBkrOp;\n    this.callbacks[\"bkr-name\"] = semBkrName;\n    this.callbacks.bstring = semBstring;\n    this.callbacks.clsop = semClsOp;\n    this.callbacks.ci = semBkrCi;\n    this.callbacks.cs = semBkrCs;\n    this.callbacks.um = semBkrUm;\n    this.callbacks.pm = semBkrPm;\n    this.callbacks.concatenation = semConcatenation;\n    this.callbacks.defined = semDefined;\n    this.callbacks.dmax = semDmax;\n    this.callbacks.dmin = semDmin;\n    this.callbacks.dstring = semDstring;\n    this.callbacks.file = semFile;\n    this.callbacks.incalt = semIncAlt;\n    this.callbacks.notop = semNotOp;\n    this.callbacks.optionopen = semOptionOpen;\n    this.callbacks[\"rep-max\"] = semRepMax;\n    this.callbacks[\"rep-min\"] = semRepMin;\n    this.callbacks[\"rep-min-max\"] = semRepMinMax;\n    this.callbacks.repetition = semRepetition;\n    this.callbacks.repop = semRepOp;\n    this.callbacks.rnmop = semRnmOp;\n    this.callbacks.rule = semRule;\n    this.callbacks.rulelookup = semRuleLookup;\n    this.callbacks.rulename = semRuleName;\n    this.callbacks.tbsop = semTbsOp;\n    this.callbacks.tlscase = semTlsCase;\n    this.callbacks.tlsstring = semTlsString;\n    this.callbacks.tlsop = semTlsOp;\n    this.callbacks.trgop = semTrgOp;\n    this.callbacks[\"udt-empty\"] = semUdtEmpty;\n    this.callbacks[\"udt-non-empty\"] = semUdtNonEmpty;\n    this.callbacks.xmax = semXmax;\n    this.callbacks.xmin = semXmin;\n    this.callbacks.xstring = semXstring;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-api/semantic-callbacks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-api/show-rules.js":
/*!*******************************************************!*\
  !*** ./node_modules/apg-js/src/apg-api/show-rules.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ \nmodule.exports = function exfn() {\n    const thisFileName = \"show-rules.js\";\n    // Display the rules.\n    // This function may be called before the attributes calculation.\n    // Sorting is done independently from the attributes.\n    // - order\n    //      - \"index\" or \"i\", index order (default)\n    //      - \"alpha\" or \"a\", alphabetical order\n    //      - none of above, index order (default)\n    const showRules = function showRules(rulesIn = [], udtsIn = [], order = \"index\") {\n        const thisFuncName = \"showRules\";\n        let alphaArray = [];\n        let udtAlphaArray = [];\n        const indexArray = [];\n        const udtIndexArray = [];\n        const rules = rulesIn;\n        const udts = udtsIn;\n        const ruleCount = rulesIn.length;\n        const udtCount = udtsIn.length;\n        let str = \"RULE/UDT NAMES\";\n        let i;\n        function compRulesAlpha(left, right) {\n            if (rules[left].lower < rules[right].lower) {\n                return -1;\n            }\n            if (rules[left].lower > rules[right].lower) {\n                return 1;\n            }\n            return 0;\n        }\n        function compUdtsAlpha(left, right) {\n            if (udts[left].lower < udts[right].lower) {\n                return -1;\n            }\n            if (udts[left].lower > udts[right].lower) {\n                return 1;\n            }\n            return 0;\n        }\n        if (!(Array.isArray(rulesIn) && rulesIn.length)) {\n            throw new Error(`${thisFileName}:${thisFuncName}: rules arg must be array with length > 0`);\n        }\n        if (!Array.isArray(udtsIn)) {\n            throw new Error(`${thisFileName}:${thisFuncName}: udts arg must be array`);\n        }\n        for(i = 0; i < ruleCount; i += 1){\n            indexArray.push(i);\n        }\n        alphaArray = indexArray.slice(0);\n        alphaArray.sort(compRulesAlpha);\n        if (udtCount) {\n            for(i = 0; i < udtCount; i += 1){\n                udtIndexArray.push(i);\n            }\n            udtAlphaArray = udtIndexArray.slice(0);\n            udtAlphaArray.sort(compUdtsAlpha);\n        }\n        if (order.charCodeAt(0) === 97) {\n            str += \" - alphabetical by rule/UDT name\\n\";\n            for(i = 0; i < ruleCount; i += 1){\n                str += `${i}: ${alphaArray[i]}: ${rules[alphaArray[i]].name}\\n`;\n            }\n            if (udtCount) {\n                for(i = 0; i < udtCount; i += 1){\n                    str += `${i}: ${udtAlphaArray[i]}: ${udts[udtAlphaArray[i]].name}\\n`;\n                }\n            }\n        } else {\n            str += \" - ordered by rule/UDT index\\n\";\n            for(i = 0; i < ruleCount; i += 1){\n                str += `${i}: ${rules[i].name}\\n`;\n            }\n            if (udtCount) {\n                for(i = 0; i < udtCount; i += 1){\n                    str += `${i}: ${udts[i].name}\\n`;\n                }\n            }\n        }\n        return str;\n    };\n    return showRules;\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctYXBpL3Nob3ctcnVsZXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozt1RkFHdUY7QUFDdkZBLE9BQU9DLE9BQU8sR0FBRyxTQUFVQztJQUN6QixNQUFNQyxlQUFlO0lBQ3JCLHFCQUFxQjtJQUNyQixpRUFBaUU7SUFDakUscURBQXFEO0lBQ3JELFVBQVU7SUFDViwrQ0FBK0M7SUFDL0MsNENBQTRDO0lBQzVDLDhDQUE4QztJQUM5QyxNQUFNQyxZQUFZLFNBQVNBLFVBQVVDLFVBQVUsRUFBRSxFQUFFQyxTQUFTLEVBQUUsRUFBRUMsUUFBUSxPQUFPO1FBQzdFLE1BQU1DLGVBQWU7UUFDckIsSUFBSUMsYUFBYSxFQUFFO1FBQ25CLElBQUlDLGdCQUFnQixFQUFFO1FBQ3RCLE1BQU1DLGFBQWEsRUFBRTtRQUNyQixNQUFNQyxnQkFBZ0IsRUFBRTtRQUN4QixNQUFNQyxRQUFRUjtRQUNkLE1BQU1TLE9BQU9SO1FBQ2IsTUFBTVMsWUFBWVYsUUFBUVcsTUFBTTtRQUNoQyxNQUFNQyxXQUFXWCxPQUFPVSxNQUFNO1FBQzlCLElBQUlFLE1BQU07UUFDVixJQUFJQztRQUNKLFNBQVNDLGVBQWVDLElBQUksRUFBRUMsS0FBSztZQUNqQyxJQUFJVCxLQUFLLENBQUNRLEtBQUssQ0FBQ0UsS0FBSyxHQUFHVixLQUFLLENBQUNTLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFO2dCQUMxQyxPQUFPLENBQUM7WUFDVjtZQUNBLElBQUlWLEtBQUssQ0FBQ1EsS0FBSyxDQUFDRSxLQUFLLEdBQUdWLEtBQUssQ0FBQ1MsTUFBTSxDQUFDQyxLQUFLLEVBQUU7Z0JBQzFDLE9BQU87WUFDVDtZQUNBLE9BQU87UUFDVDtRQUNBLFNBQVNDLGNBQWNILElBQUksRUFBRUMsS0FBSztZQUNoQyxJQUFJUixJQUFJLENBQUNPLEtBQUssQ0FBQ0UsS0FBSyxHQUFHVCxJQUFJLENBQUNRLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFO2dCQUN4QyxPQUFPLENBQUM7WUFDVjtZQUNBLElBQUlULElBQUksQ0FBQ08sS0FBSyxDQUFDRSxLQUFLLEdBQUdULElBQUksQ0FBQ1EsTUFBTSxDQUFDQyxLQUFLLEVBQUU7Z0JBQ3hDLE9BQU87WUFDVDtZQUNBLE9BQU87UUFDVDtRQUNBLElBQUksQ0FBRUUsQ0FBQUEsTUFBTUMsT0FBTyxDQUFDckIsWUFBWUEsUUFBUVcsTUFBTSxHQUFHO1lBQy9DLE1BQU0sSUFBSVcsTUFBTSxDQUFDLEVBQUV4QixhQUFhLENBQUMsRUFBRUssYUFBYSx5Q0FBeUMsQ0FBQztRQUM1RjtRQUNBLElBQUksQ0FBQ2lCLE1BQU1DLE9BQU8sQ0FBQ3BCLFNBQVM7WUFDMUIsTUFBTSxJQUFJcUIsTUFBTSxDQUFDLEVBQUV4QixhQUFhLENBQUMsRUFBRUssYUFBYSx3QkFBd0IsQ0FBQztRQUMzRTtRQUVBLElBQUtXLElBQUksR0FBR0EsSUFBSUosV0FBV0ksS0FBSyxFQUFHO1lBQ2pDUixXQUFXaUIsSUFBSSxDQUFDVDtRQUNsQjtRQUNBVixhQUFhRSxXQUFXa0IsS0FBSyxDQUFDO1FBQzlCcEIsV0FBV3FCLElBQUksQ0FBQ1Y7UUFDaEIsSUFBSUgsVUFBVTtZQUNaLElBQUtFLElBQUksR0FBR0EsSUFBSUYsVUFBVUUsS0FBSyxFQUFHO2dCQUNoQ1AsY0FBY2dCLElBQUksQ0FBQ1Q7WUFDckI7WUFDQVQsZ0JBQWdCRSxjQUFjaUIsS0FBSyxDQUFDO1lBQ3BDbkIsY0FBY29CLElBQUksQ0FBQ047UUFDckI7UUFDQSxJQUFJakIsTUFBTXdCLFVBQVUsQ0FBQyxPQUFPLElBQUk7WUFDOUJiLE9BQU87WUFDUCxJQUFLQyxJQUFJLEdBQUdBLElBQUlKLFdBQVdJLEtBQUssRUFBRztnQkFDakNELE9BQU8sQ0FBQyxFQUFFQyxFQUFFLEVBQUUsRUFBRVYsVUFBVSxDQUFDVSxFQUFFLENBQUMsRUFBRSxFQUFFTixLQUFLLENBQUNKLFVBQVUsQ0FBQ1UsRUFBRSxDQUFDLENBQUNhLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDakU7WUFDQSxJQUFJZixVQUFVO2dCQUNaLElBQUtFLElBQUksR0FBR0EsSUFBSUYsVUFBVUUsS0FBSyxFQUFHO29CQUNoQ0QsT0FBTyxDQUFDLEVBQUVDLEVBQUUsRUFBRSxFQUFFVCxhQUFhLENBQUNTLEVBQUUsQ0FBQyxFQUFFLEVBQUVMLElBQUksQ0FBQ0osYUFBYSxDQUFDUyxFQUFFLENBQUMsQ0FBQ2EsSUFBSSxDQUFDLEVBQUUsQ0FBQztnQkFDdEU7WUFDRjtRQUNGLE9BQU87WUFDTGQsT0FBTztZQUNQLElBQUtDLElBQUksR0FBR0EsSUFBSUosV0FBV0ksS0FBSyxFQUFHO2dCQUNqQ0QsT0FBTyxDQUFDLEVBQUVDLEVBQUUsRUFBRSxFQUFFTixLQUFLLENBQUNNLEVBQUUsQ0FBQ2EsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUNuQztZQUNBLElBQUlmLFVBQVU7Z0JBQ1osSUFBS0UsSUFBSSxHQUFHQSxJQUFJRixVQUFVRSxLQUFLLEVBQUc7b0JBQ2hDRCxPQUFPLENBQUMsRUFBRUMsRUFBRSxFQUFFLEVBQUVMLElBQUksQ0FBQ0ssRUFBRSxDQUFDYSxJQUFJLENBQUMsRUFBRSxDQUFDO2dCQUNsQztZQUNGO1FBQ0Y7UUFDQSxPQUFPZDtJQUNUO0lBQ0EsT0FBT2Q7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9hcGctanMvc3JjL2FwZy1hcGkvc2hvdy1ydWxlcy5qcz8yYWRiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgIGNvcHlyaWdodDogQ29weXJpZ2h0IChjKSAyMDIxIExvd2VsbCBELiBUaG9tYXMsIGFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqICAgICBsaWNlbnNlOiBCU0QtMi1DbGF1c2UgKGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTItQ2xhdXNlKVxuICogICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uIGV4Zm4oKSB7XG4gIGNvbnN0IHRoaXNGaWxlTmFtZSA9ICdzaG93LXJ1bGVzLmpzJztcbiAgLy8gRGlzcGxheSB0aGUgcnVsZXMuXG4gIC8vIFRoaXMgZnVuY3Rpb24gbWF5IGJlIGNhbGxlZCBiZWZvcmUgdGhlIGF0dHJpYnV0ZXMgY2FsY3VsYXRpb24uXG4gIC8vIFNvcnRpbmcgaXMgZG9uZSBpbmRlcGVuZGVudGx5IGZyb20gdGhlIGF0dHJpYnV0ZXMuXG4gIC8vIC0gb3JkZXJcbiAgLy8gICAgICAtIFwiaW5kZXhcIiBvciBcImlcIiwgaW5kZXggb3JkZXIgKGRlZmF1bHQpXG4gIC8vICAgICAgLSBcImFscGhhXCIgb3IgXCJhXCIsIGFscGhhYmV0aWNhbCBvcmRlclxuICAvLyAgICAgIC0gbm9uZSBvZiBhYm92ZSwgaW5kZXggb3JkZXIgKGRlZmF1bHQpXG4gIGNvbnN0IHNob3dSdWxlcyA9IGZ1bmN0aW9uIHNob3dSdWxlcyhydWxlc0luID0gW10sIHVkdHNJbiA9IFtdLCBvcmRlciA9ICdpbmRleCcpIHtcbiAgICBjb25zdCB0aGlzRnVuY05hbWUgPSAnc2hvd1J1bGVzJztcbiAgICBsZXQgYWxwaGFBcnJheSA9IFtdO1xuICAgIGxldCB1ZHRBbHBoYUFycmF5ID0gW107XG4gICAgY29uc3QgaW5kZXhBcnJheSA9IFtdO1xuICAgIGNvbnN0IHVkdEluZGV4QXJyYXkgPSBbXTtcbiAgICBjb25zdCBydWxlcyA9IHJ1bGVzSW47XG4gICAgY29uc3QgdWR0cyA9IHVkdHNJbjtcbiAgICBjb25zdCBydWxlQ291bnQgPSBydWxlc0luLmxlbmd0aDtcbiAgICBjb25zdCB1ZHRDb3VudCA9IHVkdHNJbi5sZW5ndGg7XG4gICAgbGV0IHN0ciA9ICdSVUxFL1VEVCBOQU1FUyc7XG4gICAgbGV0IGk7XG4gICAgZnVuY3Rpb24gY29tcFJ1bGVzQWxwaGEobGVmdCwgcmlnaHQpIHtcbiAgICAgIGlmIChydWxlc1tsZWZ0XS5sb3dlciA8IHJ1bGVzW3JpZ2h0XS5sb3dlcikge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICBpZiAocnVsZXNbbGVmdF0ubG93ZXIgPiBydWxlc1tyaWdodF0ubG93ZXIpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcFVkdHNBbHBoYShsZWZ0LCByaWdodCkge1xuICAgICAgaWYgKHVkdHNbbGVmdF0ubG93ZXIgPCB1ZHRzW3JpZ2h0XS5sb3dlcikge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICBpZiAodWR0c1tsZWZ0XS5sb3dlciA+IHVkdHNbcmlnaHRdLmxvd2VyKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmICghKEFycmF5LmlzQXJyYXkocnVsZXNJbikgJiYgcnVsZXNJbi5sZW5ndGgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGhpc0ZpbGVOYW1lfToke3RoaXNGdW5jTmFtZX06IHJ1bGVzIGFyZyBtdXN0IGJlIGFycmF5IHdpdGggbGVuZ3RoID4gMGApO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodWR0c0luKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXNGaWxlTmFtZX06JHt0aGlzRnVuY05hbWV9OiB1ZHRzIGFyZyBtdXN0IGJlIGFycmF5YCk7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IHJ1bGVDb3VudDsgaSArPSAxKSB7XG4gICAgICBpbmRleEFycmF5LnB1c2goaSk7XG4gICAgfVxuICAgIGFscGhhQXJyYXkgPSBpbmRleEFycmF5LnNsaWNlKDApO1xuICAgIGFscGhhQXJyYXkuc29ydChjb21wUnVsZXNBbHBoYSk7XG4gICAgaWYgKHVkdENvdW50KSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdWR0Q291bnQ7IGkgKz0gMSkge1xuICAgICAgICB1ZHRJbmRleEFycmF5LnB1c2goaSk7XG4gICAgICB9XG4gICAgICB1ZHRBbHBoYUFycmF5ID0gdWR0SW5kZXhBcnJheS5zbGljZSgwKTtcbiAgICAgIHVkdEFscGhhQXJyYXkuc29ydChjb21wVWR0c0FscGhhKTtcbiAgICB9XG4gICAgaWYgKG9yZGVyLmNoYXJDb2RlQXQoMCkgPT09IDk3KSB7XG4gICAgICBzdHIgKz0gJyAtIGFscGhhYmV0aWNhbCBieSBydWxlL1VEVCBuYW1lXFxuJztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBydWxlQ291bnQ7IGkgKz0gMSkge1xuICAgICAgICBzdHIgKz0gYCR7aX06ICR7YWxwaGFBcnJheVtpXX06ICR7cnVsZXNbYWxwaGFBcnJheVtpXV0ubmFtZX1cXG5gO1xuICAgICAgfVxuICAgICAgaWYgKHVkdENvdW50KSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB1ZHRDb3VudDsgaSArPSAxKSB7XG4gICAgICAgICAgc3RyICs9IGAke2l9OiAke3VkdEFscGhhQXJyYXlbaV19OiAke3VkdHNbdWR0QWxwaGFBcnJheVtpXV0ubmFtZX1cXG5gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSAnIC0gb3JkZXJlZCBieSBydWxlL1VEVCBpbmRleFxcbic7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgcnVsZUNvdW50OyBpICs9IDEpIHtcbiAgICAgICAgc3RyICs9IGAke2l9OiAke3J1bGVzW2ldLm5hbWV9XFxuYDtcbiAgICAgIH1cbiAgICAgIGlmICh1ZHRDb3VudCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdWR0Q291bnQ7IGkgKz0gMSkge1xuICAgICAgICAgIHN0ciArPSBgJHtpfTogJHt1ZHRzW2ldLm5hbWV9XFxuYDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuICByZXR1cm4gc2hvd1J1bGVzO1xufSkoKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZXhmbiIsInRoaXNGaWxlTmFtZSIsInNob3dSdWxlcyIsInJ1bGVzSW4iLCJ1ZHRzSW4iLCJvcmRlciIsInRoaXNGdW5jTmFtZSIsImFscGhhQXJyYXkiLCJ1ZHRBbHBoYUFycmF5IiwiaW5kZXhBcnJheSIsInVkdEluZGV4QXJyYXkiLCJydWxlcyIsInVkdHMiLCJydWxlQ291bnQiLCJsZW5ndGgiLCJ1ZHRDb3VudCIsInN0ciIsImkiLCJjb21wUnVsZXNBbHBoYSIsImxlZnQiLCJyaWdodCIsImxvd2VyIiwiY29tcFVkdHNBbHBoYSIsIkFycmF5IiwiaXNBcnJheSIsIkVycm9yIiwicHVzaCIsInNsaWNlIiwic29ydCIsImNoYXJDb2RlQXQiLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-api/show-rules.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-api/syntax-callbacks.js":
/*!*************************************************************!*\
  !*** ./node_modules/apg-js/src/apg-api/syntax-callbacks.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* eslint-disable func-names */ /*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module has all of the callback functions for the syntax phase of the generation.\n// See:<br>\n// `./dist/abnf-for-sabnf-grammar.bnf`<br>\n// for the grammar file these callback functions are based on.\n\nmodule.exports = function exfn() {\n    const thisFileName = \"syntax-callbacks.js: \";\n    const apglib = __webpack_require__(/*! ../apg-lib/node-exports */ \"(rsc)/./node_modules/apg-js/src/apg-lib/node-exports.js\");\n    const id = apglib.ids;\n    let topAlt;\n    /* syntax, RNM, callback functions */ const synFile = function synFile(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                data.altStack = [];\n                data.repCount = 0;\n                break;\n            case id.EMPTY:\n                data.errors.push({\n                    line: 0,\n                    char: 0,\n                    msg: \"grammar file is empty\"\n                });\n                break;\n            case id.MATCH:\n                if (data.ruleCount === 0) {\n                    data.errors.push({\n                        line: 0,\n                        char: 0,\n                        msg: \"no rules defined\"\n                    });\n                }\n                break;\n            case id.NOMATCH:\n                throw new Error(`${thisFileName}synFile: grammar file NOMATCH: design error: should never happen.`);\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    // eslint-disable-next-line func-names\n    const synRule = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                data.altStack.length = 0;\n                topAlt = {\n                    groupOpen: null,\n                    groupError: false,\n                    optionOpen: null,\n                    optionError: false,\n                    tlsOpen: null,\n                    clsOpen: null,\n                    prosValOpen: null,\n                    basicError: false\n                };\n                data.altStack.push(topAlt);\n                break;\n            case id.EMPTY:\n                throw new Error(`${thisFileName}synRule: EMPTY: rule cannot be empty`);\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                data.ruleCount += 1;\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synRuleError = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                    char: phraseIndex,\n                    msg: \"Unrecognized SABNF line. Invalid rule, comment or blank line.\"\n                });\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synRuleNameError = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                    char: phraseIndex,\n                    msg: \"Rule names must be alphanum and begin with alphabetic character.\"\n                });\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synDefinedAsError = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                    char: phraseIndex,\n                    msg: \"Expected '=' or '=/'. Not found.\"\n                });\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synAndOp = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.strict) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: \"AND operator(&) found - strict ABNF specified.\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synNotOp = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.strict) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: \"NOT operator(!) found - strict ABNF specified.\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synBkaOp = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.strict) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: \"Positive look-behind operator(&&) found - strict ABNF specified.\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synBknOp = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.strict) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: \"Negative look-behind operator(!!) found - strict ABNF specified.\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synAbgOp = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.strict) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: \"Beginning of string anchor(%^) found - strict ABNF specified.\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synAenOp = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.strict) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: \"End of string anchor(%$) found - strict ABNF specified.\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synBkrOp = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.strict) {\n                    const name = apglib.utils.charsToString(chars, phraseIndex, result.phraseLength);\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: `Back reference operator(${name}) found - strict ABNF specified.`\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synUdtOp = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.strict) {\n                    const name = apglib.utils.charsToString(chars, phraseIndex, result.phraseLength);\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: `UDT operator found(${name}) - strict ABNF specified.`\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synTlsOpen = function(result, chars, phraseIndex) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                topAlt.tlsOpen = phraseIndex;\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synTlsString = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                data.stringTabChar = false;\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.stringTabChar !== false) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, data.stringTabChar),\n                        char: data.stringTabChar,\n                        msg: \"Tab character (\\\\t, x09) not allowed in literal string (see 'quoted-string' definition, RFC 7405.)\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synStringTab = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                data.stringTabChar = phraseIndex;\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synTlsClose = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, topAlt.tlsOpen),\n                    char: topAlt.tlsOpen,\n                    msg: 'Case-insensitive literal string(\"...\") opened but not closed.'\n                });\n                topAlt.basicError = true;\n                topAlt.tlsOpen = null;\n                break;\n            case id.MATCH:\n                topAlt.tlsOpen = null;\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synClsOpen = function(result, chars, phraseIndex) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                topAlt.clsOpen = phraseIndex;\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synClsString = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                data.stringTabChar = false;\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.stringTabChar !== false) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, data.stringTabChar),\n                        char: data.stringTabChar,\n                        msg: \"Tab character (\\\\t, x09) not allowed in literal string.\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synClsClose = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, topAlt.clsOpen),\n                    char: topAlt.clsOpen,\n                    msg: \"Case-sensitive literal string('...') opened but not closed.\"\n                });\n                topAlt.clsOpen = null;\n                topAlt.basicError = true;\n                break;\n            case id.MATCH:\n                if (data.strict) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, topAlt.clsOpen),\n                        char: topAlt.clsOpen,\n                        msg: \"Case-sensitive string operator('...') found - strict ABNF specified.\"\n                    });\n                }\n                topAlt.clsOpen = null;\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synProsValOpen = function(result, chars, phraseIndex) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                topAlt.prosValOpen = phraseIndex;\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synProsValString = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                data.stringTabChar = false;\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.stringTabChar !== false) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, data.stringTabChar),\n                        char: data.stringTabChar,\n                        msg: \"Tab character (\\\\t, x09) not allowed in prose value string.\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synProsValClose = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, topAlt.prosValOpen),\n                    char: topAlt.prosValOpen,\n                    msg: \"Prose value operator(<...>) opened but not closed.\"\n                });\n                topAlt.basicError = true;\n                topAlt.prosValOpen = null;\n                break;\n            case id.MATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, topAlt.prosValOpen),\n                    char: topAlt.prosValOpen,\n                    msg: \"Prose value operator(<...>) found. The ABNF syntax is valid, but a parser cannot be generated from this grammar.\"\n                });\n                topAlt.prosValOpen = null;\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synGroupOpen = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                topAlt = {\n                    groupOpen: phraseIndex,\n                    groupError: false,\n                    optionOpen: null,\n                    optionError: false,\n                    tlsOpen: null,\n                    clsOpen: null,\n                    prosValOpen: null,\n                    basicError: false\n                };\n                data.altStack.push(topAlt);\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synGroupClose = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, topAlt.groupOpen),\n                    char: topAlt.groupOpen,\n                    msg: 'Group \"(...)\" opened but not closed.'\n                });\n                topAlt = data.altStack.pop();\n                topAlt.groupError = true;\n                break;\n            case id.MATCH:\n                topAlt = data.altStack.pop();\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synOptionOpen = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                topAlt = {\n                    groupOpen: null,\n                    groupError: false,\n                    optionOpen: phraseIndex,\n                    optionError: false,\n                    tlsOpen: null,\n                    clsOpen: null,\n                    prosValOpen: null,\n                    basicError: false\n                };\n                data.altStack.push(topAlt);\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synOptionClose = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, topAlt.optionOpen),\n                    char: topAlt.optionOpen,\n                    msg: 'Option \"[...]\" opened but not closed.'\n                });\n                topAlt = data.altStack.pop();\n                topAlt.optionError = true;\n                break;\n            case id.MATCH:\n                topAlt = data.altStack.pop();\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synBasicElementError = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (topAlt.basicError === false) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: \"Unrecognized SABNF element.\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synLineEnd = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (result.phraseLength === 1 && data.strict) {\n                    const end = chars[phraseIndex] === 13 ? \"CR\" : \"LF\";\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: `Line end '${end}' found - strict ABNF specified, only CRLF allowed.`\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synLineEndError = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                    char: phraseIndex,\n                    msg: \"Unrecognized grammar element or characters.\"\n                });\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synRepetition = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                data.repCount += 1;\n                break;\n            case id.MATCH:\n                data.repCount += 1;\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    // Define the list of callback functions.\n    this.callbacks = [];\n    this.callbacks.andop = synAndOp;\n    this.callbacks.basicelementerr = synBasicElementError;\n    this.callbacks.clsclose = synClsClose;\n    this.callbacks.clsopen = synClsOpen;\n    this.callbacks.clsstring = synClsString;\n    this.callbacks.definedaserror = synDefinedAsError;\n    this.callbacks.file = synFile;\n    this.callbacks.groupclose = synGroupClose;\n    this.callbacks.groupopen = synGroupOpen;\n    this.callbacks.lineenderror = synLineEndError;\n    this.callbacks.lineend = synLineEnd;\n    this.callbacks.notop = synNotOp;\n    this.callbacks.optionclose = synOptionClose;\n    this.callbacks.optionopen = synOptionOpen;\n    this.callbacks.prosvalclose = synProsValClose;\n    this.callbacks.prosvalopen = synProsValOpen;\n    this.callbacks.prosvalstring = synProsValString;\n    this.callbacks.repetition = synRepetition;\n    this.callbacks.rule = synRule;\n    this.callbacks.ruleerror = synRuleError;\n    this.callbacks.rulenameerror = synRuleNameError;\n    this.callbacks.stringtab = synStringTab;\n    this.callbacks.tlsclose = synTlsClose;\n    this.callbacks.tlsopen = synTlsOpen;\n    this.callbacks.tlsstring = synTlsString;\n    this.callbacks.udtop = synUdtOp;\n    this.callbacks.bkaop = synBkaOp;\n    this.callbacks.bknop = synBknOp;\n    this.callbacks.bkrop = synBkrOp;\n    this.callbacks.abgop = synAbgOp;\n    this.callbacks.aenop = synAenOp;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-api/syntax-callbacks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-conv-api/converter.js":
/*!***********************************************************!*\
  !*** ./node_modules/apg-js/src/apg-conv-api/converter.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module exposes the public encoding, decoding and conversion functions.\n// Its private functions provide the disassembling and interpetation of the source and destination encoding types.\n// In the case of Unicode encodings, private functions determine the presence of Byte Order Marks (BOMs), if any.\n//\n// Throws \"TypeError\" exceptions on input errors.\n//\n\"use strict;\";\nconst { Buffer } = __webpack_require__(/*! buffer */ \"buffer\");\nconst trans = __webpack_require__(/*! ./transformers */ \"(rsc)/./node_modules/apg-js/src/apg-conv-api/transformers.js\");\n/* types */ const UTF8 = \"UTF8\";\nconst UTF16 = \"UTF16\";\nconst UTF16BE = \"UTF16BE\";\nconst UTF16LE = \"UTF16LE\";\nconst UTF32 = \"UTF32\";\nconst UTF32BE = \"UTF32BE\";\nconst UTF32LE = \"UTF32LE\";\nconst UINT7 = \"UINT7\";\nconst ASCII = \"ASCII\";\nconst BINARY = \"BINARY\";\nconst UINT8 = \"UINT8\";\nconst UINT16 = \"UINT16\";\nconst UINT16LE = \"UINT16LE\";\nconst UINT16BE = \"UINT16BE\";\nconst UINT32 = \"UINT32\";\nconst UINT32LE = \"UINT32LE\";\nconst UINT32BE = \"UINT32BE\";\nconst ESCAPED = \"ESCAPED\";\nconst STRING = \"STRING\";\n/* private functions */ // Find the UTF8 BOM, if any.\nconst bom8 = function bom8(src) {\n    src.type = UTF8;\n    const buf = src.data;\n    src.bom = 0;\n    if (buf.length >= 3) {\n        if (buf[0] === 0xef && buf[1] === 0xbb && buf[2] === 0xbf) {\n            src.bom = 3;\n        }\n    }\n};\n// Find the UTF16 BOM, if any, and determine the UTF16 type.\n// Defaults to UTF16BE.\n// Throws TypeError exception if BOM does not match the specified type.\nconst bom16 = function bom16(src) {\n    const buf = src.data;\n    src.bom = 0;\n    switch(src.type){\n        case UTF16:\n            src.type = UTF16BE;\n            if (buf.length >= 2) {\n                if (buf[0] === 0xfe && buf[1] === 0xff) {\n                    src.bom = 2;\n                } else if (buf[0] === 0xff && buf[1] === 0xfe) {\n                    src.type = UTF16LE;\n                    src.bom = 2;\n                }\n            }\n            break;\n        case UTF16BE:\n            src.type = UTF16BE;\n            if (buf.length >= 2) {\n                if (buf[0] === 0xfe && buf[1] === 0xff) {\n                    src.bom = 2;\n                } else if (buf[0] === 0xff && buf[1] === 0xfe) {\n                    throw new TypeError(`src type: \"${UTF16BE}\" specified but BOM is for \"${UTF16LE}\"`);\n                }\n            }\n            break;\n        case UTF16LE:\n            src.type = UTF16LE;\n            if (buf.length >= 0) {\n                if (buf[0] === 0xfe && buf[1] === 0xff) {\n                    throw new TypeError(`src type: \"${UTF16LE}\" specified but BOM is for \"${UTF16BE}\"`);\n                } else if (buf[0] === 0xff && buf[1] === 0xfe) {\n                    src.bom = 2;\n                }\n            }\n            break;\n        default:\n            throw new TypeError(`UTF16 BOM: src type \"${src.type}\" unrecognized`);\n    }\n};\n// Find the UTF32 BOM, if any, and determine the UTF32 type.\n// Defaults to UTF32BE.\n// Throws exception if BOM does not match the specified type.\nconst bom32 = function bom32(src) {\n    const buf = src.data;\n    src.bom = 0;\n    switch(src.type){\n        case UTF32:\n            src.type = UTF32BE;\n            if (buf.length >= 4) {\n                if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {\n                    src.bom = 4;\n                }\n                if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {\n                    src.type = UTF32LE;\n                    src.bom = 4;\n                }\n            }\n            break;\n        case UTF32BE:\n            src.type = UTF32BE;\n            if (buf.length >= 4) {\n                if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {\n                    src.bom = 4;\n                }\n                if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {\n                    throw new TypeError(`src type: ${UTF32BE} specified but BOM is for ${UTF32LE}\"`);\n                }\n            }\n            break;\n        case UTF32LE:\n            src.type = UTF32LE;\n            if (buf.length >= 4) {\n                if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {\n                    throw new TypeError(`src type: \"${UTF32LE}\" specified but BOM is for \"${UTF32BE}\"`);\n                }\n                if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {\n                    src.bom = 4;\n                }\n            }\n            break;\n        default:\n            throw new TypeError(`UTF32 BOM: src type \"${src.type}\" unrecognized`);\n    }\n};\n// Validates the source encoding type and matching data.\n// If the BASE64: prefix is present, the base 64 decoding is done here as the initial step.\n// - For type STRING, data must be a JavaScript string.\n// - For type BASE64:*, data may be a string or Buffer.\n// - For all other types, data must be a Buffer.\n// - The BASE64: prefix is not allowed for type STRING.\nconst validateSrc = function validateSrc(type, data) {\n    function getType(typeArg) {\n        const ret = {\n            type: \"\",\n            base64: false\n        };\n        const rx = /^(base64:)?([a-zA-Z0-9]+)$/i;\n        const result = rx.exec(typeArg);\n        if (result) {\n            if (result[2]) {\n                ret.type = result[2].toUpperCase();\n            }\n            if (result[1]) {\n                ret.base64 = true;\n            }\n        }\n        return ret;\n    }\n    const ret = getType(type.toUpperCase());\n    if (ret.base64) {\n        /* handle base 64 */ if (ret.type === STRING) {\n            throw new TypeError(`type: \"${type} \"BASE64:\" prefix not allowed with type ${STRING}`);\n        }\n        if (Buffer.isBuffer(data)) {\n            ret.data = trans.base64.decode(data);\n        } else if (typeof data === \"string\") {\n            const buf = Buffer.from(data, \"ascii\");\n            ret.data = trans.base64.decode(buf);\n        } else {\n            throw new TypeError(`type: \"${type} unrecognized data type: typeof(data): ${typeof data}`);\n        }\n    } else {\n        ret.data = data;\n    }\n    switch(ret.type){\n        case UTF8:\n            bom8(ret);\n            break;\n        case UTF16:\n        case UTF16BE:\n        case UTF16LE:\n            bom16(ret);\n            break;\n        case UTF32:\n        case UTF32BE:\n        case UTF32LE:\n            bom32(ret);\n            break;\n        case UINT16:\n            ret.type = UINT16BE;\n            break;\n        case UINT32:\n            ret.type = UINT32BE;\n            break;\n        case ASCII:\n            ret.type = UINT7;\n            break;\n        case BINARY:\n            ret.type = UINT8;\n            break;\n        case UINT7:\n        case UINT8:\n        case UINT16LE:\n        case UINT16BE:\n        case UINT32LE:\n        case UINT32BE:\n        case STRING:\n        case ESCAPED:\n            break;\n        default:\n            throw new TypeError(`type: \"${type}\" not recognized`);\n    }\n    if (ret.type === STRING) {\n        if (typeof ret.data !== \"string\") {\n            throw new TypeError(`type: \"${type}\" but data is not a string`);\n        }\n    } else if (!Buffer.isBuffer(ret.data)) {\n        throw new TypeError(`type: \"${type}\" but data is not a Buffer`);\n    }\n    return ret;\n};\n// Disassembles and validates the destination type.\n// `chars` must be an Array of integers.\n// The :BASE64 suffix is not allowed for type STRING.\nconst validateDst = function validateDst(type, chars) {\n    function getType(typeArg) {\n        let fix;\n        let rem;\n        const ret = {\n            crlf: false,\n            lf: false,\n            base64: false,\n            type: \"\"\n        };\n        /* prefix, if any */ const TRUE = true;\n        while(TRUE){\n            rem = typeArg;\n            fix = typeArg.slice(0, 5);\n            if (fix === \"CRLF:\") {\n                ret.crlf = true;\n                rem = typeArg.slice(5);\n                break;\n            }\n            fix = typeArg.slice(0, 3);\n            if (fix === \"LF:\") {\n                ret.lf = true;\n                rem = typeArg.slice(3);\n                break;\n            }\n            break;\n        }\n        /* suffix, if any */ fix = rem.split(\":\");\n        if (fix.length === 1) {\n            // eslint-disable-next-line prefer-destructuring\n            ret.type = fix[0];\n        } else if (fix.length === 2 && fix[1] === \"BASE64\") {\n            ret.base64 = true;\n            // eslint-disable-next-line prefer-destructuring\n            ret.type = fix[0];\n        }\n        return ret;\n    }\n    if (!Array.isArray(chars)) {\n        throw new TypeError(`dst chars: not array: \"${typeof chars}`);\n    }\n    if (typeof type !== \"string\") {\n        throw new TypeError(`dst type: not string: \"${typeof type}`);\n    }\n    const ret = getType(type.toUpperCase());\n    switch(ret.type){\n        case UTF8:\n        case UTF16BE:\n        case UTF16LE:\n        case UTF32BE:\n        case UTF32LE:\n        case UINT7:\n        case UINT8:\n        case UINT16LE:\n        case UINT16BE:\n        case UINT32LE:\n        case UINT32BE:\n        case ESCAPED:\n            break;\n        case STRING:\n            if (ret.base64) {\n                throw new TypeError(`\":BASE64\" suffix not allowed with type ${STRING}`);\n            }\n            break;\n        case ASCII:\n            ret.type = UINT7;\n            break;\n        case BINARY:\n            ret.type = UINT8;\n            break;\n        case UTF16:\n            ret.type = UTF16BE;\n            break;\n        case UTF32:\n            ret.type = UTF32BE;\n            break;\n        case UINT16:\n            ret.type = UINT16BE;\n            break;\n        case UINT32:\n            ret.type = UINT32BE;\n            break;\n        default:\n            throw new TypeError(`dst type unrecognized: \"${type}\" : must have form [crlf:|lf:]type[:base64]`);\n    }\n    return ret;\n};\n// Select and call the requested encoding function.\nconst encode = function encode(type, chars) {\n    switch(type){\n        case UTF8:\n            return trans.utf8.encode(chars);\n        case UTF16BE:\n            return trans.utf16be.encode(chars);\n        case UTF16LE:\n            return trans.utf16le.encode(chars);\n        case UTF32BE:\n            return trans.utf32be.encode(chars);\n        case UTF32LE:\n            return trans.utf32le.encode(chars);\n        case UINT7:\n            return trans.uint7.encode(chars);\n        case UINT8:\n            return trans.uint8.encode(chars);\n        case UINT16BE:\n            return trans.uint16be.encode(chars);\n        case UINT16LE:\n            return trans.uint16le.encode(chars);\n        case UINT32BE:\n            return trans.uint32be.encode(chars);\n        case UINT32LE:\n            return trans.uint32le.encode(chars);\n        case STRING:\n            return trans.string.encode(chars);\n        case ESCAPED:\n            return trans.escaped.encode(chars);\n        default:\n            throw new TypeError(`encode type \"${type}\" not recognized`);\n    }\n};\n// Select and call the requested decoding function.\n// `src` contains BOM information as well as the source type and data.\nconst decode = function decode(src) {\n    switch(src.type){\n        case UTF8:\n            return trans.utf8.decode(src.data, src.bom);\n        case UTF16LE:\n            return trans.utf16le.decode(src.data, src.bom);\n        case UTF16BE:\n            return trans.utf16be.decode(src.data, src.bom);\n        case UTF32BE:\n            return trans.utf32be.decode(src.data, src.bom);\n        case UTF32LE:\n            return trans.utf32le.decode(src.data, src.bom);\n        case UINT7:\n            return trans.uint7.decode(src.data);\n        case UINT8:\n            return trans.uint8.decode(src.data);\n        case UINT16BE:\n            return trans.uint16be.decode(src.data);\n        case UINT16LE:\n            return trans.uint16le.decode(src.data);\n        case UINT32BE:\n            return trans.uint32be.decode(src.data);\n        case UINT32LE:\n            return trans.uint32le.decode(src.data);\n        case STRING:\n            return trans.string.decode(src.data);\n        case ESCAPED:\n            return trans.escaped.decode(src.data);\n        default:\n            throw new TypeError(`decode type \"${src.type}\" not recognized`);\n    }\n};\n// The public decoding function. Returns an array of integers.\nexports.decode = function exportsDecode(type, data) {\n    const src = validateSrc(type, data);\n    return decode(src);\n};\n// The public encoding function. Returns a Buffer-typed byte array.\nexports.encode = function exportsEncode(type, chars) {\n    let c;\n    let buf;\n    const dst = validateDst(type, chars);\n    if (dst.crlf) {\n        /* prefix with CRLF line end conversion, don't contaminate caller's chars array */ c = trans.lineEnds.crlf(chars);\n        buf = encode(dst.type, c);\n    } else if (dst.lf) {\n        /* prefix with LF line end conversion, don't contaminate caller's chars array */ c = trans.lineEnds.lf(chars);\n        buf = encode(dst.type, c);\n    } else {\n        buf = encode(dst.type, chars);\n    }\n    if (dst.base64) {\n        /* post base 64 encoding */ buf = trans.base64.encode(buf);\n    }\n    return buf;\n};\n// Converts data of type `srcType` to data of type `dstType`.\n// `srcData` may be a JavaScript String, or node.js Buffer, depending on the corresponding type.\nconst convert = function convert(srcType, srcData, dstType) {\n    return exports.encode(dstType, exports.decode(srcType, srcData));\n};\nexports.convert = convert;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-conv-api/converter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-conv-api/transformers.js":
/*!**************************************************************!*\
  !*** ./node_modules/apg-js/src/apg-conv-api/transformers.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* eslint-disable prefer-destructuring */ /* eslint-disable no-plusplus */ /* eslint-disable no-bitwise */ /*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module contains the actual encoding and decoding algorithms.\n// Throws \"RangeError\" exceptions on characters or bytes out of range for the given encoding.\n\"use strict;\";\nconst { Buffer } = __webpack_require__(/*! buffer */ \"buffer\");\n/* decoding error codes */ const NON_SHORTEST = 0xfffffffc;\nconst TRAILING = 0xfffffffd;\nconst RANGE = 0xfffffffe;\nconst ILL_FORMED = 0xffffffff;\n/* mask[n] = 2**n - 1, ie. mask[n] = n bits on. e.g. mask[6] = %b111111 */ const mask = [\n    0,\n    1,\n    3,\n    7,\n    15,\n    31,\n    63,\n    127,\n    255,\n    511,\n    1023\n];\n/* ascii[n] = 'HH', where 0xHH = n, eg. ascii[254] = 'FE' */ const ascii = [\n    \"00\",\n    \"01\",\n    \"02\",\n    \"03\",\n    \"04\",\n    \"05\",\n    \"06\",\n    \"07\",\n    \"08\",\n    \"09\",\n    \"0A\",\n    \"0B\",\n    \"0C\",\n    \"0D\",\n    \"0E\",\n    \"0F\",\n    \"10\",\n    \"11\",\n    \"12\",\n    \"13\",\n    \"14\",\n    \"15\",\n    \"16\",\n    \"17\",\n    \"18\",\n    \"19\",\n    \"1A\",\n    \"1B\",\n    \"1C\",\n    \"1D\",\n    \"1E\",\n    \"1F\",\n    \"20\",\n    \"21\",\n    \"22\",\n    \"23\",\n    \"24\",\n    \"25\",\n    \"26\",\n    \"27\",\n    \"28\",\n    \"29\",\n    \"2A\",\n    \"2B\",\n    \"2C\",\n    \"2D\",\n    \"2E\",\n    \"2F\",\n    \"30\",\n    \"31\",\n    \"32\",\n    \"33\",\n    \"34\",\n    \"35\",\n    \"36\",\n    \"37\",\n    \"38\",\n    \"39\",\n    \"3A\",\n    \"3B\",\n    \"3C\",\n    \"3D\",\n    \"3E\",\n    \"3F\",\n    \"40\",\n    \"41\",\n    \"42\",\n    \"43\",\n    \"44\",\n    \"45\",\n    \"46\",\n    \"47\",\n    \"48\",\n    \"49\",\n    \"4A\",\n    \"4B\",\n    \"4C\",\n    \"4D\",\n    \"4E\",\n    \"4F\",\n    \"50\",\n    \"51\",\n    \"52\",\n    \"53\",\n    \"54\",\n    \"55\",\n    \"56\",\n    \"57\",\n    \"58\",\n    \"59\",\n    \"5A\",\n    \"5B\",\n    \"5C\",\n    \"5D\",\n    \"5E\",\n    \"5F\",\n    \"60\",\n    \"61\",\n    \"62\",\n    \"63\",\n    \"64\",\n    \"65\",\n    \"66\",\n    \"67\",\n    \"68\",\n    \"69\",\n    \"6A\",\n    \"6B\",\n    \"6C\",\n    \"6D\",\n    \"6E\",\n    \"6F\",\n    \"70\",\n    \"71\",\n    \"72\",\n    \"73\",\n    \"74\",\n    \"75\",\n    \"76\",\n    \"77\",\n    \"78\",\n    \"79\",\n    \"7A\",\n    \"7B\",\n    \"7C\",\n    \"7D\",\n    \"7E\",\n    \"7F\",\n    \"80\",\n    \"81\",\n    \"82\",\n    \"83\",\n    \"84\",\n    \"85\",\n    \"86\",\n    \"87\",\n    \"88\",\n    \"89\",\n    \"8A\",\n    \"8B\",\n    \"8C\",\n    \"8D\",\n    \"8E\",\n    \"8F\",\n    \"90\",\n    \"91\",\n    \"92\",\n    \"93\",\n    \"94\",\n    \"95\",\n    \"96\",\n    \"97\",\n    \"98\",\n    \"99\",\n    \"9A\",\n    \"9B\",\n    \"9C\",\n    \"9D\",\n    \"9E\",\n    \"9F\",\n    \"A0\",\n    \"A1\",\n    \"A2\",\n    \"A3\",\n    \"A4\",\n    \"A5\",\n    \"A6\",\n    \"A7\",\n    \"A8\",\n    \"A9\",\n    \"AA\",\n    \"AB\",\n    \"AC\",\n    \"AD\",\n    \"AE\",\n    \"AF\",\n    \"B0\",\n    \"B1\",\n    \"B2\",\n    \"B3\",\n    \"B4\",\n    \"B5\",\n    \"B6\",\n    \"B7\",\n    \"B8\",\n    \"B9\",\n    \"BA\",\n    \"BB\",\n    \"BC\",\n    \"BD\",\n    \"BE\",\n    \"BF\",\n    \"C0\",\n    \"C1\",\n    \"C2\",\n    \"C3\",\n    \"C4\",\n    \"C5\",\n    \"C6\",\n    \"C7\",\n    \"C8\",\n    \"C9\",\n    \"CA\",\n    \"CB\",\n    \"CC\",\n    \"CD\",\n    \"CE\",\n    \"CF\",\n    \"D0\",\n    \"D1\",\n    \"D2\",\n    \"D3\",\n    \"D4\",\n    \"D5\",\n    \"D6\",\n    \"D7\",\n    \"D8\",\n    \"D9\",\n    \"DA\",\n    \"DB\",\n    \"DC\",\n    \"DD\",\n    \"DE\",\n    \"DF\",\n    \"E0\",\n    \"E1\",\n    \"E2\",\n    \"E3\",\n    \"E4\",\n    \"E5\",\n    \"E6\",\n    \"E7\",\n    \"E8\",\n    \"E9\",\n    \"EA\",\n    \"EB\",\n    \"EC\",\n    \"ED\",\n    \"EE\",\n    \"EF\",\n    \"F0\",\n    \"F1\",\n    \"F2\",\n    \"F3\",\n    \"F4\",\n    \"F5\",\n    \"F6\",\n    \"F7\",\n    \"F8\",\n    \"F9\",\n    \"FA\",\n    \"FB\",\n    \"FC\",\n    \"FD\",\n    \"FE\",\n    \"FF\"\n];\n/* vector of base 64 characters */ const base64chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".split(\"\");\n/* vector of base 64 character codes */ const base64codes = [];\nbase64chars.forEach((char)=>{\n    base64codes.push(char.charCodeAt(0));\n});\n// The UTF8 algorithms.\nexports.utf8 = {\n    encode (chars) {\n        const bytes = [];\n        chars.forEach((char)=>{\n            if (char >= 0 && char <= 0x7f) {\n                bytes.push(char);\n            } else if (char <= 0x7ff) {\n                bytes.push(0xc0 + (char >> 6 & mask[5]));\n                bytes.push(0x80 + (char & mask[6]));\n            } else if (char < 0xd800 || char > 0xdfff && char <= 0xffff) {\n                bytes.push(0xe0 + (char >> 12 & mask[4]));\n                bytes.push(0x80 + (char >> 6 & mask[6]));\n                bytes.push(0x80 + (char & mask[6]));\n            } else if (char >= 0x10000 && char <= 0x10ffff) {\n                const u = char >> 16 & mask[5];\n                bytes.push(0xf0 + (u >> 2));\n                bytes.push(0x80 + ((u & mask[2]) << 4) + (char >> 12 & mask[4]));\n                bytes.push(0x80 + (char >> 6 & mask[6]));\n                bytes.push(0x80 + (char & mask[6]));\n            } else {\n                throw new RangeError(`utf8.encode: character out of range: char: ${char}`);\n            }\n        });\n        return Buffer.from(bytes);\n    },\n    decode (buf, bom) {\n        /* bytes functions return error for non-shortest forms & values out of range */ function bytes2(b1, b2) {\n            /* U+0080..U+07FF */ /* 00000000 00000yyy yyxxxxxx | 110yyyyy 10xxxxxx */ if ((b2 & 0xc0) !== 0x80) {\n                return TRAILING;\n            }\n            const x = ((b1 & mask[5]) << 6) + (b2 & mask[6]);\n            if (x < 0x80) {\n                return NON_SHORTEST;\n            }\n            return x;\n        }\n        function bytes3(b1, b2, b3) {\n            /* U+0800..U+FFFF */ /* 00000000 zzzzyyyy yyxxxxxx | 1110zzzz 10yyyyyy 10xxxxxx */ if ((b3 & 0xc0) !== 0x80 || (b2 & 0xc0) !== 0x80) {\n                return TRAILING;\n            }\n            const x = ((b1 & mask[4]) << 12) + ((b2 & mask[6]) << 6) + (b3 & mask[6]);\n            if (x < 0x800) {\n                return NON_SHORTEST;\n            }\n            if (x >= 0xd800 && x <= 0xdfff) {\n                return RANGE;\n            }\n            return x;\n        }\n        function bytes4(b1, b2, b3, b4) {\n            /* U+10000..U+10FFFF */ /* 000uuuuu zzzzyyyy yyxxxxxx | 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx */ if ((b4 & 0xc0) !== 0x80 || (b3 & 0xc0) !== 0x80 || (b2 & 0xc0) !== 0x80) {\n                return TRAILING;\n            }\n            const x = (((b1 & mask[3]) << 2) + (b2 >> 4 & mask[2]) << 16) + ((b2 & mask[4]) << 12) + ((b3 & mask[6]) << 6) + (b4 & mask[6]);\n            if (x < 0x10000) {\n                return NON_SHORTEST;\n            }\n            if (x > 0x10ffff) {\n                return RANGE;\n            }\n            return x;\n        }\n        let c;\n        let b1;\n        let i1;\n        let i2;\n        let i3;\n        let inc;\n        const len = buf.length;\n        let i = bom ? 3 : 0;\n        const chars = [];\n        while(i < len){\n            b1 = buf[i];\n            c = ILL_FORMED;\n            const TRUE = true;\n            while(TRUE){\n                if (b1 >= 0 && b1 <= 0x7f) {\n                    /* U+0000..U+007F 00..7F */ c = b1;\n                    inc = 1;\n                    break;\n                }\n                i1 = i + 1;\n                if (i1 < len && b1 >= 0xc2 && b1 <= 0xdf) {\n                    /* U+0080..U+07FF C2..DF 80..BF */ c = bytes2(b1, buf[i1]);\n                    inc = 2;\n                    break;\n                }\n                i2 = i + 2;\n                if (i2 < len && b1 >= 0xe0 && b1 <= 0xef) {\n                    /* U+0800..U+FFFF */ c = bytes3(b1, buf[i1], buf[i2]);\n                    inc = 3;\n                    break;\n                }\n                i3 = i + 3;\n                if (i3 < len && b1 >= 0xf0 && b1 <= 0xf4) {\n                    /* U+10000..U+10FFFF */ c = bytes4(b1, buf[i1], buf[i2], buf[i3]);\n                    inc = 4;\n                    break;\n                }\n                break;\n            }\n            if (c > 0x10ffff) {\n                const at = `byte[${i}]`;\n                if (c === ILL_FORMED) {\n                    throw new RangeError(`utf8.decode: ill-formed UTF8 byte sequence found at: ${at}`);\n                }\n                if (c === TRAILING) {\n                    throw new RangeError(`utf8.decode: illegal trailing byte found at: ${at}`);\n                }\n                if (c === RANGE) {\n                    throw new RangeError(`utf8.decode: code point out of range found at: ${at}`);\n                }\n                if (c === NON_SHORTEST) {\n                    throw new RangeError(`utf8.decode: non-shortest form found at: ${at}`);\n                }\n                throw new RangeError(`utf8.decode: unrecognized error found at: ${at}`);\n            }\n            chars.push(c);\n            i += inc;\n        }\n        return chars;\n    }\n};\n// The UTF16BE algorithms.\nexports.utf16be = {\n    encode (chars) {\n        const bytes = [];\n        let char;\n        let h;\n        let l;\n        for(let i = 0; i < chars.length; i += 1){\n            char = chars[i];\n            if (char >= 0 && char <= 0xd7ff || char >= 0xe000 && char <= 0xffff) {\n                bytes.push(char >> 8 & mask[8]);\n                bytes.push(char & mask[8]);\n            } else if (char >= 0x10000 && char <= 0x10ffff) {\n                l = char - 0x10000;\n                h = 0xd800 + (l >> 10);\n                l = 0xdc00 + (l & mask[10]);\n                bytes.push(h >> 8 & mask[8]);\n                bytes.push(h & mask[8]);\n                bytes.push(l >> 8 & mask[8]);\n                bytes.push(l & mask[8]);\n            } else {\n                throw new RangeError(`utf16be.encode: UTF16BE value out of range: char[${i}]: ${char}`);\n            }\n        }\n        return Buffer.from(bytes);\n    },\n    decode (buf, bom) {\n        /* assumes caller has insured that buf is a Buffer of bytes */ if (buf.length % 2 > 0) {\n            throw new RangeError(`utf16be.decode: data length must be even multiple of 2: length: ${buf.length}`);\n        }\n        const chars = [];\n        const len = buf.length;\n        let i = bom ? 2 : 0;\n        let j = 0;\n        let c;\n        let inc;\n        let i1;\n        let i3;\n        let high;\n        let low;\n        while(i < len){\n            const TRUE = true;\n            while(TRUE){\n                i1 = i + 1;\n                if (i1 < len) {\n                    high = (buf[i] << 8) + buf[i1];\n                    if (high < 0xd800 || high > 0xdfff) {\n                        c = high;\n                        inc = 2;\n                        break;\n                    }\n                    i3 = i + 3;\n                    if (i3 < len) {\n                        low = (buf[i + 2] << 8) + buf[i3];\n                        if (high <= 0xdbff && low >= 0xdc00 && low <= 0xdfff) {\n                            c = 0x10000 + (high - 0xd800 << 10) + (low - 0xdc00);\n                            inc = 4;\n                            break;\n                        }\n                    }\n                }\n                /* if we fall through to here, it is an ill-formed sequence */ throw new RangeError(`utf16be.decode: ill-formed UTF16BE byte sequence found: byte[${i}]`);\n            }\n            chars[j++] = c;\n            i += inc;\n        }\n        return chars;\n    }\n};\n// The UTF16LE algorithms.\nexports.utf16le = {\n    encode (chars) {\n        const bytes = [];\n        let char;\n        let h;\n        let l;\n        for(let i = 0; i < chars.length; i += 1){\n            char = chars[i];\n            if (char >= 0 && char <= 0xd7ff || char >= 0xe000 && char <= 0xffff) {\n                bytes.push(char & mask[8]);\n                bytes.push(char >> 8 & mask[8]);\n            } else if (char >= 0x10000 && char <= 0x10ffff) {\n                l = char - 0x10000;\n                h = 0xd800 + (l >> 10);\n                l = 0xdc00 + (l & mask[10]);\n                bytes.push(h & mask[8]);\n                bytes.push(h >> 8 & mask[8]);\n                bytes.push(l & mask[8]);\n                bytes.push(l >> 8 & mask[8]);\n            } else {\n                throw new RangeError(`utf16le.encode: UTF16LE value out of range: char[${i}]: ${char}`);\n            }\n        }\n        return Buffer.from(bytes);\n    },\n    decode (buf, bom) {\n        /* assumes caller has insured that buf is a Buffer of bytes */ if (buf.length % 2 > 0) {\n            throw new RangeError(`utf16le.decode: data length must be even multiple of 2: length: ${buf.length}`);\n        }\n        const chars = [];\n        const len = buf.length;\n        let i = bom ? 2 : 0;\n        let j = 0;\n        let c;\n        let inc;\n        let i1;\n        let i3;\n        let high;\n        let low;\n        while(i < len){\n            const TRUE = true;\n            while(TRUE){\n                i1 = i + 1;\n                if (i1 < len) {\n                    high = (buf[i1] << 8) + buf[i];\n                    if (high < 0xd800 || high > 0xdfff) {\n                        c = high;\n                        inc = 2;\n                        break;\n                    }\n                    i3 = i + 3;\n                    if (i3 < len) {\n                        low = (buf[i3] << 8) + buf[i + 2];\n                        if (high <= 0xdbff && low >= 0xdc00 && low <= 0xdfff) {\n                            c = 0x10000 + (high - 0xd800 << 10) + (low - 0xdc00);\n                            inc = 4;\n                            break;\n                        }\n                    }\n                }\n                /* if we fall through to here, it is an ill-formed sequence */ throw new RangeError(`utf16le.decode: ill-formed UTF16LE byte sequence found: byte[${i}]`);\n            }\n            chars[j++] = c;\n            i += inc;\n        }\n        return chars;\n    }\n};\n// The UTF32BE algorithms.\nexports.utf32be = {\n    encode (chars) {\n        const buf = Buffer.alloc(chars.length * 4);\n        let i = 0;\n        chars.forEach((char)=>{\n            if (char >= 0xd800 && char <= 0xdfff || char > 0x10ffff) {\n                throw new RangeError(`utf32be.encode: UTF32BE character code out of range: char[${i / 4}]: ${char}`);\n            }\n            buf[i++] = char >> 24 & mask[8];\n            buf[i++] = char >> 16 & mask[8];\n            buf[i++] = char >> 8 & mask[8];\n            buf[i++] = char & mask[8];\n        });\n        return buf;\n    },\n    decode (buf, bom) {\n        /* caller to insure buf is a Buffer of bytes */ if (buf.length % 4 > 0) {\n            throw new RangeError(`utf32be.decode: UTF32BE byte length must be even multiple of 4: length: ${buf.length}`);\n        }\n        const chars = [];\n        let i = bom ? 4 : 0;\n        for(; i < buf.length; i += 4){\n            const char = (buf[i] << 24) + (buf[i + 1] << 16) + (buf[i + 2] << 8) + buf[i + 3];\n            if (char >= 0xd800 && char <= 0xdfff || char > 0x10ffff) {\n                throw new RangeError(`utf32be.decode: UTF32BE character code out of range: char[${i / 4}]: ${char}`);\n            }\n            chars.push(char);\n        }\n        return chars;\n    }\n};\n// The UTF32LE algorithms.\nexports.utf32le = {\n    encode (chars) {\n        const buf = Buffer.alloc(chars.length * 4);\n        let i = 0;\n        chars.forEach((char)=>{\n            if (char >= 0xd800 && char <= 0xdfff || char > 0x10ffff) {\n                throw new RangeError(`utf32le.encode: UTF32LE character code out of range: char[${i / 4}]: ${char}`);\n            }\n            buf[i++] = char & mask[8];\n            buf[i++] = char >> 8 & mask[8];\n            buf[i++] = char >> 16 & mask[8];\n            buf[i++] = char >> 24 & mask[8];\n        });\n        return buf;\n    },\n    decode (buf, bom) {\n        /* caller to insure buf is a Buffer of bytes */ if (buf.length % 4 > 0) {\n            throw new RangeError(`utf32be.decode: UTF32LE byte length must be even multiple of 4: length: ${buf.length}`);\n        }\n        const chars = [];\n        let i = bom ? 4 : 0;\n        for(; i < buf.length; i += 4){\n            const char = (buf[i + 3] << 24) + (buf[i + 2] << 16) + (buf[i + 1] << 8) + buf[i];\n            if (char >= 0xd800 && char <= 0xdfff || char > 0x10ffff) {\n                throw new RangeError(`utf32le.encode: UTF32LE character code out of range: char[${i / 4}]: ${char}`);\n            }\n            chars.push(char);\n        }\n        return chars;\n    }\n};\n// The UINT7 algorithms. ASCII or 7-bit unsigned integers.\nexports.uint7 = {\n    encode (chars) {\n        const buf = Buffer.alloc(chars.length);\n        for(let i = 0; i < chars.length; i += 1){\n            if (chars[i] > 0x7f) {\n                throw new RangeError(`uint7.encode: UINT7 character code out of range: char[${i}]: ${chars[i]}`);\n            }\n            buf[i] = chars[i];\n        }\n        return buf;\n    },\n    decode (buf) {\n        const chars = [];\n        for(let i = 0; i < buf.length; i += 1){\n            if (buf[i] > 0x7f) {\n                throw new RangeError(`uint7.decode: UINT7 character code out of range: byte[${i}]: ${buf[i]}`);\n            }\n            chars[i] = buf[i];\n        }\n        return chars;\n    }\n};\n// The UINT8 algorithms. BINARY, Latin 1 or 8-bit unsigned integers.\nexports.uint8 = {\n    encode (chars) {\n        const buf = Buffer.alloc(chars.length);\n        for(let i = 0; i < chars.length; i += 1){\n            if (chars[i] > 0xff) {\n                throw new RangeError(`uint8.encode: UINT8 character code out of range: char[${i}]: ${chars[i]}`);\n            }\n            buf[i] = chars[i];\n        }\n        return buf;\n    },\n    decode (buf) {\n        const chars = [];\n        for(let i = 0; i < buf.length; i += 1){\n            chars[i] = buf[i];\n        }\n        return chars;\n    }\n};\n// The UINT16BE algorithms. Big-endian 16-bit unsigned integers.\nexports.uint16be = {\n    encode (chars) {\n        const buf = Buffer.alloc(chars.length * 2);\n        let i = 0;\n        chars.forEach((char)=>{\n            if (char > 0xffff) {\n                throw new RangeError(`uint16be.encode: UINT16BE character code out of range: char[${i / 2}]: ${char}`);\n            }\n            buf[i++] = char >> 8 & mask[8];\n            buf[i++] = char & mask[8];\n        });\n        return buf;\n    },\n    decode (buf) {\n        if (buf.length % 2 > 0) {\n            throw new RangeError(`uint16be.decode: UINT16BE byte length must be even multiple of 2: length: ${buf.length}`);\n        }\n        const chars = [];\n        for(let i = 0; i < buf.length; i += 2){\n            chars.push((buf[i] << 8) + buf[i + 1]);\n        }\n        return chars;\n    }\n};\n// The UINT16LE algorithms. Little-endian 16-bit unsigned integers.\nexports.uint16le = {\n    encode (chars) {\n        const buf = Buffer.alloc(chars.length * 2);\n        let i = 0;\n        chars.forEach((char)=>{\n            if (char > 0xffff) {\n                throw new RangeError(`uint16le.encode: UINT16LE character code out of range: char[${i / 2}]: ${char}`);\n            }\n            buf[i++] = char & mask[8];\n            buf[i++] = char >> 8 & mask[8];\n        });\n        return buf;\n    },\n    decode (buf) {\n        if (buf.length % 2 > 0) {\n            throw new RangeError(`uint16le.decode: UINT16LE byte length must be even multiple of 2: length: ${buf.length}`);\n        }\n        const chars = [];\n        for(let i = 0; i < buf.length; i += 2){\n            chars.push((buf[i + 1] << 8) + buf[i]);\n        }\n        return chars;\n    }\n};\n// The UINT32BE algorithms. Big-endian 32-bit unsigned integers.\nexports.uint32be = {\n    encode (chars) {\n        const buf = Buffer.alloc(chars.length * 4);\n        let i = 0;\n        chars.forEach((char)=>{\n            buf[i++] = char >> 24 & mask[8];\n            buf[i++] = char >> 16 & mask[8];\n            buf[i++] = char >> 8 & mask[8];\n            buf[i++] = char & mask[8];\n        });\n        return buf;\n    },\n    decode (buf) {\n        if (buf.length % 4 > 0) {\n            throw new RangeError(`uint32be.decode: UINT32BE byte length must be even multiple of 4: length: ${buf.length}`);\n        }\n        const chars = [];\n        for(let i = 0; i < buf.length; i += 4){\n            chars.push((buf[i] << 24) + (buf[i + 1] << 16) + (buf[i + 2] << 8) + buf[i + 3]);\n        }\n        return chars;\n    }\n};\n// The UINT32LE algorithms. Little-endian 32-bit unsigned integers.\nexports.uint32le = {\n    encode (chars) {\n        const buf = Buffer.alloc(chars.length * 4);\n        let i = 0;\n        chars.forEach((char)=>{\n            buf[i++] = char & mask[8];\n            buf[i++] = char >> 8 & mask[8];\n            buf[i++] = char >> 16 & mask[8];\n            buf[i++] = char >> 24 & mask[8];\n        });\n        return buf;\n    },\n    decode (buf) {\n        /* caller to insure buf is a Buffer of bytes */ if (buf.length % 4 > 0) {\n            throw new RangeError(`uint32le.decode: UINT32LE byte length must be even multiple of 4: length: ${buf.length}`);\n        }\n        const chars = [];\n        for(let i = 0; i < buf.length; i += 4){\n            chars.push((buf[i + 3] << 24) + (buf[i + 2] << 16) + (buf[i + 1] << 8) + buf[i]);\n        }\n        return chars;\n    }\n};\n// The STRING algorithms. Converts JavaScript strings to Array of 32-bit integers and vice versa.\n// Uses the node.js Buffer's native \"utf16le\" capabilites.\nexports.string = {\n    encode (chars) {\n        return exports.utf16le.encode(chars).toString(\"utf16le\");\n    },\n    decode (str) {\n        return exports.utf16le.decode(Buffer.from(str, \"utf16le\"), 0);\n    }\n};\n// The ESCAPED algorithms.\n// Note that ESCAPED format contains only ASCII characters.\n// The characters are always in the form of a Buffer of bytes.\nexports.escaped = {\n    // Encodes an Array of 32-bit integers into ESCAPED format.\n    encode (chars) {\n        const bytes = [];\n        for(let i = 0; i < chars.length; i += 1){\n            const char = chars[i];\n            if (char === 96) {\n                bytes.push(char);\n                bytes.push(char);\n            } else if (char === 10) {\n                bytes.push(char);\n            } else if (char >= 32 && char <= 126) {\n                bytes.push(char);\n            } else {\n                let str = \"\";\n                if (char >= 0 && char <= 31) {\n                    str += `\\`x${ascii[char]}`;\n                } else if (char >= 127 && char <= 255) {\n                    str += `\\`x${ascii[char]}`;\n                } else if (char >= 0x100 && char <= 0xffff) {\n                    str += `\\`u${ascii[char >> 8 & mask[8]]}${ascii[char & mask[8]]}`;\n                } else if (char >= 0x10000 && char <= 0xffffffff) {\n                    str += \"`u{\";\n                    const digit = char >> 24 & mask[8];\n                    if (digit > 0) {\n                        str += ascii[digit];\n                    }\n                    str += `${ascii[char >> 16 & mask[8]] + ascii[char >> 8 & mask[8]] + ascii[char & mask[8]]}}`;\n                } else {\n                    throw new Error(\"escape.encode(char): char > 0xffffffff not allowed\");\n                }\n                const buf = Buffer.from(str);\n                buf.forEach((b)=>{\n                    bytes.push(b);\n                });\n            }\n        }\n        return Buffer.from(bytes);\n    },\n    // Decodes ESCAPED format from a Buffer of bytes to an Array of 32-bit integers.\n    decode (buf) {\n        function isHex(hex) {\n            if (hex >= 48 && hex <= 57 || hex >= 65 && hex <= 70 || hex >= 97 && hex <= 102) {\n                return true;\n            }\n            return false;\n        }\n        function getx(i, len, bufArg) {\n            const ret = {\n                char: null,\n                nexti: i + 2,\n                error: true\n            };\n            if (i + 1 < len) {\n                if (isHex(bufArg[i]) && isHex(bufArg[i + 1])) {\n                    const str = String.fromCodePoint(bufArg[i], bufArg[i + 1]);\n                    ret.char = parseInt(str, 16);\n                    if (!Number.isNaN(ret.char)) {\n                        ret.error = false;\n                    }\n                }\n            }\n            return ret;\n        }\n        function getu(i, len, bufArg) {\n            const ret = {\n                char: null,\n                nexti: i + 4,\n                error: true\n            };\n            if (i + 3 < len) {\n                if (isHex(bufArg[i]) && isHex(bufArg[i + 1]) && isHex(bufArg[i + 2]) && isHex(bufArg[i + 3])) {\n                    const str = String.fromCodePoint(bufArg[i], bufArg[i + 1], bufArg[i + 2], bufArg[i + 3]);\n                    ret.char = parseInt(str, 16);\n                    if (!Number.isNaN(ret.char)) {\n                        ret.error = false;\n                    }\n                }\n            }\n            return ret;\n        }\n        function getU(i, len, bufArg) {\n            const ret = {\n                char: null,\n                nexti: i + 4,\n                error: true\n            };\n            let str = \"\";\n            while(i < len && isHex(bufArg[i])){\n                str += String.fromCodePoint(bufArg[i]);\n                // eslint-disable-next-line no-param-reassign\n                i += 1;\n            }\n            ret.char = parseInt(str, 16);\n            if (bufArg[i] === 125 && !Number.isNaN(ret.char)) {\n                ret.error = false;\n            }\n            ret.nexti = i + 1;\n            return ret;\n        }\n        const chars = [];\n        const len = buf.length;\n        let i1;\n        let ret;\n        let error;\n        let i = 0;\n        while(i < len){\n            const TRUE = true;\n            while(TRUE){\n                error = true;\n                if (buf[i] !== 96) {\n                    /* unescaped character */ chars.push(buf[i]);\n                    i += 1;\n                    error = false;\n                    break;\n                }\n                i1 = i + 1;\n                if (i1 >= len) {\n                    break;\n                }\n                if (buf[i1] === 96) {\n                    /* escaped grave accent */ chars.push(96);\n                    i += 2;\n                    error = false;\n                    break;\n                }\n                if (buf[i1] === 120) {\n                    ret = getx(i1 + 1, len, buf);\n                    if (ret.error) {\n                        break;\n                    }\n                    /* escaped hex */ chars.push(ret.char);\n                    i = ret.nexti;\n                    error = false;\n                    break;\n                }\n                if (buf[i1] === 117) {\n                    if (buf[i1 + 1] === 123) {\n                        ret = getU(i1 + 2, len, buf);\n                        if (ret.error) {\n                            break;\n                        }\n                        /* escaped utf-32 */ chars.push(ret.char);\n                        i = ret.nexti;\n                        error = false;\n                        break;\n                    }\n                    ret = getu(i1 + 1, len, buf);\n                    if (ret.error) {\n                        break;\n                    }\n                    /* escaped utf-16 */ chars.push(ret.char);\n                    i = ret.nexti;\n                    error = false;\n                    break;\n                }\n                break;\n            }\n            if (error) {\n                throw new Error(`escaped.decode: ill-formed escape sequence at buf[${i}]`);\n            }\n        }\n        return chars;\n    }\n};\n// The line end conversion algorigthms.\nconst CR = 13;\nconst LF = 10;\nexports.lineEnds = {\n    crlf (chars) {\n        const lfchars = [];\n        let i = 0;\n        while(i < chars.length){\n            switch(chars[i]){\n                case CR:\n                    if (i + 1 < chars.length && chars[i + 1] === LF) {\n                        i += 2;\n                    } else {\n                        i += 1;\n                    }\n                    lfchars.push(CR);\n                    lfchars.push(LF);\n                    break;\n                case LF:\n                    lfchars.push(CR);\n                    lfchars.push(LF);\n                    i += 1;\n                    break;\n                default:\n                    lfchars.push(chars[i]);\n                    i += 1;\n                    break;\n            }\n        }\n        if (lfchars.length > 0 && lfchars[lfchars.length - 1] !== LF) {\n            lfchars.push(CR);\n            lfchars.push(LF);\n        }\n        return lfchars;\n    },\n    lf (chars) {\n        const lfchars = [];\n        let i = 0;\n        while(i < chars.length){\n            switch(chars[i]){\n                case CR:\n                    if (i + 1 < chars.length && chars[i + 1] === LF) {\n                        i += 2;\n                    } else {\n                        i += 1;\n                    }\n                    lfchars.push(LF);\n                    break;\n                case LF:\n                    lfchars.push(LF);\n                    i += 1;\n                    break;\n                default:\n                    lfchars.push(chars[i]);\n                    i += 1;\n                    break;\n            }\n        }\n        if (lfchars.length > 0 && lfchars[lfchars.length - 1] !== LF) {\n            lfchars.push(LF);\n        }\n        return lfchars;\n    }\n};\n// The base 64 algorithms.\nexports.base64 = {\n    encode (buf) {\n        if (buf.length === 0) {\n            return Buffer.alloc(0);\n        }\n        let i;\n        let j;\n        let n;\n        let tail = buf.length % 3;\n        tail = tail > 0 ? 3 - tail : 0;\n        let units = (buf.length + tail) / 3;\n        const base64 = Buffer.alloc(units * 4);\n        if (tail > 0) {\n            units -= 1;\n        }\n        i = 0;\n        j = 0;\n        for(let u = 0; u < units; u += 1){\n            n = buf[i++] << 16;\n            n += buf[i++] << 8;\n            n += buf[i++];\n            base64[j++] = base64codes[n >> 18 & mask[6]];\n            base64[j++] = base64codes[n >> 12 & mask[6]];\n            base64[j++] = base64codes[n >> 6 & mask[6]];\n            base64[j++] = base64codes[n & mask[6]];\n        }\n        if (tail === 0) {\n            return base64;\n        }\n        if (tail === 1) {\n            n = buf[i++] << 16;\n            n += buf[i] << 8;\n            base64[j++] = base64codes[n >> 18 & mask[6]];\n            base64[j++] = base64codes[n >> 12 & mask[6]];\n            base64[j++] = base64codes[n >> 6 & mask[6]];\n            base64[j] = base64codes[64];\n            return base64;\n        }\n        if (tail === 2) {\n            n = buf[i] << 16;\n            base64[j++] = base64codes[n >> 18 & mask[6]];\n            base64[j++] = base64codes[n >> 12 & mask[6]];\n            base64[j++] = base64codes[64];\n            base64[j] = base64codes[64];\n            return base64;\n        }\n        return undefined;\n    },\n    decode (codes) {\n        /* remove white space and ctrl characters, validate & translate characters */ function validate(buf) {\n            const chars = [];\n            let tail = 0;\n            for(let i = 0; i < buf.length; i += 1){\n                const char = buf[i];\n                const TRUE = true;\n                while(TRUE){\n                    if (char === 32 || char === 9 || char === 10 || char === 13) {\n                        break;\n                    }\n                    if (char >= 65 && char <= 90) {\n                        chars.push(char - 65);\n                        break;\n                    }\n                    if (char >= 97 && char <= 122) {\n                        chars.push(char - 71);\n                        break;\n                    }\n                    if (char >= 48 && char <= 57) {\n                        chars.push(char + 4);\n                        break;\n                    }\n                    if (char === 43) {\n                        chars.push(62);\n                        break;\n                    }\n                    if (char === 47) {\n                        chars.push(63);\n                        break;\n                    }\n                    if (char === 61) {\n                        chars.push(64);\n                        tail += 1;\n                        break;\n                    }\n                    /* invalid character */ throw new RangeError(`base64.decode: invalid character buf[${i}]: ${char}`);\n                }\n            }\n            /* validate length */ if (chars.length % 4 > 0) {\n                throw new RangeError(`base64.decode: string length not integral multiple of 4: ${chars.length}`);\n            }\n            /* validate tail */ switch(tail){\n                case 0:\n                    break;\n                case 1:\n                    if (chars[chars.length - 1] !== 64) {\n                        throw new RangeError(\"base64.decode: one tail character found: not last character\");\n                    }\n                    break;\n                case 2:\n                    if (chars[chars.length - 1] !== 64 || chars[chars.length - 2] !== 64) {\n                        throw new RangeError(\"base64.decode: two tail characters found: not last characters\");\n                    }\n                    break;\n                default:\n                    throw new RangeError(`base64.decode: more than two tail characters found: ${tail}`);\n            }\n            return {\n                tail,\n                buf: Buffer.from(chars)\n            };\n        }\n        if (codes.length === 0) {\n            return Buffer.alloc(0);\n        }\n        const val = validate(codes);\n        const { tail } = val;\n        const base64 = val.buf;\n        let i;\n        let j;\n        let n;\n        let units = base64.length / 4;\n        const buf = Buffer.alloc(units * 3 - tail);\n        if (tail > 0) {\n            units -= 1;\n        }\n        j = 0;\n        i = 0;\n        for(let u = 0; u < units; u += 1){\n            n = base64[i++] << 18;\n            n += base64[i++] << 12;\n            n += base64[i++] << 6;\n            n += base64[i++];\n            buf[j++] = n >> 16 & mask[8];\n            buf[j++] = n >> 8 & mask[8];\n            buf[j++] = n & mask[8];\n        }\n        if (tail === 1) {\n            n = base64[i++] << 18;\n            n += base64[i++] << 12;\n            n += base64[i] << 6;\n            buf[j++] = n >> 16 & mask[8];\n            buf[j] = n >> 8 & mask[8];\n        }\n        if (tail === 2) {\n            n = base64[i++] << 18;\n            n += base64[i++] << 12;\n            buf[j] = n >> 16 & mask[8];\n        }\n        return buf;\n    },\n    // Converts a base 64 Buffer of bytes to a JavaScript string with line breaks.\n    toString (buf) {\n        if (buf.length % 4 > 0) {\n            throw new RangeError(`base64.toString: input buffer length not multiple of 4: ${buf.length}`);\n        }\n        let str = \"\";\n        let lineLen = 0;\n        function buildLine(c1, c2, c3, c4) {\n            switch(lineLen){\n                case 76:\n                    str += `\\r\\n${c1}${c2}${c3}${c4}`;\n                    lineLen = 4;\n                    break;\n                case 75:\n                    str += `${c1}\\r\\n${c2}${c3}${c4}`;\n                    lineLen = 3;\n                    break;\n                case 74:\n                    str += `${c1 + c2}\\r\\n${c3}${c4}`;\n                    lineLen = 2;\n                    break;\n                case 73:\n                    str += `${c1 + c2 + c3}\\r\\n${c4}`;\n                    lineLen = 1;\n                    break;\n                default:\n                    str += c1 + c2 + c3 + c4;\n                    lineLen += 4;\n                    break;\n            }\n        }\n        function validate(c) {\n            if (c >= 65 && c <= 90) {\n                return true;\n            }\n            if (c >= 97 && c <= 122) {\n                return true;\n            }\n            if (c >= 48 && c <= 57) {\n                return true;\n            }\n            if (c === 43) {\n                return true;\n            }\n            if (c === 47) {\n                return true;\n            }\n            if (c === 61) {\n                return true;\n            }\n            return false;\n        }\n        for(let i = 0; i < buf.length; i += 4){\n            for(let j = i; j < i + 4; j += 1){\n                if (!validate(buf[j])) {\n                    throw new RangeError(`base64.toString: buf[${j}]: ${buf[j]} : not valid base64 character code`);\n                }\n            }\n            buildLine(String.fromCharCode(buf[i]), String.fromCharCode(buf[i + 1]), String.fromCharCode(buf[i + 2]), String.fromCharCode(buf[i + 3]));\n        }\n        return str;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-conv-api/transformers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-lib/ast.js":
/*!************************************************!*\
  !*** ./node_modules/apg-js/src/apg-lib/ast.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* eslint-disable guard-for-in */ /* eslint-disable no-restricted-syntax */ /*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module is used by the parser to build an [Abstract Syntax Tree](https://en.wikipedia.org/wiki/Abstract_syntax_tree) (AST).\n// The AST can be thought of as a subset of the full parse tree.\n// Each node of the AST holds the phrase that was matched at the corresponding, named parse tree node.\n// It is built as the parser successfully matches phrases to the rule names\n// (`RNM` operators) and `UDT`s as it parses an input string.\n// The user controls which `RNM` or `UDT` names to keep on the AST.\n// The user can also associate callback functions with some or all of the retained\n// AST nodes to be used to translate the node phrases. That is, associate semantic\n// actions to the matched phrases.\n// Translating the AST rather that attempting to apply semantic actions during\n// the parsing process, has the advantage that there is no backtracking and that the phrases\n// are known while traversing down tree as will as up.\n//\n// Let `ast` be an `ast.js` object. To identify a node to be kept on the AST:\n// ```\n// ast.callbacks[\"rulename\"] = true; (all nodes default to false)\n// ```\n// To associate a callback function with a node:\n// ```\n// ast.callbacks[\"rulename\"] = fn\n// ```\n// `rulename` is any `RNM` or `UDT` name defined by the associated grammar\n// and `fn` is a user-written callback function.\n// (See [`apg-examples`](https://github.com/ldthomas/apg-js2-examples/tree/master/ast) for examples of how to create an AST,\n// define the nodes and callback functions and attach it to a parser.)\n\nmodule.exports = function exportsAst() {\n    const id = __webpack_require__(/*! ./identifiers */ \"(rsc)/./node_modules/apg-js/src/apg-lib/identifiers.js\");\n    const utils = __webpack_require__(/*! ./utilities */ \"(rsc)/./node_modules/apg-js/src/apg-lib/utilities.js\");\n    const thisFileName = \"ast.js: \";\n    const that = this;\n    let rules = null;\n    let udts = null;\n    let chars = null;\n    let nodeCount = 0;\n    const nodesDefined = [];\n    const nodeCallbacks = [];\n    const stack = [];\n    const records = [];\n    this.callbacks = [];\n    this.astObject = \"astObject\";\n    /* called by the parser to initialize the AST with the rules, UDTs and the input characters */ this.init = function init(rulesIn, udtsIn, charsIn) {\n        stack.length = 0;\n        records.length = 0;\n        nodesDefined.length = 0;\n        nodeCount = 0;\n        rules = rulesIn;\n        udts = udtsIn;\n        chars = charsIn;\n        let i;\n        const list = [];\n        for(i = 0; i < rules.length; i += 1){\n            list.push(rules[i].lower);\n        }\n        for(i = 0; i < udts.length; i += 1){\n            list.push(udts[i].lower);\n        }\n        nodeCount = rules.length + udts.length;\n        for(i = 0; i < nodeCount; i += 1){\n            nodesDefined[i] = false;\n            nodeCallbacks[i] = null;\n        }\n        for(const index in that.callbacks){\n            const lower = index.toLowerCase();\n            i = list.indexOf(lower);\n            if (i < 0) {\n                throw new Error(`${thisFileName}init: node '${index}' not a rule or udt name`);\n            }\n            if (typeof that.callbacks[index] === \"function\") {\n                nodesDefined[i] = true;\n                nodeCallbacks[i] = that.callbacks[index];\n            }\n            if (that.callbacks[index] === true) {\n                nodesDefined[i] = true;\n            }\n        }\n    };\n    /* AST node definitions - called by the parser's `RNM` operator */ this.ruleDefined = function ruleDefined(index) {\n        return nodesDefined[index] !== false;\n    };\n    /* AST node definitions - called by the parser's `UDT` operator */ this.udtDefined = function udtDefined(index) {\n        return nodesDefined[rules.length + index] !== false;\n    };\n    /* called by the parser's `RNM` & `UDT` operators */ /* builds a record for the downward traversal of the node */ this.down = function down(callbackIndex, name) {\n        const thisIndex = records.length;\n        stack.push(thisIndex);\n        records.push({\n            name,\n            thisIndex,\n            thatIndex: null,\n            state: id.SEM_PRE,\n            callbackIndex,\n            phraseIndex: null,\n            phraseLength: null,\n            stack: stack.length\n        });\n        return thisIndex;\n    };\n    /* called by the parser's `RNM` & `UDT` operators */ /* builds a record for the upward traversal of the node */ this.up = function up(callbackIndex, name, phraseIndex, phraseLength) {\n        const thisIndex = records.length;\n        const thatIndex = stack.pop();\n        records.push({\n            name,\n            thisIndex,\n            thatIndex,\n            state: id.SEM_POST,\n            callbackIndex,\n            phraseIndex,\n            phraseLength,\n            stack: stack.length\n        });\n        records[thatIndex].thatIndex = thisIndex;\n        records[thatIndex].phraseIndex = phraseIndex;\n        records[thatIndex].phraseLength = phraseLength;\n        return thisIndex;\n    };\n    // Called by the user to translate the AST.\n    // Translate means to associate or apply some semantic action to the\n    // phrases that were syntactically matched to the AST nodes according\n    // to the defining grammar.\n    // ```\n    // data - optional user-defined data\n    //        passed to the callback functions by the translator\n    // ```\n    this.translate = function translate(data) {\n        let ret;\n        let callback;\n        let record;\n        for(let i = 0; i < records.length; i += 1){\n            record = records[i];\n            callback = nodeCallbacks[record.callbackIndex];\n            if (record.state === id.SEM_PRE) {\n                if (callback !== null) {\n                    ret = callback(id.SEM_PRE, chars, record.phraseIndex, record.phraseLength, data);\n                    if (ret === id.SEM_SKIP) {\n                        i = record.thatIndex;\n                    }\n                }\n            } else if (callback !== null) {\n                callback(id.SEM_POST, chars, record.phraseIndex, record.phraseLength, data);\n            }\n        }\n    };\n    /* called by the parser to reset the length of the records array */ /* necessary on backtracking */ this.setLength = function setLength(length) {\n        records.length = length;\n        if (length > 0) {\n            stack.length = records[length - 1].stack;\n        } else {\n            stack.length = 0;\n        }\n    };\n    /* called by the parser to get the length of the records array */ this.getLength = function getLength() {\n        return records.length;\n    };\n    /* helper for XML display */ function indent(n) {\n        let ret = \"\";\n        for(let i = 0; i < n; i += 1){\n            ret += \" \";\n        }\n        return ret;\n    }\n    // Generate an `XML` version of the AST.\n    // Useful if you want to use a special or favorite XML parser to translate the\n    // AST.\n    // ```\n    // mode - the display mode of the captured phrases\n    //      - default mode is \"ascii\"\n    //      - can be: \"ascii\"\n    //                \"decimal\"\n    //                \"hexadecimal\"\n    //                \"unicode\"\n    // ```\n    this.toXml = function toSml(modeArg) {\n        let display = utils.charsToDec;\n        let caption = \"decimal integer character codes\";\n        if (typeof modeArg === \"string\" && modeArg.length >= 3) {\n            const mode = modeArg.slice(0, 3).toLowerCase();\n            if (mode === \"asc\") {\n                display = utils.charsToAscii;\n                caption = \"ASCII for printing characters, hex for non-printing\";\n            } else if (mode === \"hex\") {\n                display = utils.charsToHex;\n                caption = \"hexadecimal integer character codes\";\n            } else if (mode === \"uni\") {\n                display = utils.charsToUnicode;\n                caption = \"Unicode UTF-32 integer character codes\";\n            }\n        }\n        let xml = \"\";\n        let depth = 0;\n        xml += '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n';\n        xml += `<root nodes=\"${records.length / 2}\" characters=\"${chars.length}\">\\n`;\n        xml += `<!-- input string, ${caption} -->\\n`;\n        xml += indent(depth + 2);\n        xml += display(chars);\n        xml += \"\\n\";\n        records.forEach((rec)=>{\n            if (rec.state === id.SEM_PRE) {\n                depth += 1;\n                xml += indent(depth);\n                xml += `<node name=\"${rec.name}\" index=\"${rec.phraseIndex}\" length=\"${rec.phraseLength}\">\\n`;\n                xml += indent(depth + 2);\n                xml += display(chars, rec.phraseIndex, rec.phraseLength);\n                xml += \"\\n\";\n            } else {\n                xml += indent(depth);\n                xml += `</node><!-- name=\"${rec.name}\" -->\\n`;\n                depth -= 1;\n            }\n        });\n        xml += \"</root>\\n\";\n        return xml;\n    };\n    /* generate a JavaScript object version of the AST */ /* for the phrase-matching engine apg-exp */ this.phrases = function phrases() {\n        const obj = {};\n        let i;\n        let record;\n        for(i = 0; i < records.length; i += 1){\n            record = records[i];\n            if (record.state === id.SEM_PRE) {\n                if (!Array.isArray(obj[record.name])) {\n                    obj[record.name] = [];\n                }\n                obj[record.name].push({\n                    index: record.phraseIndex,\n                    length: record.phraseLength\n                });\n            }\n        }\n        return obj;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-lib/ast.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-lib/circular-buffer.js":
/*!************************************************************!*\
  !*** ./node_modules/apg-js/src/apg-lib/circular-buffer.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module acts as a \"circular buffer\". It is used to keep track\n// only the last N records in an array of records. If more than N records\n// are saved, each additional record overwrites the previously oldest record.\n// This module deals only with the record indexes and does not save\n// any actual records. It is used by [`trace.js`](./trace.html) for limiting the number of\n// trace records saved.\n\nmodule.exports = function exportsCircularBuffer() {\n    \"use strict;\";\n    const thisFileName = \"circular-buffer.js: \";\n    let itemIndex = -1;\n    let maxListSize = 0;\n    // Initialize buffer.<br>\n    // *size* is `maxListSize`, the maximum number of records saved before overwriting begins.\n    this.init = function init(size) {\n        if (typeof size !== \"number\" || size <= 0) {\n            throw new Error(`${thisFileName}init: circular buffer size must an integer > 0`);\n        }\n        maxListSize = Math.ceil(size);\n        itemIndex = -1;\n    };\n    // Call this to increment the number of records collected.<br>\n    // Returns the array index number to store the next record in.\n    this.increment = function increment() {\n        itemIndex += 1;\n        return (itemIndex + maxListSize) % maxListSize;\n    };\n    // Returns `maxListSize` - the maximum number of records to keep in the buffer.\n    this.maxSize = function maxSize() {\n        return maxListSize;\n    };\n    // Returns the highest number of items saved.<br>\n    // (The number of items is the actual number of records processed\n    // even though only `maxListSize` records are actually retained.)\n    this.items = function items() {\n        return itemIndex + 1;\n    };\n    // Returns the record number associated with this item index.\n    this.getListIndex = function getListIndex(item) {\n        if (itemIndex === -1) {\n            return -1;\n        }\n        if (item < 0 || item > itemIndex) {\n            return -1;\n        }\n        if (itemIndex - item >= maxListSize) {\n            return -1;\n        }\n        return (item + maxListSize) % maxListSize;\n    };\n    // The iterator over the circular buffer.\n    // The user's function, `fn`, will be called with arguments `fn(listIndex, itemIndex)`\n    // where `listIndex` is the saved record index and `itemIndex` is the actual item index.\n    this.forEach = function forEach(fn) {\n        if (itemIndex === -1) {\n            /* no records have been collected */ return;\n        }\n        if (itemIndex < maxListSize) {\n            /* fewer than maxListSize records have been collected - number of items = number of records */ for(let i = 0; i <= itemIndex; i += 1){\n                fn(i, i);\n            }\n            return;\n        }\n        /* start with the oldest record saved and finish with the most recent record saved */ for(let i = itemIndex - maxListSize + 1; i <= itemIndex; i += 1){\n            const listIndex = (i + maxListSize) % maxListSize;\n            fn(listIndex, i);\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctbGliL2NpcmN1bGFyLWJ1ZmZlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7O3VGQUd1RixHQUN2RixvRUFBb0U7QUFDcEUseUVBQXlFO0FBQ3pFLDZFQUE2RTtBQUM3RSxtRUFBbUU7QUFDbkUsMEZBQTBGO0FBQzFGLHVCQUF1Qjs7QUFDdkJBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQztJQUN4QjtJQUVBLE1BQU1DLGVBQWU7SUFDckIsSUFBSUMsWUFBWSxDQUFDO0lBQ2pCLElBQUlDLGNBQWM7SUFDbEIseUJBQXlCO0lBQ3pCLDBGQUEwRjtJQUMxRixJQUFJLENBQUNDLElBQUksR0FBRyxTQUFTQSxLQUFLQyxJQUFJO1FBQzVCLElBQUksT0FBT0EsU0FBUyxZQUFZQSxRQUFRLEdBQUc7WUFDekMsTUFBTSxJQUFJQyxNQUFNLENBQUMsRUFBRUwsYUFBYSw4Q0FBOEMsQ0FBQztRQUNqRjtRQUNBRSxjQUFjSSxLQUFLQyxJQUFJLENBQUNIO1FBQ3hCSCxZQUFZLENBQUM7SUFDZjtJQUNBLDhEQUE4RDtJQUM5RCw4REFBOEQ7SUFDOUQsSUFBSSxDQUFDTyxTQUFTLEdBQUcsU0FBU0E7UUFDeEJQLGFBQWE7UUFDYixPQUFPLENBQUNBLFlBQVlDLFdBQVUsSUFBS0E7SUFDckM7SUFDQSwrRUFBK0U7SUFDL0UsSUFBSSxDQUFDTyxPQUFPLEdBQUcsU0FBU0E7UUFDdEIsT0FBT1A7SUFDVDtJQUNBLGlEQUFpRDtJQUNqRCxpRUFBaUU7SUFDakUsaUVBQWlFO0lBQ2pFLElBQUksQ0FBQ1EsS0FBSyxHQUFHLFNBQVNBO1FBQ3BCLE9BQU9ULFlBQVk7SUFDckI7SUFDQSw2REFBNkQ7SUFDN0QsSUFBSSxDQUFDVSxZQUFZLEdBQUcsU0FBU0EsYUFBYUMsSUFBSTtRQUM1QyxJQUFJWCxjQUFjLENBQUMsR0FBRztZQUNwQixPQUFPLENBQUM7UUFDVjtRQUNBLElBQUlXLE9BQU8sS0FBS0EsT0FBT1gsV0FBVztZQUNoQyxPQUFPLENBQUM7UUFDVjtRQUNBLElBQUlBLFlBQVlXLFFBQVFWLGFBQWE7WUFDbkMsT0FBTyxDQUFDO1FBQ1Y7UUFDQSxPQUFPLENBQUNVLE9BQU9WLFdBQVUsSUFBS0E7SUFDaEM7SUFDQSx5Q0FBeUM7SUFDekMsc0ZBQXNGO0lBQ3RGLHdGQUF3RjtJQUN4RixJQUFJLENBQUNXLE9BQU8sR0FBRyxTQUFTQSxRQUFRQyxFQUFFO1FBQ2hDLElBQUliLGNBQWMsQ0FBQyxHQUFHO1lBQ3BCLGtDQUFrQyxHQUNsQztRQUNGO1FBQ0EsSUFBSUEsWUFBWUMsYUFBYTtZQUMzQiw0RkFBNEYsR0FDNUYsSUFBSyxJQUFJYSxJQUFJLEdBQUdBLEtBQUtkLFdBQVdjLEtBQUssRUFBRztnQkFDdENELEdBQUdDLEdBQUdBO1lBQ1I7WUFDQTtRQUNGO1FBQ0EsbUZBQW1GLEdBQ25GLElBQUssSUFBSUEsSUFBSWQsWUFBWUMsY0FBYyxHQUFHYSxLQUFLZCxXQUFXYyxLQUFLLEVBQUc7WUFDaEUsTUFBTUMsWUFBWSxDQUFDRCxJQUFJYixXQUFVLElBQUtBO1lBQ3RDWSxHQUFHRSxXQUFXRDtRQUNoQjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctbGliL2NpcmN1bGFyLWJ1ZmZlci5qcz8xYmM3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgIGNvcHlyaWdodDogQ29weXJpZ2h0IChjKSAyMDIxIExvd2VsbCBELiBUaG9tYXMsIGFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqICAgICBsaWNlbnNlOiBCU0QtMi1DbGF1c2UgKGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTItQ2xhdXNlKVxuICogICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbi8vIFRoaXMgbW9kdWxlIGFjdHMgYXMgYSBcImNpcmN1bGFyIGJ1ZmZlclwiLiBJdCBpcyB1c2VkIHRvIGtlZXAgdHJhY2tcbi8vIG9ubHkgdGhlIGxhc3QgTiByZWNvcmRzIGluIGFuIGFycmF5IG9mIHJlY29yZHMuIElmIG1vcmUgdGhhbiBOIHJlY29yZHNcbi8vIGFyZSBzYXZlZCwgZWFjaCBhZGRpdGlvbmFsIHJlY29yZCBvdmVyd3JpdGVzIHRoZSBwcmV2aW91c2x5IG9sZGVzdCByZWNvcmQuXG4vLyBUaGlzIG1vZHVsZSBkZWFscyBvbmx5IHdpdGggdGhlIHJlY29yZCBpbmRleGVzIGFuZCBkb2VzIG5vdCBzYXZlXG4vLyBhbnkgYWN0dWFsIHJlY29yZHMuIEl0IGlzIHVzZWQgYnkgW2B0cmFjZS5qc2BdKC4vdHJhY2UuaHRtbCkgZm9yIGxpbWl0aW5nIHRoZSBudW1iZXIgb2Zcbi8vIHRyYWNlIHJlY29yZHMgc2F2ZWQuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGV4cG9ydHNDaXJjdWxhckJ1ZmZlcigpIHtcbiAgJ3VzZSBzdHJpY3Q7JztcblxuICBjb25zdCB0aGlzRmlsZU5hbWUgPSAnY2lyY3VsYXItYnVmZmVyLmpzOiAnO1xuICBsZXQgaXRlbUluZGV4ID0gLTE7XG4gIGxldCBtYXhMaXN0U2l6ZSA9IDA7XG4gIC8vIEluaXRpYWxpemUgYnVmZmVyLjxicj5cbiAgLy8gKnNpemUqIGlzIGBtYXhMaXN0U2l6ZWAsIHRoZSBtYXhpbXVtIG51bWJlciBvZiByZWNvcmRzIHNhdmVkIGJlZm9yZSBvdmVyd3JpdGluZyBiZWdpbnMuXG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uIGluaXQoc2l6ZSkge1xuICAgIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicgfHwgc2l6ZSA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGhpc0ZpbGVOYW1lfWluaXQ6IGNpcmN1bGFyIGJ1ZmZlciBzaXplIG11c3QgYW4gaW50ZWdlciA+IDBgKTtcbiAgICB9XG4gICAgbWF4TGlzdFNpemUgPSBNYXRoLmNlaWwoc2l6ZSk7XG4gICAgaXRlbUluZGV4ID0gLTE7XG4gIH07XG4gIC8vIENhbGwgdGhpcyB0byBpbmNyZW1lbnQgdGhlIG51bWJlciBvZiByZWNvcmRzIGNvbGxlY3RlZC48YnI+XG4gIC8vIFJldHVybnMgdGhlIGFycmF5IGluZGV4IG51bWJlciB0byBzdG9yZSB0aGUgbmV4dCByZWNvcmQgaW4uXG4gIHRoaXMuaW5jcmVtZW50ID0gZnVuY3Rpb24gaW5jcmVtZW50KCkge1xuICAgIGl0ZW1JbmRleCArPSAxO1xuICAgIHJldHVybiAoaXRlbUluZGV4ICsgbWF4TGlzdFNpemUpICUgbWF4TGlzdFNpemU7XG4gIH07XG4gIC8vIFJldHVybnMgYG1heExpc3RTaXplYCAtIHRoZSBtYXhpbXVtIG51bWJlciBvZiByZWNvcmRzIHRvIGtlZXAgaW4gdGhlIGJ1ZmZlci5cbiAgdGhpcy5tYXhTaXplID0gZnVuY3Rpb24gbWF4U2l6ZSgpIHtcbiAgICByZXR1cm4gbWF4TGlzdFNpemU7XG4gIH07XG4gIC8vIFJldHVybnMgdGhlIGhpZ2hlc3QgbnVtYmVyIG9mIGl0ZW1zIHNhdmVkLjxicj5cbiAgLy8gKFRoZSBudW1iZXIgb2YgaXRlbXMgaXMgdGhlIGFjdHVhbCBudW1iZXIgb2YgcmVjb3JkcyBwcm9jZXNzZWRcbiAgLy8gZXZlbiB0aG91Z2ggb25seSBgbWF4TGlzdFNpemVgIHJlY29yZHMgYXJlIGFjdHVhbGx5IHJldGFpbmVkLilcbiAgdGhpcy5pdGVtcyA9IGZ1bmN0aW9uIGl0ZW1zKCkge1xuICAgIHJldHVybiBpdGVtSW5kZXggKyAxO1xuICB9O1xuICAvLyBSZXR1cm5zIHRoZSByZWNvcmQgbnVtYmVyIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGl0ZW0gaW5kZXguXG4gIHRoaXMuZ2V0TGlzdEluZGV4ID0gZnVuY3Rpb24gZ2V0TGlzdEluZGV4KGl0ZW0pIHtcbiAgICBpZiAoaXRlbUluZGV4ID09PSAtMSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBpZiAoaXRlbSA8IDAgfHwgaXRlbSA+IGl0ZW1JbmRleCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBpZiAoaXRlbUluZGV4IC0gaXRlbSA+PSBtYXhMaXN0U2l6ZSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICByZXR1cm4gKGl0ZW0gKyBtYXhMaXN0U2l6ZSkgJSBtYXhMaXN0U2l6ZTtcbiAgfTtcbiAgLy8gVGhlIGl0ZXJhdG9yIG92ZXIgdGhlIGNpcmN1bGFyIGJ1ZmZlci5cbiAgLy8gVGhlIHVzZXIncyBmdW5jdGlvbiwgYGZuYCwgd2lsbCBiZSBjYWxsZWQgd2l0aCBhcmd1bWVudHMgYGZuKGxpc3RJbmRleCwgaXRlbUluZGV4KWBcbiAgLy8gd2hlcmUgYGxpc3RJbmRleGAgaXMgdGhlIHNhdmVkIHJlY29yZCBpbmRleCBhbmQgYGl0ZW1JbmRleGAgaXMgdGhlIGFjdHVhbCBpdGVtIGluZGV4LlxuICB0aGlzLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gICAgaWYgKGl0ZW1JbmRleCA9PT0gLTEpIHtcbiAgICAgIC8qIG5vIHJlY29yZHMgaGF2ZSBiZWVuIGNvbGxlY3RlZCAqL1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXRlbUluZGV4IDwgbWF4TGlzdFNpemUpIHtcbiAgICAgIC8qIGZld2VyIHRoYW4gbWF4TGlzdFNpemUgcmVjb3JkcyBoYXZlIGJlZW4gY29sbGVjdGVkIC0gbnVtYmVyIG9mIGl0ZW1zID0gbnVtYmVyIG9mIHJlY29yZHMgKi9cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IGl0ZW1JbmRleDsgaSArPSAxKSB7XG4gICAgICAgIGZuKGksIGkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvKiBzdGFydCB3aXRoIHRoZSBvbGRlc3QgcmVjb3JkIHNhdmVkIGFuZCBmaW5pc2ggd2l0aCB0aGUgbW9zdCByZWNlbnQgcmVjb3JkIHNhdmVkICovXG4gICAgZm9yIChsZXQgaSA9IGl0ZW1JbmRleCAtIG1heExpc3RTaXplICsgMTsgaSA8PSBpdGVtSW5kZXg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgbGlzdEluZGV4ID0gKGkgKyBtYXhMaXN0U2l6ZSkgJSBtYXhMaXN0U2l6ZTtcbiAgICAgIGZuKGxpc3RJbmRleCwgaSk7XG4gICAgfVxuICB9O1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZXhwb3J0c0NpcmN1bGFyQnVmZmVyIiwidGhpc0ZpbGVOYW1lIiwiaXRlbUluZGV4IiwibWF4TGlzdFNpemUiLCJpbml0Iiwic2l6ZSIsIkVycm9yIiwiTWF0aCIsImNlaWwiLCJpbmNyZW1lbnQiLCJtYXhTaXplIiwiaXRlbXMiLCJnZXRMaXN0SW5kZXgiLCJpdGVtIiwiZm9yRWFjaCIsImZuIiwiaSIsImxpc3RJbmRleCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-lib/circular-buffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-lib/emitcss.js":
/*!****************************************************!*\
  !*** ./node_modules/apg-js/src/apg-lib/emitcss.js ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
eval("// This module has been developed programmatically in the `apg-lib` build process.\n// It is used to build web pages programatically on the fly without the need for <script> or <style> tags.\n\nmodule.exports = function emittcss() {\n    return \"/* This file automatically generated by jsonToless() and LESS. */\\n.apg-mono {\\n  font-family: monospace;\\n}\\n.apg-active {\\n  font-weight: bold;\\n  color: #000000;\\n}\\n.apg-match {\\n  font-weight: bold;\\n  color: #264BFF;\\n}\\n.apg-empty {\\n  font-weight: bold;\\n  color: #0fbd0f;\\n}\\n.apg-nomatch {\\n  font-weight: bold;\\n  color: #FF4000;\\n}\\n.apg-lh-match {\\n  font-weight: bold;\\n  color: #1A97BA;\\n}\\n.apg-lb-match {\\n  font-weight: bold;\\n  color: #5F1687;\\n}\\n.apg-remainder {\\n  font-weight: bold;\\n  color: #999999;\\n}\\n.apg-ctrl-char {\\n  font-weight: bolder;\\n  font-style: italic;\\n  font-size: 0.6em;\\n}\\n.apg-line-end {\\n  font-weight: bold;\\n  color: #000000;\\n}\\n.apg-error {\\n  font-weight: bold;\\n  color: #FF4000;\\n}\\n.apg-phrase {\\n  color: #000000;\\n  background-color: #8caae6;\\n}\\n.apg-empty-phrase {\\n  color: #0fbd0f;\\n}\\ntable.apg-state {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: left;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-state th,\\ntable.apg-state td {\\n  text-align: left;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-state th:nth-last-child(2),\\ntable.apg-state td:nth-last-child(2) {\\n  text-align: right;\\n}\\ntable.apg-state caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-stats {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-stats th,\\ntable.apg-stats td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-stats caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-trace {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-trace caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-trace th,\\ntable.apg-trace td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-trace th:last-child,\\ntable.apg-trace th:nth-last-child(2),\\ntable.apg-trace td:last-child,\\ntable.apg-trace td:nth-last-child(2) {\\n  text-align: left;\\n}\\ntable.apg-grammar {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-grammar caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-grammar th,\\ntable.apg-grammar td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-grammar th:last-child,\\ntable.apg-grammar td:last-child {\\n  text-align: left;\\n}\\ntable.apg-rules {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-rules caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-rules th,\\ntable.apg-rules td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-rules a {\\n  color: #003399 !important;\\n}\\ntable.apg-rules a:hover {\\n  color: #8caae6 !important;\\n}\\ntable.apg-attrs {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: center;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-attrs caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-attrs th,\\ntable.apg-attrs td {\\n  text-align: center;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-attrs th:nth-child(1),\\ntable.apg-attrs th:nth-child(2),\\ntable.apg-attrs th:nth-child(3) {\\n  text-align: right;\\n}\\ntable.apg-attrs td:nth-child(1),\\ntable.apg-attrs td:nth-child(2),\\ntable.apg-attrs td:nth-child(3) {\\n  text-align: right;\\n}\\ntable.apg-attrs a {\\n  color: #003399 !important;\\n}\\ntable.apg-attrs a:hover {\\n  color: #8caae6 !important;\\n}\\n\";\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctbGliL2VtaXRjc3MuanMiLCJtYXBwaW5ncyI6IkFBQUEsa0ZBQWtGO0FBQ2xGLDBHQUEwRzs7QUFFMUdBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQztJQUMxQixPQUFPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctbGliL2VtaXRjc3MuanM/ZjI2OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIG1vZHVsZSBoYXMgYmVlbiBkZXZlbG9wZWQgcHJvZ3JhbW1hdGljYWxseSBpbiB0aGUgYGFwZy1saWJgIGJ1aWxkIHByb2Nlc3MuXG4vLyBJdCBpcyB1c2VkIHRvIGJ1aWxkIHdlYiBwYWdlcyBwcm9ncmFtYXRpY2FsbHkgb24gdGhlIGZseSB3aXRob3V0IHRoZSBuZWVkIGZvciA8c2NyaXB0PiBvciA8c3R5bGU+IHRhZ3MuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW1pdHRjc3MoKXtcbnJldHVybiAnLyogVGhpcyBmaWxlIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IGpzb25Ub2xlc3MoKSBhbmQgTEVTUy4gKi9cXG4uYXBnLW1vbm8ge1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcXG59XFxuLmFwZy1hY3RpdmUge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBjb2xvcjogIzAwMDAwMDtcXG59XFxuLmFwZy1tYXRjaCB7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGNvbG9yOiAjMjY0QkZGO1xcbn1cXG4uYXBnLWVtcHR5IHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgY29sb3I6ICMwZmJkMGY7XFxufVxcbi5hcGctbm9tYXRjaCB7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGNvbG9yOiAjRkY0MDAwO1xcbn1cXG4uYXBnLWxoLW1hdGNoIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgY29sb3I6ICMxQTk3QkE7XFxufVxcbi5hcGctbGItbWF0Y2gge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBjb2xvcjogIzVGMTY4NztcXG59XFxuLmFwZy1yZW1haW5kZXIge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBjb2xvcjogIzk5OTk5OTtcXG59XFxuLmFwZy1jdHJsLWNoYXIge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG4gIGZvbnQtc2l6ZTogMC42ZW07XFxufVxcbi5hcGctbGluZS1lbmQge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBjb2xvcjogIzAwMDAwMDtcXG59XFxuLmFwZy1lcnJvciB7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGNvbG9yOiAjRkY0MDAwO1xcbn1cXG4uYXBnLXBocmFzZSB7XFxuICBjb2xvcjogIzAwMDAwMDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM4Y2FhZTY7XFxufVxcbi5hcGctZW1wdHktcGhyYXNlIHtcXG4gIGNvbG9yOiAjMGZiZDBmO1xcbn1cXG50YWJsZS5hcGctc3RhdGUge1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcXG4gIG1hcmdpbi10b3A6IDVweDtcXG4gIGZvbnQtc2l6ZTogMTFweDtcXG4gIGxpbmUtaGVpZ2h0OiAxMzAlO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG59XFxudGFibGUuYXBnLXN0YXRlIHRoLFxcbnRhYmxlLmFwZy1zdGF0ZSB0ZCB7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcbn1cXG50YWJsZS5hcGctc3RhdGUgdGg6bnRoLWxhc3QtY2hpbGQoMiksXFxudGFibGUuYXBnLXN0YXRlIHRkOm50aC1sYXN0LWNoaWxkKDIpIHtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbn1cXG50YWJsZS5hcGctc3RhdGUgY2FwdGlvbiB7XFxuICBmb250LXNpemU6IDEyNSU7XFxuICBsaW5lLWhlaWdodDogMTMwJTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxudGFibGUuYXBnLXN0YXRzIHtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XFxuICBtYXJnaW4tdG9wOiA1cHg7XFxuICBmb250LXNpemU6IDExcHg7XFxuICBsaW5lLWhlaWdodDogMTMwJTtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcbn1cXG50YWJsZS5hcGctc3RhdHMgdGgsXFxudGFibGUuYXBnLXN0YXRzIHRkIHtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcbn1cXG50YWJsZS5hcGctc3RhdHMgY2FwdGlvbiB7XFxuICBmb250LXNpemU6IDEyNSU7XFxuICBsaW5lLWhlaWdodDogMTMwJTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxudGFibGUuYXBnLXRyYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XFxuICBtYXJnaW4tdG9wOiA1cHg7XFxuICBmb250LXNpemU6IDExcHg7XFxuICBsaW5lLWhlaWdodDogMTMwJTtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcbn1cXG50YWJsZS5hcGctdHJhY2UgY2FwdGlvbiB7XFxuICBmb250LXNpemU6IDEyNSU7XFxuICBsaW5lLWhlaWdodDogMTMwJTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxudGFibGUuYXBnLXRyYWNlIHRoLFxcbnRhYmxlLmFwZy10cmFjZSB0ZCB7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG59XFxudGFibGUuYXBnLXRyYWNlIHRoOmxhc3QtY2hpbGQsXFxudGFibGUuYXBnLXRyYWNlIHRoOm50aC1sYXN0LWNoaWxkKDIpLFxcbnRhYmxlLmFwZy10cmFjZSB0ZDpsYXN0LWNoaWxkLFxcbnRhYmxlLmFwZy10cmFjZSB0ZDpudGgtbGFzdC1jaGlsZCgyKSB7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbn1cXG50YWJsZS5hcGctZ3JhbW1hciB7XFxuICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xcbiAgbWFyZ2luLXRvcDogNXB4O1xcbiAgZm9udC1zaXplOiAxMXB4O1xcbiAgbGluZS1oZWlnaHQ6IDEzMCU7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG59XFxudGFibGUuYXBnLWdyYW1tYXIgY2FwdGlvbiB7XFxuICBmb250LXNpemU6IDEyNSU7XFxuICBsaW5lLWhlaWdodDogMTMwJTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxudGFibGUuYXBnLWdyYW1tYXIgdGgsXFxudGFibGUuYXBnLWdyYW1tYXIgdGQge1xcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxufVxcbnRhYmxlLmFwZy1ncmFtbWFyIHRoOmxhc3QtY2hpbGQsXFxudGFibGUuYXBnLWdyYW1tYXIgdGQ6bGFzdC1jaGlsZCB7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbn1cXG50YWJsZS5hcGctcnVsZXMge1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcXG4gIG1hcmdpbi10b3A6IDVweDtcXG4gIGZvbnQtc2l6ZTogMTFweDtcXG4gIGxpbmUtaGVpZ2h0OiAxMzAlO1xcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxufVxcbnRhYmxlLmFwZy1ydWxlcyBjYXB0aW9uIHtcXG4gIGZvbnQtc2l6ZTogMTI1JTtcXG4gIGxpbmUtaGVpZ2h0OiAxMzAlO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbn1cXG50YWJsZS5hcGctcnVsZXMgdGgsXFxudGFibGUuYXBnLXJ1bGVzIHRkIHtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcbn1cXG50YWJsZS5hcGctcnVsZXMgYSB7XFxuICBjb2xvcjogIzAwMzM5OSAhaW1wb3J0YW50O1xcbn1cXG50YWJsZS5hcGctcnVsZXMgYTpob3ZlciB7XFxuICBjb2xvcjogIzhjYWFlNiAhaW1wb3J0YW50O1xcbn1cXG50YWJsZS5hcGctYXR0cnMge1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcXG4gIG1hcmdpbi10b3A6IDVweDtcXG4gIGZvbnQtc2l6ZTogMTFweDtcXG4gIGxpbmUtaGVpZ2h0OiAxMzAlO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcbn1cXG50YWJsZS5hcGctYXR0cnMgY2FwdGlvbiB7XFxuICBmb250LXNpemU6IDEyNSU7XFxuICBsaW5lLWhlaWdodDogMTMwJTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxudGFibGUuYXBnLWF0dHJzIHRoLFxcbnRhYmxlLmFwZy1hdHRycyB0ZCB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxufVxcbnRhYmxlLmFwZy1hdHRycyB0aDpudGgtY2hpbGQoMSksXFxudGFibGUuYXBnLWF0dHJzIHRoOm50aC1jaGlsZCgyKSxcXG50YWJsZS5hcGctYXR0cnMgdGg6bnRoLWNoaWxkKDMpIHtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbn1cXG50YWJsZS5hcGctYXR0cnMgdGQ6bnRoLWNoaWxkKDEpLFxcbnRhYmxlLmFwZy1hdHRycyB0ZDpudGgtY2hpbGQoMiksXFxudGFibGUuYXBnLWF0dHJzIHRkOm50aC1jaGlsZCgzKSB7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG59XFxudGFibGUuYXBnLWF0dHJzIGEge1xcbiAgY29sb3I6ICMwMDMzOTkgIWltcG9ydGFudDtcXG59XFxudGFibGUuYXBnLWF0dHJzIGE6aG92ZXIge1xcbiAgY29sb3I6ICM4Y2FhZTYgIWltcG9ydGFudDtcXG59XFxuJztcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZW1pdHRjc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-lib/emitcss.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-lib/identifiers.js":
/*!********************************************************!*\
  !*** ./node_modules/apg-js/src/apg-lib/identifiers.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module exposes a list of named identifiers, shared across the parser generator\n// and the parsers that are generated.\n\nmodule.exports = {\n    // Identifies the operator type. Used by the generator\n    // to indicate operator types in the grammar object.\n    // Used by the [parser](./parser.html) when interpreting the grammar object.\n    /* the original ABNF operators */ ALT: 1 /* alternation */ ,\n    CAT: 2 /* concatenation */ ,\n    REP: 3 /* repetition */ ,\n    RNM: 4 /* rule name */ ,\n    TRG: 5 /* terminal range */ ,\n    TBS: 6 /* terminal binary string, case sensitive */ ,\n    TLS: 7 /* terminal literal string, case insensitive */ ,\n    /* the super set, SABNF operators */ UDT: 11 /* user-defined terminal */ ,\n    AND: 12 /* positive look ahead */ ,\n    NOT: 13 /* negative look ahead */ ,\n    BKR: 14 /* back reference to a previously matched rule name */ ,\n    BKA: 15 /* positive look behind */ ,\n    BKN: 16 /* negative look behind */ ,\n    ABG: 17 /* anchor - begin of string */ ,\n    AEN: 18 /* anchor - end of string */ ,\n    // Used by the parser and the user's `RNM` and `UDT` callback functions.\n    // Identifies the parser state as it traverses the parse tree nodes.\n    // - *ACTIVE* - indicates the downward direction through the parse tree node.\n    // - *MATCH* - indicates the upward direction and a phrase, of length \\> 0, has been successfully matched\n    // - *EMPTY* - indicates the upward direction and a phrase, of length = 0, has been successfully matched\n    // - *NOMATCH* - indicates the upward direction and the parser failed to match any phrase at all\n    ACTIVE: 100,\n    MATCH: 101,\n    EMPTY: 102,\n    NOMATCH: 103,\n    // Used by [`AST` translator](./ast.html) (semantic analysis) and the user's callback functions\n    // to indicate the direction of flow through the `AST` nodes.\n    // - *SEM_PRE* - indicates the downward (pre-branch) direction through the `AST` node.\n    // - *SEM_POST* - indicates the upward (post-branch) direction through the `AST` node.\n    SEM_PRE: 200,\n    SEM_POST: 201,\n    // Used by the user's callback functions to indicate to the `AST` translator (semantic analysis) how to proceed.\n    // - *SEM_OK* - normal return value\n    // - *SEM_SKIP* - if a callback function returns this value from the SEM_PRE state,\n    // the translator will skip processing all `AST` nodes in the branch below the current node.\n    // Ignored if returned from the SEM_POST state.\n    SEM_OK: 300,\n    SEM_SKIP: 301,\n    // Used in attribute generation to distinguish the necessary attribute categories.\n    // - *ATTR_N* - non-recursive\n    // - *ATTR_R* - recursive\n    // - *ATTR_MR* - belongs to a mutually-recursive set\n    ATTR_N: 400,\n    ATTR_R: 401,\n    ATTR_MR: 402,\n    // Look around values indicate whether the parser is in look ahead or look behind mode.\n    // Used by the tracing facility to indicate the look around mode in the trace records display.\n    // - *LOOKAROUND_NONE* - the parser is in normal parsing mode\n    // - *LOOKAROUND_AHEAD* - the parse is in look-ahead mode, phrase matching for operator `AND(&)` or `NOT(!)`\n    // - *LOOKAROUND_BEHIND* - the parse is in look-behind mode, phrase matching for operator `BKA(&&)` or `BKN(!!)`\n    LOOKAROUND_NONE: 500,\n    LOOKAROUND_AHEAD: 501,\n    LOOKAROUND_BEHIND: 502,\n    // Back reference rule mode indicators\n    // - *BKR_MODE_UM* - the back reference is using universal mode\n    // - *BKR_MODE_PM* - the back reference is using parent frame mode\n    // - *BKR_MODE_CS* - the back reference is using case-sensitive phrase matching\n    // - *BKR_MODE_CI* - the back reference is using case-insensitive phrase matching\n    BKR_MODE_UM: 601,\n    BKR_MODE_PM: 602,\n    BKR_MODE_CS: 603,\n    BKR_MODE_CI: 604\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctbGliL2lkZW50aWZpZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7dUZBR3VGLEdBQ3ZGLHNGQUFzRjtBQUN0RixzQ0FBc0M7O0FBRXRDQSxPQUFPQyxPQUFPLEdBQUc7SUFDZixzREFBc0Q7SUFDdEQsb0RBQW9EO0lBQ3BELDRFQUE0RTtJQUM1RSwrQkFBK0IsR0FDL0JDLEtBQUssRUFBRSxlQUFlO0lBQ3RCQyxLQUFLLEVBQUUsaUJBQWlCO0lBQ3hCQyxLQUFLLEVBQUUsY0FBYztJQUNyQkMsS0FBSyxFQUFFLGFBQWE7SUFDcEJDLEtBQUssRUFBRSxrQkFBa0I7SUFDekJDLEtBQUssRUFBRSwwQ0FBMEM7SUFDakRDLEtBQUssRUFBRSw2Q0FBNkM7SUFDcEQsa0NBQWtDLEdBQ2xDQyxLQUFLLEdBQUcseUJBQXlCO0lBQ2pDQyxLQUFLLEdBQUcsdUJBQXVCO0lBQy9CQyxLQUFLLEdBQUcsdUJBQXVCO0lBQy9CQyxLQUFLLEdBQUcsb0RBQW9EO0lBQzVEQyxLQUFLLEdBQUcsd0JBQXdCO0lBQ2hDQyxLQUFLLEdBQUcsd0JBQXdCO0lBQ2hDQyxLQUFLLEdBQUcsNEJBQTRCO0lBQ3BDQyxLQUFLLEdBQUcsMEJBQTBCO0lBQ2xDLHdFQUF3RTtJQUN4RSxvRUFBb0U7SUFDcEUsNkVBQTZFO0lBQzdFLHlHQUF5RztJQUN6Ryx3R0FBd0c7SUFDeEcsZ0dBQWdHO0lBQ2hHQyxRQUFRO0lBQ1JDLE9BQU87SUFDUEMsT0FBTztJQUNQQyxTQUFTO0lBQ1QsK0ZBQStGO0lBQy9GLDZEQUE2RDtJQUM3RCxzRkFBc0Y7SUFDdEYsc0ZBQXNGO0lBQ3RGQyxTQUFTO0lBQ1RDLFVBQVU7SUFDVixnSEFBZ0g7SUFDaEgsbUNBQW1DO0lBQ25DLG1GQUFtRjtJQUNuRiw0RkFBNEY7SUFDNUYsK0NBQStDO0lBQy9DQyxRQUFRO0lBQ1JDLFVBQVU7SUFDVixrRkFBa0Y7SUFDbEYsNkJBQTZCO0lBQzdCLHlCQUF5QjtJQUN6QixvREFBb0Q7SUFDcERDLFFBQVE7SUFDUkMsUUFBUTtJQUNSQyxTQUFTO0lBQ1QsdUZBQXVGO0lBQ3ZGLDhGQUE4RjtJQUM5Riw2REFBNkQ7SUFDN0QsNEdBQTRHO0lBQzVHLGdIQUFnSDtJQUNoSEMsaUJBQWlCO0lBQ2pCQyxrQkFBa0I7SUFDbEJDLG1CQUFtQjtJQUNuQixzQ0FBc0M7SUFDdEMsK0RBQStEO0lBQy9ELGtFQUFrRTtJQUNsRSwrRUFBK0U7SUFDL0UsaUZBQWlGO0lBQ2pGQyxhQUFhO0lBQ2JDLGFBQWE7SUFDYkMsYUFBYTtJQUNiQyxhQUFhO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGNyaWIvLi9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctbGliL2lkZW50aWZpZXJzLmpzPzY2YzUiXSwic291cmNlc0NvbnRlbnQiOlsiLyogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgY29weXJpZ2h0OiBDb3B5cmlnaHQgKGMpIDIwMjEgTG93ZWxsIEQuIFRob21hcywgYWxsIHJpZ2h0cyByZXNlcnZlZFxuICogICAgIGxpY2Vuc2U6IEJTRC0yLUNsYXVzZSAoaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMi1DbGF1c2UpXG4gKiAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLy8gVGhpcyBtb2R1bGUgZXhwb3NlcyBhIGxpc3Qgb2YgbmFtZWQgaWRlbnRpZmllcnMsIHNoYXJlZCBhY3Jvc3MgdGhlIHBhcnNlciBnZW5lcmF0b3Jcbi8vIGFuZCB0aGUgcGFyc2VycyB0aGF0IGFyZSBnZW5lcmF0ZWQuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBJZGVudGlmaWVzIHRoZSBvcGVyYXRvciB0eXBlLiBVc2VkIGJ5IHRoZSBnZW5lcmF0b3JcbiAgLy8gdG8gaW5kaWNhdGUgb3BlcmF0b3IgdHlwZXMgaW4gdGhlIGdyYW1tYXIgb2JqZWN0LlxuICAvLyBVc2VkIGJ5IHRoZSBbcGFyc2VyXSguL3BhcnNlci5odG1sKSB3aGVuIGludGVycHJldGluZyB0aGUgZ3JhbW1hciBvYmplY3QuXG4gIC8qIHRoZSBvcmlnaW5hbCBBQk5GIG9wZXJhdG9ycyAqL1xuICBBTFQ6IDEgLyogYWx0ZXJuYXRpb24gKi8sXG4gIENBVDogMiAvKiBjb25jYXRlbmF0aW9uICovLFxuICBSRVA6IDMgLyogcmVwZXRpdGlvbiAqLyxcbiAgUk5NOiA0IC8qIHJ1bGUgbmFtZSAqLyxcbiAgVFJHOiA1IC8qIHRlcm1pbmFsIHJhbmdlICovLFxuICBUQlM6IDYgLyogdGVybWluYWwgYmluYXJ5IHN0cmluZywgY2FzZSBzZW5zaXRpdmUgKi8sXG4gIFRMUzogNyAvKiB0ZXJtaW5hbCBsaXRlcmFsIHN0cmluZywgY2FzZSBpbnNlbnNpdGl2ZSAqLyxcbiAgLyogdGhlIHN1cGVyIHNldCwgU0FCTkYgb3BlcmF0b3JzICovXG4gIFVEVDogMTEgLyogdXNlci1kZWZpbmVkIHRlcm1pbmFsICovLFxuICBBTkQ6IDEyIC8qIHBvc2l0aXZlIGxvb2sgYWhlYWQgKi8sXG4gIE5PVDogMTMgLyogbmVnYXRpdmUgbG9vayBhaGVhZCAqLyxcbiAgQktSOiAxNCAvKiBiYWNrIHJlZmVyZW5jZSB0byBhIHByZXZpb3VzbHkgbWF0Y2hlZCBydWxlIG5hbWUgKi8sXG4gIEJLQTogMTUgLyogcG9zaXRpdmUgbG9vayBiZWhpbmQgKi8sXG4gIEJLTjogMTYgLyogbmVnYXRpdmUgbG9vayBiZWhpbmQgKi8sXG4gIEFCRzogMTcgLyogYW5jaG9yIC0gYmVnaW4gb2Ygc3RyaW5nICovLFxuICBBRU46IDE4IC8qIGFuY2hvciAtIGVuZCBvZiBzdHJpbmcgKi8sXG4gIC8vIFVzZWQgYnkgdGhlIHBhcnNlciBhbmQgdGhlIHVzZXIncyBgUk5NYCBhbmQgYFVEVGAgY2FsbGJhY2sgZnVuY3Rpb25zLlxuICAvLyBJZGVudGlmaWVzIHRoZSBwYXJzZXIgc3RhdGUgYXMgaXQgdHJhdmVyc2VzIHRoZSBwYXJzZSB0cmVlIG5vZGVzLlxuICAvLyAtICpBQ1RJVkUqIC0gaW5kaWNhdGVzIHRoZSBkb3dud2FyZCBkaXJlY3Rpb24gdGhyb3VnaCB0aGUgcGFyc2UgdHJlZSBub2RlLlxuICAvLyAtICpNQVRDSCogLSBpbmRpY2F0ZXMgdGhlIHVwd2FyZCBkaXJlY3Rpb24gYW5kIGEgcGhyYXNlLCBvZiBsZW5ndGggXFw+IDAsIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBtYXRjaGVkXG4gIC8vIC0gKkVNUFRZKiAtIGluZGljYXRlcyB0aGUgdXB3YXJkIGRpcmVjdGlvbiBhbmQgYSBwaHJhc2UsIG9mIGxlbmd0aCA9IDAsIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBtYXRjaGVkXG4gIC8vIC0gKk5PTUFUQ0gqIC0gaW5kaWNhdGVzIHRoZSB1cHdhcmQgZGlyZWN0aW9uIGFuZCB0aGUgcGFyc2VyIGZhaWxlZCB0byBtYXRjaCBhbnkgcGhyYXNlIGF0IGFsbFxuICBBQ1RJVkU6IDEwMCxcbiAgTUFUQ0g6IDEwMSxcbiAgRU1QVFk6IDEwMixcbiAgTk9NQVRDSDogMTAzLFxuICAvLyBVc2VkIGJ5IFtgQVNUYCB0cmFuc2xhdG9yXSguL2FzdC5odG1sKSAoc2VtYW50aWMgYW5hbHlzaXMpIGFuZCB0aGUgdXNlcidzIGNhbGxiYWNrIGZ1bmN0aW9uc1xuICAvLyB0byBpbmRpY2F0ZSB0aGUgZGlyZWN0aW9uIG9mIGZsb3cgdGhyb3VnaCB0aGUgYEFTVGAgbm9kZXMuXG4gIC8vIC0gKlNFTV9QUkUqIC0gaW5kaWNhdGVzIHRoZSBkb3dud2FyZCAocHJlLWJyYW5jaCkgZGlyZWN0aW9uIHRocm91Z2ggdGhlIGBBU1RgIG5vZGUuXG4gIC8vIC0gKlNFTV9QT1NUKiAtIGluZGljYXRlcyB0aGUgdXB3YXJkIChwb3N0LWJyYW5jaCkgZGlyZWN0aW9uIHRocm91Z2ggdGhlIGBBU1RgIG5vZGUuXG4gIFNFTV9QUkU6IDIwMCxcbiAgU0VNX1BPU1Q6IDIwMSxcbiAgLy8gVXNlZCBieSB0aGUgdXNlcidzIGNhbGxiYWNrIGZ1bmN0aW9ucyB0byBpbmRpY2F0ZSB0byB0aGUgYEFTVGAgdHJhbnNsYXRvciAoc2VtYW50aWMgYW5hbHlzaXMpIGhvdyB0byBwcm9jZWVkLlxuICAvLyAtICpTRU1fT0sqIC0gbm9ybWFsIHJldHVybiB2YWx1ZVxuICAvLyAtICpTRU1fU0tJUCogLSBpZiBhIGNhbGxiYWNrIGZ1bmN0aW9uIHJldHVybnMgdGhpcyB2YWx1ZSBmcm9tIHRoZSBTRU1fUFJFIHN0YXRlLFxuICAvLyB0aGUgdHJhbnNsYXRvciB3aWxsIHNraXAgcHJvY2Vzc2luZyBhbGwgYEFTVGAgbm9kZXMgaW4gdGhlIGJyYW5jaCBiZWxvdyB0aGUgY3VycmVudCBub2RlLlxuICAvLyBJZ25vcmVkIGlmIHJldHVybmVkIGZyb20gdGhlIFNFTV9QT1NUIHN0YXRlLlxuICBTRU1fT0s6IDMwMCxcbiAgU0VNX1NLSVA6IDMwMSxcbiAgLy8gVXNlZCBpbiBhdHRyaWJ1dGUgZ2VuZXJhdGlvbiB0byBkaXN0aW5ndWlzaCB0aGUgbmVjZXNzYXJ5IGF0dHJpYnV0ZSBjYXRlZ29yaWVzLlxuICAvLyAtICpBVFRSX04qIC0gbm9uLXJlY3Vyc2l2ZVxuICAvLyAtICpBVFRSX1IqIC0gcmVjdXJzaXZlXG4gIC8vIC0gKkFUVFJfTVIqIC0gYmVsb25ncyB0byBhIG11dHVhbGx5LXJlY3Vyc2l2ZSBzZXRcbiAgQVRUUl9OOiA0MDAsXG4gIEFUVFJfUjogNDAxLFxuICBBVFRSX01SOiA0MDIsXG4gIC8vIExvb2sgYXJvdW5kIHZhbHVlcyBpbmRpY2F0ZSB3aGV0aGVyIHRoZSBwYXJzZXIgaXMgaW4gbG9vayBhaGVhZCBvciBsb29rIGJlaGluZCBtb2RlLlxuICAvLyBVc2VkIGJ5IHRoZSB0cmFjaW5nIGZhY2lsaXR5IHRvIGluZGljYXRlIHRoZSBsb29rIGFyb3VuZCBtb2RlIGluIHRoZSB0cmFjZSByZWNvcmRzIGRpc3BsYXkuXG4gIC8vIC0gKkxPT0tBUk9VTkRfTk9ORSogLSB0aGUgcGFyc2VyIGlzIGluIG5vcm1hbCBwYXJzaW5nIG1vZGVcbiAgLy8gLSAqTE9PS0FST1VORF9BSEVBRCogLSB0aGUgcGFyc2UgaXMgaW4gbG9vay1haGVhZCBtb2RlLCBwaHJhc2UgbWF0Y2hpbmcgZm9yIG9wZXJhdG9yIGBBTkQoJilgIG9yIGBOT1QoISlgXG4gIC8vIC0gKkxPT0tBUk9VTkRfQkVISU5EKiAtIHRoZSBwYXJzZSBpcyBpbiBsb29rLWJlaGluZCBtb2RlLCBwaHJhc2UgbWF0Y2hpbmcgZm9yIG9wZXJhdG9yIGBCS0EoJiYpYCBvciBgQktOKCEhKWBcbiAgTE9PS0FST1VORF9OT05FOiA1MDAsXG4gIExPT0tBUk9VTkRfQUhFQUQ6IDUwMSxcbiAgTE9PS0FST1VORF9CRUhJTkQ6IDUwMixcbiAgLy8gQmFjayByZWZlcmVuY2UgcnVsZSBtb2RlIGluZGljYXRvcnNcbiAgLy8gLSAqQktSX01PREVfVU0qIC0gdGhlIGJhY2sgcmVmZXJlbmNlIGlzIHVzaW5nIHVuaXZlcnNhbCBtb2RlXG4gIC8vIC0gKkJLUl9NT0RFX1BNKiAtIHRoZSBiYWNrIHJlZmVyZW5jZSBpcyB1c2luZyBwYXJlbnQgZnJhbWUgbW9kZVxuICAvLyAtICpCS1JfTU9ERV9DUyogLSB0aGUgYmFjayByZWZlcmVuY2UgaXMgdXNpbmcgY2FzZS1zZW5zaXRpdmUgcGhyYXNlIG1hdGNoaW5nXG4gIC8vIC0gKkJLUl9NT0RFX0NJKiAtIHRoZSBiYWNrIHJlZmVyZW5jZSBpcyB1c2luZyBjYXNlLWluc2Vuc2l0aXZlIHBocmFzZSBtYXRjaGluZ1xuICBCS1JfTU9ERV9VTTogNjAxLFxuICBCS1JfTU9ERV9QTTogNjAyLFxuICBCS1JfTU9ERV9DUzogNjAzLFxuICBCS1JfTU9ERV9DSTogNjA0LFxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQUxUIiwiQ0FUIiwiUkVQIiwiUk5NIiwiVFJHIiwiVEJTIiwiVExTIiwiVURUIiwiQU5EIiwiTk9UIiwiQktSIiwiQktBIiwiQktOIiwiQUJHIiwiQUVOIiwiQUNUSVZFIiwiTUFUQ0giLCJFTVBUWSIsIk5PTUFUQ0giLCJTRU1fUFJFIiwiU0VNX1BPU1QiLCJTRU1fT0siLCJTRU1fU0tJUCIsIkFUVFJfTiIsIkFUVFJfUiIsIkFUVFJfTVIiLCJMT09LQVJPVU5EX05PTkUiLCJMT09LQVJPVU5EX0FIRUFEIiwiTE9PS0FST1VORF9CRUhJTkQiLCJCS1JfTU9ERV9VTSIsIkJLUl9NT0RFX1BNIiwiQktSX01PREVfQ1MiLCJCS1JfTU9ERV9DSSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-lib/identifiers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-lib/node-exports.js":
/*!*********************************************************!*\
  !*** ./node_modules/apg-js/src/apg-lib/node-exports.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module serves to export all library objects and object constructors with the `require(\"apg-lib\")` statement.\n// For example, to create a new parser in your program,\n// ````\n// let apglib = require(\"../apg-lib/node-exports\");\n// let my-parser = new apglib.parser();\n// ````\n\nmodule.exports = {\n    ast: __webpack_require__(/*! ./ast */ \"(rsc)/./node_modules/apg-js/src/apg-lib/ast.js\"),\n    circular: __webpack_require__(/*! ./circular-buffer */ \"(rsc)/./node_modules/apg-js/src/apg-lib/circular-buffer.js\"),\n    ids: __webpack_require__(/*! ./identifiers */ \"(rsc)/./node_modules/apg-js/src/apg-lib/identifiers.js\"),\n    parser: __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/apg-js/src/apg-lib/parser.js\"),\n    stats: __webpack_require__(/*! ./stats */ \"(rsc)/./node_modules/apg-js/src/apg-lib/stats.js\"),\n    trace: __webpack_require__(/*! ./trace */ \"(rsc)/./node_modules/apg-js/src/apg-lib/trace.js\"),\n    utils: __webpack_require__(/*! ./utilities */ \"(rsc)/./node_modules/apg-js/src/apg-lib/utilities.js\"),\n    emitcss: __webpack_require__(/*! ./emitcss */ \"(rsc)/./node_modules/apg-js/src/apg-lib/emitcss.js\"),\n    style: __webpack_require__(/*! ./style */ \"(rsc)/./node_modules/apg-js/src/apg-lib/style.js\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctbGliL25vZGUtZXhwb3J0cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7O3VGQUd1RixHQUN2RixvSEFBb0g7QUFDcEgsdURBQXVEO0FBQ3ZELE9BQU87QUFDUCxtREFBbUQ7QUFDbkQsdUNBQXVDO0FBQ3ZDLE9BQU87O0FBQ1BBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxLQUFLQyxtQkFBT0EsQ0FBQztJQUNiQyxVQUFVRCxtQkFBT0EsQ0FBQztJQUNsQkUsS0FBS0YsbUJBQU9BLENBQUM7SUFDYkcsUUFBUUgsbUJBQU9BLENBQUM7SUFDaEJJLE9BQU9KLG1CQUFPQSxDQUFDO0lBQ2ZLLE9BQU9MLG1CQUFPQSxDQUFDO0lBQ2ZNLE9BQU9OLG1CQUFPQSxDQUFDO0lBQ2ZPLFNBQVNQLG1CQUFPQSxDQUFDO0lBQ2pCUSxPQUFPUixtQkFBT0EsQ0FBQztBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9hcGctanMvc3JjL2FwZy1saWIvbm9kZS1leHBvcnRzLmpzP2FlZjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgY29weXJpZ2h0OiBDb3B5cmlnaHQgKGMpIDIwMjEgTG93ZWxsIEQuIFRob21hcywgYWxsIHJpZ2h0cyByZXNlcnZlZFxuICogICAgIGxpY2Vuc2U6IEJTRC0yLUNsYXVzZSAoaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMi1DbGF1c2UpXG4gKiAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLy8gVGhpcyBtb2R1bGUgc2VydmVzIHRvIGV4cG9ydCBhbGwgbGlicmFyeSBvYmplY3RzIGFuZCBvYmplY3QgY29uc3RydWN0b3JzIHdpdGggdGhlIGByZXF1aXJlKFwiYXBnLWxpYlwiKWAgc3RhdGVtZW50LlxuLy8gRm9yIGV4YW1wbGUsIHRvIGNyZWF0ZSBhIG5ldyBwYXJzZXIgaW4geW91ciBwcm9ncmFtLFxuLy8gYGBgYFxuLy8gbGV0IGFwZ2xpYiA9IHJlcXVpcmUoXCIuLi9hcGctbGliL25vZGUtZXhwb3J0c1wiKTtcbi8vIGxldCBteS1wYXJzZXIgPSBuZXcgYXBnbGliLnBhcnNlcigpO1xuLy8gYGBgYFxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFzdDogcmVxdWlyZSgnLi9hc3QnKSxcbiAgY2lyY3VsYXI6IHJlcXVpcmUoJy4vY2lyY3VsYXItYnVmZmVyJyksXG4gIGlkczogcmVxdWlyZSgnLi9pZGVudGlmaWVycycpLFxuICBwYXJzZXI6IHJlcXVpcmUoJy4vcGFyc2VyJyksXG4gIHN0YXRzOiByZXF1aXJlKCcuL3N0YXRzJyksXG4gIHRyYWNlOiByZXF1aXJlKCcuL3RyYWNlJyksXG4gIHV0aWxzOiByZXF1aXJlKCcuL3V0aWxpdGllcycpLFxuICBlbWl0Y3NzOiByZXF1aXJlKCcuL2VtaXRjc3MnKSxcbiAgc3R5bGU6IHJlcXVpcmUoJy4vc3R5bGUnKSxcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImFzdCIsInJlcXVpcmUiLCJjaXJjdWxhciIsImlkcyIsInBhcnNlciIsInN0YXRzIiwidHJhY2UiLCJ1dGlscyIsImVtaXRjc3MiLCJzdHlsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-lib/node-exports.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-lib/parser.js":
/*!***************************************************!*\
  !*** ./node_modules/apg-js/src/apg-lib/parser.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* eslint-disable func-names */ /* eslint-disable no-restricted-syntax */ /* eslint-disable new-cap */ /* eslint-disable guard-for-in */ /*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This is the primary object of `apg-lib`. Calling its `parse()` member function\n// walks the parse tree of opcodes, matching phrases from the input string as it goes.\n// The working code for all of the operators, `ALT`, `CAT`, etc. is in this module.\n\nmodule.exports = function parser() {\n    const id = __webpack_require__(/*! ./identifiers */ \"(rsc)/./node_modules/apg-js/src/apg-lib/identifiers.js\");\n    const utils = __webpack_require__(/*! ./utilities */ \"(rsc)/./node_modules/apg-js/src/apg-lib/utilities.js\");\n    const thisFileName = \"parser.js: \";\n    const thisThis = this;\n    let opExecute;\n    this.ast = null;\n    this.stats = null;\n    this.trace = null;\n    this.callbacks = [];\n    let opcodes = null;\n    let chars = null;\n    let charsBegin;\n    let charsLength;\n    let charsEnd;\n    let lookAround;\n    let treeDepth = 0;\n    let maxTreeDepth = 0;\n    let nodeHits = 0;\n    let ruleCallbacks = null;\n    let udtCallbacks = null;\n    let rules = null;\n    let udts = null;\n    let syntaxData = null;\n    let maxMatched = 0;\n    let limitTreeDepth = Infinity;\n    let limitNodeHits = Infinity;\n    // Evaluates any given rule. This can be called from the syntax callback\n    // functions to evaluate any rule in the grammar's rule list. Great caution\n    // should be used. Use of this function will alter the language that the\n    // parser accepts.\n    const evaluateRule = function evaluateRule(ruleIndex, phraseIndex, sysData) {\n        const functionName = `${thisFileName}evaluateRule(): `;\n        if (ruleIndex >= rules.length) {\n            throw new Error(`${functionName}rule index: ${ruleIndex} out of range`);\n        }\n        if (phraseIndex >= charsEnd) {\n            throw new Error(`${functionName}phrase index: ${phraseIndex} out of range`);\n        }\n        const { length } = opcodes;\n        opcodes.push({\n            type: id.RNM,\n            index: ruleIndex\n        });\n        opExecute(length, phraseIndex, sysData);\n        opcodes.pop();\n    };\n    // Evaluates any given UDT. This can be called from the syntax callback\n    // functions to evaluate any UDT in the grammar's UDT list. Great caution\n    // should be used. Use of this function will alter the language that the\n    // parser accepts.\n    const evaluateUdt = function(udtIndex, phraseIndex, sysData) {\n        const functionName = `${thisFileName}evaluateUdt(): `;\n        if (udtIndex >= udts.length) {\n            throw new Error(`${functionName}udt index: ${udtIndex} out of range`);\n        }\n        if (phraseIndex >= charsEnd) {\n            throw new Error(`${functionName}phrase index: ${phraseIndex} out of range`);\n        }\n        const { length } = opcodes;\n        opcodes.push({\n            type: id.UDT,\n            empty: udts[udtIndex].empty,\n            index: udtIndex\n        });\n        opExecute(length, phraseIndex, sysData);\n        opcodes.pop();\n    };\n    /* Clears this object of any/all data that has been initialized or added to it. */ /* Called by parse() on initialization, allowing this object to be re-used for multiple parsing calls. */ const clear = function() {\n        treeDepth = 0;\n        maxTreeDepth = 0;\n        nodeHits = 0;\n        maxMatched = 0;\n        lookAround = [\n            {\n                lookAround: id.LOOKAROUND_NONE,\n                anchor: 0,\n                charsEnd: 0,\n                charsLength: 0\n            }\n        ];\n        rules = null;\n        udts = null;\n        chars = null;\n        charsBegin = 0;\n        charsLength = 0;\n        charsEnd = 0;\n        ruleCallbacks = null;\n        udtCallbacks = null;\n        syntaxData = null;\n        opcodes = null;\n    };\n    /* object for maintaining a stack of back reference frames */ const backRef = function() {\n        const stack = [];\n        const init = function() {\n            const obj = {};\n            rules.forEach((rule)=>{\n                if (rule.isBkr) {\n                    obj[rule.lower] = null;\n                }\n            });\n            if (udts.length > 0) {\n                udts.forEach((udt)=>{\n                    if (udt.isBkr) {\n                        obj[udt.lower] = null;\n                    }\n                });\n            }\n            stack.push(obj);\n        };\n        const copy = function() {\n            const top = stack[stack.length - 1];\n            const obj = {};\n            /* // eslint-disable-next-line no-restricted-syntax */ for(const name in top){\n                obj[name] = top[name];\n            }\n            return obj;\n        };\n        this.push = function push() {\n            stack.push(copy());\n        };\n        this.pop = function pop(lengthArg) {\n            let length = lengthArg;\n            if (!length) {\n                length = stack.length - 1;\n            }\n            if (length < 1 || length > stack.length) {\n                throw new Error(`${thisFileName}backRef.pop(): bad length: ${length}`);\n            }\n            stack.length = length;\n            return stack[stack.length - 1];\n        };\n        this.length = function length() {\n            return stack.length;\n        };\n        this.savePhrase = function savePhrase(name, index, length) {\n            stack[stack.length - 1][name] = {\n                phraseIndex: index,\n                phraseLength: length\n            };\n        };\n        this.getPhrase = function(name) {\n            return stack[stack.length - 1][name];\n        };\n        /* constructor */ init();\n    };\n    // The system data structure that relays system information to and from the rule and UDT callback functions.\n    // - *state* - the state of the parser, ACTIVE, MATCH, EMPTY or NOMATCH (see the `identifiers` object in\n    // [`apg-lib`](https://github.com/ldthomas/apg-js2-lib))\n    // - *phraseLength* - the number of characters matched if the state is MATCHED or EMPTY\n    // - *lookaround* - the top of the stack holds the current look around state,\n    // LOOKAROUND_NONE, LOOKAROUND_AHEAD or LOOKAROUND_BEHIND,\n    // - *uFrame* - the \"universal\" back reference frame.\n    // Holds the last matched phrase for each of the back referenced rules and UDTs.\n    // - *pFrame* - the stack of \"parent\" back reference frames.\n    // Holds the matched phrase from the parent frame of each back referenced rules and UDTs.\n    // - *evaluateRule* - a reference to this object's `evaluateRule()` function.\n    // Can be called from a callback function (use with extreme caution!)\n    // - *evaluateUdt* - a reference to this object's `evaluateUdt()` function.\n    // Can be called from a callback function (use with extreme caution!)\n    const systemData = function systemData() {\n        const thisData = this;\n        this.state = id.ACTIVE;\n        this.phraseLength = 0;\n        this.ruleIndex = 0;\n        this.udtIndex = 0;\n        this.lookAround = lookAround[lookAround.length - 1];\n        this.uFrame = new backRef();\n        this.pFrame = new backRef();\n        this.evaluateRule = evaluateRule;\n        this.evaluateUdt = evaluateUdt;\n        /* refresh the parser state for the next operation */ this.refresh = function refresh() {\n            thisData.state = id.ACTIVE;\n            thisData.phraseLength = 0;\n            thisData.lookAround = lookAround[lookAround.length - 1];\n        };\n    };\n    /* some look around helper functions */ const lookAroundValue = function lookAroundValue() {\n        return lookAround[lookAround.length - 1];\n    };\n    /* return true if parser is in look around (ahead or behind) state */ const inLookAround = function inLookAround() {\n        return lookAround.length > 1;\n    };\n    /* return true if parser is in look behind state */ const inLookBehind = function() {\n        return lookAround[lookAround.length - 1].lookAround === id.LOOKAROUND_BEHIND;\n    };\n    /* called by parse() to initialize the AST object, if one has been defined */ const initializeAst = function() {\n        const functionName = `${thisFileName}initializeAst(): `;\n        const TRUE = true;\n        while(TRUE){\n            if (thisThis.ast === undefined) {\n                thisThis.ast = null;\n                break;\n            }\n            if (thisThis.ast === null) {\n                break;\n            }\n            if (thisThis.ast.astObject !== \"astObject\") {\n                throw new Error(`${functionName}ast object not recognized`);\n            }\n            break;\n        }\n        if (thisThis.ast !== null) {\n            thisThis.ast.init(rules, udts, chars);\n        }\n    };\n    /* called by parse() to initialize the trace object, if one has been defined */ const initializeTrace = function() {\n        const functionName = `${thisFileName}initializeTrace(): `;\n        const TRUE = true;\n        while(TRUE){\n            if (thisThis.trace === undefined) {\n                thisThis.trace = null;\n                break;\n            }\n            if (thisThis.trace === null) {\n                break;\n            }\n            if (thisThis.trace.traceObject !== \"traceObject\") {\n                throw new Error(`${functionName}trace object not recognized`);\n            }\n            break;\n        }\n        if (thisThis.trace !== null) {\n            thisThis.trace.init(rules, udts, chars);\n        }\n    };\n    /* called by parse() to initialize the statistics object, if one has been defined */ const initializeStats = function() {\n        const functionName = `${thisFileName}initializeStats(): `;\n        const TRUE = true;\n        while(TRUE){\n            if (thisThis.stats === undefined) {\n                thisThis.stats = null;\n                break;\n            }\n            if (thisThis.stats === null) {\n                break;\n            }\n            if (thisThis.stats.statsObject !== \"statsObject\") {\n                throw new Error(`${functionName}stats object not recognized`);\n            }\n            break;\n        }\n        if (thisThis.stats !== null) {\n            thisThis.stats.init(rules, udts);\n        }\n    };\n    /* called by parse() to initialize the rules & udts from the grammar object */ /* (the grammar object generated previously by apg) */ const initializeGrammar = function(grammar) {\n        const functionName = `${thisFileName}initializeGrammar(): `;\n        if (!grammar) {\n            throw new Error(`${functionName}grammar object undefined`);\n        }\n        if (grammar.grammarObject !== \"grammarObject\") {\n            throw new Error(`${functionName}bad grammar object`);\n        }\n        rules = grammar.rules;\n        udts = grammar.udts;\n    };\n    /* called by parse() to initialize the start rule */ const initializeStartRule = function(startRule) {\n        const functionName = `${thisFileName}initializeStartRule(): `;\n        let start = null;\n        if (typeof startRule === \"number\") {\n            if (startRule >= rules.length) {\n                throw new Error(`${functionName}start rule index too large: max: ${rules.length}: index: ${startRule}`);\n            }\n            start = startRule;\n        } else if (typeof startRule === \"string\") {\n            const lower = startRule.toLowerCase();\n            for(let i = 0; i < rules.length; i += 1){\n                if (lower === rules[i].lower) {\n                    start = rules[i].index;\n                    break;\n                }\n            }\n            if (start === null) {\n                throw new Error(`${functionName}start rule name '${startRule}' not recognized`);\n            }\n        } else {\n            throw new Error(`${functionName}type of start rule '${typeof startRule}' not recognized`);\n        }\n        return start;\n    };\n    /* called by parse() to initialize the array of characters codes representing the input string */ const initializeInputChars = function initializeInputChars(inputArg, begArg, lenArg) {\n        const functionName = `${thisFileName}initializeInputChars(): `;\n        /* varify and normalize input */ let input = inputArg;\n        let beg = begArg;\n        let len = lenArg;\n        if (input === undefined) {\n            throw new Error(`${functionName}input string is undefined`);\n        }\n        if (input === null) {\n            throw new Error(`${functionName}input string is null`);\n        }\n        if (typeof input === \"string\") {\n            input = utils.stringToChars(input);\n        } else if (!Array.isArray(input)) {\n            throw new Error(`${functionName}input string is not a string or array`);\n        }\n        if (input.length > 0) {\n            if (typeof input[0] !== \"number\") {\n                throw new Error(`${functionName}input string not an array of integers`);\n            }\n        }\n        /* verify and normalize beginning index */ if (typeof beg !== \"number\") {\n            beg = 0;\n        } else {\n            beg = Math.floor(beg);\n            if (beg < 0 || beg > input.length) {\n                throw new Error(`${functionName}input beginning index out of range: ${beg}`);\n            }\n        }\n        /* verify and normalize input length */ if (typeof len !== \"number\") {\n            len = input.length - beg;\n        } else {\n            len = Math.floor(len);\n            if (len < 0 || len > input.length - beg) {\n                throw new Error(`${functionName}input length out of range: ${len}`);\n            }\n        }\n        chars = input;\n        charsBegin = beg;\n        charsLength = len;\n        charsEnd = charsBegin + charsLength;\n    };\n    /* called by parse() to initialize the user-written, syntax callback functions, if any */ const initializeCallbacks = function() {\n        const functionName = `${thisFileName}initializeCallbacks(): `;\n        let i;\n        ruleCallbacks = [];\n        udtCallbacks = [];\n        for(i = 0; i < rules.length; i += 1){\n            ruleCallbacks[i] = null;\n        }\n        for(i = 0; i < udts.length; i += 1){\n            udtCallbacks[i] = null;\n        }\n        let func;\n        const list = [];\n        for(i = 0; i < rules.length; i += 1){\n            list.push(rules[i].lower);\n        }\n        for(i = 0; i < udts.length; i += 1){\n            list.push(udts[i].lower);\n        }\n        for(const index in thisThis.callbacks){\n            i = list.indexOf(index.toLowerCase());\n            if (i < 0) {\n                throw new Error(`${functionName}syntax callback '${index}' not a rule or udt name`);\n            }\n            func = thisThis.callbacks[index];\n            if (!func) {\n                func = null;\n            }\n            if (typeof func === \"function\" || func === null) {\n                if (i < rules.length) {\n                    ruleCallbacks[i] = func;\n                } else {\n                    udtCallbacks[i - rules.length] = func;\n                }\n            } else {\n                throw new Error(`${functionName}syntax callback[${index}] must be function reference or 'false' (false/null/undefined/etc.)`);\n            }\n        }\n        /* make sure all udts have been defined - the parser can't work without them */ for(i = 0; i < udts.length; i += 1){\n            if (udtCallbacks[i] === null) {\n                throw new Error(`${functionName}all UDT callbacks must be defined. UDT callback[${udts[i].lower}] not a function reference`);\n            }\n        }\n    };\n    // Set the maximum parse tree depth allowed. The default is `Infinity`.\n    // A limit is not normally needed, but can be used to protect against an\n    // exponentual or \"catastrophically backtracking\" grammar.\n    // <ul>\n    // <li>\n    // depth - max allowed parse tree depth. An exception is thrown if exceeded.\n    // </li>\n    // </ul>\n    this.setMaxTreeDepth = function(depth) {\n        if (typeof depth !== \"number\") {\n            throw new Error(`parser: max tree depth must be integer > 0: ${depth}`);\n        }\n        limitTreeDepth = Math.floor(depth);\n        if (limitTreeDepth <= 0) {\n            throw new Error(`parser: max tree depth must be integer > 0: ${depth}`);\n        }\n    };\n    // Set the maximum number of node hits (parser unit steps or opcode function calls) allowed.\n    // The default is `Infinity`.\n    // A limit is not normally needed, but can be used to protect against an\n    // exponentual or \"catastrophically backtracking\" grammar.\n    // <ul>\n    // <li>\n    // hits - maximum number of node hits or parser unit steps allowed.\n    // An exception thrown if exceeded.\n    // </li>\n    // </ul>\n    this.setMaxNodeHits = function(hits) {\n        if (typeof hits !== \"number\") {\n            throw new Error(`parser: max node hits must be integer > 0: ${hits}`);\n        }\n        limitNodeHits = Math.floor(hits);\n        if (limitNodeHits <= 0) {\n            throw new Error(`parser: max node hits must be integer > 0: ${hits}`);\n        }\n    };\n    /* the main parser function */ const privateParse = function(grammar, startRuleArg, callbackData) {\n        let success;\n        const functionName = `${thisFileName}parse(): `;\n        initializeGrammar(grammar);\n        const startRule = initializeStartRule(startRuleArg);\n        initializeCallbacks();\n        initializeTrace();\n        initializeStats();\n        initializeAst();\n        const sysData = new systemData();\n        if (!(callbackData === undefined || callbackData === null)) {\n            syntaxData = callbackData;\n        }\n        /* create a dummy opcode for the start rule */ opcodes = [\n            {\n                type: id.RNM,\n                index: startRule\n            }\n        ];\n        /* execute the start rule */ opExecute(0, charsBegin, sysData);\n        opcodes = null;\n        /* test and return the sysData */ switch(sysData.state){\n            case id.ACTIVE:\n                throw new Error(`${functionName}final state should never be 'ACTIVE'`);\n            case id.NOMATCH:\n                success = false;\n                break;\n            case id.EMPTY:\n            case id.MATCH:\n                if (sysData.phraseLength === charsLength) {\n                    success = true;\n                } else {\n                    success = false;\n                }\n                break;\n            default:\n                throw new Error(\"unrecognized state\");\n        }\n        return {\n            success,\n            state: sysData.state,\n            length: charsLength,\n            matched: sysData.phraseLength,\n            maxMatched,\n            maxTreeDepth,\n            nodeHits,\n            inputLength: chars.length,\n            subBegin: charsBegin,\n            subEnd: charsEnd,\n            subLength: charsLength\n        };\n    };\n    // This form allows parsing of a sub-string of the full input string.\n    // <ul>\n    // <li>*inputIndex* - index of the first character in the sub-string</li>\n    // <li>*inputLength* - length of the sub-string</li>\n    // </ul>\n    // All other parameters as for the above function `parse()`.\n    this.parseSubstring = function parseSubstring(grammar, startRule, inputChars, inputIndex, inputLength, callbackData) {\n        clear();\n        initializeInputChars(inputChars, inputIndex, inputLength);\n        return privateParse(grammar, startRule, callbackData);\n    };\n    // This is the main function, called to parse an input string.\n    // <ul>\n    // <li>*grammar* - an instantiated grammar object - the output of `apg` for a\n    // specific SABNF grammar</li>\n    // <li>*startRule* - the rule name or rule index to be used as the root of the\n    // parse tree. This is usually the first rule, index = 0, of the grammar\n    // but can be any rule defined in the above grammar object.</li>\n    // <li>*inputChars* - the input string. Can be a string or an array of integer character codes representing the\n    // string.</li>\n    // <li>*callbackData* - user-defined data object to be passed to the user's\n    // callback functions.\n    // This is not used by the parser in any way, merely passed on to the user.\n    // May be `null` or omitted.</li>\n    // </ul>\n    this.parse = function parse(grammar, startRule, inputChars, callbackData) {\n        clear();\n        initializeInputChars(inputChars, 0, inputChars.length);\n        return privateParse(grammar, startRule, callbackData);\n    };\n    // The `ALT` operator.<br>\n    // Executes its child nodes, from left to right, until it finds a match.\n    // Fails if *all* of its child nodes fail.\n    const opALT = function(opIndex, phraseIndex, sysData) {\n        const op = opcodes[opIndex];\n        for(let i = 0; i < op.children.length; i += 1){\n            opExecute(op.children[i], phraseIndex, sysData);\n            if (sysData.state !== id.NOMATCH) {\n                break;\n            }\n        }\n    };\n    // The `CAT` operator.<br>\n    // Executes all of its child nodes, from left to right,\n    // concatenating the matched phrases.\n    // Fails if *any* child nodes fail.\n    const opCAT = function(opIndex, phraseIndex, sysData) {\n        let success;\n        let astLength;\n        let catCharIndex;\n        let catPhrase;\n        const op = opcodes[opIndex];\n        const ulen = sysData.uFrame.length();\n        const plen = sysData.pFrame.length();\n        if (thisThis.ast) {\n            astLength = thisThis.ast.getLength();\n        }\n        success = true;\n        catCharIndex = phraseIndex;\n        catPhrase = 0;\n        for(let i = 0; i < op.children.length; i += 1){\n            opExecute(op.children[i], catCharIndex, sysData);\n            if (sysData.state === id.NOMATCH) {\n                success = false;\n                break;\n            } else {\n                catCharIndex += sysData.phraseLength;\n                catPhrase += sysData.phraseLength;\n            }\n        }\n        if (success) {\n            sysData.state = catPhrase === 0 ? id.EMPTY : id.MATCH;\n            sysData.phraseLength = catPhrase;\n        } else {\n            sysData.state = id.NOMATCH;\n            sysData.phraseLength = 0;\n            /* reset the back referencing frames on failure */ sysData.uFrame.pop(ulen);\n            sysData.pFrame.pop(plen);\n            if (thisThis.ast) {\n                thisThis.ast.setLength(astLength);\n            }\n        }\n    };\n    // The `REP` operator.<br>\n    // Repeatedly executes its single child node,\n    // concatenating each of the matched phrases found.\n    // The number of repetitions executed and its final sysData depends\n    // on its `min` & `max` repetition values.\n    const opREP = function(opIndex, phraseIndex, sysData) {\n        let astLength;\n        let repCharIndex;\n        let repPhrase;\n        let repCount;\n        const op = opcodes[opIndex];\n        if (op.max === 0) {\n            // this is an empty-string acceptor\n            // deprecated: use the TLS empty string operator, \"\", instead\n            sysData.state = id.EMPTY;\n            sysData.phraseLength = 0;\n            return;\n        }\n        repCharIndex = phraseIndex;\n        repPhrase = 0;\n        repCount = 0;\n        const ulen = sysData.uFrame.length();\n        const plen = sysData.pFrame.length();\n        if (thisThis.ast) {\n            astLength = thisThis.ast.getLength();\n        }\n        const TRUE = true;\n        while(TRUE){\n            if (repCharIndex >= charsEnd) {\n                break;\n            }\n            opExecute(opIndex + 1, repCharIndex, sysData);\n            if (sysData.state === id.NOMATCH) {\n                break;\n            }\n            if (sysData.state === id.EMPTY) {\n                break;\n            }\n            repCount += 1;\n            repPhrase += sysData.phraseLength;\n            repCharIndex += sysData.phraseLength;\n            if (repCount === op.max) {\n                break;\n            }\n        }\n        /* evaluate the match count according to the min, max values */ if (sysData.state === id.EMPTY) {\n            sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n            sysData.phraseLength = repPhrase;\n        } else if (repCount >= op.min) {\n            sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n            sysData.phraseLength = repPhrase;\n        } else {\n            sysData.state = id.NOMATCH;\n            sysData.phraseLength = 0;\n            /* reset the back referencing frames on failure */ sysData.uFrame.pop(ulen);\n            sysData.pFrame.pop(plen);\n            if (thisThis.ast) {\n                thisThis.ast.setLength(astLength);\n            }\n        }\n    };\n    // Validate the callback function's returned sysData values.\n    // It's the user's responsibility to get them right\n    // but `RNM` fails if not.\n    const validateRnmCallbackResult = function(rule, sysData, charsLeft, down) {\n        if (sysData.phraseLength > charsLeft) {\n            let str = `${thisFileName}opRNM(${rule.name}): callback function error: `;\n            str += `sysData.phraseLength: ${sysData.phraseLength}`;\n            str += ` must be <= remaining chars: ${charsLeft}`;\n            throw new Error(str);\n        }\n        switch(sysData.state){\n            case id.ACTIVE:\n                if (down !== true) {\n                    throw new Error(`${thisFileName}opRNM(${rule.name}): callback function return error. ACTIVE state not allowed.`);\n                }\n                break;\n            case id.EMPTY:\n                sysData.phraseLength = 0;\n                break;\n            case id.MATCH:\n                if (sysData.phraseLength === 0) {\n                    sysData.state = id.EMPTY;\n                }\n                break;\n            case id.NOMATCH:\n                sysData.phraseLength = 0;\n                break;\n            default:\n                throw new Error(`${thisFileName}opRNM(${rule.name}): callback function return error. Unrecognized return state: ${sysData.state}`);\n        }\n    };\n    // The `RNM` operator.<br>\n    // This operator will acts as a root node for a parse tree branch below and\n    // returns the matched phrase to its parent.\n    // However, its larger responsibility is handling user-defined callback functions, back references and `AST` nodes.\n    // Note that the `AST` is a separate object, but `RNM` calls its functions to create its nodes.\n    // See [`ast.js`](./ast.html) for usage.\n    const opRNM = function(opIndex, phraseIndex, sysData) {\n        let astLength;\n        let astDefined;\n        let savedOpcodes;\n        let ulen;\n        let plen;\n        let saveFrame;\n        const op = opcodes[opIndex];\n        const rule = rules[op.index];\n        const callback = ruleCallbacks[rule.index];\n        const notLookAround = !inLookAround();\n        /* ignore AST and back references in lookaround */ if (notLookAround) {\n            /* begin AST and back references */ astDefined = thisThis.ast && thisThis.ast.ruleDefined(op.index);\n            if (astDefined) {\n                astLength = thisThis.ast.getLength();\n                thisThis.ast.down(op.index, rules[op.index].name);\n            }\n            ulen = sysData.uFrame.length();\n            plen = sysData.pFrame.length();\n            sysData.uFrame.push();\n            sysData.pFrame.push();\n            saveFrame = sysData.pFrame;\n            sysData.pFrame = new backRef();\n        }\n        if (callback === null) {\n            /* no callback - just execute the rule */ savedOpcodes = opcodes;\n            opcodes = rule.opcodes;\n            opExecute(0, phraseIndex, sysData);\n            opcodes = savedOpcodes;\n        } else {\n            /* call user's callback */ const charsLeft = charsEnd - phraseIndex;\n            sysData.ruleIndex = rule.index;\n            callback(sysData, chars, phraseIndex, syntaxData);\n            validateRnmCallbackResult(rule, sysData, charsLeft, true);\n            if (sysData.state === id.ACTIVE) {\n                savedOpcodes = opcodes;\n                opcodes = rule.opcodes;\n                opExecute(0, phraseIndex, sysData);\n                opcodes = savedOpcodes;\n                sysData.ruleIndex = rule.index;\n                callback(sysData, chars, phraseIndex, syntaxData);\n                validateRnmCallbackResult(rule, sysData, charsLeft, false);\n            } /* implied else clause: just accept the callback sysData - RNM acting as UDT */ \n        }\n        if (notLookAround) {\n            /* end AST */ if (astDefined) {\n                if (sysData.state === id.NOMATCH) {\n                    thisThis.ast.setLength(astLength);\n                } else {\n                    thisThis.ast.up(op.index, rule.name, phraseIndex, sysData.phraseLength);\n                }\n            }\n            /* end back reference */ sysData.pFrame = saveFrame;\n            if (sysData.state === id.NOMATCH) {\n                sysData.uFrame.pop(ulen);\n                sysData.pFrame.pop(plen);\n            } else if (rule.isBkr) {\n                /* save phrase on both the parent and universal frames */ /* BKR operator will decide which to use later */ sysData.pFrame.savePhrase(rule.lower, phraseIndex, sysData.phraseLength);\n                sysData.uFrame.savePhrase(rule.lower, phraseIndex, sysData.phraseLength);\n            }\n        }\n    };\n    // Validate the callback function's returned sysData values.\n    // It's the user's responsibility to get it right but `UDT` fails if not.\n    const validateUdtCallbackResult = function(udt, sysData, charsLeft) {\n        if (sysData.phraseLength > charsLeft) {\n            let str = `${thisFileName}opUDT(${udt.name}): callback function error: `;\n            str += `sysData.phraseLength: ${sysData.phraseLength}`;\n            str += ` must be <= remaining chars: ${charsLeft}`;\n            throw new Error(str);\n        }\n        switch(sysData.state){\n            case id.ACTIVE:\n                throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. ACTIVE state not allowed.`);\n            case id.EMPTY:\n                if (udt.empty === false) {\n                    throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. May not return EMPTY.`);\n                } else {\n                    sysData.phraseLength = 0;\n                }\n                break;\n            case id.MATCH:\n                if (sysData.phraseLength === 0) {\n                    if (udt.empty === false) {\n                        throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. May not return EMPTY.`);\n                    } else {\n                        sysData.state = id.EMPTY;\n                    }\n                }\n                break;\n            case id.NOMATCH:\n                sysData.phraseLength = 0;\n                break;\n            default:\n                throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. Unrecognized return state: ${sysData.state}`);\n        }\n    };\n    // The `UDT` operator.<br>\n    // Simply calls the user's callback function, but operates like `RNM` with regard to the `AST`\n    // and back referencing.\n    // There is some ambiguity here. `UDT`s act as terminals for phrase recognition but as named rules\n    // for `AST` nodes and back referencing.\n    // See [`ast.js`](./ast.html) for usage.\n    const opUDT = function(opIndex, phraseIndex, sysData) {\n        let astLength;\n        let astIndex;\n        let astDefined;\n        let ulen;\n        let plen;\n        let saveFrame;\n        const op = opcodes[opIndex];\n        const udt = udts[op.index];\n        sysData.UdtIndex = udt.index;\n        const notLookAround = !inLookAround();\n        /* ignore AST and back references in lookaround */ if (notLookAround) {\n            /* begin AST and back reference */ astDefined = thisThis.ast && thisThis.ast.udtDefined(op.index);\n            if (astDefined) {\n                astIndex = rules.length + op.index;\n                astLength = thisThis.ast.getLength();\n                thisThis.ast.down(astIndex, udt.name);\n            }\n            /* NOTE: push and pop of the back reference frame is normally not necessary */ /* only in the case that the UDT calls evaluateRule() or evaluateUdt() */ ulen = sysData.uFrame.length();\n            plen = sysData.pFrame.length();\n            sysData.uFrame.push();\n            sysData.pFrame.push();\n            saveFrame = sysData.pFrame;\n            sysData.pFrame = new backRef();\n        }\n        /* call the UDT */ const charsLeft = charsEnd - phraseIndex;\n        udtCallbacks[op.index](sysData, chars, phraseIndex, syntaxData);\n        validateUdtCallbackResult(udt, sysData, charsLeft);\n        if (notLookAround) {\n            /* end AST */ if (astDefined) {\n                if (sysData.state === id.NOMATCH) {\n                    thisThis.ast.setLength(astLength);\n                } else {\n                    thisThis.ast.up(astIndex, udt.name, phraseIndex, sysData.phraseLength);\n                }\n            }\n            /* end back reference */ sysData.pFrame = saveFrame;\n            if (sysData.state === id.NOMATCH) {\n                sysData.uFrame.pop(ulen);\n                sysData.pFrame.pop(plen);\n            } else if (udt.isBkr) {\n                /* save phrase on both the parent and universal frames */ /* BKR operator will decide which to use later */ sysData.pFrame.savePhrase(udt.lower, phraseIndex, sysData.phraseLength);\n                sysData.uFrame.savePhrase(udt.lower, phraseIndex, sysData.phraseLength);\n            }\n        }\n    };\n    // The `AND` operator.<br>\n    // This is the positive `look ahead` operator.\n    // Executes its single child node, returning the EMPTY state\n    // if it succeedsand NOMATCH if it fails.\n    // *Always* backtracks on any matched phrase and returns EMPTY on success.\n    const opAND = function(opIndex, phraseIndex, sysData) {\n        lookAround.push({\n            lookAround: id.LOOKAROUND_AHEAD,\n            anchor: phraseIndex,\n            charsEnd,\n            charsLength\n        });\n        charsEnd = chars.length;\n        charsLength = chars.length - charsBegin;\n        opExecute(opIndex + 1, phraseIndex, sysData);\n        const pop = lookAround.pop();\n        charsEnd = pop.charsEnd;\n        charsLength = pop.charsLength;\n        sysData.phraseLength = 0;\n        switch(sysData.state){\n            case id.EMPTY:\n                sysData.state = id.EMPTY;\n                break;\n            case id.MATCH:\n                sysData.state = id.EMPTY;\n                break;\n            case id.NOMATCH:\n                sysData.state = id.NOMATCH;\n                break;\n            default:\n                throw new Error(`opAND: invalid state ${sysData.state}`);\n        }\n    };\n    // The `NOT` operator.<br>\n    // This is the negative `look ahead` operator.\n    // Executes its single child node, returning the EMPTY state\n    // if it *fails* and NOMATCH if it succeeds.\n    // *Always* backtracks on any matched phrase and returns EMPTY\n    // on success (failure of its child node).\n    const opNOT = function(opIndex, phraseIndex, sysData) {\n        lookAround.push({\n            lookAround: id.LOOKAROUND_AHEAD,\n            anchor: phraseIndex,\n            charsEnd,\n            charsLength\n        });\n        charsEnd = chars.length;\n        charsLength = chars.length - charsBegin;\n        opExecute(opIndex + 1, phraseIndex, sysData);\n        const pop = lookAround.pop();\n        charsEnd = pop.charsEnd;\n        charsLength = pop.charsLength;\n        sysData.phraseLength = 0;\n        switch(sysData.state){\n            case id.EMPTY:\n            case id.MATCH:\n                sysData.state = id.NOMATCH;\n                break;\n            case id.NOMATCH:\n                sysData.state = id.EMPTY;\n                break;\n            default:\n                throw new Error(`opNOT: invalid state ${sysData.state}`);\n        }\n    };\n    // The `TRG` operator.<br>\n    // Succeeds if the single first character of the phrase is\n    // within the `min - max` range.\n    const opTRG = function(opIndex, phraseIndex, sysData) {\n        const op = opcodes[opIndex];\n        sysData.state = id.NOMATCH;\n        if (phraseIndex < charsEnd) {\n            if (op.min <= chars[phraseIndex] && chars[phraseIndex] <= op.max) {\n                sysData.state = id.MATCH;\n                sysData.phraseLength = 1;\n            }\n        }\n    };\n    // The `TBS` operator.<br>\n    // Matches its pre-defined phrase against the input string.\n    // All characters must match exactly.\n    // Case-sensitive literal strings (`'string'` & `%s\"string\"`) are translated to `TBS`\n    // operators by `apg`.\n    // Phrase length of zero is not allowed.\n    // Empty phrases can only be defined with `TLS` operators.\n    const opTBS = function(opIndex, phraseIndex, sysData) {\n        let i;\n        const op = opcodes[opIndex];\n        const len = op.string.length;\n        sysData.state = id.NOMATCH;\n        if (phraseIndex + len <= charsEnd) {\n            for(i = 0; i < len; i += 1){\n                if (chars[phraseIndex + i] !== op.string[i]) {\n                    return;\n                }\n            }\n            sysData.state = id.MATCH;\n            sysData.phraseLength = len;\n        } /* implied else NOMATCH */ \n    };\n    // The `TLS` operator.<br>\n    // Matches its pre-defined phrase against the input string.\n    // A case-insensitive match is attempted for ASCII alphbetical characters.\n    // `TLS` is the only operator that explicitly allows empty phrases.\n    // `apg` will fail for empty `TBS`, case-sensitive strings (`''`) or\n    // zero repetitions (`0*0RuleName` or `0RuleName`).\n    const opTLS = function(opIndex, phraseIndex, sysData) {\n        let i;\n        let code;\n        const op = opcodes[opIndex];\n        sysData.state = id.NOMATCH;\n        const len = op.string.length;\n        if (len === 0) {\n            /* EMPTY match allowed for TLS */ sysData.state = id.EMPTY;\n            return;\n        }\n        if (phraseIndex + len <= charsEnd) {\n            for(i = 0; i < len; i += 1){\n                code = chars[phraseIndex + i];\n                if (code >= 65 && code <= 90) {\n                    code += 32;\n                }\n                if (code !== op.string[i]) {\n                    return;\n                }\n            }\n            sysData.state = id.MATCH;\n            sysData.phraseLength = len;\n        } /* implied else NOMATCH */ \n    };\n    // The `ABG` operator.<br>\n    // This is an \"anchor\" for the beginning of the string, similar to the familiar regex `^` anchor.\n    // An anchor matches a position rather than a phrase.\n    // Returns EMPTY if `phraseIndex` is 0, NOMATCH otherwise.\n    const opABG = function(opIndex, phraseIndex, sysData) {\n        sysData.state = id.NOMATCH;\n        sysData.phraseLength = 0;\n        sysData.state = phraseIndex === 0 ? id.EMPTY : id.NOMATCH;\n    };\n    // The `AEN` operator.<br>\n    // This is an \"anchor\" for the end of the string, similar to the familiar regex `$` anchor.\n    // An anchor matches a position rather than a phrase.\n    // Returns EMPTY if `phraseIndex` equals the input string length, NOMATCH otherwise.\n    const opAEN = function(opIndex, phraseIndex, sysData) {\n        sysData.state = id.NOMATCH;\n        sysData.phraseLength = 0;\n        sysData.state = phraseIndex === chars.length ? id.EMPTY : id.NOMATCH;\n    };\n    // The `BKR` operator.<br>\n    // The back reference operator.\n    // Matches the last matched phrase of the named rule or UDT against the input string.\n    // For ASCII alphbetical characters the match may be case sensitive (`%s`) or insensitive (`%i`),\n    // depending on the back reference definition.\n    // For `universal` mode (`%u`) matches the last phrase found anywhere in the grammar.\n    // For `parent frame` mode (`%p`) matches the last phrase found in the parent rule only.\n    const opBKR = function(opIndex, phraseIndex, sysData) {\n        let i;\n        let code;\n        let lmcode;\n        let lower;\n        const op = opcodes[opIndex];\n        sysData.state = id.NOMATCH;\n        if (op.index < rules.length) {\n            lower = rules[op.index].lower;\n        } else {\n            lower = udts[op.index - rules.length].lower;\n        }\n        const frame = op.bkrMode === id.BKR_MODE_PM ? sysData.pFrame.getPhrase(lower) : sysData.uFrame.getPhrase(lower);\n        const insensitive = op.bkrCase === id.BKR_MODE_CI;\n        if (frame === null) {\n            return;\n        }\n        const lmIndex = frame.phraseIndex;\n        const len = frame.phraseLength;\n        if (len === 0) {\n            sysData.state = id.EMPTY;\n            return;\n        }\n        if (phraseIndex + len <= charsEnd) {\n            if (insensitive) {\n                /* case-insensitive match */ for(i = 0; i < len; i += 1){\n                    code = chars[phraseIndex + i];\n                    lmcode = chars[lmIndex + i];\n                    if (code >= 65 && code <= 90) {\n                        code += 32;\n                    }\n                    if (lmcode >= 65 && lmcode <= 90) {\n                        lmcode += 32;\n                    }\n                    if (code !== lmcode) {\n                        return;\n                    }\n                }\n                sysData.state = id.MATCH;\n                sysData.phraseLength = len;\n            } else {\n                /* case-sensitive match */ for(i = 0; i < len; i += 1){\n                    code = chars[phraseIndex + i];\n                    lmcode = chars[lmIndex + i];\n                    if (code !== lmcode) {\n                        return;\n                    }\n                }\n            }\n            sysData.state = id.MATCH;\n            sysData.phraseLength = len;\n        }\n    };\n    // The `BKA` operator.<br>\n    // This is the positive `look behind` operator.\n    // It's child node is parsed right-to-left.\n    // Returns the EMPTY state if a match is found, NOMATCH otherwise.\n    // Like the look ahead operators, it always backtracks to `phraseIndex`.\n    const opBKA = function(opIndex, phraseIndex, sysData) {\n        lookAround.push({\n            lookAround: id.LOOKAROUND_BEHIND,\n            anchor: phraseIndex\n        });\n        opExecute(opIndex + 1, phraseIndex, sysData);\n        lookAround.pop();\n        sysData.phraseLength = 0;\n        switch(sysData.state){\n            case id.EMPTY:\n                sysData.state = id.EMPTY;\n                break;\n            case id.MATCH:\n                sysData.state = id.EMPTY;\n                break;\n            case id.NOMATCH:\n                sysData.state = id.NOMATCH;\n                break;\n            default:\n                throw new Error(`opBKA: invalid state ${sysData.state}`);\n        }\n    };\n    // The `BKN` operator.<br>\n    // This is the negative `look behind` operator.\n    // It's child node is parsed right-to-left.\n    // Returns the EMPTY state if a match is *not* found, NOMATCH otherwise.\n    // Like the look ahead operators, it always backtracks to `phraseIndex`.\n    const opBKN = function(opIndex, phraseIndex, sysData) {\n        // let op;\n        // op = opcodes[opIndex];\n        lookAround.push({\n            lookAround: id.LOOKAROUND_BEHIND,\n            anchor: phraseIndex\n        });\n        opExecute(opIndex + 1, phraseIndex, sysData);\n        lookAround.pop();\n        sysData.phraseLength = 0;\n        switch(sysData.state){\n            case id.EMPTY:\n            case id.MATCH:\n                sysData.state = id.NOMATCH;\n                break;\n            case id.NOMATCH:\n                sysData.state = id.EMPTY;\n                break;\n            default:\n                throw new Error(`opBKN: invalid state ${sysData.state}`);\n        }\n    };\n    // The right-to-left `CAT` operator.<br>\n    // Called for `CAT` operators when in look behind mode.\n    // Calls its child nodes from right to left concatenating matched phrases right to left.\n    const opCATBehind = function(opIndex, phraseIndex, sysData) {\n        let success;\n        let astLength;\n        let catCharIndex;\n        let catMatched;\n        const op = opcodes[opIndex];\n        const ulen = sysData.uFrame.length();\n        const plen = sysData.pFrame.length();\n        if (thisThis.ast) {\n            astLength = thisThis.ast.getLength();\n        }\n        success = true;\n        catCharIndex = phraseIndex;\n        catMatched = 0;\n        // catPhrase = 0;\n        for(let i = op.children.length - 1; i >= 0; i -= 1){\n            opExecute(op.children[i], catCharIndex, sysData);\n            catCharIndex -= sysData.phraseLength;\n            catMatched += sysData.phraseLength;\n            // catPhrase += sysData.phraseLength;\n            if (sysData.state === id.NOMATCH) {\n                success = false;\n                break;\n            }\n        }\n        if (success) {\n            sysData.state = catMatched === 0 ? id.EMPTY : id.MATCH;\n            sysData.phraseLength = catMatched;\n        } else {\n            sysData.state = id.NOMATCH;\n            sysData.phraseLength = 0;\n            sysData.uFrame.pop(ulen);\n            sysData.pFrame.pop(plen);\n            if (thisThis.ast) {\n                thisThis.ast.setLength(astLength);\n            }\n        }\n    };\n    // The right-to-left `REP` operator.<br>\n    // Called for `REP` operators in look behind mode.\n    // Makes repeated calls to its child node, concatenating matched phrases right to left.\n    const opREPBehind = function(opIndex, phraseIndex, sysData) {\n        let astLength;\n        let repCharIndex;\n        let repPhrase;\n        let repCount;\n        const op = opcodes[opIndex];\n        repCharIndex = phraseIndex;\n        repPhrase = 0;\n        repCount = 0;\n        const ulen = sysData.uFrame.length();\n        const plen = sysData.pFrame.length();\n        if (thisThis.ast) {\n            astLength = thisThis.ast.getLength();\n        }\n        const TRUE = true;\n        while(TRUE){\n            if (repCharIndex <= 0) {\n                break;\n            }\n            opExecute(opIndex + 1, repCharIndex, sysData);\n            if (sysData.state === id.NOMATCH) {\n                break;\n            }\n            if (sysData.state === id.EMPTY) {\n                break;\n            }\n            repCount += 1;\n            repPhrase += sysData.phraseLength;\n            repCharIndex -= sysData.phraseLength;\n            if (repCount === op.max) {\n                break;\n            }\n        }\n        /* evaluate the match count according to the min, max values */ if (sysData.state === id.EMPTY) {\n            sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n            sysData.phraseLength = repPhrase;\n        } else if (repCount >= op.min) {\n            sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n            sysData.phraseLength = repPhrase;\n        } else {\n            sysData.state = id.NOMATCH;\n            sysData.phraseLength = 0;\n            sysData.uFrame.pop(ulen);\n            sysData.pFrame.pop(plen);\n            if (thisThis.ast) {\n                thisThis.ast.setLength(astLength);\n            }\n        }\n    };\n    // The right-to-left `TRG` operator.<br>\n    // Called for `TRG` operators in look behind mode.\n    // Matches a single character at `phraseIndex - 1` to the `min` - `max` range.\n    const opTRGBehind = function(opIndex, phraseIndex, sysData) {\n        const op = opcodes[opIndex];\n        sysData.state = id.NOMATCH;\n        sysData.phraseLength = 0;\n        if (phraseIndex > 0) {\n            const char = chars[phraseIndex - 1];\n            if (op.min <= char && char <= op.max) {\n                sysData.state = id.MATCH;\n                sysData.phraseLength = 1;\n            }\n        }\n    };\n    // The right-to-left `TBS` operator.<br>\n    // Called for `TBS` operators in look behind mode.\n    // Matches the `TBS` phrase to the left of `phraseIndex`.\n    const opTBSBehind = function(opIndex, phraseIndex, sysData) {\n        let i;\n        const op = opcodes[opIndex];\n        sysData.state = id.NOMATCH;\n        const len = op.string.length;\n        const beg = phraseIndex - len;\n        if (beg >= 0) {\n            for(i = 0; i < len; i += 1){\n                if (chars[beg + i] !== op.string[i]) {\n                    return;\n                }\n            }\n            sysData.state = id.MATCH;\n            sysData.phraseLength = len;\n        }\n    };\n    // The right-to-left `TLS` operator.<br>\n    // Called for `TLS` operators in look behind mode.\n    // Matches the `TLS` phrase to the left of `phraseIndex`.\n    const opTLSBehind = function(opIndex, phraseIndex, sysData) {\n        let char;\n        const op = opcodes[opIndex];\n        sysData.state = id.NOMATCH;\n        const len = op.string.length;\n        if (len === 0) {\n            /* EMPTY match allowed for TLS */ sysData.state = id.EMPTY;\n            return;\n        }\n        const beg = phraseIndex - len;\n        if (beg >= 0) {\n            for(let i = 0; i < len; i += 1){\n                char = chars[beg + i];\n                if (char >= 65 && char <= 90) {\n                    char += 32;\n                }\n                if (char !== op.string[i]) {\n                    return;\n                }\n            }\n            sysData.state = id.MATCH;\n            sysData.phraseLength = len;\n        }\n    };\n    // The right-to-left back reference operator.<br>\n    // Matches the back referenced phrase to the left of `phraseIndex`.\n    const opBKRBehind = function(opIndex, phraseIndex, sysData) {\n        let i;\n        let code;\n        let lmcode;\n        let lower;\n        const op = opcodes[opIndex];\n        /* NOMATCH default */ sysData.state = id.NOMATCH;\n        sysData.phraseLength = 0;\n        if (op.index < rules.length) {\n            lower = rules[op.index].lower;\n        } else {\n            lower = udts[op.index - rules.length].lower;\n        }\n        const frame = op.bkrMode === id.BKR_MODE_PM ? sysData.pFrame.getPhrase(lower) : sysData.uFrame.getPhrase(lower);\n        const insensitive = op.bkrCase === id.BKR_MODE_CI;\n        if (frame === null) {\n            return;\n        }\n        const lmIndex = frame.phraseIndex;\n        const len = frame.phraseLength;\n        if (len === 0) {\n            sysData.state = id.EMPTY;\n            sysData.phraseLength = 0;\n            return;\n        }\n        const beg = phraseIndex - len;\n        if (beg >= 0) {\n            if (insensitive) {\n                /* case-insensitive match */ for(i = 0; i < len; i += 1){\n                    code = chars[beg + i];\n                    lmcode = chars[lmIndex + i];\n                    if (code >= 65 && code <= 90) {\n                        code += 32;\n                    }\n                    if (lmcode >= 65 && lmcode <= 90) {\n                        lmcode += 32;\n                    }\n                    if (code !== lmcode) {\n                        return;\n                    }\n                }\n                sysData.state = id.MATCH;\n                sysData.phraseLength = len;\n            } else {\n                /* case-sensitive match */ for(i = 0; i < len; i += 1){\n                    code = chars[beg + i];\n                    lmcode = chars[lmIndex + i];\n                    if (code !== lmcode) {\n                        return;\n                    }\n                }\n            }\n            sysData.state = id.MATCH;\n            sysData.phraseLength = len;\n        }\n    };\n    // Generalized execution function.<br>\n    // Having a single, generalized function, allows a single location\n    // for tracing and statistics gathering functions to be called.\n    // Tracing and statistics are handled in separate objects.\n    // However, the parser calls their API to build the object data records.\n    // See [`trace.js`](./trace.html) and [`stats.js`](./stats.html) for their\n    // usage.\n    opExecute = function opExecuteFunc(opIndex, phraseIndex, sysData) {\n        let ret = true;\n        const op = opcodes[opIndex];\n        nodeHits += 1;\n        if (nodeHits > limitNodeHits) {\n            throw new Error(`parser: maximum number of node hits exceeded: ${limitNodeHits}`);\n        }\n        treeDepth += 1;\n        if (treeDepth > maxTreeDepth) {\n            maxTreeDepth = treeDepth;\n            if (maxTreeDepth > limitTreeDepth) {\n                throw new Error(`parser: maximum parse tree depth exceeded: ${limitTreeDepth}`);\n            }\n        }\n        sysData.refresh();\n        if (thisThis.trace !== null) {\n            /* collect the trace record for down the parse tree */ const lk = lookAroundValue();\n            thisThis.trace.down(op, sysData.state, phraseIndex, sysData.phraseLength, lk.anchor, lk.lookAround);\n        }\n        if (inLookBehind()) {\n            switch(op.type){\n                case id.ALT:\n                    opALT(opIndex, phraseIndex, sysData);\n                    break;\n                case id.CAT:\n                    opCATBehind(opIndex, phraseIndex, sysData);\n                    break;\n                case id.REP:\n                    opREPBehind(opIndex, phraseIndex, sysData);\n                    break;\n                case id.RNM:\n                    opRNM(opIndex, phraseIndex, sysData);\n                    break;\n                case id.UDT:\n                    opUDT(opIndex, phraseIndex, sysData);\n                    break;\n                case id.AND:\n                    opAND(opIndex, phraseIndex, sysData);\n                    break;\n                case id.NOT:\n                    opNOT(opIndex, phraseIndex, sysData);\n                    break;\n                case id.TRG:\n                    opTRGBehind(opIndex, phraseIndex, sysData);\n                    break;\n                case id.TBS:\n                    opTBSBehind(opIndex, phraseIndex, sysData);\n                    break;\n                case id.TLS:\n                    opTLSBehind(opIndex, phraseIndex, sysData);\n                    break;\n                case id.BKR:\n                    opBKRBehind(opIndex, phraseIndex, sysData);\n                    break;\n                case id.BKA:\n                    opBKA(opIndex, phraseIndex, sysData);\n                    break;\n                case id.BKN:\n                    opBKN(opIndex, phraseIndex, sysData);\n                    break;\n                case id.ABG:\n                    opABG(opIndex, phraseIndex, sysData);\n                    break;\n                case id.AEN:\n                    opAEN(opIndex, phraseIndex, sysData);\n                    break;\n                default:\n                    ret = false;\n                    break;\n            }\n        } else {\n            switch(op.type){\n                case id.ALT:\n                    opALT(opIndex, phraseIndex, sysData);\n                    break;\n                case id.CAT:\n                    opCAT(opIndex, phraseIndex, sysData);\n                    break;\n                case id.REP:\n                    opREP(opIndex, phraseIndex, sysData);\n                    break;\n                case id.RNM:\n                    opRNM(opIndex, phraseIndex, sysData);\n                    break;\n                case id.UDT:\n                    opUDT(opIndex, phraseIndex, sysData);\n                    break;\n                case id.AND:\n                    opAND(opIndex, phraseIndex, sysData);\n                    break;\n                case id.NOT:\n                    opNOT(opIndex, phraseIndex, sysData);\n                    break;\n                case id.TRG:\n                    opTRG(opIndex, phraseIndex, sysData);\n                    break;\n                case id.TBS:\n                    opTBS(opIndex, phraseIndex, sysData);\n                    break;\n                case id.TLS:\n                    opTLS(opIndex, phraseIndex, sysData);\n                    break;\n                case id.BKR:\n                    opBKR(opIndex, phraseIndex, sysData);\n                    break;\n                case id.BKA:\n                    opBKA(opIndex, phraseIndex, sysData);\n                    break;\n                case id.BKN:\n                    opBKN(opIndex, phraseIndex, sysData);\n                    break;\n                case id.ABG:\n                    opABG(opIndex, phraseIndex, sysData);\n                    break;\n                case id.AEN:\n                    opAEN(opIndex, phraseIndex, sysData);\n                    break;\n                default:\n                    ret = false;\n                    break;\n            }\n        }\n        if (!inLookAround() && phraseIndex + sysData.phraseLength > maxMatched) {\n            maxMatched = phraseIndex + sysData.phraseLength;\n        }\n        if (thisThis.stats !== null) {\n            /* collect the statistics */ thisThis.stats.collect(op, sysData);\n        }\n        if (thisThis.trace !== null) {\n            /* collect the trace record for up the parse tree */ const lk = lookAroundValue();\n            thisThis.trace.up(op, sysData.state, phraseIndex, sysData.phraseLength, lk.anchor, lk.lookAround);\n        }\n        treeDepth -= 1;\n        return ret;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-lib/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-lib/stats.js":
/*!**************************************************!*\
  !*** ./node_modules/apg-js/src/apg-lib/stats.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module is the constructor for the statistics gathering object.\n// The statistics are nothing more than keeping a count of the\n// number of times each node in the parse tree is traversed.\n//\n// Counts are collected for each of the individual types of operators.\n// Additionally, counts are collected for each of the individually named\n// `RNM` and `UDT` operators.\n\nmodule.exports = function statsFunc() {\n    const id = __webpack_require__(/*! ./identifiers */ \"(rsc)/./node_modules/apg-js/src/apg-lib/identifiers.js\");\n    const utils = __webpack_require__(/*! ./utilities */ \"(rsc)/./node_modules/apg-js/src/apg-lib/utilities.js\");\n    const style = __webpack_require__(/*! ./style */ \"(rsc)/./node_modules/apg-js/src/apg-lib/style.js\");\n    const thisFileName = \"stats.js: \";\n    let rules = [];\n    let udts = [];\n    const stats = [];\n    let totals;\n    const ruleStats = [];\n    const udtStats = [];\n    this.statsObject = \"statsObject\";\n    const nameId = \"stats\";\n    /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators alphabetically by name. */ const sortAlpha = function sortAlpha(lhs, rhs) {\n        if (lhs.lower < rhs.lower) {\n            return -1;\n        }\n        if (lhs.lower > rhs.lower) {\n            return 1;\n        }\n        return 0;\n    };\n    /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators by hit count. */ const sortHits = function sortHits(lhs, rhs) {\n        if (lhs.total < rhs.total) {\n            return 1;\n        }\n        if (lhs.total > rhs.total) {\n            return -1;\n        }\n        return sortAlpha(lhs, rhs);\n    };\n    /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators by index */ /* (in the order in which they appear in the SABNF grammar). */ const sortIndex = function sortIndex(lhs, rhs) {\n        if (lhs.index < rhs.index) {\n            return -1;\n        }\n        if (lhs.index > rhs.index) {\n            return 1;\n        }\n        return 0;\n    };\n    const EmptyStat = function EmptyStat() {\n        this.empty = 0;\n        this.match = 0;\n        this.nomatch = 0;\n        this.total = 0;\n    };\n    /* Zero out all stats */ const clear = function clear() {\n        stats.length = 0;\n        totals = new EmptyStat();\n        stats[id.ALT] = new EmptyStat();\n        stats[id.CAT] = new EmptyStat();\n        stats[id.REP] = new EmptyStat();\n        stats[id.RNM] = new EmptyStat();\n        stats[id.TRG] = new EmptyStat();\n        stats[id.TBS] = new EmptyStat();\n        stats[id.TLS] = new EmptyStat();\n        stats[id.UDT] = new EmptyStat();\n        stats[id.AND] = new EmptyStat();\n        stats[id.NOT] = new EmptyStat();\n        stats[id.BKR] = new EmptyStat();\n        stats[id.BKA] = new EmptyStat();\n        stats[id.BKN] = new EmptyStat();\n        stats[id.ABG] = new EmptyStat();\n        stats[id.AEN] = new EmptyStat();\n        ruleStats.length = 0;\n        for(let i = 0; i < rules.length; i += 1){\n            ruleStats.push({\n                empty: 0,\n                match: 0,\n                nomatch: 0,\n                total: 0,\n                name: rules[i].name,\n                lower: rules[i].lower,\n                index: rules[i].index\n            });\n        }\n        if (udts.length > 0) {\n            udtStats.length = 0;\n            for(let i = 0; i < udts.length; i += 1){\n                udtStats.push({\n                    empty: 0,\n                    match: 0,\n                    nomatch: 0,\n                    total: 0,\n                    name: udts[i].name,\n                    lower: udts[i].lower,\n                    index: udts[i].index\n                });\n            }\n        }\n    };\n    /* increment the designated operator hit count by one */ const incStat = function incStat(stat, state) {\n        stat.total += 1;\n        switch(state){\n            case id.EMPTY:\n                stat.empty += 1;\n                break;\n            case id.MATCH:\n                stat.match += 1;\n                break;\n            case id.NOMATCH:\n                stat.nomatch += 1;\n                break;\n            default:\n                throw new Error(`${thisFileName}collect(): incStat(): unrecognized state: ${state}`);\n        }\n    };\n    /* helper for toHtml() */ const displayRow = function displayRow(name, stat) {\n        let html = \"\";\n        html += \"<tr>\";\n        html += `<td class=\"${style.CLASS_ACTIVE}\">${name}</td>`;\n        html += `<td class=\"${style.CLASS_EMPTY}\">${stat.empty}</td>`;\n        html += `<td class=\"${style.CLASS_MATCH}\">${stat.match}</td>`;\n        html += `<td class=\"${style.CLASS_NOMATCH}\">${stat.nomatch}</td>`;\n        html += `<td class=\"${style.CLASS_ACTIVE}\">${stat.total}</td>`;\n        html += \"</tr>\\n\";\n        return html;\n    };\n    const displayOpsOnly = function displayOpsOnly() {\n        let html = \"\";\n        html += displayRow(\"ALT\", stats[id.ALT]);\n        html += displayRow(\"CAT\", stats[id.CAT]);\n        html += displayRow(\"REP\", stats[id.REP]);\n        html += displayRow(\"RNM\", stats[id.RNM]);\n        html += displayRow(\"TRG\", stats[id.TRG]);\n        html += displayRow(\"TBS\", stats[id.TBS]);\n        html += displayRow(\"TLS\", stats[id.TLS]);\n        html += displayRow(\"UDT\", stats[id.UDT]);\n        html += displayRow(\"AND\", stats[id.AND]);\n        html += displayRow(\"NOT\", stats[id.NOT]);\n        html += displayRow(\"BKR\", stats[id.BKR]);\n        html += displayRow(\"BKA\", stats[id.BKA]);\n        html += displayRow(\"BKN\", stats[id.BKN]);\n        html += displayRow(\"ABG\", stats[id.ABG]);\n        html += displayRow(\"AEN\", stats[id.AEN]);\n        html += displayRow(\"totals\", totals);\n        return html;\n    };\n    /* helper for toHtml() */ const displayRules = function displayRules() {\n        let html = \"\";\n        html += \"<tr><th></th><th></th><th></th><th></th><th></th></tr>\\n\";\n        html += \"<tr><th>rules</th><th></th><th></th><th></th><th></th></tr>\\n\";\n        for(let i = 0; i < rules.length; i += 1){\n            if (ruleStats[i].total > 0) {\n                html += \"<tr>\";\n                html += `<td class=\"${style.CLASS_ACTIVE}\">${ruleStats[i].name}</td>`;\n                html += `<td class=\"${style.CLASS_EMPTY}\">${ruleStats[i].empty}</td>`;\n                html += `<td class=\"${style.CLASS_MATCH}\">${ruleStats[i].match}</td>`;\n                html += `<td class=\"${style.CLASS_NOMATCH}\">${ruleStats[i].nomatch}</td>`;\n                html += `<td class=\"${style.CLASS_ACTIVE}\">${ruleStats[i].total}</td>`;\n                html += \"</tr>\\n\";\n            }\n        }\n        if (udts.length > 0) {\n            html += \"<tr><th></th><th></th><th></th><th></th><th></th></tr>\\n\";\n            html += \"<tr><th>udts</th><th></th><th></th><th></th><th></th></tr>\\n\";\n            for(let i = 0; i < udts.length; i += 1){\n                if (udtStats[i].total > 0) {\n                    html += \"<tr>\";\n                    html += `<td class=\"${style.CLASS_ACTIVE}\">${udtStats[i].name}</td>`;\n                    html += `<td class=\"${style.CLASS_EMPTY}\">${udtStats[i].empty}</td>`;\n                    html += `<td class=\"${style.CLASS_MATCH}\">${udtStats[i].match}</td>`;\n                    html += `<td class=\"${style.CLASS_NOMATCH}\">${udtStats[i].nomatch}</td>`;\n                    html += `<td class=\"${style.CLASS_ACTIVE}\">${udtStats[i].total}</td>`;\n                    html += \"</tr>\\n\";\n                }\n            }\n        }\n        return html;\n    };\n    /* called only by the parser to validate a stats object */ this.validate = function validate(name) {\n        let ret = false;\n        if (typeof name === \"string\" && nameId === name) {\n            ret = true;\n        }\n        return ret;\n    };\n    /* no verification of input - only called by parser() */ this.init = function init(inputRules, inputUdts) {\n        rules = inputRules;\n        udts = inputUdts;\n        clear();\n    };\n    /* This function is the main interaction with the parser. */ /* The parser calls it after each node has been traversed. */ this.collect = function collect(op, result) {\n        incStat(totals, result.state, result.phraseLength);\n        incStat(stats[op.type], result.state, result.phraseLength);\n        if (op.type === id.RNM) {\n            incStat(ruleStats[op.index], result.state, result.phraseLength);\n        }\n        if (op.type === id.UDT) {\n            incStat(udtStats[op.index], result.state, result.phraseLength);\n        }\n    };\n    // Display the statistics as an HTML table.\n    // - *type*\n    //   - \"ops\" - (default) display only the total hit counts for all operator types.\n    //   - \"index\" - additionally, display the hit counts for the individual `RNM` and `UDT` operators ordered by index.\n    //   - \"hits\" - additionally, display the hit counts for the individual `RNM` and `UDT` operators by hit count.\n    //   - \"alpha\" - additionally, display the hit counts for the individual `RNM` and `UDT` operators by name alphabetically.\n    // - *caption* - optional caption for the table\n    this.toHtml = function toHtml(type, caption) {\n        let html = \"\";\n        html += `<table class=\"${style.CLASS_STATS}\">\\n`;\n        if (typeof caption === \"string\") {\n            html += `<caption>${caption}</caption>\\n`;\n        }\n        html += `<tr><th class=\"${style.CLASS_ACTIVE}\">ops</th>\\n`;\n        html += `<th class=\"${style.CLASS_EMPTY}\">EMPTY</th>\\n`;\n        html += `<th class=\"${style.CLASS_MATCH}\">MATCH</th>\\n`;\n        html += `<th class=\"${style.CLASS_NOMATCH}\">NOMATCH</th>\\n`;\n        html += `<th class=\"${style.CLASS_ACTIVE}\">totals</th></tr>\\n`;\n        const test = true;\n        while(test){\n            if (type === undefined) {\n                html += displayOpsOnly();\n                break;\n            }\n            if (type === null) {\n                html += displayOpsOnly();\n                break;\n            }\n            if (type === \"ops\") {\n                html += displayOpsOnly();\n                break;\n            }\n            if (type === \"index\") {\n                ruleStats.sort(sortIndex);\n                if (udtStats.length > 0) {\n                    udtStats.sort(sortIndex);\n                }\n                html += displayOpsOnly();\n                html += displayRules();\n                break;\n            }\n            if (type === \"hits\") {\n                ruleStats.sort(sortHits);\n                if (udtStats.length > 0) {\n                    udtStats.sort(sortIndex);\n                }\n                html += displayOpsOnly();\n                html += displayRules();\n                break;\n            }\n            if (type === \"alpha\") {\n                ruleStats.sort(sortAlpha);\n                if (udtStats.length > 0) {\n                    udtStats.sort(sortAlpha);\n                }\n                html += displayOpsOnly();\n                html += displayRules();\n                break;\n            }\n            break;\n        }\n        html += \"</table>\\n\";\n        return html;\n    };\n    // Display the stats table in a complete HTML5 page.\n    this.toHtmlPage = function toHtmlPage(type, caption, title) {\n        return utils.htmlToPage(this.toHtml(type, caption), title);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-lib/stats.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-lib/style.js":
/*!**************************************************!*\
  !*** ./node_modules/apg-js/src/apg-lib/style.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {\n    // Generated by apglib/style.js \n    CLASS_MONOSPACE: \"apg-mono\",\n    CLASS_ACTIVE: \"apg-active\",\n    CLASS_EMPTY: \"apg-empty\",\n    CLASS_MATCH: \"apg-match\",\n    CLASS_NOMATCH: \"apg-nomatch\",\n    CLASS_LOOKAHEAD: \"apg-lh-match\",\n    CLASS_LOOKBEHIND: \"apg-lb-match\",\n    CLASS_REMAINDER: \"apg-remainder\",\n    CLASS_CTRLCHAR: \"apg-ctrl-char\",\n    CLASS_LINEEND: \"apg-line-end\",\n    CLASS_ERROR: \"apg-error\",\n    CLASS_PHRASE: \"apg-phrase\",\n    CLASS_EMPTYPHRASE: \"apg-empty-phrase\",\n    CLASS_STATE: \"apg-state\",\n    CLASS_STATS: \"apg-stats\",\n    CLASS_TRACE: \"apg-trace\",\n    CLASS_GRAMMAR: \"apg-grammar\",\n    CLASS_RULES: \"apg-rules\",\n    CLASS_RULESLINK: \"apg-rules-link\",\n    CLASS_ATTRIBUTES: \"apg-attrs\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctbGliL3N0eWxlLmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsT0FBT0MsT0FBTyxHQUFHO0lBRWYsZ0NBQWdDO0lBQ2hDQyxpQkFBaUI7SUFDakJDLGNBQWM7SUFDZEMsYUFBYTtJQUNiQyxhQUFhO0lBQ2JDLGVBQWU7SUFDZkMsaUJBQWlCO0lBQ2pCQyxrQkFBa0I7SUFDbEJDLGlCQUFpQjtJQUNqQkMsZ0JBQWdCO0lBQ2hCQyxlQUFlO0lBQ2ZDLGFBQWE7SUFDYkMsY0FBYztJQUNkQyxtQkFBbUI7SUFDbkJDLGFBQWE7SUFDYkMsYUFBYTtJQUNiQyxhQUFhO0lBQ2JDLGVBQWU7SUFDZkMsYUFBYTtJQUNiQyxpQkFBaUI7SUFDakJDLGtCQUFrQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50Y3JpYi8uL25vZGVfbW9kdWxlcy9hcGctanMvc3JjL2FwZy1saWIvc3R5bGUuanM/MjE2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcblxuICAvLyBHZW5lcmF0ZWQgYnkgYXBnbGliL3N0eWxlLmpzIFxuICBDTEFTU19NT05PU1BBQ0U6ICdhcGctbW9ubycsXG4gIENMQVNTX0FDVElWRTogJ2FwZy1hY3RpdmUnLFxuICBDTEFTU19FTVBUWTogJ2FwZy1lbXB0eScsXG4gIENMQVNTX01BVENIOiAnYXBnLW1hdGNoJyxcbiAgQ0xBU1NfTk9NQVRDSDogJ2FwZy1ub21hdGNoJyxcbiAgQ0xBU1NfTE9PS0FIRUFEOiAnYXBnLWxoLW1hdGNoJyxcbiAgQ0xBU1NfTE9PS0JFSElORDogJ2FwZy1sYi1tYXRjaCcsXG4gIENMQVNTX1JFTUFJTkRFUjogJ2FwZy1yZW1haW5kZXInLFxuICBDTEFTU19DVFJMQ0hBUjogJ2FwZy1jdHJsLWNoYXInLFxuICBDTEFTU19MSU5FRU5EOiAnYXBnLWxpbmUtZW5kJyxcbiAgQ0xBU1NfRVJST1I6ICdhcGctZXJyb3InLFxuICBDTEFTU19QSFJBU0U6ICdhcGctcGhyYXNlJyxcbiAgQ0xBU1NfRU1QVFlQSFJBU0U6ICdhcGctZW1wdHktcGhyYXNlJyxcbiAgQ0xBU1NfU1RBVEU6ICdhcGctc3RhdGUnLFxuICBDTEFTU19TVEFUUzogJ2FwZy1zdGF0cycsXG4gIENMQVNTX1RSQUNFOiAnYXBnLXRyYWNlJyxcbiAgQ0xBU1NfR1JBTU1BUjogJ2FwZy1ncmFtbWFyJyxcbiAgQ0xBU1NfUlVMRVM6ICdhcGctcnVsZXMnLFxuICBDTEFTU19SVUxFU0xJTks6ICdhcGctcnVsZXMtbGluaycsXG4gIENMQVNTX0FUVFJJQlVURVM6ICdhcGctYXR0cnMnLFxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJDTEFTU19NT05PU1BBQ0UiLCJDTEFTU19BQ1RJVkUiLCJDTEFTU19FTVBUWSIsIkNMQVNTX01BVENIIiwiQ0xBU1NfTk9NQVRDSCIsIkNMQVNTX0xPT0tBSEVBRCIsIkNMQVNTX0xPT0tCRUhJTkQiLCJDTEFTU19SRU1BSU5ERVIiLCJDTEFTU19DVFJMQ0hBUiIsIkNMQVNTX0xJTkVFTkQiLCJDTEFTU19FUlJPUiIsIkNMQVNTX1BIUkFTRSIsIkNMQVNTX0VNUFRZUEhSQVNFIiwiQ0xBU1NfU1RBVEUiLCJDTEFTU19TVEFUUyIsIkNMQVNTX1RSQUNFIiwiQ0xBU1NfR1JBTU1BUiIsIkNMQVNTX1JVTEVTIiwiQ0xBU1NfUlVMRVNMSU5LIiwiQ0xBU1NfQVRUUklCVVRFUyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-lib/style.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-lib/trace.js":
/*!**************************************************!*\
  !*** ./node_modules/apg-js/src/apg-lib/trace.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* eslint-disable func-names */ /* eslint-disable prefer-destructuring */ /* eslint-disable no-restricted-syntax */ /* eslint-disable guard-for-in */ /*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module provides a means of tracing the parser through the parse tree as it goes.\n// It is the primary debugging facility for debugging both the SABNF grammar syntax\n// and the input strings that are supposed to be valid grammar sentences.\n// It is also a very informative and educational tool for understanding\n// how a parser actually operates for a given language.\n//\n// Tracing is the process of generating and saving a record of information for each passage\n// of the parser through a parse tree node. And since it traverses each node twice, once down the tree\n// and once coming back up, there are two records for each node.\n// This, obviously, has the potential of generating lots of records.\n// And since these records are normally displayed on a web page\n// it is important to have a means to limit the actual number of records generated to\n// probably no more that a few thousand. This is almost always enough to find any errors.\n// The problem is to get the *right* few thousand records.\n// Therefore, this module has a number of ways of limiting and/or filtering, the number and type of records.\n// Considerable effort has been made to make this filtering of the trace output as simple\n// and intuitive as possible.\n//\n// However, the ability to filter the trace records, or for that matter even understand what they are\n// and the information they contain, does require a minimum amount of understanding of the APG parsing\n// method. The parse tree nodes are all represented by APG operators. They break down into two natural groups.\n// - The `RNM` operators and `UDT` operators are named phrases.\n// These are names chosen by the writer of the SABNF grammar to represent special phrases of interest.\n// - All others collect, concatenate and otherwise manipulate various intermediate phrases along the way.\n//\n// There are separate means of filtering which of these operators in each of these two groups get traced.\n// Let `trace` be an instantiated `trace.js` object.\n// Prior to parsing the string, filtering the rules and UDTs can be defined as follows:\n// ```\n// trace.filter.rules[\"rulename\"] = true;\n//     /* trace rule name \"rulename\" */\n// trace.filter.rules[\"udtname\"]  = true;\n//     /* trace UDT name \"udtname\" */\n// trace.filter.rules[\"<ALL>\"]    = true;\n//     /* trace all rules and UDTs (the default) */\n// trace.filter.rules[\"<NONE>\"]   = true;\n//     /* trace no rules or UDTS */\n// ```\n// If any rule or UDT name other than \"&lt;ALL>\" or \"&lt;NONE>\" is specified, all other names are turned off.\n// Therefore, to be selective of rule names, a filter statement is required for each rule/UDT name desired.\n//\n// Filtering of the other operators follows a similar procedure.\n// ```\n// trace.filter.operators[\"TRG\"] = true;\n//     /* trace the terminal range, TRG, operators */\n// trace.filter.operators[\"CAT\"]  = true;\n//     /* trace the concatenations, CAT, operators */\n// trace.filter.operators[\"<ALL>\"]    = true;\n//     /* trace all operators */\n// trace.filter.operators[\"<NONE>\"]   = true;\n//     /* trace no operators (the default) */\n// ```\n// If any operator name other than \"&lt;ALL>\" or \"&lt;NONE>\" is specified, all other names are turned off.\n// Therefore, to be selective of operator names, a filter statement is required for each name desired.\n//\n// There is, additionally, a means for limiting the total number of filtered or saved trace records.\n// See the function, `setMaxRecords(max)` below. This will result in only the last `max` records being saved.\n//\n// (See [`apg-examples`](https://github.com/ldthomas/apg-js-examples) for examples of using `trace.js`.)\n\nmodule.exports = function exportTrace() {\n    const utils = __webpack_require__(/*! ./utilities */ \"(rsc)/./node_modules/apg-js/src/apg-lib/utilities.js\");\n    const style = __webpack_require__(/*! ./style */ \"(rsc)/./node_modules/apg-js/src/apg-lib/style.js\");\n    const circular = new (__webpack_require__(/*! ./circular-buffer */ \"(rsc)/./node_modules/apg-js/src/apg-lib/circular-buffer.js\"))();\n    const id = __webpack_require__(/*! ./identifiers */ \"(rsc)/./node_modules/apg-js/src/apg-lib/identifiers.js\");\n    const thisFileName = \"trace.js: \";\n    const that = this;\n    const MODE_HEX = 16;\n    const MODE_DEC = 10;\n    const MODE_ASCII = 8;\n    const MODE_UNICODE = 32;\n    const MAX_PHRASE = 80;\n    const MAX_TLS = 5;\n    const records = [];\n    let maxRecords = 5000;\n    let lastRecord = -1;\n    let filteredRecords = 0;\n    let treeDepth = 0;\n    const recordStack = [];\n    let chars = null;\n    let rules = null;\n    let udts = null;\n    const operatorFilter = [];\n    const ruleFilter = [];\n    /* special trace table phrases */ const PHRASE_END = `<span class=\"${style.CLASS_LINEEND}\">&bull;</span>`;\n    const PHRASE_CONTINUE = `<span class=\"${style.CLASS_LINEEND}\">&hellip;</span>`;\n    const PHRASE_EMPTY = `<span class=\"${style.CLASS_EMPTY}\">&#120634;</span>`;\n    /* filter the non-RNM & non-UDT operators */ const initOperatorFilter = function() {\n        const setOperators = function(set) {\n            operatorFilter[id.ALT] = set;\n            operatorFilter[id.CAT] = set;\n            operatorFilter[id.REP] = set;\n            operatorFilter[id.TLS] = set;\n            operatorFilter[id.TBS] = set;\n            operatorFilter[id.TRG] = set;\n            operatorFilter[id.AND] = set;\n            operatorFilter[id.NOT] = set;\n            operatorFilter[id.BKR] = set;\n            operatorFilter[id.BKA] = set;\n            operatorFilter[id.BKN] = set;\n            operatorFilter[id.ABG] = set;\n            operatorFilter[id.AEN] = set;\n        };\n        let items = 0;\n        // eslint-disable-next-line no-unused-vars\n        for(const name in that.filter.operators){\n            items += 1;\n        }\n        if (items === 0) {\n            /* case 1: no operators specified: default: do not trace any operators */ setOperators(false);\n            return;\n        }\n        for(const name in that.filter.operators){\n            const upper = name.toUpperCase();\n            if (upper === \"<ALL>\") {\n                /* case 2: <all> operators specified: trace all operators ignore all other operator commands */ setOperators(true);\n                return;\n            }\n            if (upper === \"<NONE>\") {\n                /* case 3: <none> operators specified: trace NO operators ignore all other operator commands */ setOperators(false);\n                return;\n            }\n        }\n        setOperators(false);\n        for(const name in that.filter.operators){\n            const upper = name.toUpperCase();\n            /* case 4: one or more individual operators specified: trace 'true' operators only */ if (upper === \"ALT\") {\n                operatorFilter[id.ALT] = that.filter.operators[name] === true;\n            } else if (upper === \"CAT\") {\n                operatorFilter[id.CAT] = that.filter.operators[name] === true;\n            } else if (upper === \"REP\") {\n                operatorFilter[id.REP] = that.filter.operators[name] === true;\n            } else if (upper === \"AND\") {\n                operatorFilter[id.AND] = that.filter.operators[name] === true;\n            } else if (upper === \"NOT\") {\n                operatorFilter[id.NOT] = that.filter.operators[name] === true;\n            } else if (upper === \"TLS\") {\n                operatorFilter[id.TLS] = that.filter.operators[name] === true;\n            } else if (upper === \"TBS\") {\n                operatorFilter[id.TBS] = that.filter.operators[name] === true;\n            } else if (upper === \"TRG\") {\n                operatorFilter[id.TRG] = that.filter.operators[name] === true;\n            } else if (upper === \"BKR\") {\n                operatorFilter[id.BKR] = that.filter.operators[name] === true;\n            } else if (upper === \"BKA\") {\n                operatorFilter[id.BKA] = that.filter.operators[name] === true;\n            } else if (upper === \"BKN\") {\n                operatorFilter[id.BKN] = that.filter.operators[name] === true;\n            } else if (upper === \"ABG\") {\n                operatorFilter[id.ABG] = that.filter.operators[name] === true;\n            } else if (upper === \"AEN\") {\n                operatorFilter[id.AEN] = that.filter.operators[name] === true;\n            } else {\n                throw new Error(`${thisFileName}initOpratorFilter: '${name}' not a valid operator name.` + ` Must be <all>, <none>, alt, cat, rep, tls, tbs, trg, and, not, bkr, bka or bkn`);\n            }\n        }\n    };\n    /* filter the rule and `UDT` named operators */ const initRuleFilter = function() {\n        const setRules = function(set) {\n            operatorFilter[id.RNM] = set;\n            operatorFilter[id.UDT] = set;\n            const count = rules.length + udts.length;\n            ruleFilter.length = 0;\n            for(let i = 0; i < count; i += 1){\n                ruleFilter.push(set);\n            }\n        };\n        let items;\n        let i;\n        const list = [];\n        for(i = 0; i < rules.length; i += 1){\n            list.push(rules[i].lower);\n        }\n        for(i = 0; i < udts.length; i += 1){\n            list.push(udts[i].lower);\n        }\n        ruleFilter.length = 0;\n        items = 0;\n        // eslint-disable-next-line no-unused-vars\n        for(const name in that.filter.rules){\n            items += 1;\n        }\n        if (items === 0) {\n            /* case 1: default to all rules & udts */ setRules(true);\n            return;\n        }\n        for(const name in that.filter.rules){\n            const lower = name.toLowerCase();\n            if (lower === \"<all>\") {\n                /* case 2: trace all rules ignore all other rule commands */ setRules(true);\n                return;\n            }\n            if (lower === \"<none>\") {\n                /* case 3: trace no rules */ setRules(false);\n                return;\n            }\n        }\n        /* case 4: trace only individually specified rules */ setRules(false);\n        operatorFilter[id.RNM] = true;\n        operatorFilter[id.UDT] = true;\n        for(const name in that.filter.rules){\n            const lower = name.toLowerCase();\n            i = list.indexOf(lower);\n            if (i < 0) {\n                throw new Error(`${thisFileName}initRuleFilter: '${name}' not a valid rule or udt name`);\n            }\n            ruleFilter[i] = that.filter.rules[name] === true;\n        }\n    };\n    /* used by other APG components to verify that they have a valid trace object */ this.traceObject = \"traceObject\";\n    this.filter = {\n        operators: [],\n        rules: []\n    };\n    // Set the maximum number of records to keep (default = 5000).\n    // Each record number larger than `maxRecords`\n    // will result in deleting the previously oldest record.\n    // - `max`: maximum number of records to retain (default = 5000)\n    // - `last`: last record number to retain, (default = -1 for (unknown) actual last record)\n    this.setMaxRecords = function(max, last) {\n        lastRecord = -1;\n        if (typeof max === \"number\" && max > 0) {\n            maxRecords = Math.ceil(max);\n        } else {\n            maxRecords = 0;\n            return;\n        }\n        if (typeof last === \"number\") {\n            lastRecord = Math.floor(last);\n            if (lastRecord < 0) {\n                lastRecord = -1;\n            }\n        }\n    };\n    // Returns `maxRecords` to the caller.\n    this.getMaxRecords = function() {\n        return maxRecords;\n    };\n    // Returns `lastRecord` to the caller.\n    this.getLastRecord = function() {\n        return lastRecord;\n    };\n    /* Called only by the `parser.js` object. No verification of input. */ this.init = function(rulesIn, udtsIn, charsIn) {\n        records.length = 0;\n        recordStack.length = 0;\n        filteredRecords = 0;\n        treeDepth = 0;\n        chars = charsIn;\n        rules = rulesIn;\n        udts = udtsIn;\n        initOperatorFilter();\n        initRuleFilter();\n        circular.init(maxRecords);\n    };\n    /* returns true if this records passes through the designated filter, false if the record is to be skipped */ const filterOps = function(op) {\n        let ret = false;\n        if (op.type === id.RNM) {\n            if (operatorFilter[op.type] && ruleFilter[op.index]) {\n                ret = true;\n            } else {\n                ret = false;\n            }\n        } else if (op.type === id.UDT) {\n            if (operatorFilter[op.type] && ruleFilter[rules.length + op.index]) {\n                ret = true;\n            } else {\n                ret = false;\n            }\n        } else {\n            ret = operatorFilter[op.type];\n        }\n        return ret;\n    };\n    const filterRecords = function(record) {\n        if (lastRecord === -1) {\n            return true;\n        }\n        if (record <= lastRecord) {\n            return true;\n        }\n        return false;\n    };\n    /* Collect the \"down\" record. */ this.down = function(op, state, offset, length, anchor, lookAround) {\n        if (filterRecords(filteredRecords) && filterOps(op)) {\n            recordStack.push(filteredRecords);\n            records[circular.increment()] = {\n                dirUp: false,\n                depth: treeDepth,\n                thisLine: filteredRecords,\n                thatLine: undefined,\n                opcode: op,\n                state,\n                phraseIndex: offset,\n                phraseLength: length,\n                lookAnchor: anchor,\n                lookAround\n            };\n            filteredRecords += 1;\n            treeDepth += 1;\n        }\n    };\n    /* Collect the \"up\" record. */ this.up = function(op, state, offset, length, anchor, lookAround) {\n        if (filterRecords(filteredRecords) && filterOps(op)) {\n            const thisLine = filteredRecords;\n            const thatLine = recordStack.pop();\n            const thatRecord = circular.getListIndex(thatLine);\n            if (thatRecord !== -1) {\n                records[thatRecord].thatLine = thisLine;\n            }\n            treeDepth -= 1;\n            records[circular.increment()] = {\n                dirUp: true,\n                depth: treeDepth,\n                thisLine,\n                thatLine,\n                opcode: op,\n                state,\n                phraseIndex: offset,\n                phraseLength: length,\n                lookAnchor: anchor,\n                lookAround\n            };\n            filteredRecords += 1;\n        }\n    };\n    /* convert the trace records to a tree of nodes */ const toTreeObj = function() {\n        /* private helper functions */ function nodeOpcode(node, opcode) {\n            let name;\n            let casetype;\n            let modetype;\n            if (opcode) {\n                node.op = {\n                    id: opcode.type,\n                    name: utils.opcodeToString(opcode.type)\n                };\n                node.opData = undefined;\n                switch(opcode.type){\n                    case id.RNM:\n                        node.opData = rules[opcode.index].name;\n                        break;\n                    case id.UDT:\n                        node.opData = udts[opcode.index].name;\n                        break;\n                    case id.BKR:\n                        if (opcode.index < rules.length) {\n                            name = rules[opcode.index].name;\n                        } else {\n                            name = udts[opcode.index - rules.length].name;\n                        }\n                        casetype = opcode.bkrCase === id.BKR_MODE_CI ? \"%i\" : \"%s\";\n                        modetype = opcode.bkrMode === id.BKR_MODE_UM ? \"%u\" : \"%p\";\n                        node.opData = `\\\\\\\\${casetype}${modetype}${name}`;\n                        break;\n                    case id.TLS:\n                        node.opData = [];\n                        for(let i = 0; i < opcode.string.length; i += 1){\n                            node.opData.push(opcode.string[i]);\n                        }\n                        break;\n                    case id.TBS:\n                        node.opData = [];\n                        for(let i = 0; i < opcode.string.length; i += 1){\n                            node.opData.push(opcode.string[i]);\n                        }\n                        break;\n                    case id.TRG:\n                        node.opData = [\n                            opcode.min,\n                            opcode.max\n                        ];\n                        break;\n                    case id.REP:\n                        node.opData = [\n                            opcode.min,\n                            opcode.max\n                        ];\n                        break;\n                    default:\n                        throw new Error(\"unrecognized opcode\");\n                }\n            } else {\n                node.op = {\n                    id: undefined,\n                    name: undefined\n                };\n                node.opData = undefined;\n            }\n        }\n        function nodePhrase(state, index, length) {\n            if (state === id.MATCH) {\n                return {\n                    index,\n                    length\n                };\n            }\n            if (state === id.NOMATCH) {\n                return {\n                    index,\n                    length: 0\n                };\n            }\n            if (state === id.EMPTY) {\n                return {\n                    index,\n                    length: 0\n                };\n            }\n            return null;\n        }\n        let nodeId = -1;\n        function nodeDown(parent, record, depth) {\n            const node = {\n                // eslint-disable-next-line no-plusplus\n                id: nodeId++,\n                branch: -1,\n                parent,\n                up: false,\n                down: false,\n                depth,\n                children: []\n            };\n            if (record) {\n                node.down = true;\n                node.state = {\n                    id: record.state,\n                    name: utils.stateToString(record.state)\n                };\n                node.phrase = null;\n                nodeOpcode(node, record.opcode);\n            } else {\n                node.state = {\n                    id: undefined,\n                    name: undefined\n                };\n                node.phrase = nodePhrase();\n                nodeOpcode(node, undefined);\n            }\n            return node;\n        }\n        function nodeUp(node, record) {\n            if (record) {\n                node.up = true;\n                node.state = {\n                    id: record.state,\n                    name: utils.stateToString(record.state)\n                };\n                node.phrase = nodePhrase(record.state, record.phraseIndex, record.phraseLength);\n                if (!node.down) {\n                    nodeOpcode(node, record.opcode);\n                }\n            }\n        }\n        /* walk the final tree: label branches and count leaf nodes */ let leafNodes = 0;\n        let depth = -1;\n        let branchCount = 1;\n        function walk(node) {\n            depth += 1;\n            node.branch = branchCount;\n            if (depth > treeDepth) {\n                treeDepth = depth;\n            }\n            if (node.children.length === 0) {\n                leafNodes += 1;\n            } else {\n                for(let i = 0; i < node.children.length; i += 1){\n                    if (i > 0) {\n                        branchCount += 1;\n                    }\n                    node.children[i].leftMost = false;\n                    node.children[i].rightMost = false;\n                    if (node.leftMost) {\n                        node.children[i].leftMost = i === 0;\n                    }\n                    if (node.rightMost) {\n                        node.children[i].rightMost = i === node.children.length - 1;\n                    }\n                    walk(node.children[i]);\n                }\n            }\n            depth -= 1;\n        }\n        function display(node, offset) {\n            let name;\n            const obj = {};\n            obj.id = node.id;\n            obj.branch = node.branch;\n            obj.leftMost = node.leftMost;\n            obj.rightMost = node.rightMost;\n            name = node.state.name ? node.state.name : \"ACTIVE\";\n            obj.state = {\n                id: node.state.id,\n                name\n            };\n            name = node.op.name ? node.op.name : \"?\";\n            obj.op = {\n                id: node.op.id,\n                name\n            };\n            if (typeof node.opData === \"string\") {\n                obj.opData = node.opData;\n            } else if (Array.isArray(node.opData)) {\n                obj.opData = [];\n                for(let i = 0; i < node.opData.length; i += 1){\n                    obj.opData[i] = node.opData[i];\n                }\n            } else {\n                obj.opData = undefined;\n            }\n            if (node.phrase) {\n                obj.phrase = {\n                    index: node.phrase.index,\n                    length: node.phrase.length\n                };\n            } else {\n                obj.phrase = null;\n            }\n            obj.depth = node.depth;\n            obj.children = [];\n            for(let i = 0; i < node.children.length; i += 1){\n                const c = i !== node.children.length - 1;\n                obj.children[i] = display(node.children[i], offset, c);\n            }\n            return obj;\n        }\n        /* construct the tree beginning here */ const branch = [];\n        let root;\n        let node;\n        let parent;\n        let record;\n        let firstRecord = true;\n        /* push a dummy node so the root node will have a non-null parent */ const dummy = nodeDown(null, null, -1);\n        branch.push(dummy);\n        node = dummy;\n        circular.forEach((lineIndex)=>{\n            record = records[lineIndex];\n            if (firstRecord) {\n                firstRecord = false;\n                if (record.depth > 0) {\n                    /* push some dummy nodes to fill in for missing records */ const num = record.dirUp ? record.depth + 1 : record.depth;\n                    for(let i = 0; i < num; i += 1){\n                        parent = node;\n                        node = nodeDown(node, null, i);\n                        branch.push(node);\n                        parent.children.push(node);\n                    }\n                }\n            }\n            if (record.dirUp) {\n                /* handle the next record up */ node = branch.pop();\n                nodeUp(node, record);\n                node = branch[branch.length - 1];\n            } else {\n                /* handle the next record down */ parent = node;\n                node = nodeDown(node, record, record.depth);\n                branch.push(node);\n                parent.children.push(node);\n            }\n        });\n        /* if not at root, walk it up to root */ while(branch.length > 1){\n            node = branch.pop();\n            nodeUp(node, null);\n        }\n        /* maybe redundant or paranoid tests: these should never happen */ if (dummy.children.length === 0) {\n            throw new Error(\"trace.toTree(): parse tree has no nodes\");\n        }\n        if (branch.length === 0) {\n            throw new Error(\"trace.toTree(): integrity check: dummy root node disappeared?\");\n        }\n        /* if no record for start rule: find the pseudo root node (first dummy node above a real node) */ root = dummy.children[0];\n        let prev = root;\n        while(root && !root.down && !root.up){\n            prev = root;\n            root = root.children[0];\n        }\n        root = prev;\n        /* walk the tree of nodes: label brances and count leaves */ root.leftMost = true;\n        root.rightMost = true;\n        walk(root);\n        root.branch = 0;\n        /* generate the exported object */ const obj = {};\n        obj.string = [];\n        for(let i = 0; i < chars.length; i += 1){\n            obj.string[i] = chars[i];\n        }\n        /* generate the exported rule names */ obj.rules = [];\n        for(let i = 0; i < rules.length; i += 1){\n            obj.rules[i] = rules[i].name;\n        }\n        /* generate the exported UDT names */ obj.udts = [];\n        for(let i = 0; i < udts.length; i += 1){\n            obj.udts[i] = udts[i].name;\n        }\n        /* generate the ids */ obj.id = {};\n        obj.id.ALT = {\n            id: id.ALT,\n            name: \"ALT\"\n        };\n        obj.id.CAT = {\n            id: id.CAT,\n            name: \"CAT\"\n        };\n        obj.id.REP = {\n            id: id.REP,\n            name: \"REP\"\n        };\n        obj.id.RNM = {\n            id: id.RNM,\n            name: \"RNM\"\n        };\n        obj.id.TLS = {\n            id: id.TLS,\n            name: \"TLS\"\n        };\n        obj.id.TBS = {\n            id: id.TBS,\n            name: \"TBS\"\n        };\n        obj.id.TRG = {\n            id: id.TRG,\n            name: \"TRG\"\n        };\n        obj.id.UDT = {\n            id: id.UDT,\n            name: \"UDT\"\n        };\n        obj.id.AND = {\n            id: id.AND,\n            name: \"AND\"\n        };\n        obj.id.NOT = {\n            id: id.NOT,\n            name: \"NOT\"\n        };\n        obj.id.BKR = {\n            id: id.BKR,\n            name: \"BKR\"\n        };\n        obj.id.BKA = {\n            id: id.BKA,\n            name: \"BKA\"\n        };\n        obj.id.BKN = {\n            id: id.BKN,\n            name: \"BKN\"\n        };\n        obj.id.ABG = {\n            id: id.ABG,\n            name: \"ABG\"\n        };\n        obj.id.AEN = {\n            id: id.AEN,\n            name: \"AEN\"\n        };\n        obj.id.ACTIVE = {\n            id: id.ACTIVE,\n            name: \"ACTIVE\"\n        };\n        obj.id.MATCH = {\n            id: id.MATCH,\n            name: \"MATCH\"\n        };\n        obj.id.EMPTY = {\n            id: id.EMPTY,\n            name: \"EMPTY\"\n        };\n        obj.id.NOMATCH = {\n            id: id.NOMATCH,\n            name: \"NOMATCH\"\n        };\n        /* generate the max tree depth */ obj.treeDepth = treeDepth;\n        /* generate the number of leaf nodes (branches) */ obj.leafNodes = leafNodes;\n        /* generate the types of the left- and right-most branches */ let branchesIncomplete;\n        if (root.down) {\n            if (root.up) {\n                branchesIncomplete = \"none\";\n            } else {\n                branchesIncomplete = \"right\";\n            }\n        } else if (root.up) {\n            branchesIncomplete = \"left\";\n        } else {\n            branchesIncomplete = \"both\";\n        }\n        obj.branchesIncomplete = branchesIncomplete;\n        obj.tree = display(root, root.depth, false);\n        return obj;\n    };\n    // Returns the trace records as JSON parse tree object.\n    // - stringify: if `true`, the object is 'stringified' before returning, otherwise, the object itself is returned.\n    this.toTree = function(stringify) {\n        const obj = toTreeObj();\n        if (stringify) {\n            return JSON.stringify(obj);\n        }\n        return obj;\n    };\n    // Translate the trace records to HTML format and create a complete HTML page for browser display.\n    this.toHtmlPage = function(mode, caption, title) {\n        return utils.htmlToPage(this.toHtml(mode, caption), title);\n    };\n    /* From here on down, these are just helper functions for `toHtml()`. */ const htmlHeader = function(mode, caption) {\n        /* open the page */ /* write the HTML5 header with table style */ /* open the <table> tag */ let modeName;\n        switch(mode){\n            case MODE_HEX:\n                modeName = \"hexadecimal\";\n                break;\n            case MODE_DEC:\n                modeName = \"decimal\";\n                break;\n            case MODE_ASCII:\n                modeName = \"ASCII\";\n                break;\n            case MODE_UNICODE:\n                modeName = \"UNICODE\";\n                break;\n            default:\n                throw new Error(`${thisFileName}htmlHeader: unrecognized mode: ${mode}`);\n        }\n        let header = \"\";\n        header += `<p>display mode: ${modeName}</p>\\n`;\n        header += `<table class=\"${style.CLASS_TRACE}\">\\n`;\n        if (typeof caption === \"string\") {\n            header += `<caption>${caption}</caption>`;\n        }\n        return header;\n    };\n    const htmlFooter = function() {\n        let footer = \"\";\n        /* close the </table> tag */ footer += \"</table>\\n\";\n        /* display a table legend */ footer += `<p class=\"${style.CLASS_MONOSPACE}\">legend:<br>\\n`;\n        footer += \"(a)&nbsp;-&nbsp;line number<br>\\n\";\n        footer += \"(b)&nbsp;-&nbsp;matching line number<br>\\n\";\n        footer += \"(c)&nbsp;-&nbsp;phrase offset<br>\\n\";\n        footer += \"(d)&nbsp;-&nbsp;phrase length<br>\\n\";\n        footer += \"(e)&nbsp;-&nbsp;tree depth<br>\\n\";\n        footer += \"(f)&nbsp;-&nbsp;operator state<br>\\n\";\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_ACTIVE}\">&darr;</span>&nbsp;&nbsp;phrase opened<br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_MATCH}\">&uarr;M</span> phrase matched<br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_EMPTY}\">&uarr;E</span> empty phrase matched<br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_NOMATCH}\">&uarr;N</span> phrase not matched<br>\\n`;\n        footer += \"operator&nbsp;-&nbsp;ALT, CAT, REP, RNM, TRG, TLS, TBS<sup>&dagger;</sup>, UDT, AND, NOT, BKA, BKN, BKR, ABG, AEN<sup>&Dagger;</sup><br>\\n\";\n        footer += `phrase&nbsp;&nbsp;&nbsp;-&nbsp;up to ${MAX_PHRASE} characters of the phrase being matched<br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_MATCH}\">matched characters</span><br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_LOOKAHEAD}\">matched characters in look ahead mode</span><br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_LOOKBEHIND}\">matched characters in look behind mode</span><br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_REMAINDER}\">remainder characters(not yet examined by parser)</span><br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_CTRLCHAR}\">control characters, TAB, LF, CR, etc. (ASCII mode only)</span><br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_EMPTY} empty string<br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_END} end of input string<br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_CONTINUE} input string display truncated<br>\\n`;\n        footer += \"</p>\\n\";\n        footer += `<p class=\"${style.CLASS_MONOSPACE}\">\\n`;\n        footer += \"<sup>&dagger;</sup>original ABNF operators:<br>\\n\";\n        footer += \"ALT - alternation<br>\\n\";\n        footer += \"CAT - concatenation<br>\\n\";\n        footer += \"REP - repetition<br>\\n\";\n        footer += \"RNM - rule name<br>\\n\";\n        footer += \"TRG - terminal range<br>\\n\";\n        footer += \"TLS - terminal literal string (case insensitive)<br>\\n\";\n        footer += \"TBS - terminal binary string (case sensitive)<br>\\n\";\n        footer += \"<br>\\n\";\n        footer += \"<sup>&Dagger;</sup>super set SABNF operators:<br>\\n\";\n        footer += \"UDT - user-defined terminal<br>\\n\";\n        footer += \"AND - positive look ahead<br>\\n\";\n        footer += \"NOT - negative look ahead<br>\\n\";\n        footer += \"BKA - positive look behind<br>\\n\";\n        footer += \"BKN - negative look behind<br>\\n\";\n        footer += \"BKR - back reference<br>\\n\";\n        footer += \"ABG - anchor - begin of input string<br>\\n\";\n        footer += \"AEN - anchor - end of input string<br>\\n\";\n        footer += \"</p>\\n\";\n        return footer;\n    };\n    this.indent = function(depth) {\n        let html = \"\";\n        for(let i = 0; i < depth; i += 1){\n            html += \".\";\n        }\n        return html;\n    };\n    /* format the TRG operator */ const displayTrg = function(mode, op) {\n        let html = \"\";\n        if (op.type === id.TRG) {\n            if (mode === MODE_HEX || mode === MODE_UNICODE) {\n                let hex = op.min.toString(16).toUpperCase();\n                if (hex.length % 2 !== 0) {\n                    hex = `0${hex}`;\n                }\n                html += mode === MODE_HEX ? \"%x\" : \"U+\";\n                html += hex;\n                hex = op.max.toString(16).toUpperCase();\n                if (hex.length % 2 !== 0) {\n                    hex = `0${hex}`;\n                }\n                html += `&ndash;${hex}`;\n            } else {\n                html = `%d${op.min.toString(10)}&ndash;${op.max.toString(10)}`;\n            }\n        }\n        return html;\n    };\n    /* format the REP operator */ const displayRep = function(mode, op) {\n        let html = \"\";\n        if (op.type === id.REP) {\n            if (mode === MODE_HEX) {\n                let hex = op.min.toString(16).toUpperCase();\n                if (hex.length % 2 !== 0) {\n                    hex = `0${hex}`;\n                }\n                html = `x${hex}`;\n                if (op.max < Infinity) {\n                    hex = op.max.toString(16).toUpperCase();\n                    if (hex.length % 2 !== 0) {\n                        hex = `0${hex}`;\n                    }\n                } else {\n                    hex = \"inf\";\n                }\n                html += `&ndash;${hex}`;\n            } else if (op.max < Infinity) {\n                html = `${op.min.toString(10)}&ndash;${op.max.toString(10)}`;\n            } else {\n                html = `${op.min.toString(10)}&ndash;inf`;\n            }\n        }\n        return html;\n    };\n    /* format the TBS operator */ const displayTbs = function(mode, op) {\n        let html = \"\";\n        if (op.type === id.TBS) {\n            const len = Math.min(op.string.length, MAX_TLS * 2);\n            if (mode === MODE_HEX || mode === MODE_UNICODE) {\n                html += mode === MODE_HEX ? \"%x\" : \"U+\";\n                for(let i = 0; i < len; i += 1){\n                    let hex;\n                    if (i > 0) {\n                        html += \".\";\n                    }\n                    hex = op.string[i].toString(16).toUpperCase();\n                    if (hex.length % 2 !== 0) {\n                        hex = `0${hex}`;\n                    }\n                    html += hex;\n                }\n            } else {\n                html = \"%d\";\n                for(let i = 0; i < len; i += 1){\n                    if (i > 0) {\n                        html += \".\";\n                    }\n                    html += op.string[i].toString(10);\n                }\n            }\n            if (len < op.string.length) {\n                html += PHRASE_CONTINUE;\n            }\n        }\n        return html;\n    };\n    /* format the TLS operator */ const displayTls = function(mode, op) {\n        let html = \"\";\n        if (op.type === id.TLS) {\n            const len = Math.min(op.string.length, MAX_TLS);\n            if (mode === MODE_HEX || mode === MODE_DEC) {\n                let charu;\n                let charl;\n                let base;\n                if (mode === MODE_HEX) {\n                    html = \"%x\";\n                    base = 16;\n                } else {\n                    html = \"%d\";\n                    base = 10;\n                }\n                for(let i = 0; i < len; i += 1){\n                    if (i > 0) {\n                        html += \".\";\n                    }\n                    charl = op.string[i];\n                    if (charl >= 97 && charl <= 122) {\n                        charu = charl - 32;\n                        html += `${charu.toString(base)}/${charl.toString(base)}`.toUpperCase();\n                    } else if (charl >= 65 && charl <= 90) {\n                        charu = charl;\n                        charl += 32;\n                        html += `${charu.toString(base)}/${charl.toString(base)}`.toUpperCase();\n                    } else {\n                        html += charl.toString(base).toUpperCase();\n                    }\n                }\n                if (len < op.string.length) {\n                    html += PHRASE_CONTINUE;\n                }\n            } else {\n                html = '\"';\n                for(let i = 0; i < len; i += 1){\n                    html += utils.asciiChars[op.string[i]];\n                }\n                if (len < op.string.length) {\n                    html += PHRASE_CONTINUE;\n                }\n                html += '\"';\n            }\n        }\n        return html;\n    };\n    const subPhrase = function(mode, charsArg, index, length, prev) {\n        if (length === 0) {\n            return \"\";\n        }\n        let phrase = \"\";\n        const comma = prev ? \",\" : \"\";\n        switch(mode){\n            case MODE_HEX:\n                phrase = comma + utils.charsToHex(charsArg, index, length);\n                break;\n            case MODE_DEC:\n                if (prev) {\n                    return `,${utils.charsToDec(charsArg, index, length)}`;\n                }\n                phrase = comma + utils.charsToDec(charsArg, index, length);\n                break;\n            case MODE_UNICODE:\n                phrase = utils.charsToUnicode(charsArg, index, length);\n                break;\n            case MODE_ASCII:\n            default:\n                phrase = utils.charsToAsciiHtml(charsArg, index, length);\n                break;\n        }\n        return phrase;\n    };\n    /* display phrases matched in look-behind mode */ const displayBehind = function(mode, charsArg, state, index, length, anchor) {\n        let html = \"\";\n        let beg1;\n        let len1;\n        let beg2;\n        let len2;\n        let lastchar = PHRASE_END;\n        const spanBehind = `<span class=\"${style.CLASS_LOOKBEHIND}\">`;\n        const spanRemainder = `<span class=\"${style.CLASS_REMAINDER}\">`;\n        const spanend = \"</span>\";\n        let prev = false;\n        switch(state){\n            case id.EMPTY:\n                html += PHRASE_EMPTY;\n            /* // eslint-disable-next-line no-fallthrough */ case id.NOMATCH:\n            case id.MATCH:\n            case id.ACTIVE:\n                beg1 = index - length;\n                len1 = anchor - beg1;\n                beg2 = anchor;\n                len2 = charsArg.length - beg2;\n                break;\n            default:\n                throw new Error(\"unrecognized state\");\n        }\n        lastchar = PHRASE_END;\n        if (len1 > MAX_PHRASE) {\n            len1 = MAX_PHRASE;\n            lastchar = PHRASE_CONTINUE;\n            len2 = 0;\n        } else if (len1 + len2 > MAX_PHRASE) {\n            lastchar = PHRASE_CONTINUE;\n            len2 = MAX_PHRASE - len1;\n        }\n        if (len1 > 0) {\n            html += spanBehind;\n            html += subPhrase(mode, charsArg, beg1, len1, prev);\n            html += spanend;\n            prev = true;\n        }\n        if (len2 > 0) {\n            html += spanRemainder;\n            html += subPhrase(mode, charsArg, beg2, len2, prev);\n            html += spanend;\n        }\n        return html + lastchar;\n    };\n    const displayForward = function(mode, charsArg, state, index, length, spanAhead) {\n        let html = \"\";\n        let beg1;\n        let len1;\n        let beg2;\n        let len2;\n        let lastchar = PHRASE_END;\n        const spanRemainder = `<span class=\"${style.CLASS_REMAINDER}\">`;\n        const spanend = \"</span>\";\n        let prev = false;\n        switch(state){\n            case id.EMPTY:\n                html += PHRASE_EMPTY;\n            /* // eslint-disable-next-line no-fallthrough */ case id.NOMATCH:\n            case id.ACTIVE:\n                beg1 = index;\n                len1 = 0;\n                beg2 = index;\n                len2 = charsArg.length - beg2;\n                break;\n            case id.MATCH:\n                beg1 = index;\n                len1 = length;\n                beg2 = index + len1;\n                len2 = charsArg.length - beg2;\n                break;\n            default:\n                throw new Error(\"unrecognized state\");\n        }\n        lastchar = PHRASE_END;\n        if (len1 > MAX_PHRASE) {\n            len1 = MAX_PHRASE;\n            lastchar = PHRASE_CONTINUE;\n            len2 = 0;\n        } else if (len1 + len2 > MAX_PHRASE) {\n            lastchar = PHRASE_CONTINUE;\n            len2 = MAX_PHRASE - len1;\n        }\n        if (len1 > 0) {\n            html += spanAhead;\n            html += subPhrase(mode, charsArg, beg1, len1, prev);\n            html += spanend;\n            prev = true;\n        }\n        if (len2 > 0) {\n            html += spanRemainder;\n            html += subPhrase(mode, charsArg, beg2, len2, prev);\n            html += spanend;\n        }\n        return html + lastchar;\n    };\n    /* display phrases matched in look-ahead mode */ const displayAhead = function(mode, charsArg, state, index, length) {\n        const spanAhead = `<span class=\"${style.CLASS_LOOKAHEAD}\">`;\n        return displayForward(mode, charsArg, state, index, length, spanAhead);\n    };\n    /* display phrases matched in normal parsing mode */ const displayNone = function(mode, charsArg, state, index, length) {\n        const spanAhead = `<span class=\"${style.CLASS_MATCH}\">`;\n        return displayForward(mode, charsArg, state, index, length, spanAhead);\n    };\n    /* Returns the filtered records, formatted as an HTML table. */ const htmlTable = function(mode) {\n        if (rules === null) {\n            return \"\";\n        }\n        let html = \"\";\n        let thisLine;\n        let thatLine;\n        let lookAhead;\n        let lookBehind;\n        let lookAround;\n        let anchor;\n        html += \"<tr><th>(a)</th><th>(b)</th><th>(c)</th><th>(d)</th><th>(e)</th><th>(f)</th>\";\n        html += \"<th>operator</th><th>phrase</th></tr>\\n\";\n        circular.forEach((lineIndex)=>{\n            const line = records[lineIndex];\n            thisLine = line.thisLine;\n            thatLine = line.thatLine !== undefined ? line.thatLine : \"--\";\n            lookAhead = false;\n            lookBehind = false;\n            lookAround = false;\n            if (line.lookAround === id.LOOKAROUND_AHEAD) {\n                lookAhead = true;\n                lookAround = true;\n                anchor = line.lookAnchor;\n            }\n            if (line.opcode.type === id.AND || line.opcode.type === id.NOT) {\n                lookAhead = true;\n                lookAround = true;\n                anchor = line.phraseIndex;\n            }\n            if (line.lookAround === id.LOOKAROUND_BEHIND) {\n                lookBehind = true;\n                lookAround = true;\n                anchor = line.lookAnchor;\n            }\n            if (line.opcode.type === id.BKA || line.opcode.type === id.BKN) {\n                lookBehind = true;\n                lookAround = true;\n                anchor = line.phraseIndex;\n            }\n            html += \"<tr>\";\n            html += `<td>${thisLine}</td><td>${thatLine}</td>`;\n            html += `<td>${line.phraseIndex}</td>`;\n            html += `<td>${line.phraseLength}</td>`;\n            html += `<td>${line.depth}</td>`;\n            html += \"<td>\";\n            switch(line.state){\n                case id.ACTIVE:\n                    html += `<span class=\"${style.CLASS_ACTIVE}\">&darr;&nbsp;</span>`;\n                    break;\n                case id.MATCH:\n                    html += `<span class=\"${style.CLASS_MATCH}\">&uarr;M</span>`;\n                    break;\n                case id.NOMATCH:\n                    html += `<span class=\"${style.CLASS_NOMATCH}\">&uarr;N</span>`;\n                    break;\n                case id.EMPTY:\n                    html += `<span class=\"${style.CLASS_EMPTY}\">&uarr;E</span>`;\n                    break;\n                default:\n                    html += `<span class=\"${style.CLASS_ACTIVE}\">--</span>`;\n                    break;\n            }\n            html += \"</td>\";\n            html += \"<td>\";\n            html += that.indent(line.depth);\n            if (lookAhead) {\n                html += `<span class=\"${style.CLASS_LOOKAHEAD}\">`;\n            } else if (lookBehind) {\n                html += `<span class=\"${style.CLASS_LOOKBEHIND}\">`;\n            }\n            html += utils.opcodeToString(line.opcode.type);\n            if (line.opcode.type === id.RNM) {\n                html += `(${rules[line.opcode.index].name}) `;\n            }\n            if (line.opcode.type === id.BKR) {\n                const casetype = line.opcode.bkrCase === id.BKR_MODE_CI ? \"%i\" : \"%s\";\n                const modetype = line.opcode.bkrMode === id.BKR_MODE_UM ? \"%u\" : \"%p\";\n                html += `(\\\\${casetype}${modetype}${rules[line.opcode.index].name}) `;\n            }\n            if (line.opcode.type === id.UDT) {\n                html += `(${udts[line.opcode.index].name}) `;\n            }\n            if (line.opcode.type === id.TRG) {\n                html += `(${displayTrg(mode, line.opcode)}) `;\n            }\n            if (line.opcode.type === id.TBS) {\n                html += `(${displayTbs(mode, line.opcode)}) `;\n            }\n            if (line.opcode.type === id.TLS) {\n                html += `(${displayTls(mode, line.opcode)}) `;\n            }\n            if (line.opcode.type === id.REP) {\n                html += `(${displayRep(mode, line.opcode)}) `;\n            }\n            if (lookAround) {\n                html += \"</span>\";\n            }\n            html += \"</td>\";\n            html += \"<td>\";\n            if (lookBehind) {\n                html += displayBehind(mode, chars, line.state, line.phraseIndex, line.phraseLength, anchor);\n            } else if (lookAhead) {\n                html += displayAhead(mode, chars, line.state, line.phraseIndex, line.phraseLength);\n            } else {\n                html += displayNone(mode, chars, line.state, line.phraseIndex, line.phraseLength);\n            }\n            html += \"</td></tr>\\n\";\n        });\n        html += \"<tr><th>(a)</th><th>(b)</th><th>(c)</th><th>(d)</th><th>(e)</th><th>(f)</th>\";\n        html += \"<th>operator</th><th>phrase</th></tr>\\n\";\n        html += \"</table>\\n\";\n        return html;\n    };\n    // Translate the trace records to HTML format.\n    // - *modearg* - can be `\"ascii\"`, `\"decimal\"`, `\"hexadecimal\"` or `\"unicode\"`.\n    // Determines the format of the string character code display.\n    // - *caption* - optional caption for the HTML table.\n    this.toHtml = function(modearg, caption) {\n        /* writes the trace records as a table in a complete html page */ let mode = MODE_ASCII;\n        if (typeof modearg === \"string\" && modearg.length >= 3) {\n            const modein = modearg.toLowerCase().slice(0, 3);\n            if (modein === \"hex\") {\n                mode = MODE_HEX;\n            } else if (modein === \"dec\") {\n                mode = MODE_DEC;\n            } else if (modein === \"uni\") {\n                mode = MODE_UNICODE;\n            }\n        }\n        let html = \"\";\n        html += htmlHeader(mode, caption);\n        html += htmlTable(mode);\n        html += htmlFooter();\n        return html;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-lib/trace.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/apg-js/src/apg-lib/utilities.js":
/*!******************************************************!*\
  !*** ./node_modules/apg-js/src/apg-lib/utilities.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* eslint-disable func-names */ /*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module exports a variety of utility functions that support\n// [`apg`](https://github.com/ldthomas/apg-js2), [`apg-lib`](https://github.com/ldthomas/apg-js2-lib)\n// and the generated parser applications.\nconst style = __webpack_require__(/*! ./style */ \"(rsc)/./node_modules/apg-js/src/apg-lib/style.js\");\nconst converter = __webpack_require__(/*! ../apg-conv-api/converter */ \"(rsc)/./node_modules/apg-js/src/apg-conv-api/converter.js\");\nconst emitCss = __webpack_require__(/*! ./emitcss */ \"(rsc)/./node_modules/apg-js/src/apg-lib/emitcss.js\");\nconst id = __webpack_require__(/*! ./identifiers */ \"(rsc)/./node_modules/apg-js/src/apg-lib/identifiers.js\");\nconst thisFileName = \"utilities.js: \";\n/* translate (implied) phrase beginning character and length to actual first and last character indexes */ /* used by multiple phrase handling functions */ const getBounds = function(length, begArg, len) {\n    let end;\n    let beg = begArg;\n    const TRUE = true;\n    while(TRUE){\n        if (length <= 0) {\n            beg = 0;\n            end = 0;\n            break;\n        }\n        if (typeof beg !== \"number\") {\n            beg = 0;\n            end = length;\n            break;\n        }\n        if (beg >= length) {\n            beg = length;\n            end = length;\n            break;\n        }\n        if (typeof len !== \"number\") {\n            end = length;\n            break;\n        }\n        end = beg + len;\n        if (end > length) {\n            end = length;\n            break;\n        }\n        break;\n    }\n    return {\n        beg,\n        end\n    };\n};\n// Generates a complete, minimal HTML5 page, inserting the user's HTML text on the page.\n// - *html* - the page text in HTML format\n// - *title* - the HTML page `<title>` - defaults to `htmlToPage`.\nexports.htmlToPage = function(html, titleArg) {\n    let title;\n    if (typeof html !== \"string\") {\n        throw new Error(`${thisFileName}htmlToPage: input HTML is not a string`);\n    }\n    if (typeof titleArg !== \"string\") {\n        title = \"htmlToPage\";\n    } else {\n        title = titleArg;\n    }\n    let page = \"\";\n    page += \"<!DOCTYPE html>\\n\";\n    page += '<html lang=\"en\">\\n';\n    page += \"<head>\\n\";\n    page += '<meta charset=\"utf-8\">\\n';\n    page += `<title>${title}</title>\\n`;\n    page += \"<style>\\n\";\n    page += emitCss();\n    page += \"</style>\\n\";\n    page += \"</head>\\n<body>\\n\";\n    page += `<p>${new Date()}</p>\\n`;\n    page += html;\n    page += \"</body>\\n</html>\\n\";\n    return page;\n};\n// Formats the returned object from `parser.parse()`\n// into an HTML table.\n// ```\n// return {\n//   success : sysData.success,\n//   state : sysData.state,\n//   length : charsLength,\n//   matched : sysData.phraseLength,\n//   maxMatched : maxMatched,\n//   maxTreeDepth : maxTreeDepth,\n//   nodeHits : nodeHits,\n//   inputLength : chars.length,\n//   subBegin : charsBegin,\n//   subEnd : charsEnd,\n//   subLength : charsLength\n// };\n// ```\nexports.parserResultToHtml = function(result, caption) {\n    let cap = null;\n    if (typeof caption === \"string\" && caption !== \"\") {\n        cap = caption;\n    }\n    let success;\n    let state;\n    if (result.success === true) {\n        success = `<span class=\"${style.CLASS_MATCH}\">true</span>`;\n    } else {\n        success = `<span class=\"${style.CLASS_NOMATCH}\">false</span>`;\n    }\n    if (result.state === id.EMPTY) {\n        state = `<span class=\"${style.CLASS_EMPTY}\">EMPTY</span>`;\n    } else if (result.state === id.MATCH) {\n        state = `<span class=\"${style.CLASS_MATCH}\">MATCH</span>`;\n    } else if (result.state === id.NOMATCH) {\n        state = `<span class=\"${style.CLASS_NOMATCH}\">NOMATCH</span>`;\n    } else {\n        state = `<span class=\"${style.CLASS_NOMATCH}\">unrecognized</span>`;\n    }\n    let html = \"\";\n    html += `<table class=\"${style.CLASS_STATE}\">\\n`;\n    if (cap) {\n        html += `<caption>${cap}</caption>\\n`;\n    }\n    html += \"<tr><th>state item</th><th>value</th><th>description</th></tr>\\n\";\n    html += `<tr><td>parser success</td><td>${success}</td>\\n`;\n    html += `<td><span class=\"${style.CLASS_MATCH}\">true</span> if the parse succeeded,\\n`;\n    html += ` <span class=\"${style.CLASS_NOMATCH}\">false</span> otherwise`;\n    html += \"<br><i>NOTE: for success, entire string must be matched</i></td></tr>\\n\";\n    html += `<tr><td>parser state</td><td>${state}</td>\\n`;\n    html += `<td><span class=\"${style.CLASS_EMPTY}\">EMPTY</span>, `;\n    html += `<span class=\"${style.CLASS_MATCH}\">MATCH</span> or \\n`;\n    html += `<span class=\"${style.CLASS_NOMATCH}\">NOMATCH</span></td></tr>\\n`;\n    html += `<tr><td>string length</td><td>${result.length}</td><td>length of the input (sub)string</td></tr>\\n`;\n    html += `<tr><td>matched length</td><td>${result.matched}</td><td>number of input string characters matched</td></tr>\\n`;\n    html += `<tr><td>max matched</td><td>${result.maxMatched}</td><td>maximum number of input string characters matched</td></tr>\\n`;\n    html += `<tr><td>max tree depth</td><td>${result.maxTreeDepth}</td><td>maximum depth of the parse tree reached</td></tr>\\n`;\n    html += `<tr><td>node hits</td><td>${result.nodeHits}</td><td>number of parse tree node hits (opcode function calls)</td></tr>\\n`;\n    html += `<tr><td>input length</td><td>${result.inputLength}</td><td>length of full input string</td></tr>\\n`;\n    html += `<tr><td>sub-string begin</td><td>${result.subBegin}</td><td>sub-string first character index</td></tr>\\n`;\n    html += `<tr><td>sub-string end</td><td>${result.subEnd}</td><td>sub-string end-of-string index</td></tr>\\n`;\n    html += `<tr><td>sub-string length</td><td>${result.subLength}</td><td>sub-string length</td></tr>\\n`;\n    html += \"</table>\\n\";\n    return html;\n};\n// Translates a sub-array of integer character codes into a string.\n// Very useful in callback functions to translate the matched phrases into strings.\nexports.charsToString = function(chars, phraseIndex, phraseLength) {\n    let beg;\n    let end;\n    if (typeof phraseIndex === \"number\") {\n        if (phraseIndex >= chars.length) {\n            return \"\";\n        }\n        beg = phraseIndex < 0 ? 0 : phraseIndex;\n    } else {\n        beg = 0;\n    }\n    if (typeof phraseLength === \"number\") {\n        if (phraseLength <= 0) {\n            return \"\";\n        }\n        end = phraseLength > chars.length - beg ? chars.length : beg + phraseLength;\n    } else {\n        end = chars.length;\n    }\n    if (beg < end) {\n        return converter.encode(\"UTF16LE\", chars.slice(beg, end)).toString(\"utf16le\");\n    }\n    return \"\";\n};\n// Translates a string into an array of integer character codes.\nexports.stringToChars = function(string) {\n    return converter.decode(\"STRING\", string);\n};\n// Translates an opcode identifier into a human-readable string.\nexports.opcodeToString = function(type) {\n    let ret = \"unknown\";\n    switch(type){\n        case id.ALT:\n            ret = \"ALT\";\n            break;\n        case id.CAT:\n            ret = \"CAT\";\n            break;\n        case id.RNM:\n            ret = \"RNM\";\n            break;\n        case id.UDT:\n            ret = \"UDT\";\n            break;\n        case id.AND:\n            ret = \"AND\";\n            break;\n        case id.NOT:\n            ret = \"NOT\";\n            break;\n        case id.REP:\n            ret = \"REP\";\n            break;\n        case id.TRG:\n            ret = \"TRG\";\n            break;\n        case id.TBS:\n            ret = \"TBS\";\n            break;\n        case id.TLS:\n            ret = \"TLS\";\n            break;\n        case id.BKR:\n            ret = \"BKR\";\n            break;\n        case id.BKA:\n            ret = \"BKA\";\n            break;\n        case id.BKN:\n            ret = \"BKN\";\n            break;\n        case id.ABG:\n            ret = \"ABG\";\n            break;\n        case id.AEN:\n            ret = \"AEN\";\n            break;\n        default:\n            throw new Error(\"unrecognized opcode\");\n    }\n    return ret;\n};\n// Translates an state identifier into a human-readable string.\nexports.stateToString = function(state) {\n    let ret = \"unknown\";\n    switch(state){\n        case id.ACTIVE:\n            ret = \"ACTIVE\";\n            break;\n        case id.MATCH:\n            ret = \"MATCH\";\n            break;\n        case id.EMPTY:\n            ret = \"EMPTY\";\n            break;\n        case id.NOMATCH:\n            ret = \"NOMATCH\";\n            break;\n        default:\n            throw new Error(\"unrecognized state\");\n    }\n    return ret;\n};\n// Array which translates all 128, 7-bit ASCII character codes to their respective HTML format.\nexports.asciiChars = [\n    \"NUL\",\n    \"SOH\",\n    \"STX\",\n    \"ETX\",\n    \"EOT\",\n    \"ENQ\",\n    \"ACK\",\n    \"BEL\",\n    \"BS\",\n    \"TAB\",\n    \"LF\",\n    \"VT\",\n    \"FF\",\n    \"CR\",\n    \"SO\",\n    \"SI\",\n    \"DLE\",\n    \"DC1\",\n    \"DC2\",\n    \"DC3\",\n    \"DC4\",\n    \"NAK\",\n    \"SYN\",\n    \"ETB\",\n    \"CAN\",\n    \"EM\",\n    \"SUB\",\n    \"ESC\",\n    \"FS\",\n    \"GS\",\n    \"RS\",\n    \"US\",\n    \"&nbsp;\",\n    \"!\",\n    \"&#34;\",\n    \"#\",\n    \"$\",\n    \"%\",\n    \"&#38;\",\n    \"&#39;\",\n    \"(\",\n    \")\",\n    \"*\",\n    \"+\",\n    \",\",\n    \"-\",\n    \".\",\n    \"/\",\n    \"0\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \":\",\n    \";\",\n    \"&#60;\",\n    \"=\",\n    \"&#62;\",\n    \"?\",\n    \"@\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"[\",\n    \"&#92;\",\n    \"]\",\n    \"^\",\n    \"_\",\n    \"`\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"{\",\n    \"|\",\n    \"}\",\n    \"~\",\n    \"DEL\"\n];\n// Translates a single character to hexadecimal with leading zeros for 2, 4, or 8 digit display.\nexports.charToHex = function(char) {\n    let ch = char.toString(16).toUpperCase();\n    switch(ch.length){\n        case 1:\n        case 3:\n        case 7:\n            ch = `0${ch}`;\n            break;\n        case 2:\n        case 6:\n            ch = `00${ch}`;\n            break;\n        case 4:\n            break;\n        case 5:\n            ch = `000${ch}`;\n            break;\n        default:\n            throw new Error(\"unrecognized option\");\n    }\n    return ch;\n};\n// Translates a sub-array of character codes to decimal display format.\nexports.charsToDec = function(chars, beg, len) {\n    let ret = \"\";\n    if (!Array.isArray(chars)) {\n        throw new Error(`${thisFileName}charsToDec: input must be an array of integers`);\n    }\n    const bounds = getBounds(chars.length, beg, len);\n    if (bounds.end > bounds.beg) {\n        ret += chars[bounds.beg];\n        for(let i = bounds.beg + 1; i < bounds.end; i += 1){\n            ret += `,${chars[i]}`;\n        }\n    }\n    return ret;\n};\n// Translates a sub-array of character codes to hexadecimal display format.\nexports.charsToHex = function(chars, beg, len) {\n    let ret = \"\";\n    if (!Array.isArray(chars)) {\n        throw new Error(`${thisFileName}charsToHex: input must be an array of integers`);\n    }\n    const bounds = getBounds(chars.length, beg, len);\n    if (bounds.end > bounds.beg) {\n        ret += `\\\\x${exports.charToHex(chars[bounds.beg])}`;\n        for(let i = bounds.beg + 1; i < bounds.end; i += 1){\n            ret += `,\\\\x${exports.charToHex(chars[i])}`;\n        }\n    }\n    return ret;\n};\nexports.charsToHtmlEntities = function(chars, beg, len) {\n    let ret = \"\";\n    if (!Array.isArray(chars)) {\n        throw new Error(`${thisFileName}charsToHex: input must be an array of integers`);\n    }\n    const bounds = getBounds(chars.length, beg, len);\n    if (bounds.end > bounds.beg) {\n        for(let i = bounds.beg; i < bounds.end; i += 1){\n            ret += `&#x${chars[i].toString(16)};`;\n        }\n    }\n    return ret;\n};\n// Translates a sub-array of character codes to Unicode display format.\nfunction isUnicode(char) {\n    if (char >= 0xd800 && char <= 0xdfff) {\n        return false;\n    }\n    if (char > 0x10ffff) {\n        return false;\n    }\n    return true;\n}\nexports.charsToUnicode = function(chars, beg, len) {\n    let ret = \"\";\n    if (!Array.isArray(chars)) {\n        throw new Error(`${thisFileName}charsToUnicode: input must be an array of integers`);\n    }\n    const bounds = getBounds(chars.length, beg, len);\n    if (bounds.end > bounds.beg) {\n        for(let i = bounds.beg; i < bounds.end; i += 1){\n            if (isUnicode(chars[i])) {\n                ret += `&#${chars[i]};`;\n            } else {\n                ret += ` U+${exports.charToHex(chars[i])}`;\n            }\n        }\n    }\n    return ret;\n};\n// Translates a sub-array of character codes to JavaScript Unicode display format (`\\uXXXX`).\nexports.charsToJsUnicode = function(chars, beg, len) {\n    let ret = \"\";\n    if (!Array.isArray(chars)) {\n        throw new Error(`${thisFileName}charsToJsUnicode: input must be an array of integers`);\n    }\n    const bounds = getBounds(chars.length, beg, len);\n    if (bounds.end > bounds.beg) {\n        ret += `\\\\u${exports.charToHex(chars[bounds.beg])}`;\n        for(let i = bounds.beg + 1; i < bounds.end; i += 1){\n            ret += `,\\\\u${exports.charToHex(chars[i])}`;\n        }\n    }\n    return ret;\n};\n// Translates a sub-array of character codes to printing ASCII character display format.\nexports.charsToAscii = function(chars, beg, len) {\n    let ret = \"\";\n    if (!Array.isArray(chars)) {\n        throw new Error(`${thisFileName}charsToAscii: input must be an array of integers`);\n    }\n    const bounds = getBounds(chars.length, beg, len);\n    for(let i = bounds.beg; i < bounds.end; i += 1){\n        const char = chars[i];\n        if (char >= 32 && char <= 126) {\n            ret += String.fromCharCode(char);\n        } else {\n            ret += `\\\\x${exports.charToHex(char)}`;\n        }\n    }\n    return ret;\n};\n// Translates a sub-array of character codes to HTML display format.\nexports.charsToAsciiHtml = function(chars, beg, len) {\n    if (!Array.isArray(chars)) {\n        throw new Error(`${thisFileName}charsToAsciiHtml: input must be an array of integers`);\n    }\n    let html = \"\";\n    let char;\n    const bounds = getBounds(chars.length, beg, len);\n    for(let i = bounds.beg; i < bounds.end; i += 1){\n        char = chars[i];\n        if (char < 32 || char === 127) {\n            /* control characters */ html += `<span class=\"${style.CLASS_CTRLCHAR}\">${exports.asciiChars[char]}</span>`;\n        } else if (char > 127) {\n            /* non-ASCII */ html += `<span class=\"${style.CLASS_CTRLCHAR}\">U+${exports.charToHex(char)}</span>`;\n        } else {\n            /* printing ASCII, 32 <= char <= 126 */ html += exports.asciiChars[char];\n        }\n    }\n    return html;\n};\n// Translates a JavaScript string to HTML display format.\nexports.stringToAsciiHtml = function(str) {\n    const chars = converter.decode(\"STRING\", str);\n    return this.charsToAsciiHtml(chars);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/apg-js/src/apg-lib/utilities.js\n");

/***/ })

};
;